Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionTitle,"        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,39f7e2fea19eac27575386211acdd87f0f6fd802,JolView.java,setupUI,"    private void setupUI() {
        setToolbar(toolbarPanel);
        tblObjectLayout = new JBTable();
        tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        tblObjectLayout.setFillsViewportHeight(true);
        tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        tblObjectLayout.setRowSelectionAllowed(true);
        //Create the scroll pane and add the table to it. Add the scroll pane to this ToolWindowPanel.
        add(new JBScrollPane(tblObjectLayout));
        tblObjectLayout.getSelectionModel().addListSelectionListener(e -> {
            System.out.println(""selected "" + e.getFirstIndex());
            /*TODO navigate to PSI class in editor */
        });


        cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }",https://www.github.com/stokito/ideajol/commit/39f7e2fea19eac27575386211acdd87f0f6fd802,"    private void setupUI() {
        setToolbar(toolbarPanel);
        tblObjectLayout = new JBTable();
        tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        tblObjectLayout.setFillsViewportHeight(true);
        tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        tblObjectLayout.setRowSelectionAllowed(true);
        
        add(new JBScrollPane(tblObjectLayout));
        tblObjectLayout.getSelectionModel().addListSelectionListener(e -> {
            System.out.println(""selected "" + e.getFirstIndex());
            
        });


        cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'setToolbar', '(', 'toolbarPanel', ')', ';', '\n', '        ', 'tblObjectLayout', ' ', '=', ' ', 'new', ' ', 'JBTable', '(', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'setFillsViewportHeight', '(', 'true', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'setRowSelectionAllowed', '(', 'true', ')', ';', '\n', '        ', '\n', '        ', 'add', '(', 'new', ' ', 'JBScrollPane', '(', 'tblObjectLayout', ')', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'e', ' ', '-', '>', ' ', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'selected ', '""', ' ', '+', ' ', 'e', '.', 'getFirstIndex', '(', ')', ')', ';', '\n', '            ', '\n', '        ', '}', ')', ';', '\n', '\n', '\n', '        ', 'cmbLayouter', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8e66cc14a964859acdbc155eea74d548de13fe7,UI.java,actionPerformed,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		
		if(source == but1) {
			text.append(""1"");
		}
		
		if(source == but2) {
			text.append(""2"");
		}

		if(source == but3) {
			text.append(""3"");
		}
		
		if(source == but4) {
			text.append(""4"");
		}
		
		if(source == but5) {
			text.append(""5"");
		}
		
		if(source == but6) {
			text.append(""6"");
		}
		
		if(source == but7) {
			text.append(""7"");
		}
		
		if(source == but8) {
			text.append(""8"");
		}
		
		if(source == but9) {
			text.append(""9"");
		}
		
		if(source == but0) {
			text.append(""0"");
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}
                
                if(source == butSquare) {
			num1 = reader();
                        result = num1*num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butSquareRoot) {
			num1 = reader();
                        result = Math.sqrt(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butOneDevidedBy) {
			num1 = reader();
                        result = 1/num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butCos) {
			num1 = reader();
                        result = Math.cos(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butSin) {
			num1 = reader();
                        result = Math.sin(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butTan) {
			num1 = reader();
                        result = Math.tan(num1);
			text.setText(Double.toString(result));
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
			
		}
		
		if(source == butCancel) {
			num1 = 0.0;",https://www.github.com/ph-7/simple-java-calculator/commit/c8e66cc14a964859acdbc155eea74d548de13fe7,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		
		if(source == but1) {
			text.append(""1"");
		}
		
		if(source == but2) {
			text.append(""2"");
		}

		if(source == but3) {
			text.append(""3"");
		}
		
		if(source == but4) {
			text.append(""4"");
		}
		
		if(source == but5) {
			text.append(""5"");
		}
		
		if(source == but6) {
			text.append(""6"");
		}
		
		if(source == but7) {
			text.append(""7"");
		}
		
		if(source == but8) {
			text.append(""8"");
		}
		
		if(source == but9) {
			text.append(""9"");
		}
		
		if(source == but0) {
			text.append(""0"");
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}
                
                if(source == butSquare) {
			num1 = reader();
                        result = num1*num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butSquareRoot) {
			num1 = reader();
                        result = Math.sqrt(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butOneDevidedBy) {
			num1 = reader();
                        result = 1/num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butCos) {
			num1 = reader();
                        result = Math.cos(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butSin) {
			num1 = reader();
                        result = Math.sin(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butTan) {
			num1 = reader();
                        result = Math.tan(num1);
			text.setText(Double.toString(result));
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
			
		}
		
		if(source == butCancel) {
			num1 = 0.0;
","['\t', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '\t\t', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but1', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '1', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but2', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '2', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but3', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '3', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but4', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '4', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but5', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '5', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but6', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '6', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but7', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '7', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but8', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '8', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but9', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '9', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but0', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '0', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '1', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'num1', '*', 'num1', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'sqrt', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', '1', '/', 'num1', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'cos', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'sin', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'tan', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '\t\t\t', 'num2', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'add', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '+', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'minus', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '-', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'multiply', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '*', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'divide', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '/', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', '0.0', ';', '\n', '<END>']"
master,430195a4c39fb8e8f1ad7ce63a519774962a8d35,ReactButton.java,onClick,"    public void onClick(View view) {
        //Code When User Click On Button
        //If State is true , dislike The Button And Return To Default State
        if(reactState){
            reactState = false;",https://www.github.com/amrdeveloper/reactbutton/commit/430195a4c39fb8e8f1ad7ce63a519774962a8d35,"    public void onClick(View view) {
        
        
        if(reactState){
            reactState = false;
","['    ', 'public', ' ', 'void', ' ', 'onClick', '(', 'View', ' ', 'view', ')', ' ', '{', '\n', '        ', '\n', '        ', '\n', '        ', 'if', '(', 'reactState', ')', '{', '\n', '            ', 'reactState', ' ', '=', ' ', 'false', ';', '\n', '<END>']"
master,b90c986f2aa3a3a3f34a722e461f873dff868f89,PerformanceMonitor.java,sendNotification,"    private void sendNotification(String pid, String cpuUsage, String rss) {
        if (shouldStop) return;
        RemoteViews layout = new RemoteViews(context.getPackageName(), R.layout.custom_notification);
        layout.setTextViewText(R.id.customNotification_runningTime, ""Running time: "" + CommonUtils.timeFormatter((System.currentTimeMillis() - startTime) / 1000));
        layout.setTextViewText(R.id.customNotification_pid, ""PID: "" + pid);
        layout.setTextViewText(R.id.customNotification_cpu, ""CPU: "" + cpuUsage + ""%"");
        layout.setTextViewText(R.id.customNotification_memory, ""Memory: "" + CommonUtils.dimensionFormatter(Integer.parseInt(rss) * 1024, false));
        builder.setCustomContentView(layout);

        manager.notify(BinService.NOTIFICATION_ID, builder.build());
    }",https://www.github.com/devgianlu/aria2android/commit/b90c986f2aa3a3a3f34a722e461f873dff868f89,"    private void sendNotification(String pid, String cpuUsage, String rss) {
        if (shouldStop) return;
        RemoteViews layout = new RemoteViews(context.getPackageName(), R.layout.custom_notification);
        layout.setTextViewText(R.id.customNotification_runningTime, ""Running time: "" + CommonUtils.timeFormatter((System.currentTimeMillis() - startTime) / 1000));
        layout.setTextViewText(R.id.customNotification_pid, ""PID: "" + pid);
        layout.setTextViewText(R.id.customNotification_cpu, ""CPU: "" + cpuUsage + ""%"");
        layout.setTextViewText(R.id.customNotification_memory, ""Memory: "" + CommonUtils.dimensionFormatter(Integer.parseInt(rss) * 1024, false));
        builder.setCustomContentView(layout);

        manager.notify(BinService.NOTIFICATION_ID, builder.build());
    }
","['    ', 'private', ' ', 'void', ' ', 'sendNotification', '(', 'String', ' ', 'pid', ',', ' ', 'String', ' ', 'cpuUsage', ',', ' ', 'String', ' ', 'rss', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'shouldStop', ')', ' ', 'return', ';', '\n', '        ', 'RemoteViews', ' ', 'layout', ' ', '=', ' ', 'new', ' ', 'RemoteViews', '(', 'context', '.', 'getPackageName', '(', ')', ',', ' ', 'R', '.', 'layout', '.', 'custom_notification', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_runningTime', ',', ' ', '""', 'Running time: ', '""', ' ', '+', ' ', 'CommonUtils', '.', 'timeFormatter', '(', '(', 'System', '.', 'currentTimeMillis', '(', ')', ' ', '-', ' ', 'startTime', ')', ' ', '/', ' ', '1000', ')', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_pid', ',', ' ', '""', 'PID: ', '""', ' ', '+', ' ', 'pid', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_cpu', ',', ' ', '""', 'CPU: ', '""', ' ', '+', ' ', 'cpuUsage', ' ', '+', ' ', '""', '%', '""', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_memory', ',', ' ', '""', 'Memory: ', '""', ' ', '+', ' ', 'CommonUtils', '.', 'dimensionFormatter', '(', 'Integer', '.', 'parseInt', '(', 'rss', ')', ' ', '*', ' ', '1024', ',', ' ', 'false', ')', ')', ';', '\n', '        ', 'builder', '.', 'setCustomContentView', '(', 'layout', ')', ';', '\n', '\n', '        ', 'manager', '.', 'notify', '(', 'BinService', '.', 'NOTIFICATION_ID', ',', ' ', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0778122bba6cf03a219865ede4a88a11e62cebe8,PDFLayoutTextStripper.java,isCharacterCloseToPreviousWord,"    private boolean isCharacterCloseToPreviousWord(final TextPosition textPosition) {
        if ( ! firstCharacterOfLineFound ) {
            return false;
        }
        double numberOfSpaces = this.numberOfSpacesBetweenTwoCharacters(previousTextPosition, textPosition);
        return (numberOfSpaces > 1 && numberOfSpaces <= PDFLayoutTextStripper.OUTPUT_SPACE_CHARACTER_WIDTH_IN_PT);
    }",https://www.github.com/jonathanlink/pdflayouttextstripper/commit/0778122bba6cf03a219865ede4a88a11e62cebe8,"    private boolean isCharacterCloseToPreviousWord(final TextPosition textPosition) {
        if ( ! firstCharacterOfLineFound ) {
            return false;
        }
        double numberOfSpaces = this.numberOfSpacesBetweenTwoCharacters(previousTextPosition, textPosition);
        return (numberOfSpaces > 1 && numberOfSpaces <= PDFLayoutTextStripper.OUTPUT_SPACE_CHARACTER_WIDTH_IN_PT);
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isCharacterCloseToPreviousWord', '(', 'final', ' ', 'TextPosition', ' ', 'textPosition', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', ' ', '!', ' ', 'firstCharacterOfLineFound', ' ', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '        ', 'double', ' ', 'numberOfSpaces', ' ', '=', ' ', 'this', '.', 'numberOfSpacesBetweenTwoCharacters', '(', 'previousTextPosition', ',', ' ', 'textPosition', ')', ';', '\n', '        ', 'return', ' ', '(', 'numberOfSpaces', ' ', '>', ' ', '1', ' ', '&', '&', ' ', 'numberOfSpaces', ' ', '<', '=', ' ', 'PDFLayoutTextStripper', '.', 'OUTPUT_SPACE_CHARACTER_WIDTH_IN_PT', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,8845a68efc019d2fff883aba61f77f7c616a2d9e,MaterialMenu.java,setIconState,"    void setIconState(IconState state);

    /**
     * Return current icon state
     *
     * @return icon state
     */
    IconState getIconState();

    /**
     * Animate icon to given state.
     *
     * @param state new icon state
     */
    void animateIconState(IconState state);

    /**
     * Set color of icon
     *
     * @param color new icon color
     */
    void setColor(int color);

    /**
     * Set visibility of icon
     *
     * @param visible new value for visibility
     */
    void setVisible(boolean visible);

    /**
     * Set duration of transformation animations
     *
     * @param duration new animation duration
     */
    void setTransformationDuration(int duration);

    /**
     * Set interpolator for transformation animations
     *
     * @param interpolator new interpolator
     */
    void setInterpolator(Interpolator interpolator);

    /**
     * Set listener for {@code MaterialMenuDrawable} animation events
     *
     * @param listener new listener or null to remove any listener
     */
    void setAnimationListener(Animator.AnimatorListener listener);

    /**
     * Enable RTL layout. Flips all icons horizontally
     *
     * @param rtlEnabled true to enable RTL layout
     */
    void setRTLEnabled(boolean rtlEnabled);

    /**
     * Manually set a transformation value for an {@link com.balysv.materialmenu.MaterialMenuDrawable.AnimationState}
     *
     * @param animationState state to set value in
     * @param value          between {@link com.balysv.materialmenu.MaterialMenuDrawable#TRANSFORMATION_START} and
     *                       {@link com.balysv.materialmenu.MaterialMenuDrawable#TRANSFORMATION_END}.
     */
    IconState setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);
}",https://www.github.com/balysv/material-menu/commit/8845a68efc019d2fff883aba61f77f7c616a2d9e,"    void setIconState(IconState state);

    
    IconState getIconState();

    
    void animateIconState(IconState state);

    
    void setColor(int color);

    
    void setVisible(boolean visible);

    
    void setTransformationDuration(int duration);

    
    void setInterpolator(Interpolator interpolator);

    
    void setAnimationListener(Animator.AnimatorListener listener);

    
    void setRTLEnabled(boolean rtlEnabled);

    
    IconState setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);
}
","['    ', 'void', ' ', 'setIconState', '(', 'IconState', ' ', 'state', ')', ';', '\n', '\n', '    ', '\n', '    ', 'IconState', ' ', 'getIconState', '(', ')', ';', '\n', '\n', '    ', '\n', '    ', 'void', ' ', 'animateIconState', '(', 'IconState', ' ', 'state', ')', ';', '\n', '\n', '    ', '\n', '    ', 'void', ' ', 'setColor', '(', 'int', ' ', 'color', ')', ';', '\n', '\n', '    ', '\n', '    ', 'void', ' ', 'setVisible', '(', 'boolean', ' ', 'visible', ')', ';', '\n', '\n', '    ', '\n', '    ', 'void', ' ', 'setTransformationDuration', '(', 'int', ' ', 'duration', ')', ';', '\n', '\n', '    ', '\n', '    ', 'void', ' ', 'setInterpolator', '(', 'Interpolator', ' ', 'interpolator', ')', ';', '\n', '\n', '    ', '\n', '    ', 'void', ' ', 'setAnimationListener', '(', 'Animator', '.', 'AnimatorListener', ' ', 'listener', ')', ';', '\n', '\n', '    ', '\n', '    ', 'void', ' ', 'setRTLEnabled', '(', 'boolean', ' ', 'rtlEnabled', ')', ';', '\n', '\n', '    ', '\n', '    ', 'IconState', ' ', 'setTransformationOffset', '(', 'MaterialMenuDrawable', '.', 'AnimationState', ' ', 'animationState', ',', ' ', 'float', ' ', 'value', ')', ';', '\n', '}', '\n', '<END>']"
master,ad9887be221b157cec281e1e45e0022a89c00349,MacOSThemeDetector.java,isDarkTheme,"    private boolean isDarkTheme(String themeName) {
        return themeName != null && themeNamePattern.matcher(themeName).matches();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/ad9887be221b157cec281e1e45e0022a89c00349,"    private boolean isDarkTheme(String themeName) {
        return themeName != null && themeNamePattern.matcher(themeName).matches();
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isDarkTheme', '(', 'String', ' ', 'themeName', ')', ' ', '{', '\n', '        ', 'return', ' ', 'themeName', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'themeNamePattern', '.', 'matcher', '(', 'themeName', ')', '.', 'matches', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4d0a6dd65fa66912fd628f2cd61847235abb9706,UI.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }
         if(source == butabs){
             writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
         }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        if (source == butBinary) {
            parsetoBinary();
        }

        text.selectAll();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/4d0a6dd65fa66912fd628f2cd61847235abb9706,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }
         if(source == butabs){
             writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
         }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        if (source == butBinary) {
            parsetoBinary();
        }

        text.selectAll();
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '                ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '         ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '{', '\n', '             ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', ' ', '{', '\n', '            ', 'parsetoBinary', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Application.java,main,"    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'SpringApplication', '.', 'run', '(', 'Application', '.', 'class', ',', ' ', 'args', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7c47f8c484bd37e4f1ebb27a7c049d0649e13a9a,SystemThemeListenerThread.java,run,"    public void run() {
        while (!this.isInterrupted() && !listeners.isEmpty()) {
            boolean lastValue = systemUIThemeDetector.isDark();
            if (this.lastValue != lastValue) {
                listeners.forEach(listener -> listener.accept(lastValue));
            }

            this.lastValue = lastValue;
        }

        terminated = true;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7c47f8c484bd37e4f1ebb27a7c049d0649e13a9a,"    public void run() {
        while (!this.isInterrupted() && !listeners.isEmpty()) {
            boolean lastValue = systemUIThemeDetector.isDark();
            if (this.lastValue != lastValue) {
                listeners.forEach(listener -> listener.accept(lastValue));
            }

            this.lastValue = lastValue;
        }

        terminated = true;
    }
","['    ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '        ', 'while', ' ', '(', '!', 'this', '.', 'isInterrupted', '(', ')', ' ', '&', '&', ' ', '!', 'listeners', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'lastValue', ' ', '=', ' ', 'systemUIThemeDetector', '.', 'isDark', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'this', '.', 'lastValue', ' ', '!', '=', ' ', 'lastValue', ')', ' ', '{', '\n', '                ', 'listeners', '.', 'forEach', '(', 'listener', ' ', '-', '>', ' ', 'listener', '.', 'accept', '(', 'lastValue', ')', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'this', '.', 'lastValue', ' ', '=', ' ', 'lastValue', ';', '\n', '        ', '}', '\n', '\n', '        ', 'terminated', ' ', '=', ' ', 'true', ';', '\n', '    ', '}', '\n', '<END>']"
master,e84dfb8abf7db08436046e00aed3fd8cc4be3ae3,JIntellitype.java,addIntellitypeListener,"   public void addIntellitypeListener(IntellitypeListener listener) {
      intellitypeListeners.add(listener);
   }",https://www.github.com/melloware/jintellitype/commit/e84dfb8abf7db08436046e00aed3fd8cc4be3ae3,"   public void addIntellitypeListener(IntellitypeListener listener) {
      intellitypeListeners.add(listener);
   }
","['   ', 'public', ' ', 'void', ' ', 'addIntellitypeListener', '(', 'IntellitypeListener', ' ', 'listener', ')', ' ', '{', '\n', '      ', 'intellitypeListeners', '.', 'add', '(', 'listener', ')', ';', '\n', '   ', '}', '\n', '<END>']"
master,059009d71539dd60fc63d256bcd33bde4be0ade2,OsInfo.java,isGnome,"    public static boolean isGnome() {
        return isLinux() && (
                        queryResultContains(""echo $XDG_CURRENT_DESKTOP"", ""gnome"") ||",https://www.github.com/dansoftowner/jsystemthemedetector/commit/059009d71539dd60fc63d256bcd33bde4be0ade2,"    public static boolean isGnome() {
        return isLinux() && (
                        queryResultContains(""echo $XDG_CURRENT_DESKTOP"", ""gnome"") ||
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isGnome', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'isLinux', '(', ')', ' ', '&', '&', ' ', '(', '\n', '                        ', 'queryResultContains', '(', '""', 'echo $XDG_CURRENT_DESKTOP', '""', ',', ' ', '""', 'gnome', '""', ')', ' ', '|', '|', '\n', '<END>']"
master,5af4498106bd8ed34e13d6b7c59ed2914f5b858b,Aria2.java,handleStreamMessage,"    private void handleStreamMessage(@NonNull String line) {
        if (line.startsWith(""WARNING: "")) {
            postMessage(Message.obtain(Message.Type.PROCESS_WARN, line.substring(9)));",https://www.github.com/devgianlu/aria2android/commit/5af4498106bd8ed34e13d6b7c59ed2914f5b858b,"    private void handleStreamMessage(@NonNull String line) {
        if (line.startsWith(""WARNING: "")) {
            postMessage(Message.obtain(Message.Type.PROCESS_WARN, line.substring(9)));
","['    ', 'private', ' ', 'void', ' ', 'handleStreamMessage', '(', '@NonNull', ' ', 'String', ' ', 'line', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'line', '.', 'startsWith', '(', '""', 'WARNING: ', '""', ')', ')', ' ', '{', '\n', '            ', 'postMessage', '(', 'Message', '.', 'obtain', '(', 'Message', '.', 'Type', '.', 'PROCESS_WARN', ',', ' ', 'line', '.', 'substring', '(', '9', ')', ')', ')', ';', '\n', '<END>']"
master,94761096c5068699b0240ce2b85989e9d8f072c1,MaterialMenu.java,setTransformationOffset,"    void setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);

    /**
     * @return {@link MaterialMenuDrawable} to be used for the menu
     */
    MaterialMenuDrawable getDrawable();
}",https://www.github.com/balysv/material-menu/commit/94761096c5068699b0240ce2b85989e9d8f072c1,"    void setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);

    
    MaterialMenuDrawable getDrawable();
}
","['    ', 'void', ' ', 'setTransformationOffset', '(', 'MaterialMenuDrawable', '.', 'AnimationState', ' ', 'animationState', ',', ' ', 'float', ' ', 'value', ')', ';', '\n', '\n', '    ', '\n', '    ', 'MaterialMenuDrawable', ' ', 'getDrawable', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Dog.java,toString,"    public String toString() {
        return ""DogResolver{"" +
                       ""id="" + id +",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public String toString() {
        return ""DogResolver{"" +
                       ""id="" + id +
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'DogResolver{', '""', ' ', '+', '\n', '                       ', '""', 'id=', '""', ' ', '+', ' ', 'id', ' ', '+', '\n', '<END>']"
master,4e7f816c29700049c2deaa73644b68b0751bf515,PerformanceMonitor.java,sendNotification,"    private void sendNotification(String pid, String cpuUsage, String rss) {
        if (_stop) return;
        RemoteViews layout = new RemoteViews(context.getPackageName(), R.layout.custom_notification);
        layout.setTextViewText(R.id.customNotification_runningTime, ""Running time: "" + CommonUtils.timeFormatter((System.currentTimeMillis() - startTime) / 1000));
        layout.setTextViewText(R.id.customNotification_pid, ""PID: "" + pid);
        layout.setTextViewText(R.id.customNotification_cpu, ""CPU: "" + cpuUsage + ""%"");
        layout.setTextViewText(R.id.customNotification_memory, ""Memory: "" + CommonUtils.dimensionFormatter(Integer.parseInt(rss) * 1024, false));
        builder.setCustomContentView(layout);
        // manager.notify(BinService.NOTIFICATION_ID, builder.build());",https://www.github.com/devgianlu/aria2android/commit/4e7f816c29700049c2deaa73644b68b0751bf515,"    private void sendNotification(String pid, String cpuUsage, String rss) {
        if (_stop) return;
        RemoteViews layout = new RemoteViews(context.getPackageName(), R.layout.custom_notification);
        layout.setTextViewText(R.id.customNotification_runningTime, ""Running time: "" + CommonUtils.timeFormatter((System.currentTimeMillis() - startTime) / 1000));
        layout.setTextViewText(R.id.customNotification_pid, ""PID: "" + pid);
        layout.setTextViewText(R.id.customNotification_cpu, ""CPU: "" + cpuUsage + ""%"");
        layout.setTextViewText(R.id.customNotification_memory, ""Memory: "" + CommonUtils.dimensionFormatter(Integer.parseInt(rss) * 1024, false));
        builder.setCustomContentView(layout);
        
","['    ', 'private', ' ', 'void', ' ', 'sendNotification', '(', 'String', ' ', 'pid', ',', ' ', 'String', ' ', 'cpuUsage', ',', ' ', 'String', ' ', 'rss', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', '_stop', ')', ' ', 'return', ';', '\n', '        ', 'RemoteViews', ' ', 'layout', ' ', '=', ' ', 'new', ' ', 'RemoteViews', '(', 'context', '.', 'getPackageName', '(', ')', ',', ' ', 'R', '.', 'layout', '.', 'custom_notification', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_runningTime', ',', ' ', '""', 'Running time: ', '""', ' ', '+', ' ', 'CommonUtils', '.', 'timeFormatter', '(', '(', 'System', '.', 'currentTimeMillis', '(', ')', ' ', '-', ' ', 'startTime', ')', ' ', '/', ' ', '1000', ')', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_pid', ',', ' ', '""', 'PID: ', '""', ' ', '+', ' ', 'pid', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_cpu', ',', ' ', '""', 'CPU: ', '""', ' ', '+', ' ', 'cpuUsage', ' ', '+', ' ', '""', '%', '""', ')', ';', '\n', '        ', 'layout', '.', 'setTextViewText', '(', 'R', '.', 'id', '.', 'customNotification_memory', ',', ' ', '""', 'Memory: ', '""', ' ', '+', ' ', 'CommonUtils', '.', 'dimensionFormatter', '(', 'Integer', '.', 'parseInt', '(', 'rss', ')', ' ', '*', ' ', '1024', ',', ' ', 'false', ')', ')', ';', '\n', '        ', 'builder', '.', 'setCustomContentView', '(', 'layout', ')', ';', '\n', '        ', '\n', '<END>']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,saveAs,"    public File saveAs(final String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        logger.info(""PDF successfully saved in {}"", file.getAbsolutePath());
        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public File saveAs(final String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        logger.info(""PDF successfully saved in {}"", file.getAbsolutePath());
        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAs', '(', 'final', ' ', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'FileUtils', '.', 'writeByteArrayToFile', '(', 'file', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'PDF successfully saved in {}', '""', ',', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n', '<END>']"
master,fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,DummyReadWriteLock.java,newCondition,"        public Condition newCondition() {
            return null;
        }",https://www.github.com/mybatis/redis-cache/commit/fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,"        public Condition newCondition() {
            return null;
        }
","['        ', 'public', ' ', 'Condition', ' ', 'newCondition', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '<END>']"
master,f8c174aac538aa33acee68de0410df7b7d606bdb,ConfigEditorActivity.java,importOptionsFromStream,"    private void importOptionsFromStream(@NonNull InputStream in) {
        StringBuilder builder = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
            String line;
            while ((line = reader.readLine()) != null) builder.append(line).append('\n');
        } catch (IOException | OutOfMemoryError ex) {
            System.gc();
            Toaster.show(this, Utils.Messages.CANNOT_IMPORT, ex);
            return;
        }

        adapter.parseAndAdd(builder.toString());
    }",https://www.github.com/devgianlu/aria2android/commit/f8c174aac538aa33acee68de0410df7b7d606bdb,"    private void importOptionsFromStream(@NonNull InputStream in) {
        StringBuilder builder = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
            String line;
            while ((line = reader.readLine()) != null) builder.append(line).append('\n');
        } catch (IOException | OutOfMemoryError ex) {
            System.gc();
            Toaster.show(this, Utils.Messages.CANNOT_IMPORT, ex);
            return;
        }

        adapter.parseAndAdd(builder.toString());
    }
","['    ', 'private', ' ', 'void', ' ', 'importOptionsFromStream', '(', '@NonNull', ' ', 'InputStream', ' ', 'in', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'try', ' ', '(', 'BufferedReader', ' ', 'reader', ' ', '=', ' ', 'new', ' ', 'BufferedReader', '(', 'new', ' ', 'InputStreamReader', '(', 'in', ')', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'line', ';', '\n', '            ', 'while', ' ', '(', '(', 'line', ' ', '=', ' ', 'reader', '.', 'readLine', '(', ')', ')', ' ', '!', '=', ' ', 'null', ')', ' ', 'builder', '.', 'append', '(', 'line', ')', '.', 'append', '(', ""'\\n'"", ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', '|', ' ', 'OutOfMemoryError', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'System', '.', 'gc', '(', ')', ';', '\n', '            ', 'Toaster', '.', 'show', '(', 'this', ',', ' ', 'Utils', '.', 'Messages', '.', 'CANNOT_IMPORT', ',', ' ', 'ex', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'adapter', '.', 'parseAndAdd', '(', 'builder', '.', 'toString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,e84dfb8abf7db08436046e00aed3fd8cc4be3ae3,JIntellitype.java,initializeLibrary,"   private synchronized native void initializeLibrary() throws UnsatisfiedLinkError;

   private synchronized native void regHotKey(int identifier, int modifier, int keycode) throws UnsatisfiedLinkError;

   private synchronized native void terminate() throws UnsatisfiedLinkError;

   private synchronized native void unregHotKey(int identifier) throws UnsatisfiedLinkError;

   /**
    * Checks if there's an instance with hidden window title = appName running
    * Can be used to detect that another instance of your app is already running
    * (so exit..)
    * <p>
    * @param appName = the title of the hidden window to search for
    */
   private synchronized native boolean isRunning(String appName);
}",https://www.github.com/melloware/jintellitype/commit/e84dfb8abf7db08436046e00aed3fd8cc4be3ae3,"   private synchronized native void initializeLibrary() throws UnsatisfiedLinkError;

   private synchronized native void regHotKey(int identifier, int modifier, int keycode) throws UnsatisfiedLinkError;

   private synchronized native void terminate() throws UnsatisfiedLinkError;

   private synchronized native void unregHotKey(int identifier) throws UnsatisfiedLinkError;

   
   private synchronized native boolean isRunning(String appName);
}
","['   ', 'private', ' ', 'synchronized', ' ', 'native', ' ', 'void', ' ', 'initializeLibrary', '(', ')', ' ', 'throws', ' ', 'UnsatisfiedLinkError', ';', '\n', '\n', '   ', 'private', ' ', 'synchronized', ' ', 'native', ' ', 'void', ' ', 'regHotKey', '(', 'int', ' ', 'identifier', ',', ' ', 'int', ' ', 'modifier', ',', ' ', 'int', ' ', 'keycode', ')', ' ', 'throws', ' ', 'UnsatisfiedLinkError', ';', '\n', '\n', '   ', 'private', ' ', 'synchronized', ' ', 'native', ' ', 'void', ' ', 'terminate', '(', ')', ' ', 'throws', ' ', 'UnsatisfiedLinkError', ';', '\n', '\n', '   ', 'private', ' ', 'synchronized', ' ', 'native', ' ', 'void', ' ', 'unregHotKey', '(', 'int', ' ', 'identifier', ')', ' ', 'throws', ' ', 'UnsatisfiedLinkError', ';', '\n', '\n', '   ', '\n', '   ', 'private', ' ', 'synchronized', ' ', 'native', ' ', 'boolean', ' ', 'isRunning', '(', 'String', ' ', 'appName', ')', ';', '\n', '}', '\n', '<END>']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Pdf.java,saveAs,"    public void saveAs(String path) throws IOException, InterruptedException {
        saveAs(path, getPDF());
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void saveAs(String path) throws IOException, InterruptedException {
        saveAs(path, getPDF());
    }
","['    ', 'public', ' ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'saveAs', '(', 'path', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7b2a9cbfca04f7b38fc41b88350ee687d7a2efd7,Aria2Service.java,dispatchStatus,"    private void dispatchStatus() {
        if (broadcastManager == null) return;

        Intent intent = new Intent(BROADCAST_STATUS);
        intent.putExtra(""on"", aria2.isRunning());
        broadcastManager.sendBroadcast(intent);
    }",https://www.github.com/devgianlu/aria2android/commit/7b2a9cbfca04f7b38fc41b88350ee687d7a2efd7,"    private void dispatchStatus() {
        if (broadcastManager == null) return;

        Intent intent = new Intent(BROADCAST_STATUS);
        intent.putExtra(""on"", aria2.isRunning());
        broadcastManager.sendBroadcast(intent);
    }
","['    ', 'private', ' ', 'void', ' ', 'dispatchStatus', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'broadcastManager', ' ', '=', '=', ' ', 'null', ')', ' ', 'return', ';', '\n', '\n', '        ', 'Intent', ' ', 'intent', ' ', '=', ' ', 'new', ' ', 'Intent', '(', 'BROADCAST_STATUS', ')', ';', '\n', '        ', 'intent', '.', 'putExtra', '(', '""', 'on', '""', ',', ' ', 'aria2', '.', 'isRunning', '(', ')', ')', ';', '\n', '        ', 'broadcastManager', '.', 'sendBroadcast', '(', 'intent', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9d12ee40d171c3abfca98de725a3ee8a4453e0b7,TaskService.java,reverseImage,"    public BufferedImage reverseImage(@NotNull BufferedImage bufferedImage) {
        int height = bufferedImage.getHeight();
        int width = bufferedImage.getWidth();
        int preImgHeight = height / 10;
        BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics = result.createGraphics();
        for(int i = 0; i < 10; i++) {
            BufferedImage subImage = bufferedImage.getSubimage(0, i * preImgHeight, width, preImgHeight);
            graphics.drawImage(subImage, null, 0, height - (i + 1) * preImgHeight);
        }
        return result;
    }",https://www.github.com/jiayaoo3o/18-comic-finder/commit/9d12ee40d171c3abfca98de725a3ee8a4453e0b7,"    public BufferedImage reverseImage(@NotNull BufferedImage bufferedImage) {
        int height = bufferedImage.getHeight();
        int width = bufferedImage.getWidth();
        int preImgHeight = height / 10;
        BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics = result.createGraphics();
        for(int i = 0; i < 10; i++) {
            BufferedImage subImage = bufferedImage.getSubimage(0, i * preImgHeight, width, preImgHeight);
            graphics.drawImage(subImage, null, 0, height - (i + 1) * preImgHeight);
        }
        return result;
    }
","['    ', 'public', ' ', 'BufferedImage', ' ', 'reverseImage', '(', '@NotNull', ' ', 'BufferedImage', ' ', 'bufferedImage', ')', ' ', '{', '\n', '        ', 'int', ' ', 'height', ' ', '=', ' ', 'bufferedImage', '.', 'getHeight', '(', ')', ';', '\n', '        ', 'int', ' ', 'width', ' ', '=', ' ', 'bufferedImage', '.', 'getWidth', '(', ')', ';', '\n', '        ', 'int', ' ', 'preImgHeight', ' ', '=', ' ', 'height', ' ', '/', ' ', '10', ';', '\n', '        ', 'BufferedImage', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'BufferedImage', '(', 'width', ',', ' ', 'height', ',', ' ', 'BufferedImage', '.', 'TYPE_INT_RGB', ')', ';', '\n', '        ', 'Graphics2D', ' ', 'graphics', ' ', '=', ' ', 'result', '.', 'createGraphics', '(', ')', ';', '\n', '        ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'BufferedImage', ' ', 'subImage', ' ', '=', ' ', 'bufferedImage', '.', 'getSubimage', '(', '0', ',', ' ', 'i', ' ', '*', ' ', 'preImgHeight', ',', ' ', 'width', ',', ' ', 'preImgHeight', ')', ';', '\n', '            ', 'graphics', '.', 'drawImage', '(', 'subImage', ',', ' ', 'null', ',', ' ', '0', ',', ' ', 'height', ' ', '-', ' ', '(', 'i', ' ', '+', ' ', '1', ')', ' ', '*', ' ', 'preImgHeight', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'result', ';', '\n', '    ', '}', '\n', '<END>']"
master,db953203c365757acb90f98df7519f7b5981a265,TaskService.java,processChapterDir,"    public Uni<String> processChapterDir(String title, ChapterEntity chapterEntity) {
        var chapterName = chapterEntity.name();
        var dirPath = downloadPath + File.separatorChar + title + File.separatorChar + chapterName;
        var voidUni = vertx.fileSystem()
                .mkdirs(dirPath);
        return voidUni.chain(v -> Uni.createFrom()
                .item(dirPath));",https://www.github.com/jiayaoo3o/18-comic-finder/commit/db953203c365757acb90f98df7519f7b5981a265,"    public Uni<String> processChapterDir(String title, ChapterEntity chapterEntity) {
        var chapterName = chapterEntity.name();
        var dirPath = downloadPath + File.separatorChar + title + File.separatorChar + chapterName;
        var voidUni = vertx.fileSystem()
                .mkdirs(dirPath);
        return voidUni.chain(v -> Uni.createFrom()
                .item(dirPath));
","['    ', 'public', ' ', 'Uni', '<', 'String', '>', ' ', 'processChapterDir', '(', 'String', ' ', 'title', ',', ' ', 'ChapterEntity', ' ', 'chapterEntity', ')', ' ', '{', '\n', '        ', 'var', ' ', 'chapterName', ' ', '=', ' ', 'chapterEntity', '.', 'name', '(', ')', ';', '\n', '        ', 'var', ' ', 'dirPath', ' ', '=', ' ', 'downloadPath', ' ', '+', ' ', 'File', '.', 'separatorChar', ' ', '+', ' ', 'title', ' ', '+', ' ', 'File', '.', 'separatorChar', ' ', '+', ' ', 'chapterName', ';', '\n', '        ', 'var', ' ', 'voidUni', ' ', '=', ' ', 'vertx', '.', 'fileSystem', '(', ')', '\n', '                ', '.', 'mkdirs', '(', 'dirPath', ')', ';', '\n', '        ', 'return', ' ', 'voidUni', '.', 'chain', '(', 'v', ' ', '-', '>', ' ', 'Uni', '.', 'createFrom', '(', ')', '\n', '                ', '.', 'item', '(', 'dirPath', ')', ')', ';', '\n', '<END>']"
master,f51d1c49fdf2db74252470f2193d03ea0b7f5d7c,ResourcesHolder.java,sort,"    public void sort(boolean descending){
        TreeMap<String, Object> treeMap = new TreeMap<>();
        treeMap.putAll(mValues);
        if (descending){
            treeMap.descendingMap();
        }
        mValues.clear();
        mValues.putAll(treeMap);
    }",https://www.github.com/anggrayudi/android-hidden-api/commit/f51d1c49fdf2db74252470f2193d03ea0b7f5d7c,"    public void sort(boolean descending){
        TreeMap<String, Object> treeMap = new TreeMap<>();
        treeMap.putAll(mValues);
        if (descending){
            treeMap.descendingMap();
        }
        mValues.clear();
        mValues.putAll(treeMap);
    }
","['    ', 'public', ' ', 'void', ' ', 'sort', '(', 'boolean', ' ', 'descending', ')', '{', '\n', '        ', 'TreeMap', '<', 'String', ',', ' ', 'Object', '>', ' ', 'treeMap', ' ', '=', ' ', 'new', ' ', 'TreeMap', '<', '>', '(', ')', ';', '\n', '        ', 'treeMap', '.', 'putAll', '(', 'mValues', ')', ';', '\n', '        ', 'if', ' ', '(', 'descending', ')', '{', '\n', '            ', 'treeMap', '.', 'descendingMap', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'mValues', '.', 'clear', '(', ')', ';', '\n', '        ', 'mValues', '.', 'putAll', '(', 'treeMap', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,Pdf.java,addToc,"	public void addToc() {
		// TODO Auto-generated method stub
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	/**
	 * TODO save file and returns
	 * 
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
        String command = this.commandWithParameters() + Symbol.separator + path;
        Process proc = rt.exec(command);
        if(htmlFromString) {
            OutputStream stdin = proc.getOutputStream();
            stdin.write(htmlInput.getBytes());
            stdin.close();
        }

		proc.waitFor();
        if(proc.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + command + "") exited with status code "" + proc.exitValue());
        }

		return new File(path);
	}

	public String commandWithParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	public void addToc() {
		
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
        String command = this.commandWithParameters() + Symbol.separator + path;
        Process proc = rt.exec(command);
        if(htmlFromString) {
            OutputStream stdin = proc.getOutputStream();
            stdin.write(htmlInput.getBytes());
            stdin.close();
        }

		proc.waitFor();
        if(proc.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + command + "") exited with status code "" + proc.exitValue());
        }

		return new File(path);
	}

	public String commandWithParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '        ', 'String', ' ', 'command', ' ', '=', ' ', 'this', '.', 'commandWithParameters', '(', ')', ' ', '+', ' ', 'Symbol', '.', 'separator', ' ', '+', ' ', 'path', ';', '\n', '        ', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'command', ')', ';', '\n', '        ', 'if', '(', 'htmlFromString', ')', ' ', '{', '\n', '            ', 'OutputStream', ' ', 'stdin', ' ', '=', ' ', 'proc', '.', 'getOutputStream', '(', ')', ';', '\n', '            ', 'stdin', '.', 'write', '(', 'htmlInput', '.', 'getBytes', '(', ')', ')', ';', '\n', '            ', 'stdin', '.', 'close', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '        ', 'if', '(', 'proc', '.', 'exitValue', '(', ')', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'Process (', '""', ' ', '+', ' ', 'command', ' ', '+', ' ', '""', ') exited with status code ', '""', ' ', '+', ' ', 'proc', '.', 'exitValue', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'commandWithParameters', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'command', ' ', '+', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'GlobalOption', ' ', 'option', ')', ' ', '{', '\n', '\t\t', 'addParam', '(', 'new', ' ', 'Param', '(', 'option', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n', '<END>']"
master,5d5ea3a426bf26fe841aee0483866a7b1401c1a3,PreferencesActivity.java,onPreferenceClick,"            public boolean onPreferenceClick(Preference preference) {
                startActivity(new Intent(PreferencesActivity.this, LogsActivity.class));
                return true;
            }",https://www.github.com/devgianlu/aria2android/commit/5d5ea3a426bf26fe841aee0483866a7b1401c1a3,"            public boolean onPreferenceClick(Preference preference) {
                startActivity(new Intent(PreferencesActivity.this, LogsActivity.class));
                return true;
            }
","['            ', 'public', ' ', 'boolean', ' ', 'onPreferenceClick', '(', 'Preference', ' ', 'preference', ')', ' ', '{', '\n', '                ', 'startActivity', '(', 'new', ' ', 'Intent', '(', 'PreferencesActivity', '.', 'this', ',', ' ', 'LogsActivity', '.', 'class', ')', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '<END>']"
master,e87a113fbc5d45483be110769969f4e43dacd838,NewAssociationPublisher.java,verifyPresenceOfNewAssociation,"    private Runnable verifyPresenceOfNewAssociation(ObservableEmitter<String> emitter) {
        return () -> {
            try {",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    private Runnable verifyPresenceOfNewAssociation(ObservableEmitter<String> emitter) {
        return () -> {
            try {
","['    ', 'private', ' ', 'Runnable', ' ', 'verifyPresenceOfNewAssociation', '(', 'ObservableEmitter', '<', 'String', '>', ' ', 'emitter', ')', ' ', '{', '\n', '        ', 'return', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '<END>']"
master,ed52c49b3138b8c9a7cfe53b7718cfd9ad9b196d,JFastTextTest.java,test09ModelUnloading,"    public void test09ModelUnloading() throws Exception {
        JFastText jft = new JFastText();
        System.out.println(""\nLoading model ..."");
        jft.loadModel(""src/test/resources/models/supervised.model.bin"");
        System.out.println(""Unloading model ..."");
        jft.unloadModel();
    }",https://www.github.com/vinhkhuc/jfasttext/commit/ed52c49b3138b8c9a7cfe53b7718cfd9ad9b196d,"    public void test09ModelUnloading() throws Exception {
        JFastText jft = new JFastText();
        System.out.println(""\nLoading model ..."");
        jft.loadModel(""src/test/resources/models/supervised.model.bin"");
        System.out.println(""Unloading model ..."");
        jft.unloadModel();
    }
","['    ', 'public', ' ', 'void', ' ', 'test09ModelUnloading', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'JFastText', ' ', 'jft', ' ', '=', ' ', 'new', ' ', 'JFastText', '(', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', '\\', 'nLoading model ...', '""', ')', ';', '\n', '        ', 'jft', '.', 'loadModel', '(', '""', 'src/test/resources/models/supervised.model.bin', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'Unloading model ...', '""', ')', ';', '\n', '        ', 'jft', '.', 'unloadModel', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f51d1c49fdf2db74252470f2193d03ea0b7f5d7c,InternalAccessor.java,getStringArray,"    public static String[] getStringArray(@NonNull String resName) throws ResourceNotFoundException {
        try {
            return Resources.getSystem().getStringArray(getResourceId(ARRAY, resName));",https://www.github.com/anggrayudi/android-hidden-api/commit/f51d1c49fdf2db74252470f2193d03ea0b7f5d7c,"    public static String[] getStringArray(@NonNull String resName) throws ResourceNotFoundException {
        try {
            return Resources.getSystem().getStringArray(getResourceId(ARRAY, resName));
","['    ', 'public', ' ', 'static', ' ', 'String', '[', ']', ' ', 'getStringArray', '(', '@NonNull', ' ', 'String', ' ', 'resName', ')', ' ', 'throws', ' ', 'ResourceNotFoundException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'Resources', '.', 'getSystem', '(', ')', '.', 'getStringArray', '(', 'getResourceId', '(', 'ARRAY', ',', ' ', 'resName', ')', ')', ';', '\n', '<END>']"
master,23806aab2c2e4c2937d00da69ae630037ebf2ebb,DownloadBinActivity.java,doneExtract,"    public void doneExtract(@NonNull File dest) {
        layout.showInfo(R.string.binExtracted);

        Prefs.putBoolean(PK.CUSTOM_BIN, false);
        Prefs.putString(PK.ENV_LOCATION, dest.getAbsolutePath());
        startActivity(new Intent(this, MainActivity.class)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK));
        finish();
    }",https://www.github.com/devgianlu/aria2android/commit/23806aab2c2e4c2937d00da69ae630037ebf2ebb,"    public void doneExtract(@NonNull File dest) {
        layout.showInfo(R.string.binExtracted);

        Prefs.putBoolean(PK.CUSTOM_BIN, false);
        Prefs.putString(PK.ENV_LOCATION, dest.getAbsolutePath());
        startActivity(new Intent(this, MainActivity.class)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK));
        finish();
    }
","['    ', 'public', ' ', 'void', ' ', 'doneExtract', '(', '@NonNull', ' ', 'File', ' ', 'dest', ')', ' ', '{', '\n', '        ', 'layout', '.', 'showInfo', '(', 'R', '.', 'string', '.', 'binExtracted', ')', ';', '\n', '\n', '        ', 'Prefs', '.', 'putBoolean', '(', 'PK', '.', 'CUSTOM_BIN', ',', ' ', 'false', ')', ';', '\n', '        ', 'Prefs', '.', 'putString', '(', 'PK', '.', 'ENV_LOCATION', ',', ' ', 'dest', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '        ', 'startActivity', '(', 'new', ' ', 'Intent', '(', 'this', ',', ' ', 'MainActivity', '.', 'class', ')', '\n', '                ', '.', 'addFlags', '(', 'Intent', '.', 'FLAG_ACTIVITY_NEW_TASK', ' ', '|', ' ', 'Intent', '.', 'FLAG_ACTIVITY_CLEAR_TASK', ')', ')', ';', '\n', '        ', 'finish', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,LoggingEhcacheTestCase.java,shouldFlushAllItemsOnDemand,"    public void shouldFlushAllItemsOnDemand() {
        for (int i = 0; i < 5; i++) {
            cache.putObject(i, i);
        }
        assertNotNull(cache.getObject(0));
        assertNotNull(cache.getObject(4));
        cache.clear();
        assertNull(cache.getObject(0));
        assertNull(cache.getObject(4));
    }",https://www.github.com/mybatis/redis-cache/commit/fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,"    public void shouldFlushAllItemsOnDemand() {
        for (int i = 0; i < 5; i++) {
            cache.putObject(i, i);
        }
        assertNotNull(cache.getObject(0));
        assertNotNull(cache.getObject(4));
        cache.clear();
        assertNull(cache.getObject(0));
        assertNull(cache.getObject(4));
    }
","['    ', 'public', ' ', 'void', ' ', 'shouldFlushAllItemsOnDemand', '(', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '5', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'cache', '.', 'putObject', '(', 'i', ',', ' ', 'i', ')', ';', '\n', '        ', '}', '\n', '        ', 'assertNotNull', '(', 'cache', '.', 'getObject', '(', '0', ')', ')', ';', '\n', '        ', 'assertNotNull', '(', 'cache', '.', 'getObject', '(', '4', ')', ')', ';', '\n', '        ', 'cache', '.', 'clear', '(', ')', ';', '\n', '        ', 'assertNull', '(', 'cache', '.', 'getObject', '(', '0', ')', ')', ';', '\n', '        ', 'assertNull', '(', 'cache', '.', 'getObject', '(', '4', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,8e3bd0e621316164a3581aa10daadc51b5b3a083,MainActivity.java,updateUiStatus,"    private void updateUiStatus(boolean on) {
        if (screen != null) screen.lockPreferences(on);

        if (toggleServer != null) {
            toggleServer.setOnCheckedChangeListener(null);
            toggleServer.setChecked(on);
            toggleServer.setOnCheckedChangeListener((buttonView, isChecked) -> toggleService(isChecked));
        }

        if ((screen == null || toggleServer == null) && aria2 != null)
            runOnUiThread(aria2::askForStatus);",https://www.github.com/devgianlu/aria2android/commit/8e3bd0e621316164a3581aa10daadc51b5b3a083,"    private void updateUiStatus(boolean on) {
        if (screen != null) screen.lockPreferences(on);

        if (toggleServer != null) {
            toggleServer.setOnCheckedChangeListener(null);
            toggleServer.setChecked(on);
            toggleServer.setOnCheckedChangeListener((buttonView, isChecked) -> toggleService(isChecked));
        }

        if ((screen == null || toggleServer == null) && aria2 != null)
            runOnUiThread(aria2::askForStatus);
","['    ', 'private', ' ', 'void', ' ', 'updateUiStatus', '(', 'boolean', ' ', 'on', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'screen', ' ', '!', '=', ' ', 'null', ')', ' ', 'screen', '.', 'lockPreferences', '(', 'on', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'toggleServer', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'toggleServer', '.', 'setOnCheckedChangeListener', '(', 'null', ')', ';', '\n', '            ', 'toggleServer', '.', 'setChecked', '(', 'on', ')', ';', '\n', '            ', 'toggleServer', '.', 'setOnCheckedChangeListener', '(', '(', 'buttonView', ',', ' ', 'isChecked', ')', ' ', '-', '>', ' ', 'toggleService', '(', 'isChecked', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '(', 'screen', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'toggleServer', ' ', '=', '=', ' ', 'null', ')', ' ', '&', '&', ' ', 'aria2', ' ', '!', '=', ' ', 'null', ')', '\n', '            ', 'runOnUiThread', '(', 'aria2', ':', ':', 'askForStatus', ')', ';', '\n', '<END>']"
master,8317a776b91f7a2141ddd459d7a097ac210896e5,MainActivity.java,onClick,"                    public void onClick(DialogInterface dialog, int which) {
                        try {
",https://www.github.com/devgianlu/aria2android/commit/8317a776b91f7a2141ddd459d7a097ac210896e5,"                    public void onClick(DialogInterface dialog, int which) {
                        try {
","['                    ', 'public', ' ', 'void', ' ', 'onClick', '(', 'DialogInterface', ' ', 'dialog', ',', ' ', 'int', ' ', 'which', ')', ' ', '{', '\n', '                        ', 'try', ' ', '{', '\n', '<END>']"
master,c8dd9dbb75526dafd45ee71b1de18a5d3e37e160,FinderApplication.java,taskExecutor,"	public Executor taskExecutor() {
		ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
		taskExecutor.setCorePoolSize(8);
		taskExecutor.setMaxPoolSize(16);
		taskExecutor.setQueueCapacity(512);
		taskExecutor.setKeepAliveSeconds(120);
		taskExecutor.setThreadNamePrefix(""async-task-"");
		taskExecutor.setWaitForTasksToCompleteOnShutdown(true);
		taskExecutor.setAllowCoreThreadTimeOut(true);
		taskExecutor.setAwaitTerminationSeconds(60);
		taskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
		taskExecutor.initialize();
		return taskExecutor;
	}",https://www.github.com/jiayaoo3o/18-comic-finder/commit/c8dd9dbb75526dafd45ee71b1de18a5d3e37e160,"	public Executor taskExecutor() {
		ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
		taskExecutor.setCorePoolSize(8);
		taskExecutor.setMaxPoolSize(16);
		taskExecutor.setQueueCapacity(512);
		taskExecutor.setKeepAliveSeconds(120);
		taskExecutor.setThreadNamePrefix(""async-task-"");
		taskExecutor.setWaitForTasksToCompleteOnShutdown(true);
		taskExecutor.setAllowCoreThreadTimeOut(true);
		taskExecutor.setAwaitTerminationSeconds(60);
		taskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
		taskExecutor.initialize();
		return taskExecutor;
	}
","['\t', 'public', ' ', 'Executor', ' ', 'taskExecutor', '(', ')', ' ', '{', '\n', '\t\t', 'ThreadPoolTaskExecutor', ' ', 'taskExecutor', ' ', '=', ' ', 'new', ' ', 'ThreadPoolTaskExecutor', '(', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setCorePoolSize', '(', '8', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setMaxPoolSize', '(', '16', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setQueueCapacity', '(', '512', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setKeepAliveSeconds', '(', '120', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setThreadNamePrefix', '(', '""', 'async-task-', '""', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setWaitForTasksToCompleteOnShutdown', '(', 'true', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setAllowCoreThreadTimeOut', '(', 'true', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setAwaitTerminationSeconds', '(', '60', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'setRejectedExecutionHandler', '(', 'new', ' ', 'ThreadPoolExecutor', '.', 'CallerRunsPolicy', '(', ')', ')', ';', '\n', '\t\t', 'taskExecutor', '.', 'initialize', '(', ')', ';', '\n', '\t\t', 'return', ' ', 'taskExecutor', ';', '\n', '\t', '}', '\n', '<END>']"
master,b40673f43264244eec238ca7c22d16deb97968bb,Aria2.java,start,"    void start() throws BadEnvironmentException, IOException {
        if (env == null)
            throw new BadEnvironmentException(""Missing environment!"");

        reloadEnv();

        String execPath = env.execPath();
        String[] params = env.startArgs();

        currentProcess = execWithParams(true, params);
        new Thread(new Waiter(currentProcess), ""aria2android-waiterThread"").start();
        new Thread(this.inputWatcher = new StreamWatcher(currentProcess.getInputStream()), ""aria2-android-inputWatcherThread"").start();
        new Thread(this.errorWatcher = new StreamWatcher(currentProcess.getErrorStream()), ""aria2-android-errorWatcherThread"").start();

        if (Prefs.getBoolean(Aria2PK.SHOW_PERFORMANCE))
            new Thread(this.monitor = new Monitor(), ""aria2android-monitorThread"").start();

        postMessage(Message.obtain(Message.Type.PROCESS_STARTED, startCommandForLog(execPath, params)));
    }",https://www.github.com/devgianlu/aria2android/commit/b40673f43264244eec238ca7c22d16deb97968bb,"    void start() throws BadEnvironmentException, IOException {
        if (env == null)
            throw new BadEnvironmentException(""Missing environment!"");

        reloadEnv();

        String execPath = env.execPath();
        String[] params = env.startArgs();

        currentProcess = execWithParams(true, params);
        new Thread(new Waiter(currentProcess), ""aria2android-waiterThread"").start();
        new Thread(this.inputWatcher = new StreamWatcher(currentProcess.getInputStream()), ""aria2-android-inputWatcherThread"").start();
        new Thread(this.errorWatcher = new StreamWatcher(currentProcess.getErrorStream()), ""aria2-android-errorWatcherThread"").start();

        if (Prefs.getBoolean(Aria2PK.SHOW_PERFORMANCE))
            new Thread(this.monitor = new Monitor(), ""aria2android-monitorThread"").start();

        postMessage(Message.obtain(Message.Type.PROCESS_STARTED, startCommandForLog(execPath, params)));
    }
","['    ', 'void', ' ', 'start', '(', ')', ' ', 'throws', ' ', 'BadEnvironmentException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'env', ' ', '=', '=', ' ', 'null', ')', '\n', '            ', 'throw', ' ', 'new', ' ', 'BadEnvironmentException', '(', '""', 'Missing environment!', '""', ')', ';', '\n', '\n', '        ', 'reloadEnv', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'execPath', ' ', '=', ' ', 'env', '.', 'execPath', '(', ')', ';', '\n', '        ', 'String', '[', ']', ' ', 'params', ' ', '=', ' ', 'env', '.', 'startArgs', '(', ')', ';', '\n', '\n', '        ', 'currentProcess', ' ', '=', ' ', 'execWithParams', '(', 'true', ',', ' ', 'params', ')', ';', '\n', '        ', 'new', ' ', 'Thread', '(', 'new', ' ', 'Waiter', '(', 'currentProcess', ')', ',', ' ', '""', 'aria2android-waiterThread', '""', ')', '.', 'start', '(', ')', ';', '\n', '        ', 'new', ' ', 'Thread', '(', 'this', '.', 'inputWatcher', ' ', '=', ' ', 'new', ' ', 'StreamWatcher', '(', 'currentProcess', '.', 'getInputStream', '(', ')', ')', ',', ' ', '""', 'aria2-android-inputWatcherThread', '""', ')', '.', 'start', '(', ')', ';', '\n', '        ', 'new', ' ', 'Thread', '(', 'this', '.', 'errorWatcher', ' ', '=', ' ', 'new', ' ', 'StreamWatcher', '(', 'currentProcess', '.', 'getErrorStream', '(', ')', ')', ',', ' ', '""', 'aria2-android-errorWatcherThread', '""', ')', '.', 'start', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'Prefs', '.', 'getBoolean', '(', 'Aria2PK', '.', 'SHOW_PERFORMANCE', ')', ')', '\n', '            ', 'new', ' ', 'Thread', '(', 'this', '.', 'monitor', ' ', '=', ' ', 'new', ' ', 'Monitor', '(', ')', ',', ' ', '""', 'aria2android-monitorThread', '""', ')', '.', 'start', '(', ')', ';', '\n', '\n', '        ', 'postMessage', '(', 'Message', '.', 'obtain', '(', 'Message', '.', 'Type', '.', 'PROCESS_STARTED', ',', ' ', 'startCommandForLog', '(', 'execPath', ',', ' ', 'params', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0a2cd6f9dc0f121d241564ca2d8c77c8704996fa,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        final int finalOffset = correctOffset(offset);
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/0a2cd6f9dc0f121d241564ca2d8c77c8704996fa,"    public final void end() throws IOException {
        super.end();
        final int finalOffset = correctOffset(offset);
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'final', ' ', 'int', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ')', ';', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '        ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'posIncrAtt', '.', 'getPositionIncrement', '(', ')', ' ', '+', ' ', 'skippedPositions', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6bb11a7aab810726684e7dab2ab7cdff32f9ce83,CertificadoService.java,dataValidade,"    private static Date dataValidade(X509Certificate certificate) {
        return Optional.ofNullable(certificate.getNotAfter())
                .orElse(Date.from(LocalDate.of(2020, 1, 1).atStartOfDay(ZoneId.systemDefault()).toInstant()));",https://www.github.com/samuel-oliveira/java_certificado/commit/6bb11a7aab810726684e7dab2ab7cdff32f9ce83,"    private static Date dataValidade(X509Certificate certificate) {
        return Optional.ofNullable(certificate.getNotAfter())
                .orElse(Date.from(LocalDate.of(2020, 1, 1).atStartOfDay(ZoneId.systemDefault()).toInstant()));
","['    ', 'private', ' ', 'static', ' ', 'Date', ' ', 'dataValidade', '(', 'X509Certificate', ' ', 'certificate', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Optional', '.', 'ofNullable', '(', 'certificate', '.', 'getNotAfter', '(', ')', ')', '\n', '                ', '.', 'orElse', '(', 'Date', '.', 'from', '(', 'LocalDate', '.', 'of', '(', '2020', ',', ' ', '1', ',', ' ', '1', ')', '.', 'atStartOfDay', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toInstant', '(', ')', ')', ')', ';', '\n', '<END>']"
master,90f61b32b046d39f4d6785b77b94b9c13bcfd646,MaterialMenu.java,setColor,"    public void setColor(int color);

    /**
     * Set duration of transformation animations
     *
     * @param duration new animation duration
     */
    public void setTransformationDuration(int duration);

    /**
     * Set duration of pressed state circle animation
     *
     * @param duration new animation duration
     */
    public void setPressedDuration(int duration);

    /**
     * Set interpolator for transformation animations
     *
     * @param interpolator new interpolator
     */
    public void setInterpolator(Interpolator interpolator);

    /**
     * Enable RTL layout. Flips all icons horizontally
     *
     * @param rtlEnabled true to enable RTL layout
     */
    public void setRTLEnabled(boolean rtlEnabled);

    /**
     * Manually set a transformation value for an {@link com.balysv.materialmenu.MaterialMenuDrawable.AnimationState}
     *
     * @param animationState state to set value in
     * @param value          between {@link com.balysv.materialmenu.MaterialMenuDrawable#TRANSFORMATION_START} and
     *                       {@link com.balysv.materialmenu.MaterialMenuDrawable#TRANSFORMATION_END}.
     */
    public void setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);

    /**
     * @return {@link MaterialMenuDrawable} to be used for the menu
     */
    public MaterialMenuDrawable getDrawable();
}",https://www.github.com/balysv/material-menu/commit/90f61b32b046d39f4d6785b77b94b9c13bcfd646,"    public void setColor(int color);

    
    public void setTransformationDuration(int duration);

    
    public void setPressedDuration(int duration);

    
    public void setInterpolator(Interpolator interpolator);

    
    public void setRTLEnabled(boolean rtlEnabled);

    
    public void setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);

    
    public MaterialMenuDrawable getDrawable();
}
","['    ', 'public', ' ', 'void', ' ', 'setColor', '(', 'int', ' ', 'color', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setTransformationDuration', '(', 'int', ' ', 'duration', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setPressedDuration', '(', 'int', ' ', 'duration', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setInterpolator', '(', 'Interpolator', ' ', 'interpolator', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setRTLEnabled', '(', 'boolean', ' ', 'rtlEnabled', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setTransformationOffset', '(', 'MaterialMenuDrawable', '.', 'AnimationState', ' ', 'animationState', ',', ' ', 'float', ' ', 'value', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'MaterialMenuDrawable', ' ', 'getDrawable', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,fc3f64d4e0d64f7cf2dccb68db65b5421a962695,MaterialMenuDrawable.java,initAnimations,"    private void initAnimations(int transformDuration, int pressedDuration) {
        transformation = ObjectAnimator.ofFloat(this, transformationProperty, 0);
        transformation.setInterpolator(new DecelerateInterpolator(3));
        transformation.setDuration(transformDuration);
        transformation.addListener(new SimpleAnimatorListener() {
            @Override public void onAnimationEnd(Animator animation) {
                transformationRunning = false;
                setIconState(animatingIconState);
            }
        });


        pressedCircle = ObjectAnimator.ofFloat(this, pressedProgressProperty, 0, 0);
        pressedCircle.setDuration(pressedDuration);
        pressedCircle.setInterpolator(new DecelerateInterpolator());
        pressedCircle.addListener(new SimpleAnimatorListener() {
            @Override public void onAnimationEnd(Animator animation) {",https://www.github.com/balysv/material-menu/commit/fc3f64d4e0d64f7cf2dccb68db65b5421a962695,"    private void initAnimations(int transformDuration, int pressedDuration) {
        transformation = ObjectAnimator.ofFloat(this, transformationProperty, 0);
        transformation.setInterpolator(new DecelerateInterpolator(3));
        transformation.setDuration(transformDuration);
        transformation.addListener(new SimpleAnimatorListener() {
            @Override public void onAnimationEnd(Animator animation) {
                transformationRunning = false;
                setIconState(animatingIconState);
            }
        });


        pressedCircle = ObjectAnimator.ofFloat(this, pressedProgressProperty, 0, 0);
        pressedCircle.setDuration(pressedDuration);
        pressedCircle.setInterpolator(new DecelerateInterpolator());
        pressedCircle.addListener(new SimpleAnimatorListener() {
            @Override public void onAnimationEnd(Animator animation) {
","['    ', 'private', ' ', 'void', ' ', 'initAnimations', '(', 'int', ' ', 'transformDuration', ',', ' ', 'int', ' ', 'pressedDuration', ')', ' ', '{', '\n', '        ', 'transformation', ' ', '=', ' ', 'ObjectAnimator', '.', 'ofFloat', '(', 'this', ',', ' ', 'transformationProperty', ',', ' ', '0', ')', ';', '\n', '        ', 'transformation', '.', 'setInterpolator', '(', 'new', ' ', 'DecelerateInterpolator', '(', '3', ')', ')', ';', '\n', '        ', 'transformation', '.', 'setDuration', '(', 'transformDuration', ')', ';', '\n', '        ', 'transformation', '.', 'addListener', '(', 'new', ' ', 'SimpleAnimatorListener', '(', ')', ' ', '{', '\n', '            ', '@Override', ' ', 'public', ' ', 'void', ' ', 'onAnimationEnd', '(', 'Animator', ' ', 'animation', ')', ' ', '{', '\n', '                ', 'transformationRunning', ' ', '=', ' ', 'false', ';', '\n', '                ', 'setIconState', '(', 'animatingIconState', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ')', ';', '\n', '\n', '\n', '        ', 'pressedCircle', ' ', '=', ' ', 'ObjectAnimator', '.', 'ofFloat', '(', 'this', ',', ' ', 'pressedProgressProperty', ',', ' ', '0', ',', ' ', '0', ')', ';', '\n', '        ', 'pressedCircle', '.', 'setDuration', '(', 'pressedDuration', ')', ';', '\n', '        ', 'pressedCircle', '.', 'setInterpolator', '(', 'new', ' ', 'DecelerateInterpolator', '(', ')', ')', ';', '\n', '        ', 'pressedCircle', '.', 'addListener', '(', 'new', ' ', 'SimpleAnimatorListener', '(', ')', ' ', '{', '\n', '            ', '@Override', ' ', 'public', ' ', 'void', ' ', 'onAnimationEnd', '(', 'Animator', ' ', 'animation', ')', ' ', '{', '\n', '<END>']"
master,1ef3e9f79926078183f77bdf371d7dcc5e915f5d,DocumentoUtil.java,processaCPF,"    private static Optional<String> processaCPF(String extensionValue) {
        int cpfStartIndex = extensionValue.indexOf(CPF_INDICATOR);
        if (cpfStartIndex != -1) {
            cpfStartIndex += CPF_OFFSET;
            int cpfEndIndex = extensionValue.indexOf(CPF_TERMINATOR, cpfStartIndex);
            if (cpfEndIndex != -1) {
                String cpf = extrairNumeros(extensionValue.substring(cpfStartIndex, cpfStartIndex + CPF_LENGTH));
                return validarDocumento(cpf);
            }
        }
        return Optional.empty();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/1ef3e9f79926078183f77bdf371d7dcc5e915f5d,"    private static Optional<String> processaCPF(String extensionValue) {
        int cpfStartIndex = extensionValue.indexOf(CPF_INDICATOR);
        if (cpfStartIndex != -1) {
            cpfStartIndex += CPF_OFFSET;
            int cpfEndIndex = extensionValue.indexOf(CPF_TERMINATOR, cpfStartIndex);
            if (cpfEndIndex != -1) {
                String cpf = extrairNumeros(extensionValue.substring(cpfStartIndex, cpfStartIndex + CPF_LENGTH));
                return validarDocumento(cpf);
            }
        }
        return Optional.empty();
    }
","['    ', 'private', ' ', 'static', ' ', 'Optional', '<', 'String', '>', ' ', 'processaCPF', '(', 'String', ' ', 'extensionValue', ')', ' ', '{', '\n', '        ', 'int', ' ', 'cpfStartIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', 'CPF_INDICATOR', ')', ';', '\n', '        ', 'if', ' ', '(', 'cpfStartIndex', ' ', '!', '=', ' ', '-', '1', ')', ' ', '{', '\n', '            ', 'cpfStartIndex', ' ', '+', '=', ' ', 'CPF_OFFSET', ';', '\n', '            ', 'int', ' ', 'cpfEndIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', 'CPF_TERMINATOR', ',', ' ', 'cpfStartIndex', ')', ';', '\n', '            ', 'if', ' ', '(', 'cpfEndIndex', ' ', '!', '=', ' ', '-', '1', ')', ' ', '{', '\n', '                ', 'String', ' ', 'cpf', ' ', '=', ' ', 'extrairNumeros', '(', 'extensionValue', '.', 'substring', '(', 'cpfStartIndex', ',', ' ', 'cpfStartIndex', ' ', '+', ' ', 'CPF_LENGTH', ')', ')', ';', '\n', '                ', 'return', ' ', 'validarDocumento', '(', 'cpf', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'Optional', '.', 'empty', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d1b6524faa2d0cc8f9a52bfb0117f97fbcbd88fe,CasbinProperties.java,isWatcherTxSupport,"    public boolean isWatcherTxSupport() {
        return watcherTxSupport;
    }",https://www.github.com/jcasbin/casbin-spring-boot-starter/commit/d1b6524faa2d0cc8f9a52bfb0117f97fbcbd88fe,"    public boolean isWatcherTxSupport() {
        return watcherTxSupport;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isWatcherTxSupport', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'watcherTxSupport', ';', '\n', '    ', '}', '\n', '<END>']"
master,72d77ab154293e7d9549c91ba85f7e253559fc7b,MaterialRippleLayout.java,ripplePersistent,"        public RippleBuilder ripplePersistent(boolean persistent) {
            this.ripplePersistent = persistent;
            return this;
        }",https://www.github.com/balysv/material-ripple/commit/72d77ab154293e7d9549c91ba85f7e253559fc7b,"        public RippleBuilder ripplePersistent(boolean persistent) {
            this.ripplePersistent = persistent;
            return this;
        }
","['        ', 'public', ' ', 'RippleBuilder', ' ', 'ripplePersistent', '(', 'boolean', ' ', 'persistent', ')', ' ', '{', '\n', '            ', 'this', '.', 'ripplePersistent', ' ', '=', ' ', 'persistent', ';', '\n', '            ', 'return', ' ', 'this', ';', '\n', '        ', '}', '\n', '<END>']"
master,90032a8a72ff416a1a052dd09b6e45e66c8fe425,KmsEncryptionTest.java,testPropertyHasBeenDecrypted,"    public void testPropertyHasBeenDecrypted() {

        assertThat(decryptedSecret).isEqualTo(MockAwsKmsConfig.PLAINTEXT);

        final DecryptRequest decryptRequest = new DecryptRequest();
        decryptRequest.setCiphertextBlob(CIPHER_TEXT_BLOB);
        decryptRequest.setEncryptionAlgorithm(SYMMETRIC_DEFAULT.toString());
        verify(mockKms, atLeastOnce()).decrypt(decryptRequest);
    }",https://www.github.com/zalando/spring-cloud-config-aws-kms/commit/90032a8a72ff416a1a052dd09b6e45e66c8fe425,"    public void testPropertyHasBeenDecrypted() {

        assertThat(decryptedSecret).isEqualTo(MockAwsKmsConfig.PLAINTEXT);

        final DecryptRequest decryptRequest = new DecryptRequest();
        decryptRequest.setCiphertextBlob(CIPHER_TEXT_BLOB);
        decryptRequest.setEncryptionAlgorithm(SYMMETRIC_DEFAULT.toString());
        verify(mockKms, atLeastOnce()).decrypt(decryptRequest);
    }
","['    ', 'public', ' ', 'void', ' ', 'testPropertyHasBeenDecrypted', '(', ')', ' ', '{', '\n', '\n', '        ', 'assertThat', '(', 'decryptedSecret', ')', '.', 'isEqualTo', '(', 'MockAwsKmsConfig', '.', 'PLAINTEXT', ')', ';', '\n', '\n', '        ', 'final', ' ', 'DecryptRequest', ' ', 'decryptRequest', ' ', '=', ' ', 'new', ' ', 'DecryptRequest', '(', ')', ';', '\n', '        ', 'decryptRequest', '.', 'setCiphertextBlob', '(', 'CIPHER_TEXT_BLOB', ')', ';', '\n', '        ', 'decryptRequest', '.', 'setEncryptionAlgorithm', '(', 'SYMMETRIC_DEFAULT', '.', 'toString', '(', ')', ')', ';', '\n', '        ', 'verify', '(', 'mockKms', ',', ' ', 'atLeastOnce', '(', ')', ')', '.', 'decrypt', '(', 'decryptRequest', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,52d802f14725a27dafc4005d6e484ff2638482bb,FastTextWrapper.java,getLabel,"        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


// #endif


// Parsed from fasttext_wrapper_javacpp.h

// Added <numeric> since VS 14.0 complains about missing std::iota
// #include <numeric>
// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/productquantizer.cc""
// #include ""fastText/src/qmatrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/52d802f14725a27dafc4005d6e484ff2638482bb,"        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }






















}
","['        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabel', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getLr', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,addToc,"	public void addToc() {
		// TODO Auto-generated method stub
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	/**
	 * TODO save file and returns
	 * 
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public void addToc() {
		
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ' ', '+', ' ', 'path', ')', ';', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'sb', '.', 'toString', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'GlobalOption', ' ', 'option', ')', ' ', '{', '\n', '\t\t', 'addParam', '(', 'new', ' ', 'Param', '(', 'option', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n', '<END>']"
master,8317a776b91f7a2141ddd459d7a097ac210896e5,MainActivity.java,validate,"            public void validate(String text) throws SuperEditText.InvalidInputException {
                if (!useConfig.isChecked()) return;

                File file = new File(text);
                if (file.exists() && file.isFile()) {
                    if (file.canRead()) {",https://www.github.com/devgianlu/aria2android/commit/8317a776b91f7a2141ddd459d7a097ac210896e5,"            public void validate(String text) throws SuperEditText.InvalidInputException {
                if (!useConfig.isChecked()) return;

                File file = new File(text);
                if (file.exists() && file.isFile()) {
                    if (file.canRead()) {
","['            ', 'public', ' ', 'void', ' ', 'validate', '(', 'String', ' ', 'text', ')', ' ', 'throws', ' ', 'SuperEditText', '.', 'InvalidInputException', ' ', '{', '\n', '                ', 'if', ' ', '(', '!', 'useConfig', '.', 'isChecked', '(', ')', ')', ' ', 'return', ';', '\n', '\n', '                ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'text', ')', ';', '\n', '                ', 'if', ' ', '(', 'file', '.', 'exists', '(', ')', ' ', '&', '&', ' ', 'file', '.', 'isFile', '(', ')', ')', ' ', '{', '\n', '                    ', 'if', ' ', '(', 'file', '.', 'canRead', '(', ')', ')', ' ', '{', '\n', '<END>']"
master,14236f0cffb21f15e4358d4ae7daf2299604196a,Aria2Service.java,onBind,"    public IBinder onBind(Intent intent) {
        if (messenger == null) {
            serviceThread.start();
            broadcastManager = LocalBroadcastManager.getInstance(this);
            notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
            messenger = new Messenger(new LocalHandler(this));
            aria2 = Aria2.get();
            aria2.addListener(this);
        }

        return messenger.getBinder();
    }",https://www.github.com/devgianlu/aria2android/commit/14236f0cffb21f15e4358d4ae7daf2299604196a,"    public IBinder onBind(Intent intent) {
        if (messenger == null) {
            serviceThread.start();
            broadcastManager = LocalBroadcastManager.getInstance(this);
            notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
            messenger = new Messenger(new LocalHandler(this));
            aria2 = Aria2.get();
            aria2.addListener(this);
        }

        return messenger.getBinder();
    }
","['    ', 'public', ' ', 'IBinder', ' ', 'onBind', '(', 'Intent', ' ', 'intent', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'messenger', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'serviceThread', '.', 'start', '(', ')', ';', '\n', '            ', 'broadcastManager', ' ', '=', ' ', 'LocalBroadcastManager', '.', 'getInstance', '(', 'this', ')', ';', '\n', '            ', 'notificationManager', ' ', '=', ' ', '(', 'NotificationManager', ')', ' ', 'getSystemService', '(', 'NOTIFICATION_SERVICE', ')', ';', '\n', '            ', 'messenger', ' ', '=', ' ', 'new', ' ', 'Messenger', '(', 'new', ' ', 'LocalHandler', '(', 'this', ')', ')', ';', '\n', '            ', 'aria2', ' ', '=', ' ', 'Aria2', '.', 'get', '(', ')', ';', '\n', '            ', 'aria2', '.', 'addListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'messenger', '.', 'getBinder', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,listaCertificadosMac,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipo(Certificado.MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey != null) {
                    Certificado cert = new Certificado();
                    cert.setNome(aliasKey);
                    cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
                    cert.setTipo(Certificado.MAC);
                    cert.setSenha("""");
                    Date dataValidade = DataValidade(cert);
                    if (dataValidade == null) {
                        cert.setNome(""(INVALIDO)"" + aliasKey);
                        cert.setVencimento(LocalDate.of(2000, 1, 1));
                        cert.setDiasRestantes(0L);
                        cert.setValido(false);
                    } else {
                        cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        cert.setDiasRestantes(diasRestantes(cert));
                        cert.setValido(valido(cert));
                    }

                    listaCert.add(cert);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
        }

        return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipo(Certificado.MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey != null) {
                    Certificado cert = new Certificado();
                    cert.setNome(aliasKey);
                    cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
                    cert.setTipo(Certificado.MAC);
                    cert.setSenha("""");
                    Date dataValidade = DataValidade(cert);
                    if (dataValidade == null) {
                        cert.setNome(""(INVALIDO)"" + aliasKey);
                        cert.setVencimento(LocalDate.of(2000, 1, 1));
                        cert.setDiasRestantes(0L);
                        cert.setValido(false);
                    } else {
                        cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        cert.setDiasRestantes(diasRestantes(cert));
                        cert.setValido(valido(cert));
                    }

                    listaCert.add(cert);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
        }

        return listaCert;
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosMac', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setTipo', '(', 'Certificado', '.', 'MAC', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '                    ', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '                    ', 'cert', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'cert', ',', ' ', 'ks', ')', ')', ';', '\n', '                    ', 'cert', '.', 'setTipo', '(', 'Certificado', '.', 'MAC', ')', ';', '\n', '                    ', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '                    ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'DataValidade', '(', 'cert', ')', ';', '\n', '                    ', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                        ', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', ' ', 'aliasKey', ')', ';', '\n', '                        ', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '                        ', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '                    ', '}', ' ', 'else', ' ', '{', '\n', '                        ', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '                    ', '}', '\n', '\n', '                    ', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', ' ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,2a25ac97309912a610f6c78e657b51a7d4ad03de,AsymmetricEncryptionMissingKeyIdTest.java,testEncryptFails,"    void testEncryptFails() {
        try {
            textEncryptor.encrypt(""Hello"");
            failBecauseExceptionWasNotThrown(RuntimeException.class);
        } catch (Exception e) {
            assertThat(e).hasMessageContaining(""kmsKeyId must not be blank"");
        }

        verify(mockKms, never()).encrypt(any(EncryptRequest.class));
    }",https://www.github.com/zalando/spring-cloud-config-aws-kms/commit/2a25ac97309912a610f6c78e657b51a7d4ad03de,"    void testEncryptFails() {
        try {
            textEncryptor.encrypt(""Hello"");
            failBecauseExceptionWasNotThrown(RuntimeException.class);
        } catch (Exception e) {
            assertThat(e).hasMessageContaining(""kmsKeyId must not be blank"");
        }

        verify(mockKms, never()).encrypt(any(EncryptRequest.class));
    }
","['    ', 'void', ' ', 'testEncryptFails', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'textEncryptor', '.', 'encrypt', '(', '""', 'Hello', '""', ')', ';', '\n', '            ', 'failBecauseExceptionWasNotThrown', '(', 'RuntimeException', '.', 'class', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'assertThat', '(', 'e', ')', '.', 'hasMessageContaining', '(', '""', 'kmsKeyId must not be blank', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'verify', '(', 'mockKms', ',', ' ', 'never', '(', ')', ')', '.', 'encrypt', '(', 'any', '(', 'EncryptRequest', '.', 'class', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2330c91287047279a081e03db8a75a8e32be7076,Params.java,add,"    public void add(Param param, Param... params) {
        this.params.add(param);
        this.params.addAll(Arrays.asList(params));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public void add(Param param, Param... params) {
        this.params.add(param);
        this.params.addAll(Arrays.asList(params));
    }
","['    ', 'public', ' ', 'void', ' ', 'add', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '        ', 'this', '.', 'params', '.', 'addAll', '(', 'Arrays', '.', 'asList', '(', 'params', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4aeacded77450bd33261438ed967206a4b7f85ae,TaskService.java,process,"    public void process(String photoPath, Uni<Tuple2<String, Buffer>> tempFileTuple) {
        tempFileTuple.subscribe()
                .with(tuple2 -> this.write(tuple2.getItem1(), tuple2.getItem2())",https://www.github.com/jiayaoo3o/18-comic-finder/commit/4aeacded77450bd33261438ed967206a4b7f85ae,"    public void process(String photoPath, Uni<Tuple2<String, Buffer>> tempFileTuple) {
        tempFileTuple.subscribe()
                .with(tuple2 -> this.write(tuple2.getItem1(), tuple2.getItem2())
","['    ', 'public', ' ', 'void', ' ', 'process', '(', 'String', ' ', 'photoPath', ',', ' ', 'Uni', '<', 'Tuple2', '<', 'String', ',', ' ', 'Buffer', '>', '>', ' ', 'tempFileTuple', ')', ' ', '{', '\n', '        ', 'tempFileTuple', '.', 'subscribe', '(', ')', '\n', '                ', '.', 'with', '(', 'tuple2', ' ', '-', '>', ' ', 'this', '.', 'write', '(', 'tuple2', '.', 'getItem1', '(', ')', ',', ' ', 'tuple2', '.', 'getItem2', '(', ')', ')', '\n', '<END>']"
master,90032a8a72ff416a1a052dd09b6e45e66c8fe425,KmsTextEncryptorTest.java,testDecrypt,"    public void testDecrypt() {
        assertThat(textEncryptor.decrypt(BASE64_CIPHER_TEXT)).isEqualTo(PLAINTEXT);
        verify(mockKms).decrypt(eq(expectedDecryptRequest));
    }",https://www.github.com/zalando/spring-cloud-config-aws-kms/commit/90032a8a72ff416a1a052dd09b6e45e66c8fe425,"    public void testDecrypt() {
        assertThat(textEncryptor.decrypt(BASE64_CIPHER_TEXT)).isEqualTo(PLAINTEXT);
        verify(mockKms).decrypt(eq(expectedDecryptRequest));
    }
","['    ', 'public', ' ', 'void', ' ', 'testDecrypt', '(', ')', ' ', '{', '\n', '        ', 'assertThat', '(', 'textEncryptor', '.', 'decrypt', '(', 'BASE64_CIPHER_TEXT', ')', ')', '.', 'isEqualTo', '(', 'PLAINTEXT', ')', ';', '\n', '        ', 'verify', '(', 'mockKms', ')', '.', 'decrypt', '(', 'eq', '(', 'expectedDecryptRequest', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3a00764dd4eb4f8a321a38a235b3de7589090eb6,RoundImageView.java,drawRightUp,"    private void drawRightUp(Canvas canvas) {
        Path path = new Path();
        path.moveTo(getWidth(), roundHeight);
        path.lineTo(getWidth(), 0);
        path.lineTo(getWidth() - roundWidth, 0);
        path.arcTo(new RectF(getWidth() - roundWidth * 2, 0, getWidth(), 0 + roundHeight * 2), -90, 90);
        path.close();
        canvas.drawPath(path, paint);
    }",https://www.github.com/virtualvivek/blurshadowimageview/commit/3a00764dd4eb4f8a321a38a235b3de7589090eb6,"    private void drawRightUp(Canvas canvas) {
        Path path = new Path();
        path.moveTo(getWidth(), roundHeight);
        path.lineTo(getWidth(), 0);
        path.lineTo(getWidth() - roundWidth, 0);
        path.arcTo(new RectF(getWidth() - roundWidth * 2, 0, getWidth(), 0 + roundHeight * 2), -90, 90);
        path.close();
        canvas.drawPath(path, paint);
    }
","['    ', 'private', ' ', 'void', ' ', 'drawRightUp', '(', 'Canvas', ' ', 'canvas', ')', ' ', '{', '\n', '        ', 'Path', ' ', 'path', ' ', '=', ' ', 'new', ' ', 'Path', '(', ')', ';', '\n', '        ', 'path', '.', 'moveTo', '(', 'getWidth', '(', ')', ',', ' ', 'roundHeight', ')', ';', '\n', '        ', 'path', '.', 'lineTo', '(', 'getWidth', '(', ')', ',', ' ', '0', ')', ';', '\n', '        ', 'path', '.', 'lineTo', '(', 'getWidth', '(', ')', ' ', '-', ' ', 'roundWidth', ',', ' ', '0', ')', ';', '\n', '        ', 'path', '.', 'arcTo', '(', 'new', ' ', 'RectF', '(', 'getWidth', '(', ')', ' ', '-', ' ', 'roundWidth', ' ', '*', ' ', '2', ',', ' ', '0', ',', ' ', 'getWidth', '(', ')', ',', ' ', '0', ' ', '+', ' ', 'roundHeight', ' ', '*', ' ', '2', ')', ',', ' ', '-', '90', ',', ' ', '90', ')', ';', '\n', '        ', 'path', '.', 'close', '(', ')', ';', '\n', '        ', 'canvas', '.', 'drawPath', '(', 'path', ',', ' ', 'paint', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,52d802f14725a27dafc4005d6e484ff2638482bb,FastTextWrapper.java,size,"    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @StdString BytePointer get(@Cast(""size_t"") long i);
    public native StringVector put(@Cast(""size_t"") long i, BytePointer value);
    @ValueSetter @Index public native StringVector put(@Cast(""size_t"") long i, @StdString String value);

    public StringVector put(BytePointer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }

    public StringVector put(String ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name(""std::vector<fasttext::real>"") public static class RealVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RealVector(Pointer p) { super(p); }
    public RealVector(float ... array) { this(array.length); put(array); }
    public RealVector()       { allocate();  }
    public RealVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast(""size_t"") long n);
    public native @Name(""operator="") @ByRef RealVector put(@ByRef RealVector x);

    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @ByRef float get(@Cast(""size_t"") long i);
    public native RealVector put(@Cast(""size_t"") long i, float value);

    public RealVector put(float ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name(""std::vector<std::pair<fasttext::real,std::string> >"") public static class FloatStringPairVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatStringPairVector(Pointer p) { super(p); }
    public FloatStringPairVector(float[] firstValue, BytePointer[] secondValue) { this(Math.min(firstValue.length, secondValue.length)); put(firstValue, secondValue); }
    public FloatStringPairVector(float[] firstValue, String[] secondValue) { this(Math.min(firstValue.length, secondValue.length)); put(firstValue, secondValue); }
    public FloatStringPairVector()       { allocate();  }
    public FloatStringPairVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast(""size_t"") long n);
    public native @Name(""operator="") @ByRef FloatStringPairVector put(@ByRef FloatStringPairVector x);

    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @ByRef float first(@Cast(""size_t"") long i); public native FloatStringPairVector first(@Cast(""size_t"") long i, float first);
    @Index public native @StdString BytePointer second(@Cast(""size_t"") long i);  public native FloatStringPairVector second(@Cast(""size_t"") long i, BytePointer second);
    @MemberSetter @Index public native FloatStringPairVector second(@Cast(""size_t"") long i, @StdString String second);

    public FloatStringPairVector put(float[] firstValue, BytePointer[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }

    public FloatStringPairVector put(float[] firstValue, String[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,std::string>"") public static class FloatStringPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatStringPair(Pointer p) { super(p); }
    public FloatStringPair(float firstValue, BytePointer secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair(float firstValue, String secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

// Parsed from fasttext_wrapper.h

// #ifndef FASTTEXT_WRAPPER_H
// #define FASTTEXT_WRAPPER_H

// #include ""fastText/src/fasttext.h""
// #include ""fasttext_wrapper_misc.h""

/**
 * FastText's wrapper
 */

    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public FastTextApi(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        // We don't make runCmd() a static method so that Loader.load() is always be called in FastTextApi().
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        // Model unloading is not available in fastText C++. This method is added since
        // Java's GC doesn't collect memory allocated by native function calls.
        public native void unloadModel();
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        // TODO: Check if model was loaded
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


// #endif


// Parsed from fasttext_wrapper_javacpp.h

// Added <numeric> since VS 14.0 complains about missing std::iota
// #include <numeric>
// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/productquantizer.cc""
// #include ""fastText/src/qmatrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/52d802f14725a27dafc4005d6e484ff2638482bb,"    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @StdString BytePointer get(@Cast(""size_t"") long i);
    public native StringVector put(@Cast(""size_t"") long i, BytePointer value);
    @ValueSetter @Index public native StringVector put(@Cast(""size_t"") long i, @StdString String value);

    public StringVector put(BytePointer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }

    public StringVector put(String ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name(""std::vector<fasttext::real>"") public static class RealVector extends Pointer {
    static { Loader.load(); }
    
    public RealVector(Pointer p) { super(p); }
    public RealVector(float ... array) { this(array.length); put(array); }
    public RealVector()       { allocate();  }
    public RealVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast(""size_t"") long n);
    public native @Name(""operator="") @ByRef RealVector put(@ByRef RealVector x);

    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @ByRef float get(@Cast(""size_t"") long i);
    public native RealVector put(@Cast(""size_t"") long i, float value);

    public RealVector put(float ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name(""std::vector<std::pair<fasttext::real,std::string> >"") public static class FloatStringPairVector extends Pointer {
    static { Loader.load(); }
    
    public FloatStringPairVector(Pointer p) { super(p); }
    public FloatStringPairVector(float[] firstValue, BytePointer[] secondValue) { this(Math.min(firstValue.length, secondValue.length)); put(firstValue, secondValue); }
    public FloatStringPairVector(float[] firstValue, String[] secondValue) { this(Math.min(firstValue.length, secondValue.length)); put(firstValue, secondValue); }
    public FloatStringPairVector()       { allocate();  }
    public FloatStringPairVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast(""size_t"") long n);
    public native @Name(""operator="") @ByRef FloatStringPairVector put(@ByRef FloatStringPairVector x);

    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @ByRef float first(@Cast(""size_t"") long i); public native FloatStringPairVector first(@Cast(""size_t"") long i, float first);
    @Index public native @StdString BytePointer second(@Cast(""size_t"") long i);  public native FloatStringPairVector second(@Cast(""size_t"") long i, BytePointer second);
    @MemberSetter @Index public native FloatStringPairVector second(@Cast(""size_t"") long i, @StdString String second);

    public FloatStringPairVector put(float[] firstValue, BytePointer[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }

    public FloatStringPairVector put(float[] firstValue, String[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,std::string>"") public static class FloatStringPair extends Pointer {
    static { Loader.load(); }
    
    public FloatStringPair(Pointer p) { super(p); }
    public FloatStringPair(float firstValue, BytePointer secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair(float firstValue, String secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}











    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        
        public FastTextApi(Pointer p) { super(p); }
        
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        
        
        public native void unloadModel();
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }






















}
","['    ', 'public', ' ', 'native', ' ', 'long', ' ', 'size', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', 'void', ' ', 'resize', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'n', ')', ';', '\n', '\n', '    ', '@Index', ' ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'get', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', 'StringVector', ' ', 'put', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', 'BytePointer', ' ', 'value', ')', ';', '\n', '    ', '@ValueSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'StringVector', ' ', 'put', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', '@StdString', ' ', 'String', ' ', 'value', ')', ';', '\n', '\n', '    ', 'public', ' ', 'StringVector', ' ', 'put', '(', 'BytePointer', ' ', '.', '.', '.', ' ', 'array', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'size', '(', ')', ' ', '!', '=', ' ', 'array', '.', 'length', ')', ' ', '{', ' ', 'resize', '(', 'array', '.', 'length', ')', ';', ' ', '}', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'array', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'put', '(', 'i', ',', ' ', 'array', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'StringVector', ' ', 'put', '(', 'String', ' ', '.', '.', '.', ' ', 'array', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'size', '(', ')', ' ', '!', '=', ' ', 'array', '.', 'length', ')', ' ', '{', ' ', 'resize', '(', 'array', '.', 'length', ')', ';', ' ', '}', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'array', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'put', '(', 'i', ',', ' ', 'array', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@Name', '(', '""', 'std::vector<fasttext::real>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'RealVector', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'RealVector', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'RealVector', '(', 'float', ' ', '.', '.', '.', ' ', 'array', ')', ' ', '{', ' ', 'this', '(', 'array', '.', 'length', ')', ';', ' ', 'put', '(', 'array', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'RealVector', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'public', ' ', 'RealVector', '(', 'long', ' ', 'n', ')', ' ', '{', ' ', 'allocate', '(', 'n', ')', ';', ' ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'n', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'RealVector', ' ', 'put', '(', '@ByRef', ' ', 'RealVector', ' ', 'x', ')', ';', '\n', '\n', '    ', 'public', ' ', 'native', ' ', 'long', ' ', 'size', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', 'void', ' ', 'resize', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'n', ')', ';', '\n', '\n', '    ', '@Index', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'get', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', 'RealVector', ' ', 'put', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', 'float', ' ', 'value', ')', ';', '\n', '\n', '    ', 'public', ' ', 'RealVector', ' ', 'put', '(', 'float', ' ', '.', '.', '.', ' ', 'array', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'size', '(', ')', ' ', '!', '=', ' ', 'array', '.', 'length', ')', ' ', '{', ' ', 'resize', '(', 'array', '.', 'length', ')', ';', ' ', '}', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'array', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'put', '(', 'i', ',', ' ', 'array', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@Name', '(', '""', 'std::vector<std::pair<fasttext::real,std::string> >', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FloatStringPairVector', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'FloatStringPairVector', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPairVector', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'BytePointer', '[', ']', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', 'Math', '.', 'min', '(', 'firstValue', '.', 'length', ',', ' ', 'secondValue', '.', 'length', ')', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPairVector', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'String', '[', ']', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', 'Math', '.', 'min', '(', 'firstValue', '.', 'length', ',', ' ', 'secondValue', '.', 'length', ')', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPairVector', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'public', ' ', 'FloatStringPairVector', '(', 'long', ' ', 'n', ')', ' ', '{', ' ', 'allocate', '(', 'n', ')', ';', ' ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'n', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'FloatStringPairVector', ' ', 'put', '(', '@ByRef', ' ', 'FloatStringPairVector', ' ', 'x', ')', ';', '\n', '\n', '    ', 'public', ' ', 'native', ' ', 'long', ' ', 'size', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', 'void', ' ', 'resize', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'n', ')', ';', '\n', '\n', '    ', '@Index', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ')', ';', ' ', 'public', ' ', 'native', ' ', 'FloatStringPairVector', ' ', 'first', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', 'float', ' ', 'first', ')', ';', '\n', '    ', '@Index', ' ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'second', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ')', ';', '  ', 'public', ' ', 'native', ' ', 'FloatStringPairVector', ' ', 'second', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', 'BytePointer', ' ', 'second', ')', ';', '\n', '    ', '@MemberSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'FloatStringPairVector', ' ', 'second', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', '@StdString', ' ', 'String', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'FloatStringPairVector', ' ', 'put', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'BytePointer', '[', ']', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'firstValue', '.', 'length', ' ', '&', '&', ' ', 'i', ' ', '<', ' ', 'secondValue', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'first', '(', 'i', ',', ' ', 'firstValue', '[', 'i', ']', ')', ';', '\n', '            ', 'second', '(', 'i', ',', ' ', 'secondValue', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'FloatStringPairVector', ' ', 'put', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'String', '[', ']', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'firstValue', '.', 'length', ' ', '&', '&', ' ', 'i', ' ', '<', ' ', 'secondValue', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'first', '(', 'i', ',', ' ', 'firstValue', '[', 'i', ']', ')', ';', '\n', '            ', 'second', '(', 'i', ',', ' ', 'secondValue', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@NoOffset', ' ', '@Name', '(', '""', 'std::pair<fasttext::real,std::string>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FloatStringPair', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'BytePointer', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'String', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'FloatStringPair', ' ', 'put', '(', '@ByRef', ' ', 'FloatStringPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', 'BytePointer', ' ', 'second', ')', ';', '\n', '    ', '@MemberSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', '@StdString', ' ', 'String', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'BytePointer', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'String', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@NoOffset', ' ', '@Name', '(', '""', 'std::pair<fasttext::real,int32_t>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'DoubleIntPair', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'DoubleIntPair', ' ', 'put', '(', '@ByRef', ' ', 'DoubleIntPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', 'int', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'second', '(', 'int', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'DoubleIntPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    ', '@Namespace', '(', '""', 'FastTextWrapper', '""', ')', ' ', '@NoOffset', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FastTextApi', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '        ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'long', ' ', 'size', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocateArray', '(', 'size', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocateArray', '(', 'long', ' ', 'size', ')', ';', '\n', '        ', '@Override', ' ', 'public', ' ', 'FastTextApi', ' ', 'position', '(', 'long', ' ', 'position', ')', ' ', '{', '\n', '            ', 'return', ' ', '(', 'FastTextApi', ')', 'super', '.', 'position', '(', 'position', ')', ';', '\n', '        ', '}', '\n', '    ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocate', '(', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', 'PointerPointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'BytePointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'ByteBuffer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'byte', '[', ']', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'unloadModel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getWord', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabel', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getLr', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,Pdf.java,streamToByteArrayTask,"    private Callable<byte[]> streamToByteArrayTask(final InputStream input) {
        return new Callable<byte[]>() {
            public byte[] call() throws Exception {",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,"    private Callable<byte[]> streamToByteArrayTask(final InputStream input) {
        return new Callable<byte[]>() {
            public byte[] call() throws Exception {
","['    ', 'private', ' ', 'Callable', '<', 'byte', '[', ']', '>', ' ', 'streamToByteArrayTask', '(', 'final', ' ', 'InputStream', ' ', 'input', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'Callable', '<', 'byte', '[', ']', '>', '(', ')', ' ', '{', '\n', '            ', 'public', ' ', 'byte', '[', ']', ' ', 'call', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '<END>']"
master,bab3bedc6432f38b239029ec446c7e3f6f267c93,WechatMessageHandler.java,voiceMsgHandle,"    public String voiceMsgHandle(BaseMsg baseMsg) {
        return null;
    }",https://www.github.com/ashinnotfound/chatgpt-yourchatrobot/commit/bab3bedc6432f38b239029ec446c7e3f6f267c93,"    public String voiceMsgHandle(BaseMsg baseMsg) {
        return null;
    }
","['    ', 'public', ' ', 'String', ' ', 'voiceMsgHandle', '(', 'BaseMsg', ' ', 'baseMsg', ')', ' ', '{', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a3bf5fb295d8d9652b4c4cc5344e652a43d53a4,MainActivity.java,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                isRunning = isChecked;

                if (isChecked) {
                    startService(new Intent(MainActivity.this, aria2Service.class)
                            .putExtra(aria2Service.CONFIG, new aria2StartConfig(
                                    outputPath.getText().toString(),
                                    null,
                                    false,
                                    saveSession.isChecked(),
                                    getPort(outputPath),
                                    rpcToken.getText().toString())
                            ));
                } else {
                    stopService(new Intent(MainActivity.this, aria2Service.class));
                }


                outputPath.setEnabled(!isChecked);
                saveSession.setEnabled(!isChecked);
                rpcToken.setEnabled(!isChecked);
                rpcPort.setEnabled(!isChecked);
            }",https://www.github.com/devgianlu/aria2android/commit/4a3bf5fb295d8d9652b4c4cc5344e652a43d53a4,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                isRunning = isChecked;

                if (isChecked) {
                    startService(new Intent(MainActivity.this, aria2Service.class)
                            .putExtra(aria2Service.CONFIG, new aria2StartConfig(
                                    outputPath.getText().toString(),
                                    null,
                                    false,
                                    saveSession.isChecked(),
                                    getPort(outputPath),
                                    rpcToken.getText().toString())
                            ));
                } else {
                    stopService(new Intent(MainActivity.this, aria2Service.class));
                }


                outputPath.setEnabled(!isChecked);
                saveSession.setEnabled(!isChecked);
                rpcToken.setEnabled(!isChecked);
                rpcPort.setEnabled(!isChecked);
            }
","['            ', 'public', ' ', 'void', ' ', 'onCheckedChanged', '(', 'CompoundButton', ' ', 'buttonView', ',', ' ', 'boolean', ' ', 'isChecked', ')', ' ', '{', '\n', '                ', 'isRunning', ' ', '=', ' ', 'isChecked', ';', '\n', '\n', '                ', 'if', ' ', '(', 'isChecked', ')', ' ', '{', '\n', '                    ', 'startService', '(', 'new', ' ', 'Intent', '(', 'MainActivity', '.', 'this', ',', ' ', 'aria2Service', '.', 'class', ')', '\n', '                            ', '.', 'putExtra', '(', 'aria2Service', '.', 'CONFIG', ',', ' ', 'new', ' ', 'aria2StartConfig', '(', '\n', '                                    ', 'outputPath', '.', 'getText', '(', ')', '.', 'toString', '(', ')', ',', '\n', '                                    ', 'null', ',', '\n', '                                    ', 'false', ',', '\n', '                                    ', 'saveSession', '.', 'isChecked', '(', ')', ',', '\n', '                                    ', 'getPort', '(', 'outputPath', ')', ',', '\n', '                                    ', 'rpcToken', '.', 'getText', '(', ')', '.', 'toString', '(', ')', ')', '\n', '                            ', ')', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'stopService', '(', 'new', ' ', 'Intent', '(', 'MainActivity', '.', 'this', ',', ' ', 'aria2Service', '.', 'class', ')', ')', ';', '\n', '                ', '}', '\n', '\n', '\n', '                ', 'outputPath', '.', 'setEnabled', '(', '!', 'isChecked', ')', ';', '\n', '                ', 'saveSession', '.', 'setEnabled', '(', '!', 'isChecked', ')', ';', '\n', '                ', 'rpcToken', '.', 'setEnabled', '(', '!', 'isChecked', ')', ';', '\n', '                ', 'rpcPort', '.', 'setEnabled', '(', '!', 'isChecked', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlExportService.java,getDataInsertStatement,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        //there are no records just return empty string
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        //temporarily disable foreign key constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        //remove the last whitespace and comma
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        //build the values
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            //now that we're done with a row

            //let's remove the last whitespace and comma
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\n"");
            }
        }

        //now that we are done processing the entire row
        //let's add the terminator
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        //enable FK constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            

            
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\n"");
            }
        }

        
        
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getDataInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\n', '        ', 'ResultSet', ' ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SELECT * FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'rs', '.', 'last', '(', ')', ';', '\n', '        ', 'int', ' ', 'rowCount', ' ', '=', ' ', 'rs', '.', 'getRow', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'rowCount', ' ', '<', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', '.', 'append', '(', '""', '\\', 'n-- Inserts of ', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` DISABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'boolean', ' ', 'deleteExistingData', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DELETE_EXISTING_DATA', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DELETE_EXISTING_DATA', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'deleteExistingData', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', 'MysqlBaseService', '.', 'getEmptyTableSQL', '(', 'database', ',', ' ', 'table', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', 'INSERT INTO `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`(', '""', ')', ';', '\n', '\n', '        ', 'ResultSetMetaData', ' ', 'metaData', ' ', '=', ' ', 'rs', '.', 'getMetaData', '(', ')', ';', '\n', '        ', 'int', ' ', 'columnCount', ' ', '=', ' ', 'metaData', '.', 'getColumnCount', '(', ')', ';', '\n', '\n', '        ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '`', '""', ')', '\n', '                   ', '.', 'append', '(', 'metaData', '.', 'getColumnName', '(', ' ', 'i', ' ', '+', ' ', '1', ')', ')', '\n', '                   ', '.', 'append', '(', '""', '`, ', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'append', '(', '""', ') VALUES ', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'rs', '.', 'beforeFirst', '(', ')', ';', '\n', '        ', 'while', '(', 'rs', '.', 'next', '(', ')', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '            ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\n', '                ', 'int', ' ', 'columnType', ' ', '=', ' ', 'metaData', '.', 'getColumnType', '(', 'i', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'int', ' ', 'columnIndex', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', ';', '\n', '\n', '                ', 'if', '(', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'INTEGER', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'TINYINT', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'BIT', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', 'rs', '.', 'getInt', '(', 'columnIndex', ')', ')', '.', 'append', '(', '""', ', ', '""', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'String', ' ', 'val', ' ', '=', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', ':', ' ', '""', '""', ';', '\n', '                    ', 'val', ' ', '=', ' ', 'val', '.', 'replace', '(', '""', ""'"", '""', ',', ' ', '""', '\\\\', ""'"", '""', ')', ';', '\n', '                    ', 'sql', '.', 'append', '(', '""', ""'"", '""', ')', '.', 'append', '(', 'val', ')', '.', 'append', '(', '""', ""', "", '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '\n', '\n', '            ', '\n', '            ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '\n', '            ', 'if', '(', 'rs', '.', 'isLast', '(', ')', ')', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', '),', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', ';', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` ENABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f17db465c112c237a3b65562a113d0aaa40480a9,MainActivity.java,onItemClick,"            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (position == items.size() - 1)
                    getBaseContext().startActivity(new Intent(Intent.ACTION_VIEW)",https://www.github.com/anggrayudi/android-hidden-api/commit/f17db465c112c237a3b65562a113d0aaa40480a9,"            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (position == items.size() - 1)
                    getBaseContext().startActivity(new Intent(Intent.ACTION_VIEW)
","['            ', 'public', ' ', 'void', ' ', 'onItemClick', '(', 'AdapterView', '<', '?', '>', ' ', 'parent', ',', ' ', 'View', ' ', 'view', ',', ' ', 'int', ' ', 'position', ',', ' ', 'long', ' ', 'id', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'position', ' ', '=', '=', ' ', 'items', '.', 'size', '(', ')', ' ', '-', ' ', '1', ')', '\n', '                    ', 'getBaseContext', '(', ')', '.', 'startActivity', '(', 'new', ' ', 'Intent', '(', 'Intent', '.', 'ACTION_VIEW', ')', '\n', '<END>']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,clone,"	public Token clone() {
		return new Token(text, type, segType, startPos, endPos);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public Token clone() {
		return new Token(text, type, segType, startPos, endPos);
	}
","['\t', 'public', ' ', 'Token', ' ', 'clone', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'new', ' ', 'Token', '(', 'text', ',', ' ', 'type', ',', ' ', 'segType', ',', ' ', 'startPos', ',', ' ', 'endPos', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,2619463f207ac137f473a7387586321cffd7589f,TelegramBot.java,sendMessage,"    void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (!proxy.isEmpty()) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            client = HttpClients.createDefault();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJsonStringEntity(msg));",https://www.github.com/irgendwr/telegramalert/commit/2619463f207ac137f473a7387586321cffd7589f,"    void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (!proxy.isEmpty()) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            client = HttpClients.createDefault();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJsonStringEntity(msg));
","['    ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', '!', 'proxy', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxy', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '\n', '                    ', '.', 'setRoutePlanner', '(', 'routePlanner', ')', '\n', '                    ', '.', 'build', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'request', '.', 'setEntity', '(', 'createJsonStringEntity', '(', 'msg', ')', ')', ';', '\n', '<END>']"
master,a7a23de0b938067bbbff3a23e00ae35b3a6928a4,SpringBootDemoApplication.java,main,"  public static void main(String[] args) {
    SpringApplication.run(SpringBootDemoApplication.class, args);
  }",https://www.github.com/paulschwarz/spring-dotenv/commit/a7a23de0b938067bbbff3a23e00ae35b3a6928a4,"  public static void main(String[] args) {
    SpringApplication.run(SpringBootDemoApplication.class, args);
  }
","['  ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '    ', 'SpringApplication', '.', 'run', '(', 'SpringBootDemoApplication', '.', 'class', ',', ' ', 'args', ')', ';', '\n', '  ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,TipoCertificadoEnumTest.java,deveObterAtravesDaDescricao,"    public void deveObterAtravesDaDescricao() {
        assertEquals(TipoCertificadoEnum.REPOSITORIO_WINDOWS, TipoCertificadoEnum.valueOfDescricao(""windows""));
        assertEquals(TipoCertificadoEnum.REPOSITORIO_MAC, TipoCertificadoEnum.valueOfDescricao(""mac""));
        assertEquals(TipoCertificadoEnum.ARQUIVO, TipoCertificadoEnum.valueOfDescricao(""arquivo""));
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, TipoCertificadoEnum.valueOfDescricao(""arquivo_bytes""));
        assertEquals(TipoCertificadoEnum.TOKEN_A3, TipoCertificadoEnum.valueOfDescricao(""a3""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void deveObterAtravesDaDescricao() {
        assertEquals(TipoCertificadoEnum.REPOSITORIO_WINDOWS, TipoCertificadoEnum.valueOfDescricao(""windows""));
        assertEquals(TipoCertificadoEnum.REPOSITORIO_MAC, TipoCertificadoEnum.valueOfDescricao(""mac""));
        assertEquals(TipoCertificadoEnum.ARQUIVO, TipoCertificadoEnum.valueOfDescricao(""arquivo""));
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, TipoCertificadoEnum.valueOfDescricao(""arquivo_bytes""));
        assertEquals(TipoCertificadoEnum.TOKEN_A3, TipoCertificadoEnum.valueOfDescricao(""a3""));
    }
","['    ', 'public', ' ', 'void', ' ', 'deveObterAtravesDaDescricao', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'windows', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'mac', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'arquivo', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'arquivo_bytes', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'TOKEN_A3', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'a3', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,fa447751b0fe34e5af4d3c337015da3c42a3323e,DownloadBinActivity.java,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.download_bin, menu);
        return true;
    }",https://www.github.com/devgianlu/aria2android/commit/fa447751b0fe34e5af4d3c337015da3c42a3323e,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.download_bin, menu);
        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'onCreateOptionsMenu', '(', 'Menu', ' ', 'menu', ')', ' ', '{', '\n', '        ', 'getMenuInflater', '(', ')', '.', 'inflate', '(', 'R', '.', 'menu', '.', 'download_bin', ',', ' ', 'menu', ')', ';', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n', '<END>']"
master,fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,RedisConfigurationBuilder.java,parseConfiguration,"	public ConfigWithHost parseConfiguration() {
		return parseConfiguration(getClass().getClassLoader());
	}",https://www.github.com/mybatis/redis-cache/commit/fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,"	public ConfigWithHost parseConfiguration() {
		return parseConfiguration(getClass().getClassLoader());
	}
","['\t', 'public', ' ', 'ConfigWithHost', ' ', 'parseConfiguration', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'parseConfiguration', '(', 'getClass', '(', ')', '.', 'getClassLoader', '(', ')', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,9277d571532e667014a836ea5c1ea02c792c6f9f,LoglineAdapter.java,addLine,"    private void addLine(LoglineItem line) {
        Logging.logMe(context, line.getMessage(), line.getType() == LoglineItem.TYPE.ERROR);
        objs.add(line);
        context.runOnUiThread(new Runnable() {
            @Override",https://www.github.com/devgianlu/aria2android/commit/9277d571532e667014a836ea5c1ea02c792c6f9f,"    private void addLine(LoglineItem line) {
        Logging.logMe(context, line.getMessage(), line.getType() == LoglineItem.TYPE.ERROR);
        objs.add(line);
        context.runOnUiThread(new Runnable() {
            @Override
","['    ', 'private', ' ', 'void', ' ', 'addLine', '(', 'LoglineItem', ' ', 'line', ')', ' ', '{', '\n', '        ', 'Logging', '.', 'logMe', '(', 'context', ',', ' ', 'line', '.', 'getMessage', '(', ')', ',', ' ', 'line', '.', 'getType', '(', ')', ' ', '=', '=', ' ', 'LoglineItem', '.', 'TYPE', '.', 'ERROR', ')', ';', '\n', '        ', 'objs', '.', 'add', '(', 'line', ')', ';', '\n', '        ', 'context', '.', 'runOnUiThread', '(', 'new', ' ', 'Runnable', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,aa6cdb2a833ce0124202b0913efe60599173c4d2,JFastText.java,runTrainCmd,"    public void runTrainCmd(String[] args) {
        // Prepend ""fasttext"" to the argument list so that it is compatible with C++'s main()
        String[] cArgs = new String[args.length + 1];
        cArgs[0] = ""fasttext"";
        System.arraycopy(args, 0, cArgs, 1, args.length);
        fta.runTrainCmd(cArgs.length, new PointerPointer(cArgs));
    }",https://www.github.com/vinhkhuc/jfasttext/commit/aa6cdb2a833ce0124202b0913efe60599173c4d2,"    public void runTrainCmd(String[] args) {
        
        String[] cArgs = new String[args.length + 1];
        cArgs[0] = ""fasttext"";
        System.arraycopy(args, 0, cArgs, 1, args.length);
        fta.runTrainCmd(cArgs.length, new PointerPointer(cArgs));
    }
","['    ', 'public', ' ', 'void', ' ', 'runTrainCmd', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', '\n', '        ', 'String', '[', ']', ' ', 'cArgs', ' ', '=', ' ', 'new', ' ', 'String', '[', 'args', '.', 'length', ' ', '+', ' ', '1', ']', ';', '\n', '        ', 'cArgs', '[', '0', ']', ' ', '=', ' ', '""', 'fasttext', '""', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'args', ',', ' ', '0', ',', ' ', 'cArgs', ',', ' ', '1', ',', ' ', 'args', '.', 'length', ')', ';', '\n', '        ', 'fta', '.', 'runTrainCmd', '(', 'cArgs', '.', 'length', ',', ' ', 'new', ' ', 'PointerPointer', '(', 'cArgs', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,8e7ca56f224d426676aff1fa860a54d6b7c5af1d,MaterialRippleLayout.java,run,"        public void run() {
            prepressed = false;
            childView.onTouchEvent(event);
            childView.setPressed(true);
            if (rippleHover) {
                startHover();",https://www.github.com/balysv/material-ripple/commit/8e7ca56f224d426676aff1fa860a54d6b7c5af1d,"        public void run() {
            prepressed = false;
            childView.onTouchEvent(event);
            childView.setPressed(true);
            if (rippleHover) {
                startHover();
","['        ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '            ', 'prepressed', ' ', '=', ' ', 'false', ';', '\n', '            ', 'childView', '.', 'onTouchEvent', '(', 'event', ')', ';', '\n', '            ', 'childView', '.', 'setPressed', '(', 'true', ')', ';', '\n', '            ', 'if', ' ', '(', 'rippleHover', ')', ' ', '{', '\n', '                ', 'startHover', '(', ')', ';', '\n', '<END>']"
master,52d802f14725a27dafc4005d6e484ff2638482bb,FastTextWrapper.java,second,"    @MemberSetter @Index public native FloatStringPairVector second(@Cast(""size_t"") long i, @StdString String second);

    public FloatStringPairVector put(float[] firstValue, BytePointer[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }

    public FloatStringPairVector put(float[] firstValue, String[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,std::string>"") public static class FloatStringPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatStringPair(Pointer p) { super(p); }
    public FloatStringPair(float firstValue, BytePointer secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair(float firstValue, String secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

// Parsed from fasttext_wrapper.h

// #ifndef FASTTEXT_WRAPPER_H
// #define FASTTEXT_WRAPPER_H

// #include ""fastText/src/fasttext.h""
// #include ""fasttext_wrapper_misc.h""

/**
 * FastText's wrapper
 */

    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public FastTextApi(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        // We don't make runCmd() a static method so that Loader.load() is always be called in FastTextApi().
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        // Model unloading is not available in fastText C++. This method is added since
        // Java's GC doesn't collect memory allocated by native function calls.
        public native void unloadModel();
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        // TODO: Check if model was loaded
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


// #endif


// Parsed from fasttext_wrapper_javacpp.h

// Added <numeric> since VS 14.0 complains about missing std::iota
// #include <numeric>
// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/productquantizer.cc""
// #include ""fastText/src/qmatrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/52d802f14725a27dafc4005d6e484ff2638482bb,"    @MemberSetter @Index public native FloatStringPairVector second(@Cast(""size_t"") long i, @StdString String second);

    public FloatStringPairVector put(float[] firstValue, BytePointer[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }

    public FloatStringPairVector put(float[] firstValue, String[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,std::string>"") public static class FloatStringPair extends Pointer {
    static { Loader.load(); }
    
    public FloatStringPair(Pointer p) { super(p); }
    public FloatStringPair(float firstValue, BytePointer secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair(float firstValue, String secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}











    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        
        public FastTextApi(Pointer p) { super(p); }
        
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        
        
        public native void unloadModel();
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }






















}
","['    ', '@MemberSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'FloatStringPairVector', ' ', 'second', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', '@StdString', ' ', 'String', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'FloatStringPairVector', ' ', 'put', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'BytePointer', '[', ']', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'firstValue', '.', 'length', ' ', '&', '&', ' ', 'i', ' ', '<', ' ', 'secondValue', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'first', '(', 'i', ',', ' ', 'firstValue', '[', 'i', ']', ')', ';', '\n', '            ', 'second', '(', 'i', ',', ' ', 'secondValue', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'FloatStringPairVector', ' ', 'put', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'String', '[', ']', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'firstValue', '.', 'length', ' ', '&', '&', ' ', 'i', ' ', '<', ' ', 'secondValue', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'first', '(', 'i', ',', ' ', 'firstValue', '[', 'i', ']', ')', ';', '\n', '            ', 'second', '(', 'i', ',', ' ', 'secondValue', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@NoOffset', ' ', '@Name', '(', '""', 'std::pair<fasttext::real,std::string>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FloatStringPair', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'BytePointer', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'String', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'FloatStringPair', ' ', 'put', '(', '@ByRef', ' ', 'FloatStringPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', 'BytePointer', ' ', 'second', ')', ';', '\n', '    ', '@MemberSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', '@StdString', ' ', 'String', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'BytePointer', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'String', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@NoOffset', ' ', '@Name', '(', '""', 'std::pair<fasttext::real,int32_t>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'DoubleIntPair', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'DoubleIntPair', ' ', 'put', '(', '@ByRef', ' ', 'DoubleIntPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', 'int', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'second', '(', 'int', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'DoubleIntPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    ', '@Namespace', '(', '""', 'FastTextWrapper', '""', ')', ' ', '@NoOffset', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FastTextApi', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '        ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'long', ' ', 'size', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocateArray', '(', 'size', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocateArray', '(', 'long', ' ', 'size', ')', ';', '\n', '        ', '@Override', ' ', 'public', ' ', 'FastTextApi', ' ', 'position', '(', 'long', ' ', 'position', ')', ' ', '{', '\n', '            ', 'return', ' ', '(', 'FastTextApi', ')', 'super', '.', 'position', '(', 'position', ')', ';', '\n', '        ', '}', '\n', '    ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocate', '(', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', 'PointerPointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'BytePointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'ByteBuffer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'byte', '[', ']', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'unloadModel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getWord', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabel', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getLr', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,aef3b87d4af0b8b5eb486f6ee55efe1d00ca9b79,TxWatcher.java,update,"    public void update() {
        if (isActualTransactionActive()) {
            registerSynchronization(afterCommitExecute);",https://www.github.com/jcasbin/casbin-spring-boot-starter/commit/aef3b87d4af0b8b5eb486f6ee55efe1d00ca9b79,"    public void update() {
        if (isActualTransactionActive()) {
            registerSynchronization(afterCommitExecute);
","['    ', 'public', ' ', 'void', ' ', 'update', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'isActualTransactionActive', '(', ')', ')', ' ', '{', '\n', '            ', 'registerSynchronization', '(', 'afterCommitExecute', ')', ';', '\n', '<END>']"
master,774b680a33ecbeabce816d0ec5e84c6b40bcac80,BotUtil.java,isPromptEmpty,"    public boolean isPromptEmpty(String sessionId){
        if (!PROMPT_MAP.containsKey(sessionId)){
            return true;
        }
        return PROMPT_MAP.get(sessionId).size() == BASIC_PROMPT_LIST.size();
    }",https://www.github.com/ashinnotfound/chatgpt-yourchatrobot/commit/774b680a33ecbeabce816d0ec5e84c6b40bcac80,"    public boolean isPromptEmpty(String sessionId){
        if (!PROMPT_MAP.containsKey(sessionId)){
            return true;
        }
        return PROMPT_MAP.get(sessionId).size() == BASIC_PROMPT_LIST.size();
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isPromptEmpty', '(', 'String', ' ', 'sessionId', ')', '{', '\n', '        ', 'if', ' ', '(', '!', 'PROMPT_MAP', '.', 'containsKey', '(', 'sessionId', ')', ')', '{', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'PROMPT_MAP', '.', 'get', '(', 'sessionId', ')', '.', 'size', '(', ')', ' ', '=', '=', ' ', 'BASIC_PROMPT_LIST', '.', 'size', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,093d22781fb61319c24a0c8051bbbbcdbdf51124,FastTextWrapper.java,allocate,"    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

// Parsed from fasttext_wrapper.h

// #ifndef FASTTEXT_WRAPPER_H
// #define FASTTEXT_WRAPPER_H

// #include ""fastText/src/fasttext.h""
// #include ""fasttext_wrapper_misc.h""

/**
 * FastText's wrapper
 */

    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public FastTextApi(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        // We don't make runCmd() a static method so that Loader.load() is always be called in FastTextApi().
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        // TODO: Check if model was loaded
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native @StdString BytePointer getInput();
        public native @StdString BytePointer getOutput();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


// #endif


// Parsed from fasttext_wrapper_javacpp.h

// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/093d22781fb61319c24a0c8051bbbbcdbdf51124,"    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}











    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        
        public FastTextApi(Pointer p) { super(p); }
        
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native @StdString BytePointer getInput();
        public native @StdString BytePointer getOutput();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


















}
","['    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'FloatStringPair', ' ', 'put', '(', '@ByRef', ' ', 'FloatStringPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', 'BytePointer', ' ', 'second', ')', ';', '\n', '    ', '@MemberSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', '@StdString', ' ', 'String', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'BytePointer', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'String', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@NoOffset', ' ', '@Name', '(', '""', 'std::pair<fasttext::real,int32_t>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'DoubleIntPair', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'DoubleIntPair', ' ', 'put', '(', '@ByRef', ' ', 'DoubleIntPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', 'int', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'second', '(', 'int', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'DoubleIntPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    ', '@Namespace', '(', '""', 'FastTextWrapper', '""', ')', ' ', '@NoOffset', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FastTextApi', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '        ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'long', ' ', 'size', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocateArray', '(', 'size', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocateArray', '(', 'long', ' ', 'size', ')', ';', '\n', '        ', '@Override', ' ', 'public', ' ', 'FastTextApi', ' ', 'position', '(', 'long', ' ', 'position', ')', ' ', '{', '\n', '            ', 'return', ' ', '(', 'FastTextApi', ')', 'super', '.', 'position', '(', 'position', ')', ';', '\n', '        ', '}', '\n', '    ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocate', '(', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', 'PointerPointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'BytePointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'ByteBuffer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'byte', '[', ']', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getWord', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabel', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getInput', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getOutput', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getLr', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,bab3bedc6432f38b239029ec446c7e3f6f267c93,WechatMessageHandler.java,sysMsgHandle,"    public void sysMsgHandle(BaseMsg baseMsg) {

    }

    @Override
    public String verifyAddFriendMsgHandle(BaseMsg baseMsg) {
        return null;
    }

    @Override
    public String mediaMsgHandle(BaseMsg baseMsg) {
        return null;
    }
}",https://www.github.com/ashinnotfound/chatgpt-yourchatrobot/commit/bab3bedc6432f38b239029ec446c7e3f6f267c93,"    public void sysMsgHandle(BaseMsg baseMsg) {

    }

    @Override
    public String verifyAddFriendMsgHandle(BaseMsg baseMsg) {
        return null;
    }

    @Override
    public String mediaMsgHandle(BaseMsg baseMsg) {
        return null;
    }
}
","['    ', 'public', ' ', 'void', ' ', 'sysMsgHandle', '(', 'BaseMsg', ' ', 'baseMsg', ')', ' ', '{', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'String', ' ', 'verifyAddFriendMsgHandle', '(', 'BaseMsg', ' ', 'baseMsg', ')', ' ', '{', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'String', ' ', 'mediaMsgHandle', '(', 'BaseMsg', ' ', 'baseMsg', ')', ' ', '{', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,checkServerTrusted,"		public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
			this.chain = chain;
			this.tm.checkServerTrusted(chain, authType);
		}",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"		public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
			this.chain = chain;
			this.tm.checkServerTrusted(chain, authType);
		}
","['\t\t', 'public', ' ', 'void', ' ', 'checkServerTrusted', '(', 'X509Certificate', '[', ']', ' ', 'chain', ',', ' ', 'String', ' ', 'authType', ')', ' ', 'throws', ' ', 'CertificateException', ' ', '{', '\n', '\t\t\t', 'this', '.', 'chain', ' ', '=', ' ', 'chain', ';', '\n', '\t\t\t', 'this', '.', 'tm', '.', 'checkServerTrusted', '(', 'chain', ',', ' ', 'authType', ')', ';', '\n', '\t\t', '}', '\n', '<END>']"
master,fa272ca6b7db2236a999ce0b0c2f770d9d09d888,PDFLayoutTextStripper.java,writePage,"    protected void writePage() throws IOException {
        Vector<List<TextPosition>> charactersByArticle = super.getCharactersByArticle();
        for( int i = 0; i < charactersByArticle.size(); i++) {
           List<TextPosition> textList = charactersByArticle.get(i);
           this.sortTextPositionList(textList);
           this.iterateThroughTextList(textList.iterator()) ;
        }
        this.writeToOutputStream(this.getTextLineList());
    }",https://www.github.com/jonathanlink/pdflayouttextstripper/commit/fa272ca6b7db2236a999ce0b0c2f770d9d09d888,"    protected void writePage() throws IOException {
        Vector<List<TextPosition>> charactersByArticle = super.getCharactersByArticle();
        for( int i = 0; i < charactersByArticle.size(); i++) {
           List<TextPosition> textList = charactersByArticle.get(i);
           this.sortTextPositionList(textList);
           this.iterateThroughTextList(textList.iterator()) ;
        }
        this.writeToOutputStream(this.getTextLineList());
    }
","['    ', 'protected', ' ', 'void', ' ', 'writePage', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Vector', '<', 'List', '<', 'TextPosition', '>', '>', ' ', 'charactersByArticle', ' ', '=', ' ', 'super', '.', 'getCharactersByArticle', '(', ')', ';', '\n', '        ', 'for', '(', ' ', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'charactersByArticle', '.', 'size', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '           ', 'List', '<', 'TextPosition', '>', ' ', 'textList', ' ', '=', ' ', 'charactersByArticle', '.', 'get', '(', 'i', ')', ';', '\n', '           ', 'this', '.', 'sortTextPositionList', '(', 'textList', ')', ';', '\n', '           ', 'this', '.', 'iterateThroughTextList', '(', 'textList', '.', 'iterator', '(', ')', ')', ' ', ';', '\n', '        ', '}', '\n', '        ', 'this', '.', 'writeToOutputStream', '(', 'this', '.', 'getTextLineList', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,ee24f1651ede1f00f79aec2ffe59390b59823ac2,DemoApplicationTest.java,fromProperties,"  void fromProperties() {
    assertThat(fromProperties.getValue1()).isEqualTo(""Message 1 from .env"");
    assertThat(fromProperties.getValue2()).isEqualTo(""Message 2 from system environment"");
    assertThat(fromProperties.getValue3()).isEqualTo(""Message 3 from system environment"");
  }",https://www.github.com/paulschwarz/spring-dotenv/commit/ee24f1651ede1f00f79aec2ffe59390b59823ac2,"  void fromProperties() {
    assertThat(fromProperties.getValue1()).isEqualTo(""Message 1 from .env"");
    assertThat(fromProperties.getValue2()).isEqualTo(""Message 2 from system environment"");
    assertThat(fromProperties.getValue3()).isEqualTo(""Message 3 from system environment"");
  }
","['  ', 'void', ' ', 'fromProperties', '(', ')', ' ', '{', '\n', '    ', 'assertThat', '(', 'fromProperties', '.', 'getValue1', '(', ')', ')', '.', 'isEqualTo', '(', '""', 'Message 1 from .env', '""', ')', ';', '\n', '    ', 'assertThat', '(', 'fromProperties', '.', 'getValue2', '(', ')', ')', '.', 'isEqualTo', '(', '""', 'Message 2 from system environment', '""', ')', ';', '\n', '    ', 'assertThat', '(', 'fromProperties', '.', 'getValue3', '(', ')', ')', '.', 'isEqualTo', '(', '""', 'Message 3 from system environment', '""', ')', ';', '\n', '  ', '}', '\n', '<END>']"
master,aa6cdb2a833ce0124202b0913efe60599173c4d2,FastTextWrapper.java,test,"        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        // TODO: Check if model was loaded
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native @StdString BytePointer getInput();
        public native @StdString BytePointer getOutput();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


//int main(int argc, char** argv) {
//    FastTextWrapper::FastTextApi fta;
//    fta.loadModel(""../javacpp/test.model.bin"");
//    std::cout << ""Loading model ..."" << std::endl;
//    std::vector<float> vec = fta.getVector(""you"");
//    std::cout << vec.front();
//    return 0;
//}

// #endif


// Parsed from fasttext_wrapper_javacpp.h

// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/aa6cdb2a833ce0124202b0913efe60599173c4d2,"        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native @StdString BytePointer getInput();
        public native @StdString BytePointer getOutput();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }



























}
","['        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getWord', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabel', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getInput', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getOutput', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getLr', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,ee24f1651ede1f00f79aec2ffe59390b59823ac2,DotenvPropertySourceTest.java,irrelevant,"  void irrelevant() {
    assertThat(source.getProperty(""other.VALUE"")).isNull();
  }",https://www.github.com/paulschwarz/spring-dotenv/commit/ee24f1651ede1f00f79aec2ffe59390b59823ac2,"  void irrelevant() {
    assertThat(source.getProperty(""other.VALUE"")).isNull();
  }
","['  ', 'void', ' ', 'irrelevant', '(', ')', ' ', '{', '\n', '    ', 'assertThat', '(', 'source', '.', 'getProperty', '(', '""', 'other.VALUE', '""', ')', ')', '.', 'isNull', '(', ')', ';', '\n', '  ', '}', '\n', '<END>']"
master,3b9a919083773138da7591234b6621f510fe0328,AttachHelper.java,attach,"    public static void attach(String pid, String jarPath, String options) {
        try {
            VirtualMachine vm = VirtualMachine.attach(pid);",https://www.github.com/neykov/extract-tls-secrets/commit/3b9a919083773138da7591234b6621f510fe0328,"    public static void attach(String pid, String jarPath, String options) {
        try {
            VirtualMachine vm = VirtualMachine.attach(pid);
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'attach', '(', 'String', ' ', 'pid', ',', ' ', 'String', ' ', 'jarPath', ',', ' ', 'String', ' ', 'options', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'VirtualMachine', ' ', 'vm', ' ', '=', ' ', 'VirtualMachine', '.', 'attach', '(', 'pid', ')', ';', '\n', '<END>']"
master,302e173d3950b963c2e003d538ff4d36db896824,EhcacheTestCase.java,equalsAndHashCodeSymmetricTest,"  public void equalsAndHashCodeSymmetricTest() {
    // equals and hashCode check name field value
    AbstractEhcacheCache x = new EhcacheCache(""EHCACHE"");
    AbstractEhcacheCache y = new EhcacheCache(""EHCACHE"");
    assertTrue(x.equals(y));
    assertTrue(y.equals(x));
    assertEquals(x.hashCode(), y.hashCode());
    // dummy tests to cover edge cases
    assertFalse(x.equals(new String()));
    assertFalse(x.equals(null));
    assertTrue(x.equals(x));
  }",https://www.github.com/mybatis/ehcache-cache/commit/302e173d3950b963c2e003d538ff4d36db896824,"  public void equalsAndHashCodeSymmetricTest() {
    
    AbstractEhcacheCache x = new EhcacheCache(""EHCACHE"");
    AbstractEhcacheCache y = new EhcacheCache(""EHCACHE"");
    assertTrue(x.equals(y));
    assertTrue(y.equals(x));
    assertEquals(x.hashCode(), y.hashCode());
    
    assertFalse(x.equals(new String()));
    assertFalse(x.equals(null));
    assertTrue(x.equals(x));
  }
","['  ', 'public', ' ', 'void', ' ', 'equalsAndHashCodeSymmetricTest', '(', ')', ' ', '{', '\n', '    ', '\n', '    ', 'AbstractEhcacheCache', ' ', 'x', ' ', '=', ' ', 'new', ' ', 'EhcacheCache', '(', '""', 'EHCACHE', '""', ')', ';', '\n', '    ', 'AbstractEhcacheCache', ' ', 'y', ' ', '=', ' ', 'new', ' ', 'EhcacheCache', '(', '""', 'EHCACHE', '""', ')', ';', '\n', '    ', 'assertTrue', '(', 'x', '.', 'equals', '(', 'y', ')', ')', ';', '\n', '    ', 'assertTrue', '(', 'y', '.', 'equals', '(', 'x', ')', ')', ';', '\n', '    ', 'assertEquals', '(', 'x', '.', 'hashCode', '(', ')', ',', ' ', 'y', '.', 'hashCode', '(', ')', ')', ';', '\n', '    ', '\n', '    ', 'assertFalse', '(', 'x', '.', 'equals', '(', 'new', ' ', 'String', '(', ')', ')', ')', ';', '\n', '    ', 'assertFalse', '(', 'x', '.', 'equals', '(', 'null', ')', ')', ';', '\n', '    ', 'assertTrue', '(', 'x', '.', 'equals', '(', 'x', ')', ')', ';', '\n', '  ', '}', '\n', '<END>']"
master,6142908dcc58efa99ed01a483095330acd1bd86c,ControlActivityDelegate.java,createLogLine,"    private Logging.LogLine createLogLine(@NonNull Aria2Ui.LogMessage msg) {
        switch (msg.type) {
            case PROCESS_TERMINATED:
                return new Logging.LogLine(Logging.LogLine.Type.INFO, context.getString(R.string.logTerminated, msg.i));
            case PROCESS_STARTED:
                return new Logging.LogLine(Logging.LogLine.Type.INFO, context.getString(R.string.logStarted, msg.o));
            case MONITOR_FAILED:
            case MONITOR_UPDATE:
                return null;
            case PROCESS_WARN:
                if (msg.o != null)
                    return new Logging.LogLine(Logging.LogLine.Type.WARNING, (String) msg.o);
            case PROCESS_ERROR:
                if (msg.o != null)
                    return new Logging.LogLine(Logging.LogLine.Type.ERROR, (String) msg.o);
            case PROCESS_INFO:
                if (msg.o != null)
                    return new Logging.LogLine(Logging.LogLine.Type.INFO, (String) msg.o);
        }

        return null;
    }",https://www.github.com/devgianlu/aria2android/commit/6142908dcc58efa99ed01a483095330acd1bd86c,"    private Logging.LogLine createLogLine(@NonNull Aria2Ui.LogMessage msg) {
        switch (msg.type) {
            case PROCESS_TERMINATED:
                return new Logging.LogLine(Logging.LogLine.Type.INFO, context.getString(R.string.logTerminated, msg.i));
            case PROCESS_STARTED:
                return new Logging.LogLine(Logging.LogLine.Type.INFO, context.getString(R.string.logStarted, msg.o));
            case MONITOR_FAILED:
            case MONITOR_UPDATE:
                return null;
            case PROCESS_WARN:
                if (msg.o != null)
                    return new Logging.LogLine(Logging.LogLine.Type.WARNING, (String) msg.o);
            case PROCESS_ERROR:
                if (msg.o != null)
                    return new Logging.LogLine(Logging.LogLine.Type.ERROR, (String) msg.o);
            case PROCESS_INFO:
                if (msg.o != null)
                    return new Logging.LogLine(Logging.LogLine.Type.INFO, (String) msg.o);
        }

        return null;
    }
","['    ', 'private', ' ', 'Logging', '.', 'LogLine', ' ', 'createLogLine', '(', '@NonNull', ' ', 'Aria2Ui', '.', 'LogMessage', ' ', 'msg', ')', ' ', '{', '\n', '        ', 'switch', ' ', '(', 'msg', '.', 'type', ')', ' ', '{', '\n', '            ', 'case', ' ', 'PROCESS_TERMINATED', ':', '\n', '                ', 'return', ' ', 'new', ' ', 'Logging', '.', 'LogLine', '(', 'Logging', '.', 'LogLine', '.', 'Type', '.', 'INFO', ',', ' ', 'context', '.', 'getString', '(', 'R', '.', 'string', '.', 'logTerminated', ',', ' ', 'msg', '.', 'i', ')', ')', ';', '\n', '            ', 'case', ' ', 'PROCESS_STARTED', ':', '\n', '                ', 'return', ' ', 'new', ' ', 'Logging', '.', 'LogLine', '(', 'Logging', '.', 'LogLine', '.', 'Type', '.', 'INFO', ',', ' ', 'context', '.', 'getString', '(', 'R', '.', 'string', '.', 'logStarted', ',', ' ', 'msg', '.', 'o', ')', ')', ';', '\n', '            ', 'case', ' ', 'MONITOR_FAILED', ':', '\n', '            ', 'case', ' ', 'MONITOR_UPDATE', ':', '\n', '                ', 'return', ' ', 'null', ';', '\n', '            ', 'case', ' ', 'PROCESS_WARN', ':', '\n', '                ', 'if', ' ', '(', 'msg', '.', 'o', ' ', '!', '=', ' ', 'null', ')', '\n', '                    ', 'return', ' ', 'new', ' ', 'Logging', '.', 'LogLine', '(', 'Logging', '.', 'LogLine', '.', 'Type', '.', 'WARNING', ',', ' ', '(', 'String', ')', ' ', 'msg', '.', 'o', ')', ';', '\n', '            ', 'case', ' ', 'PROCESS_ERROR', ':', '\n', '                ', 'if', ' ', '(', 'msg', '.', 'o', ' ', '!', '=', ' ', 'null', ')', '\n', '                    ', 'return', ' ', 'new', ' ', 'Logging', '.', 'LogLine', '(', 'Logging', '.', 'LogLine', '.', 'Type', '.', 'ERROR', ',', ' ', '(', 'String', ')', ' ', 'msg', '.', 'o', ')', ';', '\n', '            ', 'case', ' ', 'PROCESS_INFO', ':', '\n', '                ', 'if', ' ', '(', 'msg', '.', 'o', ' ', '!', '=', ' ', 'null', ')', '\n', '                    ', 'return', ' ', 'new', ' ', 'Logging', '.', 'LogLine', '(', 'Logging', '.', 'LogLine', '.', 'Type', '.', 'INFO', ',', ' ', '(', 'String', ')', ' ', 'msg', '.', 'o', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n', '<END>']"
master,cf507d88e12e11ed4320a9f72b013a8f21bbd125,MaterialMenuBase.java,setupActionBar,"    private void setupActionBar(Activity activity) {
        final View iconView = getActionBarHomeView(activity);
        final View upView = getActionBarUpView(activity);

        if (iconView == null || upView == null) throw new IllegalStateException(""Could not find ActionBar views"");

        // need no margins so that clicked state would work nicely
        ViewGroup.MarginLayoutParams iconParams = (ViewGroup.MarginLayoutParams) iconView.getLayoutParams();
        iconParams.bottomMargin = 0;
        iconParams.topMargin = 0;
        iconView.setLayoutParams(iconParams);

        // remove up arrow margins
        ViewGroup.MarginLayoutParams upParams = (ViewGroup.MarginLayoutParams) upView.getLayoutParams();
        upParams.leftMargin = activity.getResources().getDimensionPixelSize(R.dimen.mm_up_arrow_margin);
        upParams.rightMargin = 0;
        upView.setLayoutParams(upParams);
    }",https://www.github.com/balysv/material-menu/commit/cf507d88e12e11ed4320a9f72b013a8f21bbd125,"    private void setupActionBar(Activity activity) {
        final View iconView = getActionBarHomeView(activity);
        final View upView = getActionBarUpView(activity);

        if (iconView == null || upView == null) throw new IllegalStateException(""Could not find ActionBar views"");

        
        ViewGroup.MarginLayoutParams iconParams = (ViewGroup.MarginLayoutParams) iconView.getLayoutParams();
        iconParams.bottomMargin = 0;
        iconParams.topMargin = 0;
        iconView.setLayoutParams(iconParams);

        
        ViewGroup.MarginLayoutParams upParams = (ViewGroup.MarginLayoutParams) upView.getLayoutParams();
        upParams.leftMargin = activity.getResources().getDimensionPixelSize(R.dimen.mm_up_arrow_margin);
        upParams.rightMargin = 0;
        upView.setLayoutParams(upParams);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupActionBar', '(', 'Activity', ' ', 'activity', ')', ' ', '{', '\n', '        ', 'final', ' ', 'View', ' ', 'iconView', ' ', '=', ' ', 'getActionBarHomeView', '(', 'activity', ')', ';', '\n', '        ', 'final', ' ', 'View', ' ', 'upView', ' ', '=', ' ', 'getActionBarUpView', '(', 'activity', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'iconView', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'upView', ' ', '=', '=', ' ', 'null', ')', ' ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Could not find ActionBar views', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'ViewGroup', '.', 'MarginLayoutParams', ' ', 'iconParams', ' ', '=', ' ', '(', 'ViewGroup', '.', 'MarginLayoutParams', ')', ' ', 'iconView', '.', 'getLayoutParams', '(', ')', ';', '\n', '        ', 'iconParams', '.', 'bottomMargin', ' ', '=', ' ', '0', ';', '\n', '        ', 'iconParams', '.', 'topMargin', ' ', '=', ' ', '0', ';', '\n', '        ', 'iconView', '.', 'setLayoutParams', '(', 'iconParams', ')', ';', '\n', '\n', '        ', '\n', '        ', 'ViewGroup', '.', 'MarginLayoutParams', ' ', 'upParams', ' ', '=', ' ', '(', 'ViewGroup', '.', 'MarginLayoutParams', ')', ' ', 'upView', '.', 'getLayoutParams', '(', ')', ';', '\n', '        ', 'upParams', '.', 'leftMargin', ' ', '=', ' ', 'activity', '.', 'getResources', '(', ')', '.', 'getDimensionPixelSize', '(', 'R', '.', 'dimen', '.', 'mm_up_arrow_margin', ')', ';', '\n', '        ', 'upParams', '.', 'rightMargin', ' ', '=', ' ', '0', ';', '\n', '        ', 'upView', '.', 'setLayoutParams', '(', 'upParams', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,onDraw,"    protected void onDraw(Canvas canvas) {
        if (dotOffset == null || dotOffset.length <= 1) {
            return;
        }

        // Some empirical coefficients
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        for (int i = 0; i < dotOffset.length; i++) {
            float dot = dotOffset[i];",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    protected void onDraw(Canvas canvas) {
        if (dotOffset == null || dotOffset.length <= 1) {
            return;
        }

        
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        for (int i = 0; i < dotOffset.length; i++) {
            float dot = dotOffset[i];
","['    ', 'protected', ' ', 'void', ' ', 'onDraw', '(', 'Canvas', ' ', 'canvas', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'dotOffset', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'dotOffset', '.', 'length', ' ', '<', '=', ' ', '1', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'float', ' ', 'scaleDistance', ' ', '=', ' ', '(', 'spaceBetweenDotCenters', ' ', '+', ' ', '(', 'dotSelectedSize', ' ', '-', ' ', 'dotNormalSize', ')', ' ', '/', ' ', '2', ')', ' ', '*', ' ', '0.7f', ';', '\n', '        ', 'float', ' ', 'smallScaleDistance', ' ', '=', ' ', 'dotSelectedSize', ' ', '/', ' ', '2', ';', '\n', '        ', 'float', ' ', 'centerScaleDistance', ' ', '=', ' ', '6f', ' ', '/', ' ', '7f', ' ', '*', ' ', 'spaceBetweenDotCenters', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'dotOffset', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'float', ' ', 'dot', ' ', '=', ' ', 'dotOffset', '[', 'i', ']', ';', '\n', '<END>']"
master,03a7f3581f4ec913a04852426d8dcb5330b14d52,CasbinRedisWatcherAutoConfiguration.java,redisWatcher,"    public Watcher redisWatcher(RedisProperties redisProperties, CasbinProperties casbinProperties, Enforcer enforcer) {
        int timeout = redisProperties.getTimeout() != null ? (int) redisProperties.getTimeout().toMillis() : 2000;
        RedisWatcher watcher = new RedisWatcher(redisProperties.getHost(), redisProperties.getPort(),
                casbinProperties.getPolicyTopic(), timeout, redisProperties.getPassword());
        enforcer.setWatcher(watcher);
        logger.info(""Casbin set watcher: {}"", watcher.getClass().getName());
        return watcher;
    }",https://www.github.com/jcasbin/casbin-spring-boot-starter/commit/03a7f3581f4ec913a04852426d8dcb5330b14d52,"    public Watcher redisWatcher(RedisProperties redisProperties, CasbinProperties casbinProperties, Enforcer enforcer) {
        int timeout = redisProperties.getTimeout() != null ? (int) redisProperties.getTimeout().toMillis() : 2000;
        RedisWatcher watcher = new RedisWatcher(redisProperties.getHost(), redisProperties.getPort(),
                casbinProperties.getPolicyTopic(), timeout, redisProperties.getPassword());
        enforcer.setWatcher(watcher);
        logger.info(""Casbin set watcher: {}"", watcher.getClass().getName());
        return watcher;
    }
","['    ', 'public', ' ', 'Watcher', ' ', 'redisWatcher', '(', 'RedisProperties', ' ', 'redisProperties', ',', ' ', 'CasbinProperties', ' ', 'casbinProperties', ',', ' ', 'Enforcer', ' ', 'enforcer', ')', ' ', '{', '\n', '        ', 'int', ' ', 'timeout', ' ', '=', ' ', 'redisProperties', '.', 'getTimeout', '(', ')', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', '(', 'int', ')', ' ', 'redisProperties', '.', 'getTimeout', '(', ')', '.', 'toMillis', '(', ')', ' ', ':', ' ', '2000', ';', '\n', '        ', 'RedisWatcher', ' ', 'watcher', ' ', '=', ' ', 'new', ' ', 'RedisWatcher', '(', 'redisProperties', '.', 'getHost', '(', ')', ',', ' ', 'redisProperties', '.', 'getPort', '(', ')', ',', '\n', '                ', 'casbinProperties', '.', 'getPolicyTopic', '(', ')', ',', ' ', 'timeout', ',', ' ', 'redisProperties', '.', 'getPassword', '(', ')', ')', ';', '\n', '        ', 'enforcer', '.', 'setWatcher', '(', 'watcher', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Casbin set watcher: {}', '""', ',', ' ', 'watcher', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'watcher', ';', '\n', '    ', '}', '\n', '<END>']"
master,fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,SerializeUtil.java,serialize,"	public static byte[] serialize(Object object) {
		ObjectOutputStream oos = null;
		ByteArrayOutputStream baos = null;
		try {
			baos = new ByteArrayOutputStream();",https://www.github.com/mybatis/redis-cache/commit/fcf5a1ccf39a0f9c074616c1de27b47d76ca5b2b,"	public static byte[] serialize(Object object) {
		ObjectOutputStream oos = null;
		ByteArrayOutputStream baos = null;
		try {
			baos = new ByteArrayOutputStream();
","['\t', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'serialize', '(', 'Object', ' ', 'object', ')', ' ', '{', '\n', '\t\t', 'ObjectOutputStream', ' ', 'oos', ' ', '=', ' ', 'null', ';', '\n', '\t\t', 'ByteArrayOutputStream', ' ', 'baos', ' ', '=', ' ', 'null', ';', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'baos', ' ', '=', ' ', 'new', ' ', 'ByteArrayOutputStream', '(', ')', ';', '\n', '<END>']"
master,093d22781fb61319c24a0c8051bbbbcdbdf51124,FastTextWrapper.java,getNWords,"        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native @StdString BytePointer getInput();
        public native @StdString BytePointer getOutput();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


// #endif


// Parsed from fasttext_wrapper_javacpp.h

// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/093d22781fb61319c24a0c8051bbbbcdbdf51124,"        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native @StdString BytePointer getInput();
        public native @StdString BytePointer getOutput();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


















}
","['        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabel', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getInput', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getOutput', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getLr', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,ed52c49b3138b8c9a7cfe53b7718cfd9ad9b196d,FastTextWrapper.java,allocate,"    private native void allocate(@Cast(""size_t"") long n);
    public native @Name(""operator="") @ByRef FloatStringPairVector put(@ByRef FloatStringPairVector x);

    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @ByRef float first(@Cast(""size_t"") long i); public native FloatStringPairVector first(@Cast(""size_t"") long i, float first);
    @Index public native @StdString BytePointer second(@Cast(""size_t"") long i);  public native FloatStringPairVector second(@Cast(""size_t"") long i, BytePointer second);
    @MemberSetter @Index public native FloatStringPairVector second(@Cast(""size_t"") long i, @StdString String second);

    public FloatStringPairVector put(float[] firstValue, BytePointer[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }

    public FloatStringPairVector put(float[] firstValue, String[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,std::string>"") public static class FloatStringPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatStringPair(Pointer p) { super(p); }
    public FloatStringPair(float firstValue, BytePointer secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair(float firstValue, String secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

// Parsed from fasttext_wrapper.h

// #ifndef FASTTEXT_WRAPPER_H
// #define FASTTEXT_WRAPPER_H

// #include ""fastText/src/fasttext.h""
// #include ""fasttext_wrapper_misc.h""

/**
 * FastText's wrapper
 */

    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public FastTextApi(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        // We don't make runCmd() a static method so that Loader.load() is always be called in FastTextApi().
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native @Cast(""bool"") boolean checkModel(@StdString BytePointer arg0);
        public native @Cast(""bool"") boolean checkModel(@StdString String arg0);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        // Model unloading is not available in fastText C++. This method is added since
        // Java's GC doesn't collect memory allocated by native function calls.
        public native void unloadModel();
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        // TODO: Check if model was loaded
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


// #endif


// Parsed from fasttext_wrapper_javacpp.h

// Added <numeric> since VS 14.0 complains about missing std::iota
// #include <numeric>
// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/productquantizer.cc""
// #include ""fastText/src/qmatrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/ed52c49b3138b8c9a7cfe53b7718cfd9ad9b196d,"    private native void allocate(@Cast(""size_t"") long n);
    public native @Name(""operator="") @ByRef FloatStringPairVector put(@ByRef FloatStringPairVector x);

    public native long size();
    public native void resize(@Cast(""size_t"") long n);

    @Index public native @ByRef float first(@Cast(""size_t"") long i); public native FloatStringPairVector first(@Cast(""size_t"") long i, float first);
    @Index public native @StdString BytePointer second(@Cast(""size_t"") long i);  public native FloatStringPairVector second(@Cast(""size_t"") long i, BytePointer second);
    @MemberSetter @Index public native FloatStringPairVector second(@Cast(""size_t"") long i, @StdString String second);

    public FloatStringPairVector put(float[] firstValue, BytePointer[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }

    public FloatStringPairVector put(float[] firstValue, String[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,std::string>"") public static class FloatStringPair extends Pointer {
    static { Loader.load(); }
    
    public FloatStringPair(Pointer p) { super(p); }
    public FloatStringPair(float firstValue, BytePointer secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair(float firstValue, String secondValue) { this(); put(firstValue, secondValue); }
    public FloatStringPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef FloatStringPair put(@ByRef FloatStringPair x);


    @MemberGetter public native @ByRef float first(); public native FloatStringPair first(float first);
    @MemberGetter public native @StdString BytePointer second();  public native FloatStringPair second(BytePointer second);
    @MemberSetter @Index public native FloatStringPair second(@StdString String second);

    public FloatStringPair put(float firstValue, BytePointer secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public FloatStringPair put(float firstValue, String secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

@NoOffset @Name(""std::pair<fasttext::real,int32_t>"") public static class DoubleIntPair extends Pointer {
    static { Loader.load(); }
    
    public DoubleIntPair(Pointer p) { super(p); }
    public DoubleIntPair(float firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public DoubleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name(""operator="") @ByRef DoubleIntPair put(@ByRef DoubleIntPair x);


    @MemberGetter public native @ByRef float first(); public native DoubleIntPair first(float first);
    @MemberGetter public native int second();  public native DoubleIntPair second(int second);

    public DoubleIntPair put(float firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}











    @Namespace(""FastTextWrapper"") @NoOffset public static class FastTextApi extends Pointer {
        static { Loader.load(); }
        
        public FastTextApi(Pointer p) { super(p); }
        
        public FastTextApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FastTextApi position(long position) {
            return (FastTextApi)super.position(position);
        }
    
        public FastTextApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        
        public native void runCmd(int arg0, @Cast(""char**"") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast(""char**"") @ByPtrPtr byte[] arg1);
        public native @Cast(""bool"") boolean checkModel(@StdString BytePointer arg0);
        public native @Cast(""bool"") boolean checkModel(@StdString String arg0);
        public native void loadModel(@StdString BytePointer arg0);
        public native void loadModel(@StdString String arg0);
        
        
        public native void unloadModel();
        public native void test(@StdString BytePointer arg0, int arg1);
        public native void test(@StdString String arg0, int arg1);
        
        public native @ByVal StringVector predict(@StdString BytePointer arg0, int arg1);
        public native @ByVal StringVector predict(@StdString String arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString BytePointer arg0, int arg1);
        public native @ByVal FloatStringPairVector predictProba(@StdString String arg0, int arg1);
        public native @ByVal RealVector getVector(@StdString BytePointer arg0);
        public native @ByVal RealVector getVector(@StdString String arg0);
        public native @ByVal StringVector getWords();
        public native @ByVal StringVector getLabels();
        public native @StdString BytePointer getWord(int arg0);
        public native int getNWords();
        public native @StdString BytePointer getLabel(int arg0);
        public native int getNLabels();
        public native double getLr();
        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }






















}
","['    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'n', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'FloatStringPairVector', ' ', 'put', '(', '@ByRef', ' ', 'FloatStringPairVector', ' ', 'x', ')', ';', '\n', '\n', '    ', 'public', ' ', 'native', ' ', 'long', ' ', 'size', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', 'void', ' ', 'resize', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'n', ')', ';', '\n', '\n', '    ', '@Index', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ')', ';', ' ', 'public', ' ', 'native', ' ', 'FloatStringPairVector', ' ', 'first', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', 'float', ' ', 'first', ')', ';', '\n', '    ', '@Index', ' ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'second', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ')', ';', '  ', 'public', ' ', 'native', ' ', 'FloatStringPairVector', ' ', 'second', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', 'BytePointer', ' ', 'second', ')', ';', '\n', '    ', '@MemberSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'FloatStringPairVector', ' ', 'second', '(', '@Cast', '(', '""', 'size_t', '""', ')', ' ', 'long', ' ', 'i', ',', ' ', '@StdString', ' ', 'String', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'FloatStringPairVector', ' ', 'put', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'BytePointer', '[', ']', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'firstValue', '.', 'length', ' ', '&', '&', ' ', 'i', ' ', '<', ' ', 'secondValue', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'first', '(', 'i', ',', ' ', 'firstValue', '[', 'i', ']', ')', ';', '\n', '            ', 'second', '(', 'i', ',', ' ', 'secondValue', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'FloatStringPairVector', ' ', 'put', '(', 'float', '[', ']', ' ', 'firstValue', ',', ' ', 'String', '[', ']', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'firstValue', '.', 'length', ' ', '&', '&', ' ', 'i', ' ', '<', ' ', 'secondValue', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'first', '(', 'i', ',', ' ', 'firstValue', '[', 'i', ']', ')', ';', '\n', '            ', 'second', '(', 'i', ',', ' ', 'secondValue', '[', 'i', ']', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@NoOffset', ' ', '@Name', '(', '""', 'std::pair<fasttext::real,std::string>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FloatStringPair', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'BytePointer', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'String', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'FloatStringPair', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'FloatStringPair', ' ', 'put', '(', '@ByRef', ' ', 'FloatStringPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', 'BytePointer', ' ', 'second', ')', ';', '\n', '    ', '@MemberSetter', ' ', '@Index', ' ', 'public', ' ', 'native', ' ', 'FloatStringPair', ' ', 'second', '(', '@StdString', ' ', 'String', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'BytePointer', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'FloatStringPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'String', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '@NoOffset', ' ', '@Name', '(', '""', 'std::pair<fasttext::real,int32_t>', '""', ')', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'DoubleIntPair', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '    ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '    ', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', ' ', 'this', '(', ')', ';', ' ', 'put', '(', 'firstValue', ',', ' ', 'secondValue', ')', ';', ' ', '}', '\n', '    ', 'public', ' ', 'DoubleIntPair', '(', ')', '       ', '{', ' ', 'allocate', '(', ')', ';', '  ', '}', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '    ', 'public', ' ', 'native', ' ', '@Name', '(', '""', 'operator=', '""', ')', ' ', '@ByRef', ' ', 'DoubleIntPair', ' ', 'put', '(', '@ByRef', ' ', 'DoubleIntPair', ' ', 'x', ')', ';', '\n', '\n', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', '@ByRef', ' ', 'float', ' ', 'first', '(', ')', ';', ' ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'first', '(', 'float', ' ', 'first', ')', ';', '\n', '    ', '@MemberGetter', ' ', 'public', ' ', 'native', ' ', 'int', ' ', 'second', '(', ')', ';', '  ', 'public', ' ', 'native', ' ', 'DoubleIntPair', ' ', 'second', '(', 'int', ' ', 'second', ')', ';', '\n', '\n', '    ', 'public', ' ', 'DoubleIntPair', ' ', 'put', '(', 'float', ' ', 'firstValue', ',', ' ', 'int', ' ', 'secondValue', ')', ' ', '{', '\n', '        ', 'first', '(', 'firstValue', ')', ';', '\n', '        ', 'second', '(', 'secondValue', ')', ';', '\n', '        ', 'return', ' ', 'this', ';', '\n', '    ', '}', '\n', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    ', '@Namespace', '(', '""', 'FastTextWrapper', '""', ')', ' ', '@NoOffset', ' ', 'public', ' ', 'static', ' ', 'class', ' ', 'FastTextApi', ' ', 'extends', ' ', 'Pointer', ' ', '{', '\n', '        ', 'static', ' ', '{', ' ', 'Loader', '.', 'load', '(', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'Pointer', ' ', 'p', ')', ' ', '{', ' ', 'super', '(', 'p', ')', ';', ' ', '}', '\n', '        ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', 'long', ' ', 'size', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocateArray', '(', 'size', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocateArray', '(', 'long', ' ', 'size', ')', ';', '\n', '        ', '@Override', ' ', 'public', ' ', 'FastTextApi', ' ', 'position', '(', 'long', ' ', 'position', ')', ' ', '{', '\n', '            ', 'return', ' ', '(', 'FastTextApi', ')', 'super', '.', 'position', '(', 'position', ')', ';', '\n', '        ', '}', '\n', '    ', '\n', '        ', 'public', ' ', 'FastTextApi', '(', ')', ' ', '{', ' ', 'super', '(', '(', 'Pointer', ')', 'null', ')', ';', ' ', 'allocate', '(', ')', ';', ' ', '}', '\n', '        ', 'private', ' ', 'native', ' ', 'void', ' ', 'allocate', '(', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', 'PointerPointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'BytePointer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'ByteBuffer', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'runCmd', '(', 'int', ' ', 'arg0', ',', ' ', '@Cast', '(', '""', 'char**', '""', ')', ' ', '@ByPtrPtr', ' ', 'byte', '[', ']', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@Cast', '(', '""', 'bool', '""', ')', ' ', 'boolean', ' ', 'checkModel', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@Cast', '(', '""', 'bool', '""', ')', ' ', 'boolean', ' ', 'checkModel', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'loadModel', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'unloadModel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'void', ' ', 'test', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'predict', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'FloatStringPairVector', ' ', 'predictProba', '(', '@StdString', ' ', 'String', ' ', 'arg0', ',', ' ', 'int', ' ', 'arg1', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'BytePointer', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'RealVector', ' ', 'getVector', '(', '@StdString', ' ', 'String', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@ByVal', ' ', 'StringVector', ' ', 'getLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getWord', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNWords', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabel', '(', 'int', ' ', 'arg0', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNLabels', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getLr', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,f0a29e15ebe8e82ac86e7e0c0aeeb3a94fd4a6d5,DownloadBinActivity.java,importBin,"    private void importBin() {
        AskPermission.ask(this, Manifest.permission.READ_EXTERNAL_STORAGE, new AskPermission.Listener() {
            @Override",https://www.github.com/devgianlu/aria2android/commit/f0a29e15ebe8e82ac86e7e0c0aeeb3a94fd4a6d5,"    private void importBin() {
        AskPermission.ask(this, Manifest.permission.READ_EXTERNAL_STORAGE, new AskPermission.Listener() {
            @Override
","['    ', 'private', ' ', 'void', ' ', 'importBin', '(', ')', ' ', '{', '\n', '        ', 'AskPermission', '.', 'ask', '(', 'this', ',', ' ', 'Manifest', '.', 'permission', '.', 'READ_EXTERNAL_STORAGE', ',', ' ', 'new', ' ', 'AskPermission', '.', 'Listener', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,aff1b28d694b3145457b08a08d750fb0b8acc582,ReactButton.java,onClick,"            public void onClick(View view) {
                reactButtonLikeState();
                alertDialog.dismiss();
            }",https://www.github.com/amrdeveloper/reactbutton/commit/aff1b28d694b3145457b08a08d750fb0b8acc582,"            public void onClick(View view) {
                reactButtonLikeState();
                alertDialog.dismiss();
            }
","['            ', 'public', ' ', 'void', ' ', 'onClick', '(', 'View', ' ', 'view', ')', ' ', '{', '\n', '                ', 'reactButtonLikeState', '(', ')', ';', '\n', '                ', 'alertDialog', '.', 'dismiss', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,76bed29a8c663f78546f75956ae2304e5211c5bd,VietnameseAnalysisTokenTest.java,inputToken,"    private void inputToken(String inputText, String[] expectArray) throws IOException {
        TestAnalysis analysis = VietnameseAnalysisTest.createTestAnalysis();
        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);

        TokenStream ts = analyzer.analyzer().tokenStream(""test"", inputText);
        CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);
        ts.reset();
        for (String expected : expectArray) {
            assertThat(ts.incrementToken(), equalTo(true));
            assertThat(term.toString(), equalTo(expected));
        }
        assertThat(ts.incrementToken(), equalTo(false));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/76bed29a8c663f78546f75956ae2304e5211c5bd,"    private void inputToken(String inputText, String[] expectArray) throws IOException {
        TestAnalysis analysis = VietnameseAnalysisTest.createTestAnalysis();
        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);

        TokenStream ts = analyzer.analyzer().tokenStream(""test"", inputText);
        CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);
        ts.reset();
        for (String expected : expectArray) {
            assertThat(ts.incrementToken(), equalTo(true));
            assertThat(term.toString(), equalTo(expected));
        }
        assertThat(ts.incrementToken(), equalTo(false));
    }
","['    ', 'private', ' ', 'void', ' ', 'inputToken', '(', 'String', ' ', 'inputText', ',', ' ', 'String', '[', ']', ' ', 'expectArray', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TestAnalysis', ' ', 'analysis', ' ', '=', ' ', 'VietnameseAnalysisTest', '.', 'createTestAnalysis', '(', ')', ';', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'vi_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '\n', '        ', 'TokenStream', ' ', 'ts', ' ', '=', ' ', 'analyzer', '.', 'analyzer', '(', ')', '.', 'tokenStream', '(', '""', 'test', '""', ',', ' ', 'inputText', ')', ';', '\n', '        ', 'CharTermAttribute', ' ', 'term', ' ', '=', ' ', 'ts', '.', 'addAttribute', '(', 'CharTermAttribute', '.', 'class', ')', ';', '\n', '        ', 'ts', '.', 'reset', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'expected', ' ', ':', ' ', 'expectArray', ')', ' ', '{', '\n', '            ', 'assertThat', '(', 'ts', '.', 'incrementToken', '(', ')', ',', ' ', 'equalTo', '(', 'true', ')', ')', ';', '\n', '            ', 'assertThat', '(', 'term', '.', 'toString', '(', ')', ',', ' ', 'equalTo', '(', 'expected', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'assertThat', '(', 'ts', '.', 'incrementToken', '(', ')', ',', ' ', 'equalTo', '(', 'false', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,093d22781fb61319c24a0c8051bbbbcdbdf51124,FastTextWrapper.java,getLrUpdateRate,"        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


// #endif


// Parsed from fasttext_wrapper_javacpp.h

// #include ""fastText/src/args.cc""
// #include ""fastText/src/dictionary.cc""
// #include ""fastText/src/matrix.cc""
// #include ""fastText/src/vector.cc""
// #include ""fastText/src/model.cc""
// #include ""fastText/src/fasttext.cc""
// #include ""fastText/src/utils.cc""

// #include ""fasttext_wrapper.cc""


}",https://www.github.com/vinhkhuc/jfasttext/commit/093d22781fb61319c24a0c8051bbbbcdbdf51124,"        public native int getLrUpdateRate();
        public native int getDim();
        public native int getContextWindowSize();
        public native int getEpoch();
        public native int getMinCount();
        public native int getMinCountLabel();
        public native int getNSampledNegatives();
        public native int getWordNgrams();
        public native @StdString BytePointer getLossName();
        public native @StdString BytePointer getModelName();
        public native int getBucket();
        public native int getMinn();
        public native int getMaxn();
        public native double getSamplingThreshold();
        public native @StdString BytePointer getLabelPrefix();
        public native @StdString BytePointer getPretrainedVectorsFileName();
    }


















}
","['        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getLrUpdateRate', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getDim', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getContextWindowSize', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getEpoch', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCount', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinCountLabel', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getNSampledNegatives', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getWordNgrams', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLossName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getModelName', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getBucket', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMinn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'int', ' ', 'getMaxn', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', 'double', ' ', 'getSamplingThreshold', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getLabelPrefix', '(', ')', ';', '\n', '        ', 'public', ' ', 'native', ' ', '@StdString', ' ', 'BytePointer', ' ', 'getPretrainedVectorsFileName', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '}', '\n', '<END>']"
master,79e02c1e118dcd41c928e713221c778bed111636,KmsAutoConfiguration.java,kmsAsyncClient,"	public KmsAsyncClient kmsAsyncClient(AwsClientBuilderConfigurer awsClientBuilderConfigurer, ObjectProvider<AwsClientCustomizer<KmsAsyncClientBuilder>> configurer,
			KmsProperties properties) {
		return awsClientBuilderConfigurer.configure(KmsAsyncClient.builder(), properties, configurer.getIfAvailable()).build();
	}",https://www.github.com/zalando/spring-cloud-config-aws-kms/commit/79e02c1e118dcd41c928e713221c778bed111636,"	public KmsAsyncClient kmsAsyncClient(AwsClientBuilderConfigurer awsClientBuilderConfigurer, ObjectProvider<AwsClientCustomizer<KmsAsyncClientBuilder>> configurer,
			KmsProperties properties) {
		return awsClientBuilderConfigurer.configure(KmsAsyncClient.builder(), properties, configurer.getIfAvailable()).build();
	}
","['\t', 'public', ' ', 'KmsAsyncClient', ' ', 'kmsAsyncClient', '(', 'AwsClientBuilderConfigurer', ' ', 'awsClientBuilderConfigurer', ',', ' ', 'ObjectProvider', '<', 'AwsClientCustomizer', '<', 'KmsAsyncClientBuilder', '>', '>', ' ', 'configurer', ',', '\n', '\t\t\t', 'KmsProperties', ' ', 'properties', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'awsClientBuilderConfigurer', '.', 'configure', '(', 'KmsAsyncClient', '.', 'builder', '(', ')', ',', ' ', 'properties', ',', ' ', 'configurer', '.', 'getIfAvailable', '(', ')', ')', '.', 'build', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,8b316cd419857a7156dea525d945ec1fadb30128,InternalAccessor.java,getColor,"        public int getColor(@NonNull String resName) throws ResourceNotFoundException {
            int color = InternalAccessor.getColor(context, resName);
            if (saveToResourcesHolder)
                holder.put(resName, color);
            return color;
        }",https://www.github.com/anggrayudi/android-hidden-api/commit/8b316cd419857a7156dea525d945ec1fadb30128,"        public int getColor(@NonNull String resName) throws ResourceNotFoundException {
            int color = InternalAccessor.getColor(context, resName);
            if (saveToResourcesHolder)
                holder.put(resName, color);
            return color;
        }
","['        ', 'public', ' ', 'int', ' ', 'getColor', '(', '@NonNull', ' ', 'String', ' ', 'resName', ')', ' ', 'throws', ' ', 'ResourceNotFoundException', ' ', '{', '\n', '            ', 'int', ' ', 'color', ' ', '=', ' ', 'InternalAccessor', '.', 'getColor', '(', 'context', ',', ' ', 'resName', ')', ';', '\n', '            ', 'if', ' ', '(', 'saveToResourcesHolder', ')', '\n', '                ', 'holder', '.', 'put', '(', 'resName', ',', ' ', 'color', ')', ';', '\n', '            ', 'return', ' ', 'color', ';', '\n', '        ', '}', '\n', '<END>']"
master,bfca0574c53f11316b0c8749784349df8ed6475c,ExtensionsInjector.java,injectExtensions,"    public void injectExtensions() {
        // add extensions from classpath (non plugin)
        Set<String> extensionClassNames = springPluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionClass);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        // add extensions for each started plugin
        List<PluginWrapper> startedPlugins = springPluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());",https://www.github.com/pf4j/pf4j-spring/commit/bfca0574c53f11316b0c8749784349df8ed6475c,"    public void injectExtensions() {
        
        Set<String> extensionClassNames = springPluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionClass);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        
        List<PluginWrapper> startedPlugins = springPluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());
","['    ', 'public', ' ', 'void', ' ', 'injectExtensions', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'Set', '<', 'String', '>', ' ', 'extensionClassNames', ' ', '=', ' ', 'springPluginManager', '.', 'getExtensionClassNames', '(', 'null', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'extensionClassName', ' ', ':', ' ', 'extensionClassNames', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'log', '.', 'debug', '(', '""', ""Register extension '{}' as bean"", '""', ',', ' ', 'extensionClassName', ')', ';', '\n', '                ', 'Class', '<', '?', '>', ' ', 'extensionClass', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getClassLoader', '(', ')', '.', 'loadClass', '(', 'extensionClassName', ')', ';', '\n', '                ', 'registerExtension', '(', 'extensionClass', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'ClassNotFoundException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'PluginWrapper', '>', ' ', 'startedPlugins', ' ', '=', ' ', 'springPluginManager', '.', 'getStartedPlugins', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'PluginWrapper', ' ', 'plugin', ' ', ':', ' ', 'startedPlugins', ')', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Registering extensions of the plugin '{}' as beans"", '""', ',', ' ', 'plugin', '.', 'getPluginId', '(', ')', ')', ';', '\n', '<END>']"
master,f724eebc5d69f3cabcf200c36039af9cb02e3704,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f724eebc5d69f3cabcf200c36039af9cb02e3704,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '        ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'posIncrAtt', '.', 'getPositionIncrement', '(', ')', ' ', '+', ' ', 'skippedPositions', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,14236f0cffb21f15e4358d4ae7daf2299604196a,Utils.java,createAria2,"    public static Aria2Ui createAria2(@NonNull Context context, @Nullable Aria2Ui.Listener listener) {
        Aria2Ui ui = new Aria2Ui(context, listener);
        ui.setup(R.mipmap.ic_launcher, R.drawable.ic_notification, MainActivity.class);
        return ui;
    }",https://www.github.com/devgianlu/aria2android/commit/14236f0cffb21f15e4358d4ae7daf2299604196a,"    public static Aria2Ui createAria2(@NonNull Context context, @Nullable Aria2Ui.Listener listener) {
        Aria2Ui ui = new Aria2Ui(context, listener);
        ui.setup(R.mipmap.ic_launcher, R.drawable.ic_notification, MainActivity.class);
        return ui;
    }
","['    ', 'public', ' ', 'static', ' ', 'Aria2Ui', ' ', 'createAria2', '(', '@NonNull', ' ', 'Context', ' ', 'context', ',', ' ', '@Nullable', ' ', 'Aria2Ui', '.', 'Listener', ' ', 'listener', ')', ' ', '{', '\n', '        ', 'Aria2Ui', ' ', 'ui', ' ', '=', ' ', 'new', ' ', 'Aria2Ui', '(', 'context', ',', ' ', 'listener', ')', ';', '\n', '        ', 'ui', '.', 'setup', '(', 'R', '.', 'mipmap', '.', 'ic_launcher', ',', ' ', 'R', '.', 'drawable', '.', 'ic_notification', ',', ' ', 'MainActivity', '.', 'class', ')', ';', '\n', '        ', 'return', ' ', 'ui', ';', '\n', '    ', '}', '\n', '<END>']"
master,61b7ffb1da6b65d19430d6f81476499f190856f5,MaterialMenu.java,setColor,"    public void setColor(int color);

    /**
     * Set visibility of icon
     *
     * @param visibility new value for visibility
     */
    public void setVisibility(int visibility);

    /**
     * Set duration of transformation animations
     *
     * @param duration new animation duration
     */
    public void setTransformationDuration(int duration);

    /**
     * Set duration of pressed state circle animation
     *
     * @param duration new animation duration
     */
    public void setPressedDuration(int duration);

    /**
     * Set interpolator for transformation animations
     *
     * @param interpolator new interpolator
     */
    public void setInterpolator(Interpolator interpolator);

    /**
     * Set listener for {@code MaterialMenuDrawable} animation events
     *
     * @param listener new listener or null to remove any listener
     */
    public void setAnimationListener(Animator.AnimatorListener listener);

    /**
     * Enable RTL layout. Flips all icons horizontally
     *
     * @param rtlEnabled true to enable RTL layout
     */
    public void setRTLEnabled(boolean rtlEnabled);

    /**
     * Manually set a transformation value for an {@link com.balysv.materialmenu.MaterialMenuDrawable.AnimationState}
     *
     * @param animationState state to set value in
     * @param value          between {@link com.balysv.materialmenu.MaterialMenuDrawable#TRANSFORMATION_START} and
     *                       {@link com.balysv.materialmenu.MaterialMenuDrawable#TRANSFORMATION_END}.
     */
    public void setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);

    /**
     * @return {@link MaterialMenuDrawable} to be used for the menu
     */
    public MaterialMenuDrawable getDrawable();
}",https://www.github.com/balysv/material-menu/commit/61b7ffb1da6b65d19430d6f81476499f190856f5,"    public void setColor(int color);

    
    public void setVisibility(int visibility);

    
    public void setTransformationDuration(int duration);

    
    public void setPressedDuration(int duration);

    
    public void setInterpolator(Interpolator interpolator);

    
    public void setAnimationListener(Animator.AnimatorListener listener);

    
    public void setRTLEnabled(boolean rtlEnabled);

    
    public void setTransformationOffset(MaterialMenuDrawable.AnimationState animationState, float value);

    
    public MaterialMenuDrawable getDrawable();
}
","['    ', 'public', ' ', 'void', ' ', 'setColor', '(', 'int', ' ', 'color', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setVisibility', '(', 'int', ' ', 'visibility', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setTransformationDuration', '(', 'int', ' ', 'duration', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setPressedDuration', '(', 'int', ' ', 'duration', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setInterpolator', '(', 'Interpolator', ' ', 'interpolator', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setAnimationListener', '(', 'Animator', '.', 'AnimatorListener', ' ', 'listener', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setRTLEnabled', '(', 'boolean', ' ', 'rtlEnabled', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'void', ' ', 'setTransformationOffset', '(', 'MaterialMenuDrawable', '.', 'AnimationState', ' ', 'animationState', ',', ' ', 'float', ' ', 'value', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'MaterialMenuDrawable', ' ', 'getDrawable', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoSinTest,"	void CalculateMonoSinTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.5, calculator.calculateMono(Calculator.MonoOperatorModes.sin, java.lang.Math.PI / 6), 0.0000000001);
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoSinTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.5, calculator.calculateMono(Calculator.MonoOperatorModes.sin, java.lang.Math.PI / 6), 0.0000000001);
	}
","['\t', 'void', ' ', 'CalculateMonoSinTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '0.5', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', ' ', 'java', '.', 'lang', '.', 'Math', '.', 'PI', ' ', '/', ' ', '6', ')', ',', ' ', '0.0000000001', ')', ';', '\n', '\t', '}', '\n', '<END>']"
