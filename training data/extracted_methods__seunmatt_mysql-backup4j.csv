Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,EmailService.java,isPropertiesSet,"    private boolean isPropertiesSet() {
        return !this.host.isEmpty() &&
                this.port > 0 &&",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private boolean isPropertiesSet() {
        return !this.host.isEmpty() &&
                this.port > 0 &&
","['    ', 'private', ' ', 'boolean', ' ', 'isPropertiesSet', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '!', 'this', '.', 'host', '.', 'isEmpty', '(', ')', ' ', '&', '&', '\n', '                ', 'this', '.', 'port', ' ', '>', ' ', '0', ' ', '&', '&', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,validateProperties,"    private boolean validateProperties() {
        return properties != null &&
                properties.containsKey(DB_USERNAME) &&",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private boolean validateProperties() {
        return properties != null &&
                properties.containsKey(DB_USERNAME) &&
","['    ', 'private', ' ', 'boolean', ' ', 'validateProperties', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'properties', ' ', '!', '=', ' ', 'null', ' ', '&', '&', '\n', '                ', 'properties', '.', 'containsKey', '(', 'DB_USERNAME', ')', ' ', '&', '&', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,emailPropertiesSet,"    private boolean emailPropertiesSet() {
        return properties != null &&
               properties.containsKey(EMAIL_HOST) &&",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private boolean emailPropertiesSet() {
        return properties != null &&
               properties.containsKey(EMAIL_HOST) &&
","['    ', 'private', ' ', 'boolean', ' ', 'emailPropertiesSet', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'properties', ' ', '!', '=', ' ', 'null', ' ', '&', '&', '\n', '               ', 'properties', '.', 'containsKey', '(', 'EMAIL_HOST', ')', ' ', '&', '&', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,connect,"    private void connect(String username, String password) {
        try {
            String url = ""jdbc:mysql://localhost:3306/"" + database;",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private void connect(String username, String password) {
        try {
            String url = ""jdbc:mysql://localhost:3306/"" + database;
","['    ', 'private', ' ', 'void', ' ', 'connect', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'url', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'database', ';', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,getAllTables,"    private List<String> getAllTables() throws SQLException {
        List<String> table = new ArrayList<>();
        ResultSet rs;
        rs = stmt.executeQuery(""SHOW TABLE STATUS FROM `"" + database + ""`;"");
        while ( rs.next() ) {
            table.add(rs.getString(""Name""));
        }
        return table;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private List<String> getAllTables() throws SQLException {
        List<String> table = new ArrayList<>();
        ResultSet rs;
        rs = stmt.executeQuery(""SHOW TABLE STATUS FROM `"" + database + ""`;"");
        while ( rs.next() ) {
            table.add(rs.getString(""Name""));
        }
        return table;
    }
","['    ', 'private', ' ', 'List', '<', 'String', '>', ' ', 'getAllTables', '(', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '        ', 'List', '<', 'String', '>', ' ', 'table', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW TABLE STATUS FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '            ', 'table', '.', 'add', '(', 'rs', '.', 'getString', '(', '""', 'Name', '""', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'table', ';', '\n', '    ', '}', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,getTableInsertStatement,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        if(table != null && !table.isEmpty()){
          rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
          while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\r\n\r\n--"");
                sql.append(""\r\n-- Table dump : "").append(qtbl);
                sql.append(""\r\n--\r\n\r\n"");
                sql.append(query).append("";\r\n\r\n"");
          }
        }
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        if(table != null && !table.isEmpty()){
          rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
          while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\r\n\r\n--"");
                sql.append(""\r\n-- Table dump : "").append(qtbl);
                sql.append(""\r\n--\r\n\r\n"");
                sql.append(query).append("";\r\n\r\n"");
          }
        }
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getTableInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'if', '(', 'table', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'table', '.', 'isEmpty', '(', ')', ')', '{', '\n', '          ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW CREATE TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '          ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '                ', 'String', ' ', 'qtbl', ' ', '=', ' ', 'rs', '.', 'getString', '(', '1', ')', ';', '\n', '                ', 'String', ' ', 'query', ' ', '=', ' ', 'rs', '.', 'getString', '(', '2', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n', '\\', 'r', '\\', 'n--', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n-- Table dump : ', '""', ')', '.', 'append', '(', 'qtbl', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n--', '\\', 'r', '\\', 'n', '\\', 'r', '\\', 'n', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'query', ')', '.', 'append', '(', '""', ';', '\\', 'r', '\\', 'n', '\\', 'r', '\\', 'n', '""', ')', ';', '\n', '          ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,getDataInsertStatement,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        //there are no records just return empty string
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\r\n--"").append(""\r\n-- Inserts of "").append(table).append(""\r\n--\r\n\r\n"");

        //temporarily disable foreign key constraint
        sql.append(""\r\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\r\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        //remove the last whitespace and comma
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \r\n"");

        //build the values
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            //now that we're done with a row

            //let's remove the last whitespace and comma
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\r\n"");
            }
        }

        //now that we are done processing the entire row
        //let's add the terminator
        sql.append("";"");

        //enable FK constraint
        sql.append(""\r\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\r\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\r\n--"").append(""\r\n-- Inserts of "").append(table).append(""\r\n--\r\n\r\n"");

        
        sql.append(""\r\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\r\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \r\n"");

        
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            

            
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\r\n"");
            }
        }

        
        
        sql.append("";"");

        
        sql.append(""\r\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\r\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getDataInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\n', '        ', 'ResultSet', ' ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SELECT * FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'rs', '.', 'last', '(', ')', ';', '\n', '        ', 'int', ' ', 'rowCount', ' ', '=', ' ', 'rs', '.', 'getRow', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'rowCount', ' ', '<', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n--', '""', ')', '.', 'append', '(', '""', '\\', 'r', '\\', 'n-- Inserts of ', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '\\', 'r', '\\', 'n--', '\\', 'r', '\\', 'n', '\\', 'r', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` DISABLE KEYS */;', '\\', 'r', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', 'INSERT INTO `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`(', '""', ')', ';', '\n', '\n', '        ', 'ResultSetMetaData', ' ', 'metaData', ' ', '=', ' ', 'rs', '.', 'getMetaData', '(', ')', ';', '\n', '        ', 'int', ' ', 'columnCount', ' ', '=', ' ', 'metaData', '.', 'getColumnCount', '(', ')', ';', '\n', '\n', '        ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '`', '""', ')', '\n', '                   ', '.', 'append', '(', 'metaData', '.', 'getColumnName', '(', ' ', 'i', ' ', '+', ' ', '1', ')', ')', '\n', '                   ', '.', 'append', '(', '""', '`, ', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'append', '(', '""', ') VALUES ', '\\', 'r', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'rs', '.', 'beforeFirst', '(', ')', ';', '\n', '        ', 'while', '(', 'rs', '.', 'next', '(', ')', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '            ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\n', '                ', 'int', ' ', 'columnType', ' ', '=', ' ', 'metaData', '.', 'getColumnType', '(', 'i', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'int', ' ', 'columnIndex', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', ';', '\n', '\n', '                ', 'if', '(', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'INTEGER', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'TINYINT', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'BIT', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', 'rs', '.', 'getInt', '(', 'columnIndex', ')', ')', '.', 'append', '(', '""', ', ', '""', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'String', ' ', 'val', ' ', '=', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', ':', ' ', '""', '""', ';', '\n', '                    ', 'sql', '.', 'append', '(', '""', ""'"", '""', ')', '.', 'append', '(', 'val', ')', '.', 'append', '(', '""', ""', "", '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '\n', '\n', '            ', '\n', '            ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '\n', '            ', 'if', '(', 'rs', '.', 'isLast', '(', ')', ')', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', '),', '\\', 'r', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', ';', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` ENABLE KEYS */;', '\\', 'r', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,exportToSql,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\r\n-- Generated by java-mysql-exporter"");
        sql.append(""\r\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\r\n--"");

        //these declarations are extracted from HeidiSQL
        sql.append(""\r\n\r\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
        .append(""\r\n/*!40101 SET NAMES utf8 */;"")
        .append(""\r\n/*!50503 SET NAMES utf8mb4 */;"")
        .append(""\r\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
        .append(""\r\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        //get the tables
        List<String> tables = getAllTables();

        //get the table insert statement for each table
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

       sql.append(""\r\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
        .append(""\r\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
        .append(""\r\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\r\n-- Generated by java-mysql-exporter"");
        sql.append(""\r\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\r\n--"");

        
        sql.append(""\r\n\r\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
        .append(""\r\n/*!40101 SET NAMES utf8 */;"")
        .append(""\r\n/*!50503 SET NAMES utf8mb4 */;"")
        .append(""\r\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
        .append(""\r\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        
        List<String> tables = getAllTables();

        
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

       sql.append(""\r\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
        .append(""\r\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
        .append(""\r\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'exportToSql', '(', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n-- Generated by java-mysql-exporter', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n-- Date: ', '""', ')', '.', 'append', '(', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd-M-Y H:m:s', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n--', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', 'n', '\\', 'r', '\\', 'n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'r', '\\', 'n/*!40101 SET NAMES utf8 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'r', '\\', 'n/*!50503 SET NAMES utf8mb4 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'r', '\\', 'n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'r', '\\', ""n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"", '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'String', '>', ' ', 'tables', ' ', '=', ' ', 'getAllTables', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'for', ' ', '(', 'String', ' ', 's', ':', ' ', 'tables', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', 'getTableInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'getDataInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '       ', 'sql', '.', 'append', '(', '""', '\\', 'r', '\\', ""n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"", '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'r', '\\', 'n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'r', '\\', 'n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;', '""', ')', ';', '\n', '\n', '        ', 'this', '.', 'generatedSql', ' ', '=', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,export,"    public void export() {

        //check if properties is set or not
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        this.database = properties.getProperty(DB_NAME);
        connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD));

        //generate the final SQL
        String sql;
        try {
            sql = exportToSql();
        } catch (SQLException e) {
            logger.error(LOG_PREFIX + "": Error while generating SQL content from database: "" + e.getLocalizedMessage() +
                    ""\nSQL STATE: "" + e.getSQLState());
            e.printStackTrace();
            return;
        }

        //create a temp dir
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                return;
            }
        }

        //write the sql file out
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        try (FileOutputStream outputStream = new FileOutputStream(file + ""/"" + sqlFileName)) {
            outputStream.write(sql.getBytes());
        } catch (IOException e) {
            logger.error(LOG_PREFIX + "": IO Error while writing SQL Statements to file: "" + sqlFileName + "".\n"" + e.getLocalizedMessage());
            e.printStackTrace();
            return;
        }

        //zip the file
        zipFileName = sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(new File(dirName), generatedZipFile);

        //mail the zipped file if mail settings are available
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    public void export() {

        
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        this.database = properties.getProperty(DB_NAME);
        connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD));

        
        String sql;
        try {
            sql = exportToSql();
        } catch (SQLException e) {
            logger.error(LOG_PREFIX + "": Error while generating SQL content from database: "" + e.getLocalizedMessage() +
                    ""\nSQL STATE: "" + e.getSQLState());
            e.printStackTrace();
            return;
        }

        
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                return;
            }
        }

        
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        try (FileOutputStream outputStream = new FileOutputStream(file + ""/"" + sqlFileName)) {
            outputStream.write(sql.getBytes());
        } catch (IOException e) {
            logger.error(LOG_PREFIX + "": IO Error while writing SQL Statements to file: "" + sqlFileName + "".\n"" + e.getLocalizedMessage());
            e.printStackTrace();
            return;
        }

        
        zipFileName = sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(new File(dirName), generatedZipFile);

        
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'validateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'this', '.', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Error while generating SQL content from database: ', '""', ' ', '+', ' ', 'e', '.', 'getLocalizedMessage', '(', ')', ' ', '+', '\n', '                    ', '""', '\\', 'nSQL STATE: ', '""', ' ', '+', ' ', 'e', '.', 'getSQLState', '(', ')', ')', ';', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd_M_Y_H_mm_ss', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ' ', '+', ' ', '""', '_', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '_database_dump.sql', '""', ';', '\n', '        ', 'try', ' ', '(', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', 'file', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ')', ' ', '{', '\n', '            ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': IO Error while writing SQL Statements to file: ', '""', ' ', '+', ' ', 'sqlFileName', ' ', '+', ' ', '""', '.', '\\', 'n', '""', ' ', '+', ' ', 'e', '.', 'getLocalizedMessage', '(', ')', ')', ';', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'new', ' ', 'File', '(', 'dirName', ')', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'emailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,9d1e4148f05c3509611e1e9a016ad04c30120bc1,MySqlExportService.java,clearTempFiles,"    public void clearTempFiles(boolean preserveZip) {

        //delete the temp sql file
        File sqlFile = new File(dirName + ""/"" + sqlFileName);
        if(sqlFile.exists())
            sqlFile.delete();

        //delete the folder
        File folder = new File(dirName);
        if(folder.exists())
            folder.delete();

        //delete the zipFile
        if(!preserveZip) {
            logger.debug(LOG_PREFIX + "": Deleting generated zip file"");
            File zipFile = new File(zipFileName);
            if (zipFile.exists())
                zipFile.delete();
            logger.debug(LOG_PREFIX + "": Generated Zip File Deleted"");
        }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/9d1e4148f05c3509611e1e9a016ad04c30120bc1,"    public void clearTempFiles(boolean preserveZip) {

        
        File sqlFile = new File(dirName + ""/"" + sqlFileName);
        if(sqlFile.exists())
            sqlFile.delete();

        
        File folder = new File(dirName);
        if(folder.exists())
            folder.delete();

        
        if(!preserveZip) {
            logger.debug(LOG_PREFIX + "": Deleting generated zip file"");
            File zipFile = new File(zipFileName);
            if (zipFile.exists())
                zipFile.delete();
            logger.debug(LOG_PREFIX + "": Generated Zip File Deleted"");
        }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'clearTempFiles', '(', 'boolean', ' ', 'preserveZip', ')', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'if', '(', 'sqlFile', '.', 'exists', '(', ')', ')', '\n', '            ', 'sqlFile', '.', 'delete', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'folder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', 'folder', '.', 'exists', '(', ')', ')', '\n', '            ', 'folder', '.', 'delete', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'preserveZip', ')', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Deleting generated zip file', '""', ')', ';', '\n', '            ', 'File', ' ', 'zipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '            ', 'if', ' ', '(', 'zipFile', '.', 'exists', '(', ')', ')', '\n', '                ', 'zipFile', '.', 'delete', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Generated Zip File Deleted', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': generated temp files cleared successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,MySqlExportService.java,getTableInsertStatement,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
          rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
          while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n-- Table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
          }
        }
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
          rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
          while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n-- Table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
          }
        }
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getTableInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'boolean', ' ', 'addIfNotExists', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'ADD_IF_NOT_EXISTS', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ' ', ':', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'boolean', ' ', 'dropTable', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DROP_TABLES', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DROP_TABLES', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'table', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'table', '.', 'isEmpty', '(', ')', ')', '{', '\n', '          ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW CREATE TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '          ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '                ', 'String', ' ', 'qtbl', ' ', '=', ' ', 'rs', '.', 'getString', '(', '1', ')', ';', '\n', '                ', 'String', ' ', 'query', ' ', '=', ' ', 'rs', '.', 'getString', '(', '2', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Table dump : ', '""', ')', '.', 'append', '(', 'qtbl', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '                ', 'if', '(', 'addIfNotExists', ')', ' ', '{', '\n', '                    ', 'query', ' ', '=', ' ', 'query', '.', 'trim', '(', ')', '.', 'replace', '(', '""', 'CREATE TABLE', '""', ',', ' ', '""', 'CREATE TABLE IF NOT EXISTS ', '""', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropTable', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', '""', 'DROP TABLE IF EXISTS `', '""', ')', '.', 'append', '(', 'database', ')', '.', 'append', '(', '""', '`.`', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`;', '\\', 'n', '""', ')', ';', '\n', '                ', '}', '\n', '                ', 'sql', '.', 'append', '(', 'query', ')', '.', 'append', '(', '""', ';', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '          ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,MySqlExportService.java,getDataInsertStatement,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        //there are no records just return empty string
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        //temporarily disable foreign key constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(""\nDELETE FROM `"").append(database).append(""`.`"").append(table).append(""`;\n"");
        }

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        //remove the last whitespace and comma
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        //build the values
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            //now that we're done with a row

            //let's remove the last whitespace and comma
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\n"");
            }
        }

        //now that we are done processing the entire row
        //let's add the terminator
        sql.append("";"");

        //enable FK constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(""\nDELETE FROM `"").append(database).append(""`.`"").append(table).append(""`;\n"");
        }

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            

            
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\n"");
            }
        }

        
        
        sql.append("";"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getDataInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\n', '        ', 'ResultSet', ' ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SELECT * FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'rs', '.', 'last', '(', ')', ';', '\n', '        ', 'int', ' ', 'rowCount', ' ', '=', ' ', 'rs', '.', 'getRow', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'rowCount', ' ', '<', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', '.', 'append', '(', '""', '\\', 'n-- Inserts of ', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` DISABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'boolean', ' ', 'deleteExistingData', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DELETE_EXISTING_DATA', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DELETE_EXISTING_DATA', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'deleteExistingData', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'nDELETE FROM `', '""', ')', '.', 'append', '(', 'database', ')', '.', 'append', '(', '""', '`.`', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`;', '\\', 'n', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', 'INSERT INTO `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`(', '""', ')', ';', '\n', '\n', '        ', 'ResultSetMetaData', ' ', 'metaData', ' ', '=', ' ', 'rs', '.', 'getMetaData', '(', ')', ';', '\n', '        ', 'int', ' ', 'columnCount', ' ', '=', ' ', 'metaData', '.', 'getColumnCount', '(', ')', ';', '\n', '\n', '        ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '`', '""', ')', '\n', '                   ', '.', 'append', '(', 'metaData', '.', 'getColumnName', '(', ' ', 'i', ' ', '+', ' ', '1', ')', ')', '\n', '                   ', '.', 'append', '(', '""', '`, ', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'append', '(', '""', ') VALUES ', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'rs', '.', 'beforeFirst', '(', ')', ';', '\n', '        ', 'while', '(', 'rs', '.', 'next', '(', ')', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '            ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\n', '                ', 'int', ' ', 'columnType', ' ', '=', ' ', 'metaData', '.', 'getColumnType', '(', 'i', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'int', ' ', 'columnIndex', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', ';', '\n', '\n', '                ', 'if', '(', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'INTEGER', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'TINYINT', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'BIT', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', 'rs', '.', 'getInt', '(', 'columnIndex', ')', ')', '.', 'append', '(', '""', ', ', '""', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'String', ' ', 'val', ' ', '=', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', ':', ' ', '""', '""', ';', '\n', '                    ', 'val', ' ', '=', ' ', 'val', '.', 'replace', '(', '""', ""'"", '""', ',', ' ', '""', '\\\\', ""'"", '""', ')', ';', '\n', '                    ', 'sql', '.', 'append', '(', '""', ""'"", '""', ')', '.', 'append', '(', 'val', ')', '.', 'append', '(', '""', ""', "", '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '\n', '\n', '            ', '\n', '            ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '\n', '            ', 'if', '(', 'rs', '.', 'isLast', '(', ')', ')', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', '),', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', ';', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` ENABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,MySqlExportService.java,exportToSql,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by java-mysql-exporter"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        //these declarations are extracted from HeidiSQL
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
        .append(""\n/*!40101 SET NAMES utf8 */;"")
        .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
        .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
        .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        //get the tables
        List<String> tables = getAllTables();

        //get the table insert statement for each table
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

       sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
        .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
        .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by java-mysql-exporter"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
        .append(""\n/*!40101 SET NAMES utf8 */;"")
        .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
        .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
        .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        
        List<String> tables = getAllTables();

        
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

       sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
        .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
        .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'exportToSql', '(', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Generated by java-mysql-exporter', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Date: ', '""', ')', '.', 'append', '(', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd-M-Y H:m:s', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET NAMES utf8 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!50503 SET NAMES utf8mb4 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', ""n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"", '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'String', '>', ' ', 'tables', ' ', '=', ' ', 'getAllTables', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'for', ' ', '(', 'String', ' ', 's', ':', ' ', 'tables', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', 'getTableInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'getDataInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '       ', 'sql', '.', 'append', '(', '""', '\\', ""n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"", '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;', '""', ')', ';', '\n', '\n', '        ', 'this', '.', 'generatedSql', ' ', '=', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,MySqlExportService.java,export,"    public void export() throws IOException, SQLException{

        //check if properties is set or not
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        this.database = properties.getProperty(DB_NAME);
        connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD));

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir
        dirName = properties.getProperty(MySqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
//                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,"    public void export() throws IOException, SQLException{

        
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        this.database = properties.getProperty(DB_NAME);
        connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD));

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MySqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {

                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'validateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'this', '.', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MySqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', '\n', '            ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd_M_Y_H_mm_ss', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ' ', '+', ' ', '""', '_', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '_database_dump.sql', '""', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'emailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '         ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,MySqlExportService.java,clearTempFiles,"    public void clearTempFiles(boolean preserveZipFile) {

        //delete the temp sql file
        File sqlFile = new File(dirName + ""/sql/"" + sqlFileName);
        if(sqlFile.exists()) {
            boolean res = sqlFile.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }

        File sqlFolder = new File(dirName + ""/sql"");
        if(sqlFolder.exists()) {
            boolean res = sqlFolder.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }


       if(!preserveZipFile) {

           //delete the zipFile
           File zipFile = new File(zipFileName);
           if (zipFile.exists()) {
               boolean res = zipFile.delete();
               logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
           } else {
               logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
           }

           //delete the temp folder
           File folder = new File(dirName);
           if (folder.exists()) {
               boolean res = folder.delete();
               logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
           } else {
               logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
           }
       }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/bd77ccf31b9db8131f2c2875d90e9ddfe9d9adc9,"    public void clearTempFiles(boolean preserveZipFile) {

        
        File sqlFile = new File(dirName + ""/sql/"" + sqlFileName);
        if(sqlFile.exists()) {
            boolean res = sqlFile.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }

        File sqlFolder = new File(dirName + ""/sql"");
        if(sqlFolder.exists()) {
            boolean res = sqlFolder.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }


       if(!preserveZipFile) {

           
           File zipFile = new File(zipFileName);
           if (zipFile.exists()) {
               boolean res = zipFile.delete();
               logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
           } else {
               logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
           }

           
           File folder = new File(dirName);
           if (folder.exists()) {
               boolean res = folder.delete();
               logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
           } else {
               logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
           }
       }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'clearTempFiles', '(', 'boolean', ' ', 'preserveZipFile', ')', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'if', '(', 'sqlFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFile', '.', 'delete', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', 'sqlFolder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFolder', '.', 'delete', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFolder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFolder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '       ', 'if', '(', '!', 'preserveZipFile', ')', ' ', '{', '\n', '\n', '           ', '\n', '           ', 'File', ' ', 'zipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '           ', 'if', ' ', '(', 'zipFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '               ', 'boolean', ' ', 'res', ' ', '=', ' ', 'zipFile', '.', 'delete', '(', ')', ';', '\n', '               ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'zipFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '           ', '}', ' ', 'else', ' ', '{', '\n', '               ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'zipFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '           ', '}', '\n', '\n', '           ', '\n', '           ', 'File', ' ', 'folder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '           ', 'if', ' ', '(', 'folder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '               ', 'boolean', ' ', 'res', ' ', '=', ' ', 'folder', '.', 'delete', '(', ')', ';', '\n', '               ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'folder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '           ', '}', ' ', 'else', ' ', '{', '\n', '               ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'folder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '           ', '}', '\n', '       ', '}', '\n', '\n', '        ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': generated temp files cleared successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlBaseService.java,connect,"    static Connection connect(String username, String password, String database) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database;
        String driver = ""com.mysql.jdbc.Driver"";
        Class.forName(driver);
        Connection connection = DriverManager.getConnection(url, username, password);
        logger.debug(""DB Connected Successfully"");
        return  connection;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    static Connection connect(String username, String password, String database) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database;
        String driver = ""com.mysql.jdbc.Driver"";
        Class.forName(driver);
        Connection connection = DriverManager.getConnection(url, username, password);
        logger.debug(""DB Connected Successfully"");
        return  connection;
    }
","['    ', 'static', ' ', 'Connection', ' ', 'connect', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ',', ' ', 'String', ' ', 'database', ')', ' ', 'throws', ' ', 'ClassNotFoundException', ',', ' ', 'SQLException', ' ', '{', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'database', ';', '\n', '        ', 'String', ' ', 'driver', ' ', '=', ' ', '""', 'com.mysql.jdbc.Driver', '""', ';', '\n', '        ', 'Class', '.', 'forName', '(', 'driver', ')', ';', '\n', '        ', 'Connection', ' ', 'connection', ' ', '=', ' ', 'DriverManager', '.', 'getConnection', '(', 'url', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'DB Connected Successfully', '""', ')', ';', '\n', '        ', 'return', '  ', 'connection', ';', '\n', '    ', '}', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlBaseService.java,getAllTables,"    static List<String> getAllTables(String database, Statement stmt) throws SQLException {
        List<String> table = new ArrayList<>();
        ResultSet rs;
        rs = stmt.executeQuery(""SHOW TABLE STATUS FROM `"" + database + ""`;"");
        while ( rs.next() ) {
            table.add(rs.getString(""Name""));
        }
        return table;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    static List<String> getAllTables(String database, Statement stmt) throws SQLException {
        List<String> table = new ArrayList<>();
        ResultSet rs;
        rs = stmt.executeQuery(""SHOW TABLE STATUS FROM `"" + database + ""`;"");
        while ( rs.next() ) {
            table.add(rs.getString(""Name""));
        }
        return table;
    }
","['    ', 'static', ' ', 'List', '<', 'String', '>', ' ', 'getAllTables', '(', 'String', ' ', 'database', ',', ' ', 'Statement', ' ', 'stmt', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '        ', 'List', '<', 'String', '>', ' ', 'table', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW TABLE STATUS FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '            ', 'table', '.', 'add', '(', 'rs', '.', 'getString', '(', '""', 'Name', '""', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'table', ';', '\n', '    ', '}', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlExportService.java,getTableInsertStatement,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
          rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
          while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
          }
        }

        sql.append(""\n\n--"");
        sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
        sql.append(""\n--\n\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
          rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
          while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
          }
        }

        sql.append(""\n\n--"");
        sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
        sql.append(""\n--\n\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getTableInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'boolean', ' ', 'addIfNotExists', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'ADD_IF_NOT_EXISTS', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ' ', ':', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'boolean', ' ', 'dropTable', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DROP_TABLES', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DROP_TABLES', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'table', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'table', '.', 'isEmpty', '(', ')', ')', '{', '\n', '          ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW CREATE TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '          ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '                ', 'String', ' ', 'qtbl', ' ', '=', ' ', 'rs', '.', 'getString', '(', '1', ')', ';', '\n', '                ', 'String', ' ', 'query', ' ', '=', ' ', 'rs', '.', 'getString', '(', '2', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'qtbl', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '                ', 'if', '(', 'addIfNotExists', ')', ' ', '{', '\n', '                    ', 'query', ' ', '=', ' ', 'query', '.', 'trim', '(', ')', '.', 'replace', '(', '""', 'CREATE TABLE', '""', ',', ' ', '""', 'CREATE TABLE IF NOT EXISTS ', '""', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropTable', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', '""', 'DROP TABLE IF EXISTS `', '""', ')', '.', 'append', '(', 'database', ')', '.', 'append', '(', '""', '`.`', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`;', '\\', 'n', '""', ')', ';', '\n', '                ', '}', '\n', '                ', 'sql', '.', 'append', '(', 'query', ')', '.', 'append', '(', '""', ';', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '          ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'table', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlExportService.java,getDataInsertStatement,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        //there are no records just return empty string
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        //temporarily disable foreign key constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        //remove the last whitespace and comma
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        //build the values
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            //now that we're done with a row

            //let's remove the last whitespace and comma
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\n"");
            }
        }

        //now that we are done processing the entire row
        //let's add the terminator
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        //enable FK constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
           sql.append(""`"")
                   .append(metaData.getColumnName( i + 1))
                   .append(""`, "");
        }

        
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        
        rs.beforeFirst();
        while(rs.next()) {
           sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            

            
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
              sql.append("")"");
            } else {
              sql.append(""),\n"");
            }
        }

        
        
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getDataInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\n', '        ', 'ResultSet', ' ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SELECT * FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'rs', '.', 'last', '(', ')', ';', '\n', '        ', 'int', ' ', 'rowCount', ' ', '=', ' ', 'rs', '.', 'getRow', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'rowCount', ' ', '<', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', '.', 'append', '(', '""', '\\', 'n-- Inserts of ', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` DISABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'boolean', ' ', 'deleteExistingData', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DELETE_EXISTING_DATA', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DELETE_EXISTING_DATA', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'deleteExistingData', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', 'MysqlBaseService', '.', 'getEmptyTableSQL', '(', 'database', ',', ' ', 'table', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', 'INSERT INTO `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`(', '""', ')', ';', '\n', '\n', '        ', 'ResultSetMetaData', ' ', 'metaData', ' ', '=', ' ', 'rs', '.', 'getMetaData', '(', ')', ';', '\n', '        ', 'int', ' ', 'columnCount', ' ', '=', ' ', 'metaData', '.', 'getColumnCount', '(', ')', ';', '\n', '\n', '        ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '`', '""', ')', '\n', '                   ', '.', 'append', '(', 'metaData', '.', 'getColumnName', '(', ' ', 'i', ' ', '+', ' ', '1', ')', ')', '\n', '                   ', '.', 'append', '(', '""', '`, ', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'append', '(', '""', ') VALUES ', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'rs', '.', 'beforeFirst', '(', ')', ';', '\n', '        ', 'while', '(', 'rs', '.', 'next', '(', ')', ')', ' ', '{', '\n', '           ', 'sql', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '            ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\n', '                ', 'int', ' ', 'columnType', ' ', '=', ' ', 'metaData', '.', 'getColumnType', '(', 'i', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'int', ' ', 'columnIndex', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', ';', '\n', '\n', '                ', 'if', '(', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'INTEGER', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'TINYINT', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'BIT', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', 'rs', '.', 'getInt', '(', 'columnIndex', ')', ')', '.', 'append', '(', '""', ', ', '""', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'String', ' ', 'val', ' ', '=', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', ':', ' ', '""', '""', ';', '\n', '                    ', 'val', ' ', '=', ' ', 'val', '.', 'replace', '(', '""', ""'"", '""', ',', ' ', '""', '\\\\', ""'"", '""', ')', ';', '\n', '                    ', 'sql', '.', 'append', '(', '""', ""'"", '""', ')', '.', 'append', '(', 'val', ')', '.', 'append', '(', '""', ""', "", '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '\n', '\n', '            ', '\n', '            ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '\n', '            ', 'if', '(', 'rs', '.', 'isLast', '(', ')', ')', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '              ', 'sql', '.', 'append', '(', '""', '),', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', ';', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` ENABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlExportService.java,exportToSql,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by java-mysql-exporter"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        //these declarations are extracted from HeidiSQL
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
        .append(""\n/*!40101 SET NAMES utf8 */;"")
        .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
        .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
        .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        //get the tables
        List<String> tables = MysqlBaseService.getAllTables(database, stmt);

        //get the table insert statement for each table
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

       sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
        .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
        .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by java-mysql-exporter"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
        .append(""\n/*!40101 SET NAMES utf8 */;"")
        .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
        .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
        .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        
        List<String> tables = MysqlBaseService.getAllTables(database, stmt);

        
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

       sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
        .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
        .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'exportToSql', '(', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Generated by java-mysql-exporter', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Date: ', '""', ')', '.', 'append', '(', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd-M-Y H:m:s', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET NAMES utf8 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!50503 SET NAMES utf8mb4 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', ""n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"", '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'String', '>', ' ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '        ', '\n', '        ', 'for', ' ', '(', 'String', ' ', 's', ':', ' ', 'tables', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', 'getTableInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'getDataInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '       ', 'sql', '.', 'append', '(', '""', '\\', ""n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"", '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;', '""', ')', '\n', '        ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;', '""', ')', ';', '\n', '\n', '        ', 'this', '.', 'generatedSql', ' ', '=', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        this.database = properties.getProperty(DB_NAME);
        Connection connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD), database);
        stmt = connection.createStatement();

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
//                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        this.database = properties.getProperty(DB_NAME);
        Connection connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD), database);
        stmt = connection.createStatement();

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {

                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'validateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'this', '.', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'Connection', ' ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', ' ', 'database', ')', ';', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', '\n', '            ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd_M_Y_H_mm_ss', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ' ', '+', ' ', '""', '_', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '_database_dump.sql', '""', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'emailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '         ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        //connect
        Connection connection = MysqlBaseService.connect(username, password, database);
        Statement stmt = connection.createStatement();

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        if(dropExisting) {






        }

         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            //get all the tables
            tables = MysqlBaseService.getAllTables(database, stmt);

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        
        Connection connection = MysqlBaseService.connect(username, password, database);
        Statement stmt = connection.createStatement();

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        if(dropExisting) {






        }

         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            
            tables = MysqlBaseService.getAllTables(database, stmt);

             
            for (String table: tables) {

                
                
                

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'Connection', ' ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', ' ', 'database', ')', ';', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '        ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '        ', '}', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '             ', 'if', '(', 'deleteExisting', ')', '\n', '                ', 'logger', '.', 'debug', '(', '""', ""deleteExisting flag is set to TRUE! I believe you know what you're doing"", '""', ')', ';', '\n', '\n', '             ', 'if', '(', 'dropExisting', ')', '\n', '                 ', 'logger', '.', 'debug', '(', '""', 'dropExisting flag is set to TRUE! This will drop any existing table(s) in the database', '""', ')', ';', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', '[', ']', ' ', 'resultString', ' ', '=', ' ', '{', '""', '""', '}', ';', '\n', '        ', 'Arrays', '.', 'stream', '(', 'result', ')', '.', 'forEach', '(', 'i', ' ', '-', '>', ' ', 'resultString', '[', '0', ']', ' ', '=', ' ', 'resultString', '[', '0', ']', '.', 'concat', '(', 'i', ' ', '+', ' ', '""', ' ', '""', ')', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batch for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlImportService.java,assertValidParams,"    private boolean assertValidParams() {
        return !this.database.isEmpty() &&
                !this.username.isEmpty() &&",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    private boolean assertValidParams() {
        return !this.database.isEmpty() &&
                !this.username.isEmpty() &&
","['    ', 'private', ' ', 'boolean', ' ', 'assertValidParams', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '!', 'this', '.', 'database', '.', 'isEmpty', '(', ')', ' ', '&', '&', '\n', '                ', '!', 'this', '.', 'username', '.', 'isEmpty', '(', ')', ' ', '&', '&', '\n']"
master,710ea0125db1068cc95d969aa79502c7e2296509,MysqlImportService.java,builder,"    public static MysqlImportService builder() {
        return new MysqlImportService();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/710ea0125db1068cc95d969aa79502c7e2296509,"    public static MysqlImportService builder() {
        return new MysqlImportService();
    }
","['    ', 'public', ' ', 'static', ' ', 'MysqlImportService', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'MysqlImportService', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b6afcd93a0bb11c314a55a56798dcd3ea935a15f,MysqlBaseService.java,connect,"    static Connection connect(String username, String password, String database, String driverName) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database;
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.jdbc.Driver"" : driverName;
        return doConnect(driver, url, username, password);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6afcd93a0bb11c314a55a56798dcd3ea935a15f,"    static Connection connect(String username, String password, String database, String driverName) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database;
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.jdbc.Driver"" : driverName;
        return doConnect(driver, url, username, password);
    }
","['    ', 'static', ' ', 'Connection', ' ', 'connect', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ',', ' ', 'String', ' ', 'database', ',', ' ', 'String', ' ', 'driverName', ')', ' ', 'throws', ' ', 'ClassNotFoundException', ',', ' ', 'SQLException', ' ', '{', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'database', ';', '\n', '        ', 'String', ' ', 'driver', ' ', '=', ' ', '(', 'Objects', '.', 'isNull', '(', 'driverName', ')', ' ', '|', '|', ' ', 'driverName', '.', 'isEmpty', '(', ')', ')', ' ', '?', ' ', '""', 'com.mysql.jdbc.Driver', '""', ' ', ':', ' ', 'driverName', ';', '\n', '        ', 'return', ' ', 'doConnect', '(', 'driver', ',', ' ', 'url', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '    ', '}', '\n']"
master,b6afcd93a0bb11c314a55a56798dcd3ea935a15f,MysqlBaseService.java,connectWithURL,"    static Connection connectWithURL(String username, String password, String jdbcURL, String driverName) throws ClassNotFoundException, SQLException {
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.jdbc.Driver"" : driverName;
        return doConnect(driver, jdbcURL, username, password);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6afcd93a0bb11c314a55a56798dcd3ea935a15f,"    static Connection connectWithURL(String username, String password, String jdbcURL, String driverName) throws ClassNotFoundException, SQLException {
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.jdbc.Driver"" : driverName;
        return doConnect(driver, jdbcURL, username, password);
    }
","['    ', 'static', ' ', 'Connection', ' ', 'connectWithURL', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ',', ' ', 'String', ' ', 'jdbcURL', ',', ' ', 'String', ' ', 'driverName', ')', ' ', 'throws', ' ', 'ClassNotFoundException', ',', ' ', 'SQLException', ' ', '{', '\n', '        ', 'String', ' ', 'driver', ' ', '=', ' ', '(', 'Objects', '.', 'isNull', '(', 'driverName', ')', ' ', '|', '|', ' ', 'driverName', '.', 'isEmpty', '(', ')', ')', ' ', '?', ' ', '""', 'com.mysql.jdbc.Driver', '""', ' ', ':', ' ', 'driverName', ';', '\n', '        ', 'return', ' ', 'doConnect', '(', 'driver', ',', ' ', 'jdbcURL', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '    ', '}', '\n']"
master,b6afcd93a0bb11c314a55a56798dcd3ea935a15f,MysqlBaseService.java,doConnect,"    private static Connection doConnect(String driver, String url, String username, String password) throws SQLException, ClassNotFoundException {
        Class.forName(driver);
        Connection connection = DriverManager.getConnection(url, username, password);
        logger.debug(""DB Connected Successfully"");
        return  connection;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6afcd93a0bb11c314a55a56798dcd3ea935a15f,"    private static Connection doConnect(String driver, String url, String username, String password) throws SQLException, ClassNotFoundException {
        Class.forName(driver);
        Connection connection = DriverManager.getConnection(url, username, password);
        logger.debug(""DB Connected Successfully"");
        return  connection;
    }
","['    ', 'private', ' ', 'static', ' ', 'Connection', ' ', 'doConnect', '(', 'String', ' ', 'driver', ',', ' ', 'String', ' ', 'url', ',', ' ', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '        ', 'Class', '.', 'forName', '(', 'driver', ')', ';', '\n', '        ', 'Connection', ' ', 'connection', ' ', '=', ' ', 'DriverManager', '.', 'getConnection', '(', 'url', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'DB Connected Successfully', '""', ')', ';', '\n', '        ', 'return', '  ', 'connection', ';', '\n', '    ', '}', '\n']"
master,b6afcd93a0bb11c314a55a56798dcd3ea935a15f,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
//                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/b6afcd93a0bb11c314a55a56798dcd3ea935a15f,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {

                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'validateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_CONNECTION_STRING', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'String', ' ', 'driverName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_DRIVER_NAME', ',', ' ', '""', '""', ')', ';', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'database', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'jdbcURL', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', '\n', '            ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd_M_Y_H_mm_ss', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ' ', '+', ' ', '""', '_', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '_database_dump.sql', '""', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'emailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '         ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,b6afcd93a0bb11c314a55a56798dcd3ea935a15f,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        //connect
        //connect to the database

        Connection connection;
        if(jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, username,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            //get all the tables
            tables = MysqlBaseService.getAllTables(database, stmt);

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6afcd93a0bb11c314a55a56798dcd3ea935a15f,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        
        

        Connection connection;
        if(jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, username,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            
            tables = MysqlBaseService.getAllTables(database, stmt);

             
            for (String table: tables) {

                
                
                

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'username', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '             ', 'if', '(', 'deleteExisting', ')', '\n', '                ', 'logger', '.', 'debug', '(', '""', ""deleteExisting flag is set to TRUE! I believe you know what you're doing"", '""', ')', ';', '\n', '\n', '             ', 'if', '(', 'dropExisting', ')', '\n', '                 ', 'logger', '.', 'debug', '(', '""', 'dropExisting flag is set to TRUE! This will drop any existing table(s) in the database', '""', ')', ';', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', '[', ']', ' ', 'resultString', ' ', '=', ' ', '{', '""', '""', '}', ';', '\n', '        ', 'Arrays', '.', 'stream', '(', 'result', ')', '.', 'forEach', '(', 'i', ' ', '-', '>', ' ', 'resultString', '[', '0', ']', ' ', '=', ' ', 'resultString', '[', '0', ']', '.', 'concat', '(', 'i', ' ', '+', ' ', '""', ' ', '""', ')', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batch for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,b6afcd93a0bb11c314a55a56798dcd3ea935a15f,MysqlImportService.java,assertValidParams,"    private boolean assertValidParams() {
        return username != null && !this.username.isEmpty() &&
                password != null && !this.password.isEmpty() &&",https://www.github.com/seunmatt/mysql-backup4j/commit/b6afcd93a0bb11c314a55a56798dcd3ea935a15f,"    private boolean assertValidParams() {
        return username != null && !this.username.isEmpty() &&
                password != null && !this.password.isEmpty() &&
","['    ', 'private', ' ', 'boolean', ' ', 'assertValidParams', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'username', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'this', '.', 'username', '.', 'isEmpty', '(', ')', ' ', '&', '&', '\n', '                ', 'password', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'this', '.', 'password', '.', 'isEmpty', '(', ')', ' ', '&', '&', '\n']"
master,bf4b762634318bb043bb6f23936cd2192e2526ee,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        //connect
        //connect to the database

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, username,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            //get all the tables
            tables = MysqlBaseService.getAllTables(database, stmt);

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/bf4b762634318bb043bb6f23936cd2192e2526ee,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        
        

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, username,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            
            tables = MysqlBaseService.getAllTables(database, stmt);

             
            for (String table: tables) {

                
                
                

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'username', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '             ', 'if', '(', 'deleteExisting', ')', '\n', '                ', 'logger', '.', 'debug', '(', '""', ""deleteExisting flag is set to TRUE! I believe you know what you're doing"", '""', ')', ';', '\n', '\n', '             ', 'if', '(', 'dropExisting', ')', '\n', '                 ', 'logger', '.', 'debug', '(', '""', 'dropExisting flag is set to TRUE! This will drop any existing table(s) in the database', '""', ')', ';', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', '[', ']', ' ', 'resultString', ' ', '=', ' ', '{', '""', '""', '}', ';', '\n', '        ', 'Arrays', '.', 'stream', '(', 'result', ')', '.', 'forEach', '(', 'i', ' ', '-', '>', ' ', 'resultString', '[', '0', ']', ' ', '=', ' ', 'resultString', '[', '0', ']', '.', 'concat', '(', 'i', ' ', '+', ' ', '""', ' ', '""', ')', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batch for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,228ac8844365b77ae92ab3710dd2236af97f9001,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        //connect
        //connect to the database

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            //get all the tables
            tables = MysqlBaseService.getAllTables(database, stmt);

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/228ac8844365b77ae92ab3710dd2236af97f9001,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        
        

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            
            tables = MysqlBaseService.getAllTables(database, stmt);

             
            for (String table: tables) {

                
                
                

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '             ', 'if', '(', 'deleteExisting', ')', '\n', '                ', 'logger', '.', 'debug', '(', '""', ""deleteExisting flag is set to TRUE! I believe you know what you're doing"", '""', ')', ';', '\n', '\n', '             ', 'if', '(', 'dropExisting', ')', '\n', '                 ', 'logger', '.', 'debug', '(', '""', 'dropExisting flag is set to TRUE! This will drop any existing table(s) in the database', '""', ')', ';', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', '[', ']', ' ', 'resultString', ' ', '=', ' ', '{', '""', '""', '}', ';', '\n', '        ', 'Arrays', '.', 'stream', '(', 'result', ')', '.', 'forEach', '(', 'i', ' ', '-', '>', ' ', 'resultString', '[', '0', ']', ' ', '=', ' ', 'resultString', '[', '0', ']', '.', 'concat', '(', 'i', ' ', '+', ' ', '""', ' ', '""', ')', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batch for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,72ababe3862523c2e3a9e75892e2d5ee5b56af2b,MysqlExportService.java,emailPropertiesSet,"    private boolean emailPropertiesSet() {
        return properties != null &&
                properties.containsKey(EMAIL_HOST) &&",https://www.github.com/seunmatt/mysql-backup4j/commit/72ababe3862523c2e3a9e75892e2d5ee5b56af2b,"    private boolean emailPropertiesSet() {
        return properties != null &&
                properties.containsKey(EMAIL_HOST) &&
","['    ', 'private', ' ', 'boolean', ' ', 'emailPropertiesSet', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'properties', ' ', '!', '=', ' ', 'null', ' ', '&', '&', '\n', '                ', 'properties', '.', 'containsKey', '(', 'EMAIL_HOST', ')', ' ', '&', '&', '\n']"
master,72ababe3862523c2e3a9e75892e2d5ee5b56af2b,MysqlExportService.java,sqlFileNameProperty,"    private boolean sqlFileNameProperty(){
        return properties != null &&
                properties.containsKey(SQL_FILE_NAME);",https://www.github.com/seunmatt/mysql-backup4j/commit/72ababe3862523c2e3a9e75892e2d5ee5b56af2b,"    private boolean sqlFileNameProperty(){
        return properties != null &&
                properties.containsKey(SQL_FILE_NAME);
","['    ', 'private', ' ', 'boolean', ' ', 'sqlFileNameProperty', '(', ')', '{', '\n', '        ', 'return', ' ', 'properties', ' ', '!', '=', ' ', 'null', ' ', '&', '&', '\n', '                ', 'properties', '.', 'containsKey', '(', 'SQL_FILE_NAME', ')', ';', '\n']"
master,72ababe3862523c2e3a9e75892e2d5ee5b56af2b,MysqlExportService.java,getTableInsertStatement,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
            rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
            while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
            }
        }

        sql.append(""\n\n--"");
        sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
        sql.append(""\n--\n\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/72ababe3862523c2e3a9e75892e2d5ee5b56af2b,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
            rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
            while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
            }
        }

        sql.append(""\n\n--"");
        sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
        sql.append(""\n--\n\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getTableInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'boolean', ' ', 'addIfNotExists', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'ADD_IF_NOT_EXISTS', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ' ', ':', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'boolean', ' ', 'dropTable', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DROP_TABLES', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DROP_TABLES', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'table', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'table', '.', 'isEmpty', '(', ')', ')', '{', '\n', '            ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW CREATE TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '            ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '                ', 'String', ' ', 'qtbl', ' ', '=', ' ', 'rs', '.', 'getString', '(', '1', ')', ';', '\n', '                ', 'String', ' ', 'query', ' ', '=', ' ', 'rs', '.', 'getString', '(', '2', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'qtbl', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '                ', 'if', '(', 'addIfNotExists', ')', ' ', '{', '\n', '                    ', 'query', ' ', '=', ' ', 'query', '.', 'trim', '(', ')', '.', 'replace', '(', '""', 'CREATE TABLE', '""', ',', ' ', '""', 'CREATE TABLE IF NOT EXISTS ', '""', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropTable', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', '""', 'DROP TABLE IF EXISTS `', '""', ')', '.', 'append', '(', 'database', ')', '.', 'append', '(', '""', '`.`', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`;', '\\', 'n', '""', ')', ';', '\n', '                ', '}', '\n', '                ', 'sql', '.', 'append', '(', 'query', ')', '.', 'append', '(', '""', ';', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'table', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,72ababe3862523c2e3a9e75892e2d5ee5b56af2b,MysqlExportService.java,getDataInsertStatement,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        //there are no records just return empty string
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        //temporarily disable foreign key constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
            sql.append(""`"")
                    .append(metaData.getColumnName( i + 1))
                    .append(""`, "");
        }

        //remove the last whitespace and comma
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        //build the values
        rs.beforeFirst();
        while(rs.next()) {
            sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            //now that we're done with a row

            //let's remove the last whitespace and comma
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
                sql.append("")"");
            } else {
                sql.append(""),\n"");
            }
        }

        //now that we are done processing the entire row
        //let's add the terminator
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        //enable FK constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/72ababe3862523c2e3a9e75892e2d5ee5b56af2b,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");
        rs.last();
        int rowCount = rs.getRow();

        
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        for(int i = 0; i < columnCount; i++) {
            sql.append(""`"")
                    .append(metaData.getColumnName( i + 1))
                    .append(""`, "");
        }

        
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        
        rs.beforeFirst();
        while(rs.next()) {
            sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                } else {
                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";
                    val = val.replace(""'"", ""\\'"");
                    sql.append(""'"").append(val).append(""', "");
                }
            }

            

            
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            if(rs.isLast()) {
                sql.append("")"");
            } else {
                sql.append(""),\n"");
            }
        }

        
        
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getDataInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\n', '        ', 'ResultSet', ' ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SELECT * FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'rs', '.', 'last', '(', ')', ';', '\n', '        ', 'int', ' ', 'rowCount', ' ', '=', ' ', 'rs', '.', 'getRow', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'rowCount', ' ', '<', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', '.', 'append', '(', '""', '\\', 'n-- Inserts of ', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` DISABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'boolean', ' ', 'deleteExistingData', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DELETE_EXISTING_DATA', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DELETE_EXISTING_DATA', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'deleteExistingData', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', 'MysqlBaseService', '.', 'getEmptyTableSQL', '(', 'database', ',', ' ', 'table', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', 'INSERT INTO `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`(', '""', ')', ';', '\n', '\n', '        ', 'ResultSetMetaData', ' ', 'metaData', ' ', '=', ' ', 'rs', '.', 'getMetaData', '(', ')', ';', '\n', '        ', 'int', ' ', 'columnCount', ' ', '=', ' ', 'metaData', '.', 'getColumnCount', '(', ')', ';', '\n', '\n', '        ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', '""', '`', '""', ')', '\n', '                    ', '.', 'append', '(', 'metaData', '.', 'getColumnName', '(', ' ', 'i', ' ', '+', ' ', '1', ')', ')', '\n', '                    ', '.', 'append', '(', '""', '`, ', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'append', '(', '""', ') VALUES ', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'rs', '.', 'beforeFirst', '(', ')', ';', '\n', '        ', 'while', '(', 'rs', '.', 'next', '(', ')', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '            ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\n', '                ', 'int', ' ', 'columnType', ' ', '=', ' ', 'metaData', '.', 'getColumnType', '(', 'i', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'int', ' ', 'columnIndex', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', ';', '\n', '\n', '                ', 'if', '(', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'INTEGER', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'TINYINT', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'BIT', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', 'rs', '.', 'getInt', '(', 'columnIndex', ')', ')', '.', 'append', '(', '""', ', ', '""', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'String', ' ', 'val', ' ', '=', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', ':', ' ', '""', '""', ';', '\n', '                    ', 'val', ' ', '=', ' ', 'val', '.', 'replace', '(', '""', ""'"", '""', ',', ' ', '""', '\\\\', ""'"", '""', ')', ';', '\n', '                    ', 'sql', '.', 'append', '(', '""', ""'"", '""', ')', '.', 'append', '(', 'val', ')', '.', 'append', '(', '""', ""', "", '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '\n', '\n', '            ', '\n', '            ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '\n', '            ', 'if', '(', 'rs', '.', 'isLast', '(', ')', ')', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', '""', '),', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', ';', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` ENABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,72ababe3862523c2e3a9e75892e2d5ee5b56af2b,MysqlExportService.java,exportToSql,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by java-mysql-exporter"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        //these declarations are extracted from HeidiSQL
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
                .append(""\n/*!40101 SET NAMES utf8 */;"")
                .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
                .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
                .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        //get the tables
        List<String> tables = MysqlBaseService.getAllTables(database, stmt);

        //get the table insert statement for each table
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
                .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
                .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/72ababe3862523c2e3a9e75892e2d5ee5b56af2b,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by java-mysql-exporter"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
                .append(""\n/*!40101 SET NAMES utf8 */;"")
                .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
                .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
                .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        
        List<String> tables = MysqlBaseService.getAllTables(database, stmt);

        
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
                .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
                .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'exportToSql', '(', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Generated by java-mysql-exporter', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Date: ', '""', ')', '.', 'append', '(', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd-M-Y H:m:s', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET NAMES utf8 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!50503 SET NAMES utf8mb4 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', ""n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"", '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'String', '>', ' ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '        ', '\n', '        ', 'for', ' ', '(', 'String', ' ', 's', ':', ' ', 'tables', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', 'getTableInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'getDataInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', ""n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"", '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;', '""', ')', ';', '\n', '\n', '        ', 'this', '.', 'generatedSql', ' ', '=', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,72ababe3862523c2e3a9e75892e2d5ee5b56af2b,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
//                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = setSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/72ababe3862523c2e3a9e75892e2d5ee5b56af2b,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {

                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = setSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'validateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_CONNECTION_STRING', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'String', ' ', 'driverName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_DRIVER_NAME', ',', ' ', '""', '""', ')', ';', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'database', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'jdbcURL', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', '\n', '            ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'setSqlFilename', '(', ')', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'emailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,72ababe3862523c2e3a9e75892e2d5ee5b56af2b,MysqlExportService.java,clearTempFiles,"    public void clearTempFiles(boolean preserveZipFile) {

        //delete the temp sql file
        File sqlFile = new File(dirName + ""/sql/"" + sqlFileName);
        if(sqlFile.exists()) {
            boolean res = sqlFile.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }

        File sqlFolder = new File(dirName + ""/sql"");
        if(sqlFolder.exists()) {
            boolean res = sqlFolder.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }


        if(!preserveZipFile) {

            //delete the zipFile
            File zipFile = new File(zipFileName);
            if (zipFile.exists()) {
                boolean res = zipFile.delete();
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }

            //delete the temp folder
            File folder = new File(dirName);
            if (folder.exists()) {
                boolean res = folder.delete();
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }
        }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/72ababe3862523c2e3a9e75892e2d5ee5b56af2b,"    public void clearTempFiles(boolean preserveZipFile) {

        
        File sqlFile = new File(dirName + ""/sql/"" + sqlFileName);
        if(sqlFile.exists()) {
            boolean res = sqlFile.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }

        File sqlFolder = new File(dirName + ""/sql"");
        if(sqlFolder.exists()) {
            boolean res = sqlFolder.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }


        if(!preserveZipFile) {

            
            File zipFile = new File(zipFileName);
            if (zipFile.exists()) {
                boolean res = zipFile.delete();
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }

            
            File folder = new File(dirName);
            if (folder.exists()) {
                boolean res = folder.delete();
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }
        }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'clearTempFiles', '(', 'boolean', ' ', 'preserveZipFile', ')', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'if', '(', 'sqlFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFile', '.', 'delete', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', 'sqlFolder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFolder', '.', 'delete', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFolder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFolder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'if', '(', '!', 'preserveZipFile', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'File', ' ', 'zipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '            ', 'if', ' ', '(', 'zipFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '                ', 'boolean', ' ', 'res', ' ', '=', ' ', 'zipFile', '.', 'delete', '(', ')', ';', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'zipFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'zipFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '\n', '            ', 'File', ' ', 'folder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '            ', 'if', ' ', '(', 'folder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '                ', 'boolean', ' ', 'res', ' ', '=', ' ', 'folder', '.', 'delete', '(', ')', ';', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'folder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'folder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': generated temp files cleared successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,318079b10b1feb52b746151a4135775c52fad862,MysqlBaseService.java,connect,"    static Connection connect(String username, String password, String database, String driverName) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database;
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.cj.jdbc.Driver"" : driverName;
        return doConnect(driver, url, username, password);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/318079b10b1feb52b746151a4135775c52fad862,"    static Connection connect(String username, String password, String database, String driverName) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database;
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.cj.jdbc.Driver"" : driverName;
        return doConnect(driver, url, username, password);
    }
","['    ', 'static', ' ', 'Connection', ' ', 'connect', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ',', ' ', 'String', ' ', 'database', ',', ' ', 'String', ' ', 'driverName', ')', ' ', 'throws', ' ', 'ClassNotFoundException', ',', ' ', 'SQLException', ' ', '{', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'database', ';', '\n', '        ', 'String', ' ', 'driver', ' ', '=', ' ', '(', 'Objects', '.', 'isNull', '(', 'driverName', ')', ' ', '|', '|', ' ', 'driverName', '.', 'isEmpty', '(', ')', ')', ' ', '?', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ' ', ':', ' ', 'driverName', ';', '\n', '        ', 'return', ' ', 'doConnect', '(', 'driver', ',', ' ', 'url', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '    ', '}', '\n']"
master,318079b10b1feb52b746151a4135775c52fad862,MysqlBaseService.java,connectWithURL,"    static Connection connectWithURL(String username, String password, String jdbcURL, String driverName) throws ClassNotFoundException, SQLException {
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.cj.jdbc.Driver"" : driverName;
        return doConnect(driver, jdbcURL, username, password);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/318079b10b1feb52b746151a4135775c52fad862,"    static Connection connectWithURL(String username, String password, String jdbcURL, String driverName) throws ClassNotFoundException, SQLException {
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.cj.jdbc.Driver"" : driverName;
        return doConnect(driver, jdbcURL, username, password);
    }
","['    ', 'static', ' ', 'Connection', ' ', 'connectWithURL', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ',', ' ', 'String', ' ', 'jdbcURL', ',', ' ', 'String', ' ', 'driverName', ')', ' ', 'throws', ' ', 'ClassNotFoundException', ',', ' ', 'SQLException', ' ', '{', '\n', '        ', 'String', ' ', 'driver', ' ', '=', ' ', '(', 'Objects', '.', 'isNull', '(', 'driverName', ')', ' ', '|', '|', ' ', 'driverName', '.', 'isEmpty', '(', ')', ')', ' ', '?', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ' ', ':', ' ', 'driverName', ';', '\n', '        ', 'return', ' ', 'doConnect', '(', 'driver', ',', ' ', 'jdbcURL', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '    ', '}', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,isValidateProperties,"    private boolean isValidateProperties() {
        return properties != null &&
                properties.containsKey(DB_USERNAME) &&",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    private boolean isValidateProperties() {
        return properties != null &&
                properties.containsKey(DB_USERNAME) &&
","['    ', 'private', ' ', 'boolean', ' ', 'isValidateProperties', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'properties', ' ', '!', '=', ' ', 'null', ' ', '&', '&', '\n', '                ', 'properties', '.', 'containsKey', '(', 'DB_USERNAME', ')', ' ', '&', '&', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,isEmailPropertiesSet,"    private boolean isEmailPropertiesSet() {
        return properties != null &&
                properties.containsKey(EMAIL_HOST) &&",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    private boolean isEmailPropertiesSet() {
        return properties != null &&
                properties.containsKey(EMAIL_HOST) &&
","['    ', 'private', ' ', 'boolean', ' ', 'isEmailPropertiesSet', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'properties', ' ', '!', '=', ' ', 'null', ' ', '&', '&', '\n', '                ', 'properties', '.', 'containsKey', '(', 'EMAIL_HOST', ')', ' ', '&', '&', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,isSqlFileNamePropertySet,"    private boolean isSqlFileNamePropertySet(){
        return properties != null &&
                properties.containsKey(SQL_FILE_NAME);",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    private boolean isSqlFileNamePropertySet(){
        return properties != null &&
                properties.containsKey(SQL_FILE_NAME);
","['    ', 'private', ' ', 'boolean', ' ', 'isSqlFileNamePropertySet', '(', ')', '{', '\n', '        ', 'return', ' ', 'properties', ' ', '!', '=', ' ', 'null', ' ', '&', '&', '\n', '                ', 'properties', '.', 'containsKey', '(', 'SQL_FILE_NAME', ')', ';', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,getTableInsertStatement,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
            rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
            while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
            }

            sql.append(""\n\n--"");
            sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
            sql.append(""\n--\n\n"");
        }

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");
        boolean dropTable = Boolean.parseBoolean(properties.containsKey(DROP_TABLES) ? properties.getProperty(DROP_TABLES, ""false"") : ""false"");

        if(table != null && !table.isEmpty()){
            rs = stmt.executeQuery(""SHOW CREATE TABLE `"" + database + ""`.`"" + table + ""`;"");
            while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS "");
                }

                if(dropTable) {
                    sql.append(""DROP TABLE IF EXISTS `"").append(database).append(""`.`"").append(table).append(""`;\n"");
                }
                sql.append(query).append("";\n\n"");
            }

            sql.append(""\n\n--"");
            sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
            sql.append(""\n--\n\n"");
        }

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getTableInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'boolean', ' ', 'addIfNotExists', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'ADD_IF_NOT_EXISTS', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ' ', ':', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'boolean', ' ', 'dropTable', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DROP_TABLES', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DROP_TABLES', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'table', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'table', '.', 'isEmpty', '(', ')', ')', '{', '\n', '            ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW CREATE TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '            ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '                ', 'String', ' ', 'qtbl', ' ', '=', ' ', 'rs', '.', 'getString', '(', '1', ')', ';', '\n', '                ', 'String', ' ', 'query', ' ', '=', ' ', 'rs', '.', 'getString', '(', '2', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'qtbl', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '                ', 'if', '(', 'addIfNotExists', ')', ' ', '{', '\n', '                    ', 'query', ' ', '=', ' ', 'query', '.', 'trim', '(', ')', '.', 'replace', '(', '""', 'CREATE TABLE', '""', ',', ' ', '""', 'CREATE TABLE IF NOT EXISTS ', '""', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropTable', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', '""', 'DROP TABLE IF EXISTS `', '""', ')', '.', 'append', '(', 'database', ')', '.', 'append', '(', '""', '`.`', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`;', '\\', 'n', '""', ')', ';', '\n', '                ', '}', '\n', '                ', 'sql', '.', 'append', '(', 'query', ')', '.', 'append', '(', '""', ';', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'table', ')', ';', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,getDataInsertStatement,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");

        //move to the last row to get max rows returned
        rs.last();
        int rowCount = rs.getRow();

        //there are no records just return empty string
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        //temporarily disable foreign key constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        //generate the column names that are present
        //in the returned result set
        //at this point the insert is INSERT INTO (`col1`, `col2`, ...)
        for(int i = 0; i < columnCount; i++) {
            sql.append(""`"")
                    .append(metaData.getColumnName( i + 1))
                    .append(""`, "");
        }

        //remove the last whitespace and comma
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        //now we're going to build the values for data insertion
        rs.beforeFirst();
        while(rs.next()) {
            sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                //this is the part where the values are processed based on their type
                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                }
                else {

                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";

                    //escape the single quotes that might be in the value
                    val = val.replace(""'"", ""\\'"");

                    sql.append(""'"").append(val).append(""', "");
                }
            }

            //now that we're done with a row
            //let's remove the last whitespace and comma
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            //if this is the last row, just append a closing
            //parenthesis otherwise append a closing parenthesis and a comma
            //for the next set of values
            if(rs.isLast()) {
                sql.append("")"");
            } else {
                sql.append(""),\n"");
            }
        }

        //now that we are done processing the entire row
        //let's add the terminator
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        //enable FK constraint
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    private String getDataInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();

        ResultSet rs = stmt.executeQuery(""SELECT * FROM `"" + database + ""`.`"" + table + ""`;"");

        
        rs.last();
        int rowCount = rs.getRow();

        
        if(rowCount <= 0) {
            return sql.toString();
        }

        sql.append(""\n--"").append(""\n-- Inserts of "").append(table).append(""\n--\n\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` DISABLE KEYS */;\n"");

        boolean deleteExistingData = Boolean.parseBoolean(properties.containsKey(DELETE_EXISTING_DATA) ? properties.getProperty(DELETE_EXISTING_DATA, ""false"") : ""false"");

        if(deleteExistingData) {
            sql.append(MysqlBaseService.getEmptyTableSQL(database, table));
        }

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_START_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        sql.append(""INSERT INTO `"").append(table).append(""`("");

        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        
        
        
        for(int i = 0; i < columnCount; i++) {
            sql.append(""`"")
                    .append(metaData.getColumnName( i + 1))
                    .append(""`, "");
        }

        
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append("") VALUES \n"");

        
        rs.beforeFirst();
        while(rs.next()) {
            sql.append(""("");
            for(int i = 0; i < columnCount; i++) {

                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;

                
                if( columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append("", "");
                }
                else {

                    String val = rs.getString(columnIndex) != null ? rs.getString(columnIndex) : """";

                    
                    val = val.replace(""'"", ""\\'"");

                    sql.append(""'"").append(val).append(""', "");
                }
            }

            
            
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);

            
            
            
            if(rs.isLast()) {
                sql.append("")"");
            } else {
                sql.append(""),\n"");
            }
        }

        
        
        sql.append("";"");

        sql.append(""\n--\n"")
                .append(MysqlBaseService.SQL_END_PATTERN).append("" table insert : "").append(table)
                .append(""\n--\n"");

        
        sql.append(""\n/*!40000 ALTER TABLE `"").append(table).append(""` ENABLE KEYS */;\n"");

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getDataInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\n', '        ', 'ResultSet', ' ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SELECT * FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'rs', '.', 'last', '(', ')', ';', '\n', '        ', 'int', ' ', 'rowCount', ' ', '=', ' ', 'rs', '.', 'getRow', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'rowCount', ' ', '<', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', '.', 'append', '(', '""', '\\', 'n-- Inserts of ', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` DISABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'boolean', ' ', 'deleteExistingData', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'DELETE_EXISTING_DATA', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'DELETE_EXISTING_DATA', ',', ' ', '""', 'false', '""', ')', ' ', ':', ' ', '""', 'false', '""', ')', ';', '\n', '\n', '        ', 'if', '(', 'deleteExistingData', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', 'MysqlBaseService', '.', 'getEmptyTableSQL', '(', 'database', ',', ' ', 'table', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', 'INSERT INTO `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '`(', '""', ')', ';', '\n', '\n', '        ', 'ResultSetMetaData', ' ', 'metaData', ' ', '=', ' ', 'rs', '.', 'getMetaData', '(', ')', ';', '\n', '        ', 'int', ' ', 'columnCount', ' ', '=', ' ', 'metaData', '.', 'getColumnCount', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', '\n', '        ', '\n', '        ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', '""', '`', '""', ')', '\n', '                    ', '.', 'append', '(', 'metaData', '.', 'getColumnName', '(', ' ', 'i', ' ', '+', ' ', '1', ')', ')', '\n', '                    ', '.', 'append', '(', '""', '`, ', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'append', '(', '""', ') VALUES ', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'rs', '.', 'beforeFirst', '(', ')', ';', '\n', '        ', 'while', '(', 'rs', '.', 'next', '(', ')', ')', ' ', '{', '\n', '            ', 'sql', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '            ', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'columnCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\n', '                ', 'int', ' ', 'columnType', ' ', '=', ' ', 'metaData', '.', 'getColumnType', '(', 'i', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'int', ' ', 'columnIndex', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', ';', '\n', '\n', '                ', '\n', '                ', 'if', '(', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'INTEGER', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'TINYINT', ' ', '|', '|', ' ', 'columnType', ' ', '=', '=', ' ', 'Types', '.', 'BIT', ')', ' ', '{', '\n', '                    ', 'sql', '.', 'append', '(', 'rs', '.', 'getInt', '(', 'columnIndex', ')', ')', '.', 'append', '(', '""', ', ', '""', ')', ';', '\n', '                ', '}', '\n', '                ', 'else', ' ', '{', '\n', '\n', '                    ', 'String', ' ', 'val', ' ', '=', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'rs', '.', 'getString', '(', 'columnIndex', ')', ' ', ':', ' ', '""', '""', ';', '\n', '\n', '                    ', '\n', '                    ', 'val', ' ', '=', ' ', 'val', '.', 'replace', '(', '""', ""'"", '""', ',', ' ', '""', '\\\\', ""'"", '""', ')', ';', '\n', '\n', '                    ', 'sql', '.', 'append', '(', '""', ""'"", '""', ')', '.', 'append', '(', 'val', ')', '.', 'append', '(', '""', ""', "", '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '\n', '            ', '\n', '            ', 'sql', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', '.', 'deleteCharAt', '(', 'sql', '.', 'length', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '            ', '\n', '            ', '\n', '            ', 'if', '(', 'rs', '.', 'isLast', '(', ')', ')', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', '""', '),', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', ';', '""', ')', ';', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', '\n', '                ', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', ' table insert : ', '""', ')', '.', 'append', '(', 'table', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n/*!40000 ALTER TABLE `', '""', ')', '.', 'append', '(', 'table', ')', '.', 'append', '(', '""', '` ENABLE KEYS */;', '\\', 'n', '""', ')', ';', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,exportToSql,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by mysql-backup4j"");
        sql.append(""\n-- https://github.com/SeunMatt/mysql-backup4j"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        //these declarations are extracted from HeidiSQL
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
                .append(""\n/*!40101 SET NAMES utf8 */;"")
                .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
                .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
                .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        //get the tables that are in the database
        List<String> tables = MysqlBaseService.getAllTables(database, stmt);

        //for every table, get the table creation and data
        // insert statement
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
                .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
                .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by mysql-backup4j"");
        sql.append(""\n-- https://github.com/SeunMatt/mysql-backup4j"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
                .append(""\n/*!40101 SET NAMES utf8 */;"")
                .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
                .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
                .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        
        List<String> tables = MysqlBaseService.getAllTables(database, stmt);

        
        
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
                .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
                .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'exportToSql', '(', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Generated by mysql-backup4j', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- https://github.com/SeunMatt/mysql-backup4j', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Date: ', '""', ')', '.', 'append', '(', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd-M-Y H:m:s', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET NAMES utf8 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!50503 SET NAMES utf8mb4 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', ""n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"", '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'String', '>', ' ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'for', ' ', '(', 'String', ' ', 's', ':', ' ', 'tables', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', 'getTableInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'getDataInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', ""n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"", '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;', '""', ')', ';', '\n', '\n', '        ', 'this', '.', 'generatedSql', ' ', '=', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!isValidateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir to store the exported file for processing
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
//                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists()) {
            boolean res = sqlFolder.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        sqlFileName = getSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(isEmailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """").toUpperCase()))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!isValidateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {

                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists()) {
            boolean res = sqlFolder.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        sqlFileName = getSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(isEmailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """").toUpperCase()))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'isValidateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_CONNECTION_STRING', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'String', ' ', 'driverName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_DRIVER_NAME', ',', ' ', '""', '""', ')', ';', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'database', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'jdbcURL', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'getSqlFilename', '(', ')', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'isEmailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', '.', 'toUpperCase', '(', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,442743a9d03539ea48624f5803da307f4313c8de,MysqlExportService.java,clearTempFiles,"    public void clearTempFiles(boolean preserveZipFile) {

        //delete the temp sql file
        File sqlFile = new File(dirName + ""/sql/"" + sqlFileName);
        if(sqlFile.exists()) {
            boolean res = sqlFile.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }

        File sqlFolder = new File(dirName + ""/sql"");
        if(sqlFolder.exists()) {
            boolean res = sqlFolder.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }


        //only execute this section if the
        //file is not to be preserved

        if(!preserveZipFile) {

            //delete the zipFile
            File zipFile = new File(zipFileName);
            if (zipFile.exists()) {
                boolean res = zipFile.delete();
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }

            //delete the temp folder
            File folder = new File(dirName);
            if (folder.exists()) {
                boolean res = folder.delete();
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }
        }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/442743a9d03539ea48624f5803da307f4313c8de,"    public void clearTempFiles(boolean preserveZipFile) {

        
        File sqlFile = new File(dirName + ""/sql/"" + sqlFileName);
        if(sqlFile.exists()) {
            boolean res = sqlFile.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }

        File sqlFolder = new File(dirName + ""/sql"");
        if(sqlFolder.exists()) {
            boolean res = sqlFolder.delete();
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
        } else {
            logger.debug(LOG_PREFIX + "": "" + sqlFolder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
        }


        
        

        if(!preserveZipFile) {

            
            File zipFile = new File(zipFileName);
            if (zipFile.exists()) {
                boolean res = zipFile.delete();
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + zipFile.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }

            
            File folder = new File(dirName);
            if (folder.exists()) {
                boolean res = folder.delete();
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" deleted successfully? "" + (res ? "" TRUE "" : "" FALSE ""));
            } else {
                logger.debug(LOG_PREFIX + "": "" + folder.getAbsolutePath() + "" DOES NOT EXIST while clearing Temp Files"");
            }
        }

        logger.debug(LOG_PREFIX + "": generated temp files cleared successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'clearTempFiles', '(', 'boolean', ' ', 'preserveZipFile', ')', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'if', '(', 'sqlFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFile', '.', 'delete', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', 'sqlFolder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFolder', '.', 'delete', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFolder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'sqlFolder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', '\n', '\n', '        ', 'if', '(', '!', 'preserveZipFile', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'File', ' ', 'zipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '            ', 'if', ' ', '(', 'zipFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '                ', 'boolean', ' ', 'res', ' ', '=', ' ', 'zipFile', '.', 'delete', '(', ')', ';', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'zipFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'zipFile', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '\n', '            ', 'File', ' ', 'folder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '            ', 'if', ' ', '(', 'folder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '                ', 'boolean', ' ', 'res', ' ', '=', ' ', 'folder', '.', 'delete', '(', ')', ';', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'folder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' deleted successfully? ', '""', ' ', '+', ' ', '(', 'res', ' ', '?', ' ', '""', ' TRUE ', '""', ' ', ':', ' ', '""', ' FALSE ', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': ', '""', ' ', '+', ' ', 'folder', '.', 'getAbsolutePath', '(', ')', ' ', '+', ' ', '""', ' DOES NOT EXIST while clearing Temp Files', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': generated temp files cleared successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,eb81894a1fb6e32064b09ab6436a7e6dbbc15349,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        //connect to the database
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            //get all the tables
            tables = MysqlBaseService.getAllTables(database, stmt);

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        String resultString = Arrays.stream(result)
                .mapToObj(String::valueOf)
                .reduce("""", (s1, s2) -> s1 + "", "" + s2 + "", "");
        logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + resultString);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/eb81894a1fb6e32064b09ab6436a7e6dbbc15349,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            
            tables = MysqlBaseService.getAllTables(database, stmt);

             
            for (String table: tables) {

                
                
                

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        String resultString = Arrays.stream(result)
                .mapToObj(String::valueOf)
                .reduce("""", (s1, s2) -> s1 + "", "" + s2 + "", "");
        logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + resultString);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '             ', 'if', '(', 'deleteExisting', ')', '\n', '                ', 'logger', '.', 'debug', '(', '""', ""deleteExisting flag is set to TRUE! I believe you know what you're doing"", '""', ')', ';', '\n', '\n', '             ', 'if', '(', 'dropExisting', ')', '\n', '                 ', 'logger', '.', 'debug', '(', '""', 'dropExisting flag is set to TRUE! This will drop any existing table(s) in the database', '""', ')', ';', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'resultString', ' ', '=', ' ', 'Arrays', '.', 'stream', '(', 'result', ')', '\n', '                ', '.', 'mapToObj', '(', 'String', ':', ':', 'valueOf', ')', '\n', '                ', '.', 'reduce', '(', '""', '""', ',', ' ', '(', 's1', ',', ' ', 's2', ')', ' ', '-', '>', ' ', 's1', ' ', '+', ' ', '""', ', ', '""', ' ', '+', ' ', 's2', ' ', '+', ' ', '""', ', ', '""', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batches for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,f35ee0e3c945b86e9242fc766882a62d660bfe81,MysqlBaseService.java,doConnect,"    private static Connection doConnect(String driver, String url, String username, String password) throws SQLException, ClassNotFoundException {
        Class.forName(driver);
        url = url.concat(""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"");
        Connection connection = DriverManager.getConnection(url, username, password);
        logger.debug(""DB Connected Successfully"");
        return  connection;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/f35ee0e3c945b86e9242fc766882a62d660bfe81,"    private static Connection doConnect(String driver, String url, String username, String password) throws SQLException, ClassNotFoundException {
        Class.forName(driver);
        url = url.concat(""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"");
        Connection connection = DriverManager.getConnection(url, username, password);
        logger.debug(""DB Connected Successfully"");
        return  connection;
    }
","['    ', 'private', ' ', 'static', ' ', 'Connection', ' ', 'doConnect', '(', 'String', ' ', 'driver', ',', ' ', 'String', ' ', 'url', ',', ' ', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '        ', 'Class', '.', 'forName', '(', 'driver', ')', ';', '\n', '        ', 'url', ' ', '=', ' ', 'url', '.', 'concat', '(', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC', '""', ')', ';', '\n', '        ', 'Connection', ' ', 'connection', ' ', '=', ' ', 'DriverManager', '.', 'getConnection', '(', 'url', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'DB Connected Successfully', '""', ')', ';', '\n', '        ', 'return', '  ', 'connection', ';', '\n', '    ', '}', '\n']"
master,847d438551932239d2e0e26731ea856f59168f2b,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")){
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/847d438551932239d2e0e26731ea856f59168f2b,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")){
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = new SimpleDateFormat(""d_M_Y_H_mm_ss"").format(new Date()) + ""_"" + database + ""_database_dump.sql"";
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'validateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_CONNECTION_STRING', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'String', ' ', 'driverName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_DRIVER_NAME', ',', ' ', '""', '""', ')', ';', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'database', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'if', ' ', '(', 'jdbcURL', '.', 'contains', '(', '""', '?', '""', ')', ')', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcURL', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'jdbcURL', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', '\n', '            ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd_M_Y_H_mm_ss', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ' ', '+', ' ', '""', '_', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '_database_dump.sql', '""', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'emailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '         ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,847d438551932239d2e0e26731ea856f59168f2b,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        //connect
        //connect to the database

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, username,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            //get all the tables
            tables = MysqlBaseService.getAllTables(database, stmt);

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/847d438551932239d2e0e26731ea856f59168f2b,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        
        

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, username,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            
            tables = MysqlBaseService.getAllTables(database, stmt);

             
            for (String table: tables) {

                
                
                

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'if', ' ', '(', 'jdbcConnString', '.', 'contains', '(', '""', '?', '""', ')', ')', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcConnString', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'username', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '             ', 'if', '(', 'deleteExisting', ')', '\n', '                ', 'logger', '.', 'debug', '(', '""', ""deleteExisting flag is set to TRUE! I believe you know what you're doing"", '""', ')', ';', '\n', '\n', '             ', 'if', '(', 'dropExisting', ')', '\n', '                 ', 'logger', '.', 'debug', '(', '""', 'dropExisting flag is set to TRUE! This will drop any existing table(s) in the database', '""', ')', ';', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', '[', ']', ' ', 'resultString', ' ', '=', ' ', '{', '""', '""', '}', ';', '\n', '        ', 'Arrays', '.', 'stream', '(', 'result', ')', '.', 'forEach', '(', 'i', ' ', '-', '>', ' ', 'resultString', '[', '0', ']', ' ', '=', ' ', 'resultString', '[', '0', ']', '.', 'concat', '(', 'i', ' ', '+', ' ', '""', ' ', '""', ')', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batch for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,0d62e60e66ff1ba6354027ed2148757cdaa890a2,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")){
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = setSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/0d62e60e66ff1ba6354027ed2148757cdaa890a2,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!validateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")){
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists())
            sqlFolder.mkdir();
        sqlFileName = setSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(emailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """")))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
         clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'validateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_CONNECTION_STRING', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'String', ' ', 'driverName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_DRIVER_NAME', ',', ' ', '""', '""', ')', ';', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'database', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'if', ' ', '(', 'jdbcURL', '.', 'contains', '(', '""', '?', '""', ')', ')', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcURL', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'jdbcURL', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', '\n', '            ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'setSqlFilename', '(', ')', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'emailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '         ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,0d62e60e66ff1ba6354027ed2148757cdaa890a2,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        //connect
        //connect to the database

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            //get all the tables
            tables = MysqlBaseService.getAllTables(database, stmt);

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/0d62e60e66ff1ba6354027ed2148757cdaa890a2,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }

        
        

        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


         if(deleteExisting || dropExisting) {

             if(deleteExisting)
                logger.debug(""deleteExisting flag is set to TRUE! I believe you know what you're doing"");

             if(dropExisting)
                 logger.debug(""dropExisting flag is set to TRUE! This will drop any existing table(s) in the database"");

            
            tables = MysqlBaseService.getAllTables(database, stmt);

             
            for (String table: tables) {

                
                
                

                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE `"" + database + ""`.`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        final String[] resultString = {""""};
        Arrays.stream(result).forEach(i -> resultString[0] = resultString[0].concat(i + "" ""));
        logger.debug( result.length + "" queries were executed in batch for provided SQL String with the following result : \n"" + resultString[0]);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'if', ' ', '(', 'jdbcConnString', '.', 'contains', '(', '""', '?', '""', ')', ')', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcConnString', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '             ', 'if', '(', 'deleteExisting', ')', '\n', '                ', 'logger', '.', 'debug', '(', '""', ""deleteExisting flag is set to TRUE! I believe you know what you're doing"", '""', ')', ';', '\n', '\n', '             ', 'if', '(', 'dropExisting', ')', '\n', '                 ', 'logger', '.', 'debug', '(', '""', 'dropExisting flag is set to TRUE! This will drop any existing table(s) in the database', '""', ')', ';', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`.`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', '[', ']', ' ', 'resultString', ' ', '=', ' ', '{', '""', '""', '}', ';', '\n', '        ', 'Arrays', '.', 'stream', '(', 'result', ')', '.', 'forEach', '(', 'i', ' ', '-', '>', ' ', 'resultString', '[', '0', ']', ' ', '=', ' ', 'resultString', '[', '0', ']', '.', 'concat', '(', 'i', ' ', '+', ' ', '""', ' ', '""', ')', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batch for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,6011e4624bf00fc6ceed26e5c9f5a10b10aa3c22,MysqlExportService.java,getTableInsertStatement,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");


        if(table != null && !table.isEmpty()){
            rs = stmt.executeQuery(""SHOW CREATE TABLE "" + ""`"" + table + ""`;"");
            while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS"");
                }

                sql.append(query).append("";\n\n"");
            }

            sql.append(""\n\n--"");
            sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
            sql.append(""\n--\n\n"");
        }

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/6011e4624bf00fc6ceed26e5c9f5a10b10aa3c22,"    private String getTableInsertStatement(String table) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = Boolean.parseBoolean(properties.containsKey(ADD_IF_NOT_EXISTS) ? properties.getProperty(ADD_IF_NOT_EXISTS, ""true"") : ""true"");


        if(table != null && !table.isEmpty()){
            rs = stmt.executeQuery(""SHOW CREATE TABLE "" + ""`"" + table + ""`;"");
            while ( rs.next() ) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  table dump : "").append(qtbl);
                sql.append(""\n--\n\n"");

                if(addIfNotExists) {
                    query = query.trim().replace(""CREATE TABLE"", ""CREATE TABLE IF NOT EXISTS"");
                }

                sql.append(query).append("";\n\n"");
            }

            sql.append(""\n\n--"");
            sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  table dump : "").append(table);
            sql.append(""\n--\n\n"");
        }

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getTableInsertStatement', '(', 'String', ' ', 'table', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'boolean', ' ', 'addIfNotExists', ' ', '=', ' ', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'containsKey', '(', 'ADD_IF_NOT_EXISTS', ')', ' ', '?', ' ', 'properties', '.', 'getProperty', '(', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ' ', ':', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'if', '(', 'table', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'table', '.', 'isEmpty', '(', ')', ')', '{', '\n', '            ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW CREATE TABLE ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '            ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '                ', 'String', ' ', 'qtbl', ' ', '=', ' ', 'rs', '.', 'getString', '(', '1', ')', ';', '\n', '                ', 'String', ' ', 'query', ' ', '=', ' ', 'rs', '.', 'getString', '(', '2', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'qtbl', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '                ', 'if', '(', 'addIfNotExists', ')', ' ', '{', '\n', '                    ', 'query', ' ', '=', ' ', 'query', '.', 'trim', '(', ')', '.', 'replace', '(', '""', 'CREATE TABLE', '""', ',', ' ', '""', 'CREATE TABLE IF NOT EXISTS', '""', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'sql', '.', 'append', '(', 'query', ')', '.', 'append', '(', '""', ';', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', '  table dump : ', '""', ')', '.', 'append', '(', 'table', ')', ';', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6011e4624bf00fc6ceed26e5c9f5a10b10aa3c22,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        //connect to the database
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            //get all the tables, so as to eliminate delete errors due to non-existent tables
            tables = MysqlBaseService.getAllTables(database, stmt);
            logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        String resultString = Arrays.stream(result)
                .mapToObj(String::valueOf)
                .reduce("""", (s1, s2) -> s1 + "", "" + s2 + "", "");
        logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + resultString);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/6011e4624bf00fc6ceed26e5c9f5a10b10aa3c22,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {
            database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            
            tables = MysqlBaseService.getAllTables(database, stmt);
            logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());

             
            for (String table: tables) {

                
                
                
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        String resultString = Arrays.stream(result)
                .mapToObj(String::valueOf)
                .reduce("""", (s1, s2) -> s1 + "", "" + s2 + "", "");
        logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + resultString);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'tables found for deleting/dropping: ', '\\', 'n', '""', ' ', '+', ' ', 'tables', '.', 'toString', '(', ')', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'resultString', ' ', '=', ' ', 'Arrays', '.', 'stream', '(', 'result', ')', '\n', '                ', '.', 'mapToObj', '(', 'String', ':', ':', 'valueOf', ')', '\n', '                ', '.', 'reduce', '(', '""', '""', ',', ' ', '(', 's1', ',', ' ', 's2', ')', ' ', '-', '>', ' ', 's1', ' ', '+', ' ', '""', ', ', '""', ' ', '+', ' ', 's2', ' ', '+', ' ', '""', ', ', '""', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batches for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,54662cc36c44ec98cabebd24e85671ce0749c205,MysqlBaseService.java,connect,"    static Connection connect(String username, String password, String database, String driverName) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"";
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.cj.jdbc.Driver"" : driverName;
        return doConnect(driver, url, username, password);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/54662cc36c44ec98cabebd24e85671ce0749c205,"    static Connection connect(String username, String password, String database, String driverName) throws ClassNotFoundException, SQLException {
        String url = ""jdbc:mysql://localhost:3306/"" + database + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"";
        String driver = (Objects.isNull(driverName) || driverName.isEmpty()) ? ""com.mysql.cj.jdbc.Driver"" : driverName;
        return doConnect(driver, url, username, password);
    }
","['    ', 'static', ' ', 'Connection', ' ', 'connect', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ',', ' ', 'String', ' ', 'database', ',', ' ', 'String', ' ', 'driverName', ')', ' ', 'throws', ' ', 'ClassNotFoundException', ',', ' ', 'SQLException', ' ', '{', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ';', '\n', '        ', 'String', ' ', 'driver', ' ', '=', ' ', '(', 'Objects', '.', 'isNull', '(', 'driverName', ')', ' ', '|', '|', ' ', 'driverName', '.', 'isEmpty', '(', ')', ')', ' ', '?', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ' ', ':', ' ', 'driverName', ';', '\n', '        ', 'return', ' ', 'doConnect', '(', 'driver', ',', ' ', 'url', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '    ', '}', '\n']"
master,54662cc36c44ec98cabebd24e85671ce0749c205,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!isValidateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")){
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        //generate the final SQL
        String sql = exportToSql();

        //create a temp dir to store the exported file for processing
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
//                logger.error(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists()) {
            boolean res = sqlFolder.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        sqlFileName = getSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(isEmailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """").toUpperCase()))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
",https://www.github.com/seunmatt/mysql-backup4j/commit/54662cc36c44ec98cabebd24e85671ce0749c205,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!isValidateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")){
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement();

        
        String sql = exportToSql();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {

                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists()) {
            boolean res = sqlFolder.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        sqlFileName = getSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(isEmailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.valueOf(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """").toUpperCase()))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
        clearTempFiles(Boolean.parseBoolean(properties.getProperty(PRESERVE_GENERATED_ZIP, Boolean.FALSE.toString())));
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'isValidateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_CONNECTION_STRING', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'String', ' ', 'driverName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_DRIVER_NAME', ',', ' ', '""', '""', ')', ';', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'database', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'if', ' ', '(', 'jdbcURL', '.', 'contains', '(', '""', '?', '""', ')', ')', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcURL', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'jdbcURL', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'getSqlFilename', '(', ')', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'isEmailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'valueOf', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', '.', 'toUpperCase', '(', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'clearTempFiles', '(', 'Boolean', '.', 'parseBoolean', '(', 'properties', '.', 'getProperty', '(', 'PRESERVE_GENERATED_ZIP', ',', ' ', 'Boolean', '.', 'FALSE', '.', 'toString', '(', ')', ')', ')', ')', ';', '\n']"
master,54662cc36c44ec98cabebd24e85671ce0749c205,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        //connect to the database
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {

            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }

            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            //get all the tables, so as to eliminate delete errors due to non-existent tables
            tables = MysqlBaseService.getAllTables(database, stmt);
            logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());

             //execute delete query
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        String resultString = Arrays.stream(result)
                .mapToObj(String::valueOf)
                .reduce("""", (s1, s2) -> s1 + "", "" + s2 + "", "");
        logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + resultString);

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/54662cc36c44ec98cabebd24e85671ce0749c205,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password,
                    database, jdbcDriver);
        }
        else {

            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }

            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password,
                    jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            
            tables = MysqlBaseService.getAllTables(database, stmt);
            logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());

             
            for (String table: tables) {

                
                
                
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }
        }

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex);
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        String resultString = Arrays.stream(result)
                .mapToObj(String::valueOf)
                .reduce("""", (s1, s2) -> s1 + "", "" + s2 + "", "");
        logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + resultString);

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '\n', '            ', 'if', ' ', '(', 'jdbcConnString', '.', 'contains', '(', '""', '?', '""', ')', ')', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcConnString', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', '\n', '                    ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'tables', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTables', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'tables found for deleting/dropping: ', '\\', 'n', '""', ' ', '+', ' ', 'tables', '.', 'toString', '(', ')', ')', ';', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'resultString', ' ', '=', ' ', 'Arrays', '.', 'stream', '(', 'result', ')', '\n', '                ', '.', 'mapToObj', '(', 'String', ':', ':', 'valueOf', ')', '\n', '                ', '.', 'reduce', '(', '""', '""', ',', ' ', '(', 's1', ',', ' ', 's2', ')', ' ', '-', '>', ' ', 's1', ' ', '+', ' ', '""', ', ', '""', ' ', '+', ' ', 's2', ' ', '+', ' ', '""', ', ', '""', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batches for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'resultString', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,fd2022a4849f427700f5a93fed7d7ad633762a22,MysqlImportService.java,assertValidParams,"    private boolean assertValidParams() {
        return username != null && !this.username.isEmpty() &&
                sqlString != null && !this.sqlString.isEmpty() &&",https://www.github.com/seunmatt/mysql-backup4j/commit/fd2022a4849f427700f5a93fed7d7ad633762a22,"    private boolean assertValidParams() {
        return username != null && !this.username.isEmpty() &&
                sqlString != null && !this.sqlString.isEmpty() &&
","['    ', 'private', ' ', 'boolean', ' ', 'assertValidParams', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'username', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'this', '.', 'username', '.', 'isEmpty', '(', ')', ' ', '&', '&', '\n', '                ', 'sqlString', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'this', '.', 'sqlString', '.', 'isEmpty', '(', ')', ' ', '&', '&', '\n']"
master,d435c3bd5c05feabfa569acb15a82422d01d3a88,MysqlBaseService.java,getAllTablesAndViews,"    static TablesResponse getAllTablesAndViews(String database, Statement stmt) throws SQLException {

        List<String> tables = new ArrayList<>();
        List<String> views = new ArrayList<>();

        ResultSet rs;
        rs = stmt.executeQuery(""SHOW TABLE STATUS FROM `"" + database + ""`;"");
        while ( rs.next() ) {
            String comment = rs.getString(""Comment"");
            if(""VIEW"".equals(comment)) {
                views.add(rs.getString(""Name""));
            }
            else {
                tables.add(rs.getString(""Name""));
            }
        }

        return new TablesResponse(tables, views);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/d435c3bd5c05feabfa569acb15a82422d01d3a88,"    static TablesResponse getAllTablesAndViews(String database, Statement stmt) throws SQLException {

        List<String> tables = new ArrayList<>();
        List<String> views = new ArrayList<>();

        ResultSet rs;
        rs = stmt.executeQuery(""SHOW TABLE STATUS FROM `"" + database + ""`;"");
        while ( rs.next() ) {
            String comment = rs.getString(""Comment"");
            if(""VIEW"".equals(comment)) {
                views.add(rs.getString(""Name""));
            }
            else {
                tables.add(rs.getString(""Name""));
            }
        }

        return new TablesResponse(tables, views);
    }
","['    ', 'static', ' ', 'TablesResponse', ' ', 'getAllTablesAndViews', '(', 'String', ' ', 'database', ',', ' ', 'Statement', ' ', 'stmt', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'String', '>', ' ', 'tables', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'List', '<', 'String', '>', ' ', 'views', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '        ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW TABLE STATUS FROM `', '""', ' ', '+', ' ', 'database', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '        ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '            ', 'String', ' ', 'comment', ' ', '=', ' ', 'rs', '.', 'getString', '(', '""', 'Comment', '""', ')', ';', '\n', '            ', 'if', '(', '""', 'VIEW', '""', '.', 'equals', '(', 'comment', ')', ')', ' ', '{', '\n', '                ', 'views', '.', 'add', '(', 'rs', '.', 'getString', '(', '""', 'Name', '""', ')', ')', ';', '\n', '            ', '}', '\n', '            ', 'else', ' ', '{', '\n', '                ', 'tables', '.', 'add', '(', 'rs', '.', 'getString', '(', '""', 'Name', '""', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'new', ' ', 'TablesResponse', '(', 'tables', ',', ' ', 'views', ')', ';', '\n', '    ', '}', '\n']"
master,d435c3bd5c05feabfa569acb15a82422d01d3a88,MysqlExportService.java,getCreateViewStatement,"    private String getCreateViewStatement(String view) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;

        if(view != null && !view.isEmpty()) {
            rs = stmt.executeQuery(""SHOW CREATE VIEW "" + ""`"" + view + ""`;"");
            while ( rs.next() ) {
                String viewName = rs.getString(1);
                String viewQuery = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  view dump : "").append(view);
                sql.append(""\n--\n\n"");

                String finalQuery = ""CREATE OR REPLACE VIEW `"" + viewName + ""` "" + (viewQuery.substring(viewQuery.indexOf(""AS"")).trim());
                sql.append(finalQuery).append("";\n\n"");
            }

            sql.append(""\n\n--"");
            sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  view dump : "").append(view);
            sql.append(""\n--\n\n"");
        }

        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/d435c3bd5c05feabfa569acb15a82422d01d3a88,"    private String getCreateViewStatement(String view) throws SQLException {

        StringBuilder sql = new StringBuilder();
        ResultSet rs;

        if(view != null && !view.isEmpty()) {
            rs = stmt.executeQuery(""SHOW CREATE VIEW "" + ""`"" + view + ""`;"");
            while ( rs.next() ) {
                String viewName = rs.getString(1);
                String viewQuery = rs.getString(2);
                sql.append(""\n\n--"");
                sql.append(""\n"").append(MysqlBaseService.SQL_START_PATTERN).append(""  view dump : "").append(view);
                sql.append(""\n--\n\n"");

                String finalQuery = ""CREATE OR REPLACE VIEW `"" + viewName + ""` "" + (viewQuery.substring(viewQuery.indexOf(""AS"")).trim());
                sql.append(finalQuery).append("";\n\n"");
            }

            sql.append(""\n\n--"");
            sql.append(""\n"").append(MysqlBaseService.SQL_END_PATTERN).append(""  view dump : "").append(view);
            sql.append(""\n--\n\n"");
        }

        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'getCreateViewStatement', '(', 'String', ' ', 'view', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'ResultSet', ' ', 'rs', ';', '\n', '\n', '        ', 'if', '(', 'view', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'view', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'rs', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', '""', 'SHOW CREATE VIEW ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'view', ' ', '+', ' ', '""', '`;', '""', ')', ';', '\n', '            ', 'while', ' ', '(', ' ', 'rs', '.', 'next', '(', ')', ' ', ')', ' ', '{', '\n', '                ', 'String', ' ', 'viewName', ' ', '=', ' ', 'rs', '.', 'getString', '(', '1', ')', ';', '\n', '                ', 'String', ' ', 'viewQuery', ' ', '=', ' ', 'rs', '.', 'getString', '(', '2', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', '.', 'append', '(', '""', '  view dump : ', '""', ')', '.', 'append', '(', 'view', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '\n', '                ', 'String', ' ', 'finalQuery', ' ', '=', ' ', '""', 'CREATE OR REPLACE VIEW `', '""', ' ', '+', ' ', 'viewName', ' ', '+', ' ', '""', '` ', '""', ' ', '+', ' ', '(', 'viewQuery', '.', 'substring', '(', 'viewQuery', '.', 'indexOf', '(', '""', 'AS', '""', ')', ')', '.', 'trim', '(', ')', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'finalQuery', ')', '.', 'append', '(', '""', ';', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n--', '""', ')', ';', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n', '""', ')', '.', 'append', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', '.', 'append', '(', '""', '  view dump : ', '""', ')', '.', 'append', '(', 'view', ')', ';', '\n', '            ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '\\', 'n', '\\', 'n', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,d435c3bd5c05feabfa569acb15a82422d01d3a88,MysqlExportService.java,exportToSql,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by mysql-backup4j"");
        sql.append(""\n-- https://github.com/SeunMatt/mysql-backup4j"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        //these declarations are extracted from HeidiSQL
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
                .append(""\n/*!40101 SET NAMES utf8 */;"")
                .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
                .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
                .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        //get the tables that are in the database
//        List<String> tables = MysqlBaseService.getAllTables(database, stmt);
        TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);

        List<String> tables = allTablesAndViews.getTables();
        //for every table, get the table creation and data
        // insert statement
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                logger.error(""Exception occurred while processing table: "" + s, e);
            }
        }


        //process views if there's any
        List<String> views = allTablesAndViews.getViews();
        for (String v: views) {
            try {
                sql.append(getCreateViewStatement(v.trim()));
            } catch (SQLException e) {
                logger.error(""Exception occurred while processing view: "" + v, e);
            }
        }

        sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
                .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
                .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/d435c3bd5c05feabfa569acb15a82422d01d3a88,"    private String exportToSql() throws SQLException {

        StringBuilder sql = new StringBuilder();
        sql.append(""--"");
        sql.append(""\n-- Generated by mysql-backup4j"");
        sql.append(""\n-- https://github.com/SeunMatt/mysql-backup4j"");
        sql.append(""\n-- Date: "").append(new SimpleDateFormat(""d-M-Y H:m:s"").format(new Date()));
        sql.append(""\n--"");

        
        sql.append(""\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;"")
                .append(""\n/*!40101 SET NAMES utf8 */;"")
                .append(""\n/*!50503 SET NAMES utf8mb4 */;"")
                .append(""\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;"")
                .append(""\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"");


        

        TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);

        List<String> tables = allTablesAndViews.getTables();
        
        
        for (String s: tables) {
            try {
                sql.append(getTableInsertStatement(s.trim()));
                sql.append(getDataInsertStatement(s.trim()));
            } catch (SQLException e) {
                logger.error(""Exception occurred while processing table: "" + s, e);
            }
        }


        
        List<String> views = allTablesAndViews.getViews();
        for (String v: views) {
            try {
                sql.append(getCreateViewStatement(v.trim()));
            } catch (SQLException e) {
                logger.error(""Exception occurred while processing view: "" + v, e);
            }
        }

        sql.append(""\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"")
                .append(""\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;"")
                .append(""\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"");

        this.generatedSql = sql.toString();
        return sql.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'exportToSql', '(', ')', ' ', 'throws', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'StringBuilder', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '--', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Generated by mysql-backup4j', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- https://github.com/SeunMatt/mysql-backup4j', '""', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n-- Date: ', '""', ')', '.', 'append', '(', 'new', ' ', 'SimpleDateFormat', '(', '""', 'd-M-Y H:m:s', '""', ')', '.', 'format', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ';', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n--', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', 'n', '\\', 'n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET NAMES utf8 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!50503 SET NAMES utf8mb4 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', ""n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;"", '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '\n', '        ', 'TablesResponse', ' ', 'allTablesAndViews', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTablesAndViews', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '\n', '        ', 'List', '<', 'String', '>', ' ', 'tables', ' ', '=', ' ', 'allTablesAndViews', '.', 'getTables', '(', ')', ';', '\n', '        ', '\n', '        ', '\n', '        ', 'for', ' ', '(', 'String', ' ', 's', ':', ' ', 'tables', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', 'getTableInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '                ', 'sql', '.', 'append', '(', 'getDataInsertStatement', '(', 's', '.', 'trim', '(', ')', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', '""', 'Exception occurred while processing table: ', '""', ' ', '+', ' ', 's', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'String', '>', ' ', 'views', ' ', '=', ' ', 'allTablesAndViews', '.', 'getViews', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'v', ':', ' ', 'views', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'sql', '.', 'append', '(', 'getCreateViewStatement', '(', 'v', '.', 'trim', '(', ')', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'SQLException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', '""', 'Exception occurred while processing view: ', '""', ' ', '+', ' ', 'v', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sql', '.', 'append', '(', '""', '\\', ""n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;"", '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;', '""', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;', '""', ')', ';', '\n', '\n', '        ', 'this', '.', 'generatedSql', ' ', '=', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '        ', 'return', ' ', 'sql', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,d435c3bd5c05feabfa569acb15a82422d01d3a88,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        //connect to the database
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password, database, jdbcDriver);
        }
        else {

            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }

            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password, jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            //get all the tables, so as to eliminate delete errors due to non-existent tables
             TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);
             tables = allTablesAndViews.getTables();
             logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());


             //execute delete query for tables
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }


             List<String> views = allTablesAndViews.getViews();
             //execute delete query for views
            for (String view: views) {
                if(dropExisting) {
                    String dropQ = ""DROP VIEW IF EXISTS "" + ""`"" + view + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }
            }

        }

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex).trim();
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        if(logger.isDebugEnabled())
            logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + Arrays.toString(result));

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/d435c3bd5c05feabfa569acb15a82422d01d3a88,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            logger.error(""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"");
            return false;
        }


        
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password, database, jdbcDriver);
        }
        else {

            if (jdbcConnString.contains(""?"")){
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1, jdbcConnString.indexOf(""?""));
            } else {
                database = jdbcConnString.substring(jdbcConnString.lastIndexOf(""/"") + 1);
            }

            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(username, password, jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            
             TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);
             tables = allTablesAndViews.getTables();
             logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());


             
            for (String table: tables) {

                
                
                
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }


             List<String> views = allTablesAndViews.getViews();
             
            for (String view: views) {
                if(dropExisting) {
                    String dropQ = ""DROP VIEW IF EXISTS "" + ""`"" + view + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }
            }

        }

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex).trim();
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        if(logger.isDebugEnabled())
            logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + Arrays.toString(result));

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ')', ';', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', ' ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '\n', '            ', 'if', ' ', '(', 'jdbcConnString', '.', 'contains', '(', '""', '?', '""', ')', ')', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcConnString', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcConnString', '.', 'substring', '(', 'jdbcConnString', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', ' ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '            ', '\n', '             ', 'TablesResponse', ' ', 'allTablesAndViews', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTablesAndViews', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '             ', 'tables', ' ', '=', ' ', 'allTablesAndViews', '.', 'getTables', '(', ')', ';', '\n', '             ', 'logger', '.', 'debug', '(', '""', 'tables found for deleting/dropping: ', '\\', 'n', '""', ' ', '+', ' ', 'tables', '.', 'toString', '(', ')', ')', ';', '\n', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '\n', '             ', 'List', '<', 'String', '>', ' ', 'views', ' ', '=', ' ', 'allTablesAndViews', '.', 'getViews', '(', ')', ';', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'view', ':', ' ', 'views', ')', ' ', '{', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP VIEW IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'view', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', '.', 'trim', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'if', '(', 'logger', '.', 'isDebugEnabled', '(', ')', ')', '\n', '            ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batches for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'Arrays', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,a1599f1d7f9075a98b146537fcd4396dcf6b656f,MysqlExportService.java,export,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        //check if properties is set or not
        if(!isValidateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        //connect to the database
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")) {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

        //generate the final SQL
        String sql = exportToSql();

        //close the statement
        stmt.close();

        //close the connection
        connection.close();

        //create a temp dir to store the exported file for processing
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        //write the sql file out
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists()) {
            boolean res = sqlFolder.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        sqlFileName = getSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        //zip the file
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        //mail the zipped file if mail settings are available
        if(isEmailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.parseInt(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """").toUpperCase()))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        //clear the generated temp files
        clearTempFiles();
",https://www.github.com/seunmatt/mysql-backup4j/commit/a1599f1d7f9075a98b146537fcd4396dcf6b656f,"    public void export() throws IOException, SQLException, ClassNotFoundException {

        
        if(!isValidateProperties()) {
            logger.error(""Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD"");
            return;
        }

        
        database = properties.getProperty(DB_NAME);
        String jdbcURL = properties.getProperty(JDBC_CONNECTION_STRING, """");
        String driverName = properties.getProperty(JDBC_DRIVER_NAME, """");

        Connection connection;

        if(jdbcURL.isEmpty()) {
            connection = MysqlBaseService.connect(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    database, driverName);
        }
        else {
            if (jdbcURL.contains(""?"")) {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1, jdbcURL.indexOf(""?""));
            } else {
                database = jdbcURL.substring(jdbcURL.lastIndexOf(""/"") + 1);
            }
            logger.debug(""database name extracted from connection string: "" + database);
            connection = MysqlBaseService.connectWithURL(properties.getProperty(DB_USERNAME), properties.getProperty(DB_PASSWORD),
                    jdbcURL, driverName);
        }

        stmt = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

        
        String sql = exportToSql();

        
        stmt.close();

        
        connection.close();

        
        dirName = properties.getProperty(MysqlExportService.TEMP_DIR, dirName);
        File file = new File(dirName);
        if(!file.exists()) {
            boolean res = file.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        
        File sqlFolder = new File(dirName + ""/sql"");
        if(!sqlFolder.exists()) {
            boolean res = sqlFolder.mkdir();
            if(!res) {
                throw new IOException(LOG_PREFIX + "": Unable to create temp dir: "" + file.getAbsolutePath());
            }
        }

        sqlFileName = getSqlFilename();
        FileOutputStream outputStream = new FileOutputStream( sqlFolder + ""/"" + sqlFileName);
        outputStream.write(sql.getBytes());
        outputStream.close();

        
        zipFileName = dirName + ""/"" + sqlFileName.replace("".sql"", "".zip"");
        generatedZipFile = new File(zipFileName);
        ZipUtil.pack(sqlFolder, generatedZipFile);

        
        if(isEmailPropertiesSet()) {
            boolean emailSendingRes = EmailService.builder()
                    .setHost(properties.getProperty(EMAIL_HOST))
                    .setPort(Integer.parseInt(properties.getProperty(EMAIL_PORT)))
                    .setToAddress(properties.getProperty(EMAIL_TO))
                    .setFromAddress(properties.getProperty(EMAIL_FROM))
                    .setUsername(properties.getProperty(EMAIL_USERNAME))
                    .setPassword(properties.getProperty(EMAIL_PASSWORD))
                    .setSubject(properties.getProperty(EMAIL_SUBJECT, sqlFileName.replace("".sql"", """").toUpperCase()))
                    .setMessage(properties.getProperty(EMAIL_MESSAGE, ""Please find attached database backup of "" + database))
                    .setAttachments(new File[]{new File(zipFileName)})
                    .sendMail();

            if (emailSendingRes) {
                logger.debug(LOG_PREFIX + "": Zip File Sent as Attachment to Email Address Successfully"");
            } else {
                logger.error(LOG_PREFIX + "": Unable to send zipped file as attachment to email. See log debug for more info"");
            }
        }

        
        clearTempFiles();
","['    ', 'public', ' ', 'void', ' ', 'export', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'if', '(', '!', 'isValidateProperties', '(', ')', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Invalid config properties: The config properties is missing important parameters: DB_NAME, DB_USERNAME and DB_PASSWORD', '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'database', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'DB_NAME', ')', ';', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_CONNECTION_STRING', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'String', ' ', 'driverName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'JDBC_DRIVER_NAME', ',', ' ', '""', '""', ')', ';', '\n', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'database', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'if', ' ', '(', 'jdbcURL', '.', 'contains', '(', '""', '?', '""', ')', ')', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ',', ' ', 'jdbcURL', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', 'jdbcURL', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '            ', '}', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'properties', '.', 'getProperty', '(', 'DB_USERNAME', ')', ',', ' ', 'properties', '.', 'getProperty', '(', 'DB_PASSWORD', ')', ',', '\n', '                    ', 'jdbcURL', ',', ' ', 'driverName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', 'ResultSet', '.', 'TYPE_SCROLL_INSENSITIVE', ',', ' ', 'ResultSet', '.', 'CONCUR_READ_ONLY', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'exportToSql', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'dirName', ' ', '=', ' ', 'properties', '.', 'getProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'dirName', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ')', ';', '\n', '        ', 'if', '(', '!', 'file', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'file', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFolder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'dirName', ' ', '+', ' ', '""', '/sql', '""', ')', ';', '\n', '        ', 'if', '(', '!', 'sqlFolder', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'res', ' ', '=', ' ', 'sqlFolder', '.', 'mkdir', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'res', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IOException', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to create temp dir: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'sqlFileName', ' ', '=', ' ', 'getSqlFilename', '(', ')', ';', '\n', '        ', 'FileOutputStream', ' ', 'outputStream', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', ' ', 'sqlFolder', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', ')', ';', '\n', '        ', 'outputStream', '.', 'write', '(', 'sql', '.', 'getBytes', '(', ')', ')', ';', '\n', '        ', 'outputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'zipFileName', ' ', '=', ' ', 'dirName', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '.zip', '""', ')', ';', '\n', '        ', 'generatedZipFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'zipFileName', ')', ';', '\n', '        ', 'ZipUtil', '.', 'pack', '(', 'sqlFolder', ',', ' ', 'generatedZipFile', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', '(', 'isEmailPropertiesSet', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'emailSendingRes', ' ', '=', ' ', 'EmailService', '.', 'builder', '(', ')', '\n', '                    ', '.', 'setHost', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_HOST', ')', ')', '\n', '                    ', '.', 'setPort', '(', 'Integer', '.', 'parseInt', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PORT', ')', ')', ')', '\n', '                    ', '.', 'setToAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_TO', ')', ')', '\n', '                    ', '.', 'setFromAddress', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_FROM', ')', ')', '\n', '                    ', '.', 'setUsername', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_USERNAME', ')', ')', '\n', '                    ', '.', 'setPassword', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_PASSWORD', ')', ')', '\n', '                    ', '.', 'setSubject', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_SUBJECT', ',', ' ', 'sqlFileName', '.', 'replace', '(', '""', '.sql', '""', ',', ' ', '""', '""', ')', '.', 'toUpperCase', '(', ')', ')', ')', '\n', '                    ', '.', 'setMessage', '(', 'properties', '.', 'getProperty', '(', 'EMAIL_MESSAGE', ',', ' ', '""', 'Please find attached database backup of ', '""', ' ', '+', ' ', 'database', ')', ')', '\n', '                    ', '.', 'setAttachments', '(', 'new', ' ', 'File', '[', ']', '{', 'new', ' ', 'File', '(', 'zipFileName', ')', '}', ')', '\n', '                    ', '.', 'sendMail', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'emailSendingRes', ')', ' ', '{', '\n', '                ', 'logger', '.', 'debug', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Zip File Sent as Attachment to Email Address Successfully', '""', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'logger', '.', 'error', '(', 'LOG_PREFIX', ' ', '+', ' ', '""', ': Unable to send zipped file as attachment to email. See log debug for more info', '""', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'clearTempFiles', '(', ')', ';', '\n']"
master,a1599f1d7f9075a98b146537fcd4396dcf6b656f,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, ""mnetsms_db"");
        properties.setProperty(MysqlExportService.DB_USERNAME, ""root"");
        properties.setProperty(MysqlExportService.DB_PASSWORD, ""root"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));

        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(""backup4j_test"")
                .setSqlString(sql)
                .setUsername(""root"")
                .setPassword(""root"")
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
",https://www.github.com/seunmatt/mysql-backup4j/commit/a1599f1d7f9075a98b146537fcd4396dcf6b656f,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, ""mnetsms_db"");
        properties.setProperty(MysqlExportService.DB_USERNAME, ""root"");
        properties.setProperty(MysqlExportService.DB_PASSWORD, ""root"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));

        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(""backup4j_test"")
                .setSqlString(sql)
                .setUsername(""root"")
                .setPassword(""root"")
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', '""', 'mnetsms_db', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', '""', 'root', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', '""', 'root', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ')', ')', ';', '\n', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', '""', 'backup4j_test', '""', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', '""', 'root', '""', ')', '\n', '                ', '.', 'setPassword', '(', '""', 'root', '""', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n']"
master,a1599f1d7f9075a98b146537fcd4396dcf6b656f,MysqlBackup4JIntegrationTest.java,givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, ""root"");
        properties.setProperty(MysqlExportService.DB_PASSWORD, ""root"");
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/mnetsms_db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        //import
        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/backup4j_test?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(""root"")
                .setPassword(""root"")
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
",https://www.github.com/seunmatt/mysql-backup4j/commit/a1599f1d7f9075a98b146537fcd4396dcf6b656f,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, ""root"");
        properties.setProperty(MysqlExportService.DB_PASSWORD, ""root"");
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/mnetsms_db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        
        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/backup4j_test?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(""root"")
                .setPassword(""root"")
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
","['    ', 'void', ' ', 'givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', '""', 'root', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', '""', 'root', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_CONNECTION_STRING', ',', ' ', '""', 'jdbc:mysql://localhost:3306/mnetsms_db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Final Output:', '\\', 'n {}', '""', ',', ' ', 'generatedSql', ')', ';', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'generated file name: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setJdbcConnString', '(', '""', 'jdbc:mysql://localhost:3306/backup4j_test?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', '\n', '                ', '.', 'setUsername', '(', '""', 'root', '""', ')', '\n', '                ', '.', 'setPassword', '(', '""', 'root', '""', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', '\n', '                ', '.', 'importDatabase', '(', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', ')', ';', '\n']"
master,7191b6be7fa8dab54d98ff9545edeb3837e5e09d,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));

        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
",https://www.github.com/seunmatt/mysql-backup4j/commit/7191b6be7fa8dab54d98ff9545edeb3837e5e09d,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));

        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ')', ')', ';', '\n', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n']"
master,7191b6be7fa8dab54d98ff9545edeb3837e5e09d,MysqlBackup4JIntegrationTest.java,givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        //import
        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
",https://www.github.com/seunmatt/mysql-backup4j/commit/7191b6be7fa8dab54d98ff9545edeb3837e5e09d,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        
        String sql = new String(Files.readAllBytes(Paths.get(""external/sql/test_output_file_name.sql"")));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
","['    ', 'void', ' ', 'givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_CONNECTION_STRING', ',', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'TEST_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Final Output:', '\\', 'n {}', '""', ',', ' ', 'generatedSql', ')', ';', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'generated file name: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setJdbcConnString', '(', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'RESTORED_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', '\n', '                ', '.', 'importDatabase', '(', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', ')', ';', '\n']"
master,8be28a10ba987a407ec80efdbbcd4ed41a22660e,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        String sql = new String(Files.readAllBytes(new File(""external/sql/test_output_file_name.sql"").toPath()));

        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
",https://www.github.com/seunmatt/mysql-backup4j/commit/8be28a10ba987a407ec80efdbbcd4ed41a22660e,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        String sql = new String(Files.readAllBytes(new File(""external/sql/test_output_file_name.sql"").toPath()));

        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n']"
master,b1640a52ef5e8e5f8b0c23c4ba86b05da893b2e0,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""./external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
",https://www.github.com/seunmatt/mysql-backup4j/commit/b1640a52ef5e8e5f8b0c23c4ba86b05da893b2e0,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""./external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', './external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n']"
master,a8565aebcac065f88dc1510cd2d6c7c69cf977fb,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
",https://www.github.com/seunmatt/mysql-backup4j/commit/a8565aebcac065f88dc1510cd2d6c7c69cf977fb,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, ""com.mysql.cj.jdbc.Driver"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n']"
master,e92f08d30f95fcf17cbcf3d0b782c6b84fea0387,MysqlBackup4JIntegrationTest.java,givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        //import
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
",https://www.github.com/seunmatt/mysql-backup4j/commit/e92f08d30f95fcf17cbcf3d0b782c6b84fea0387,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
","['    ', 'void', ' ', 'givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_CONNECTION_STRING', ',', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'TEST_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Final Output:', '\\', 'n {}', '""', ',', ' ', 'generatedSql', ')', ';', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'generated file name: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setJdbcConnString', '(', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'RESTORED_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', '\n', '                ', '.', 'importDatabase', '(', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', ')', ';', '\n']"
master,5843f82ac3f5d699a6e318865081cfcc5bf065cb,MysqlBackup4JIntegrationTest.java,givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        //import
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
",https://www.github.com/seunmatt/mysql-backup4j/commit/5843f82ac3f5d699a6e318865081cfcc5bf065cb,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);
","['    ', 'void', ' ', 'givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_CONNECTION_STRING', ',', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'TEST_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Final Output:', '\\', 'n {}', '""', ',', ' ', 'generatedSql', ')', ';', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'generated file name: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setJdbcConnString', '(', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'RESTORED_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', '\n', '                ', '.', 'importDatabase', '(', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', ')', ';', '\n']"
master,54c421d57965980f26eea2c440d6e927798a3174,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
",https://www.github.com/seunmatt/mysql-backup4j/commit/54c421d57965980f26eea2c440d6e927798a3174,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws SQLException, ClassNotFoundException, IOException {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ',', ' ', 'IOException', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n']"
master,a4743c0d2ecd169836c5cdb0bb1c22e4f7e5444b,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());

        assertDatabaseBackedUp();
",https://www.github.com/seunmatt/mysql-backup4j/commit/a4743c0d2ecd169836c5cdb0bb1c22e4f7e5444b,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());

        assertDatabaseBackedUp();
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n', '\n', '        ', 'assertDatabaseBackedUp', '(', ')', ';', '\n']"
master,a4743c0d2ecd169836c5cdb0bb1c22e4f7e5444b,MysqlBackup4JIntegrationTest.java,givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        //import
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);

        assertDatabaseBackedUp();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/a4743c0d2ecd169836c5cdb0bb1c22e4f7e5444b,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);

        assertDatabaseBackedUp();
    }
","['    ', 'void', ' ', 'givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_CONNECTION_STRING', ',', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'TEST_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Final Output:', '\\', 'n {}', '""', ',', ' ', 'generatedSql', ')', ';', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'generated file name: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setJdbcConnString', '(', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'RESTORED_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', '\n', '                ', '.', 'importDatabase', '(', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', ')', ';', '\n', '\n', '        ', 'assertDatabaseBackedUp', '(', ')', ';', '\n', '    ', '}', '\n']"
master,a4743c0d2ecd169836c5cdb0bb1c22e4f7e5444b,MysqlBackup4JIntegrationTest.java,assertDatabaseBackedUp,"    private void assertDatabaseBackedUp() throws Exception {
        Connection connection = MysqlBaseService.connect(DB_USERNAME, DB_PASSWORD, RESTORED_DB, DRIVER_CLASS_NAME);
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        statement.execute(""SELECT COUNT(1) as total FROM users"");
        ResultSet resultSet = statement.getResultSet();
        resultSet.first();
        assertTrue(resultSet.getLong(""total"") > 0);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/a4743c0d2ecd169836c5cdb0bb1c22e4f7e5444b,"    private void assertDatabaseBackedUp() throws Exception {
        Connection connection = MysqlBaseService.connect(DB_USERNAME, DB_PASSWORD, RESTORED_DB, DRIVER_CLASS_NAME);
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        statement.execute(""SELECT COUNT(1) as total FROM users"");
        ResultSet resultSet = statement.getResultSet();
        resultSet.first();
        assertTrue(resultSet.getLong(""total"") > 0);
    }
","['    ', 'private', ' ', 'void', ' ', 'assertDatabaseBackedUp', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Connection', ' ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'DB_USERNAME', ',', ' ', 'DB_PASSWORD', ',', ' ', 'RESTORED_DB', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'Statement', ' ', 'statement', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', 'ResultSet', '.', 'TYPE_SCROLL_INSENSITIVE', ',', ' ', 'ResultSet', '.', 'CONCUR_READ_ONLY', ')', ';', '\n', '        ', 'statement', '.', 'execute', '(', '""', 'SELECT COUNT(1) as total FROM users', '""', ')', ';', '\n', '        ', 'ResultSet', ' ', 'resultSet', ' ', '=', ' ', 'statement', '.', 'getResultSet', '(', ')', ';', '\n', '        ', 'resultSet', '.', 'first', '(', ')', ';', '\n', '        ', 'assertTrue', '(', 'resultSet', '.', 'getLong', '(', '""', 'total', '""', ')', ' ', '>', ' ', '0', ')', ';', '\n', '    ', '}', '\n']"
master,7514389260a7379398f39077fbfdfbf1ae5e0248,MysqlBaseService.java,extractDatabaseNameFromJDBCUrl,"    public static String extractDatabaseNameFromJDBCUrl(String jdbcURL) {

        if(jdbcURL == null || jdbcURL.isEmpty())
            throw new MysqlBackup4JException(""Null or Empty JDBC URL supplied: "" + jdbcURL);

        //strip the extra properties from the URL
        String jdbcURLWithoutParams;
        if(jdbcURL.contains(""?"")) {
            jdbcURLWithoutParams = jdbcURL.substring(0, jdbcURL.indexOf(""?""));
        }
        else {
            jdbcURLWithoutParams = jdbcURL;
        }

        return jdbcURLWithoutParams.substring(jdbcURLWithoutParams.lastIndexOf(""/"") + 1);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/7514389260a7379398f39077fbfdfbf1ae5e0248,"    public static String extractDatabaseNameFromJDBCUrl(String jdbcURL) {

        if(jdbcURL == null || jdbcURL.isEmpty())
            throw new MysqlBackup4JException(""Null or Empty JDBC URL supplied: "" + jdbcURL);

        
        String jdbcURLWithoutParams;
        if(jdbcURL.contains(""?"")) {
            jdbcURLWithoutParams = jdbcURL.substring(0, jdbcURL.indexOf(""?""));
        }
        else {
            jdbcURLWithoutParams = jdbcURL;
        }

        return jdbcURLWithoutParams.substring(jdbcURLWithoutParams.lastIndexOf(""/"") + 1);
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'extractDatabaseNameFromJDBCUrl', '(', 'String', ' ', 'jdbcURL', ')', ' ', '{', '\n', '\n', '        ', 'if', '(', 'jdbcURL', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcURL', '.', 'isEmpty', '(', ')', ')', '\n', '            ', 'throw', ' ', 'new', ' ', 'MysqlBackup4JException', '(', '""', 'Null or Empty JDBC URL supplied: ', '""', ' ', '+', ' ', 'jdbcURL', ')', ';', '\n', '\n', '        ', '\n', '        ', 'String', ' ', 'jdbcURLWithoutParams', ';', '\n', '        ', 'if', '(', 'jdbcURL', '.', 'contains', '(', '""', '?', '""', ')', ')', ' ', '{', '\n', '            ', 'jdbcURLWithoutParams', ' ', '=', ' ', 'jdbcURL', '.', 'substring', '(', '0', ',', ' ', 'jdbcURL', '.', 'indexOf', '(', '""', '?', '""', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '            ', 'jdbcURLWithoutParams', ' ', '=', ' ', 'jdbcURL', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'jdbcURLWithoutParams', '.', 'substring', '(', 'jdbcURLWithoutParams', '.', 'lastIndexOf', '(', '""', '/', '""', ')', ' ', '+', ' ', '1', ')', ';', '\n', '    ', '}', '\n']"
master,7514389260a7379398f39077fbfdfbf1ae5e0248,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            String message = ""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"";
            logger.error(message);
            throw new MysqlBackup4JException(message);
        }


        //connect to the database
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password, database, jdbcDriver);
        }
        else {

            //this prioritizes the value set using the setDatabase() over the one extracted from the connection string
            //it will only use the one from the connection string if no value is set using the setDatabase()
            if(database == null || database.isEmpty()) {
                database = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcConnString);
                logger.debug(""database name extracted from connection string: "" + database);
            }

            connection = MysqlBaseService.connectWithURL(username, password, jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            //get all the tables, so as to eliminate delete errors due to non-existent tables
             TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);
             tables = allTablesAndViews.getTables();
             logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());


             //execute delete query for tables
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }


             List<String> views = allTablesAndViews.getViews();
             //execute delete query for views
            for (String view: views) {
                if(dropExisting) {
                    String dropQ = ""DROP VIEW IF EXISTS "" + ""`"" + view + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }
            }

        }

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex).trim();
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        if(logger.isDebugEnabled())
            logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + Arrays.toString(result));

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/7514389260a7379398f39077fbfdfbf1ae5e0248,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            String message = ""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"";
            logger.error(message);
            throw new MysqlBackup4JException(message);
        }


        
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password, database, jdbcDriver);
        }
        else {

            
            
            if(database == null || database.isEmpty()) {
                database = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcConnString);
                logger.debug(""database name extracted from connection string: "" + database);
            }

            connection = MysqlBaseService.connectWithURL(username, password, jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            
             TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);
             tables = allTablesAndViews.getTables();
             logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());


             
            for (String table: tables) {

                
                
                
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }


             List<String> views = allTablesAndViews.getViews();
             
            for (String view: views) {
                if(dropExisting) {
                    String dropQ = ""DROP VIEW IF EXISTS "" + ""`"" + view + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }
            }

        }

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex).trim();
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        if(logger.isDebugEnabled())
            logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + Arrays.toString(result));

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'message', ' ', '=', ' ', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ';', '\n', '            ', 'logger', '.', 'error', '(', 'message', ')', ';', '\n', '            ', 'throw', ' ', 'new', ' ', 'MysqlBackup4JException', '(', 'message', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', ' ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '\n', '            ', '\n', '            ', '\n', '            ', 'if', '(', 'database', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'database', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'MysqlBaseService', '.', 'extractDatabaseNameFromJDBCUrl', '(', 'jdbcConnString', ')', ';', '\n', '                ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', ' ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '            ', '\n', '             ', 'TablesResponse', ' ', 'allTablesAndViews', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTablesAndViews', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '             ', 'tables', ' ', '=', ' ', 'allTablesAndViews', '.', 'getTables', '(', ')', ';', '\n', '             ', 'logger', '.', 'debug', '(', '""', 'tables found for deleting/dropping: ', '\\', 'n', '""', ' ', '+', ' ', 'tables', '.', 'toString', '(', ')', ')', ';', '\n', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '\n', '             ', 'List', '<', 'String', '>', ' ', 'views', ' ', '=', ' ', 'allTablesAndViews', '.', 'getViews', '(', ')', ';', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'view', ':', ' ', 'views', ')', ' ', '{', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP VIEW IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'view', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', '.', 'trim', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'if', '(', 'logger', '.', 'isDebugEnabled', '(', ')', ')', '\n', '            ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batches for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'Arrays', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,7514389260a7379398f39077fbfdfbf1ae5e0248,MysqlBackup4JIntegrationTest.java,givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        //import
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDatabase(RESTORED_DB)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);

        assertDatabaseBackedUp();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/7514389260a7379398f39077fbfdfbf1ae5e0248,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, ""jdbc:mysql://localhost:3306/"" + TEST_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"");

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();

        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.debug(""generated file name: "" + file.getAbsolutePath());


        
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(""jdbc:mysql://localhost:3306/"" + RESTORED_DB + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"")
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDatabase(RESTORED_DB)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);

        assertDatabaseBackedUp();
    }
","['    ', 'void', ' ', 'givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_CONNECTION_STRING', ',', ' ', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'TEST_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Final Output:', '\\', 'n {}', '""', ',', ' ', 'generatedSql', ')', ';', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'generated file name: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setJdbcConnString', '(', '""', 'jdbc:mysql://localhost:3306/', '""', ' ', '+', ' ', 'RESTORED_DB', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', '\n', '                ', '.', 'importDatabase', '(', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', ')', ';', '\n', '\n', '        ', 'assertDatabaseBackedUp', '(', ')', ';', '\n', '    ', '}', '\n']"
master,7514389260a7379398f39077fbfdfbf1ae5e0248,MysqlBackup4JUnitTest.java,givenJDBCURL_whenExtractDatabaseNameFromJDBCURL_thenReturnDatabaseName,"    void givenJDBCURL_whenExtractDatabaseNameFromJDBCURL_thenReturnDatabaseName() {
        String jdbcURL = ""jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useSSL=true&serverTimezone=Asia/Shanghai"";
        String databaseName = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcURL);
        Assertions.assertEquals(""test"", databaseName);

        jdbcURL = ""jdbc:mysql://localhost:3306/backup4j_test?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"";
        databaseName = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcURL);
        Assertions.assertEquals(""backup4j_test"", databaseName);

        jdbcURL = ""jdbc:mysql://localhost:3306/backup4j_test"";
        databaseName = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcURL);
        Assertions.assertEquals(""backup4j_test"", databaseName);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/7514389260a7379398f39077fbfdfbf1ae5e0248,"    void givenJDBCURL_whenExtractDatabaseNameFromJDBCURL_thenReturnDatabaseName() {
        String jdbcURL = ""jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useSSL=true&serverTimezone=Asia/Shanghai"";
        String databaseName = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcURL);
        Assertions.assertEquals(""test"", databaseName);

        jdbcURL = ""jdbc:mysql://localhost:3306/backup4j_test?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"";
        databaseName = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcURL);
        Assertions.assertEquals(""backup4j_test"", databaseName);

        jdbcURL = ""jdbc:mysql://localhost:3306/backup4j_test"";
        databaseName = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcURL);
        Assertions.assertEquals(""backup4j_test"", databaseName);
    }
","['    ', 'void', ' ', 'givenJDBCURL_whenExtractDatabaseNameFromJDBCURL_thenReturnDatabaseName', '(', ')', ' ', '{', '\n', '        ', 'String', ' ', 'jdbcURL', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useSSL=true&serverTimezone=Asia/Shanghai', '""', ';', '\n', '        ', 'String', ' ', 'databaseName', ' ', '=', ' ', 'MysqlBaseService', '.', 'extractDatabaseNameFromJDBCUrl', '(', 'jdbcURL', ')', ';', '\n', '        ', 'Assertions', '.', 'assertEquals', '(', '""', 'test', '""', ',', ' ', 'databaseName', ')', ';', '\n', '\n', '        ', 'jdbcURL', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/backup4j_test?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ';', '\n', '        ', 'databaseName', ' ', '=', ' ', 'MysqlBaseService', '.', 'extractDatabaseNameFromJDBCUrl', '(', 'jdbcURL', ')', ';', '\n', '        ', 'Assertions', '.', 'assertEquals', '(', '""', 'backup4j_test', '""', ',', ' ', 'databaseName', ')', ';', '\n', '\n', '        ', 'jdbcURL', ' ', '=', ' ', '""', 'jdbc:mysql://localhost:3306/backup4j_test', '""', ';', '\n', '        ', 'databaseName', ' ', '=', ' ', 'MysqlBaseService', '.', 'extractDatabaseNameFromJDBCUrl', '(', 'jdbcURL', ')', ';', '\n', '        ', 'Assertions', '.', 'assertEquals', '(', '""', 'backup4j_test', '""', ',', ' ', 'databaseName', ')', ';', '\n', '    ', '}', '\n']"
master,19f366f7d9cf874cab0dae3fb01c7dca773202f9,MysqlExportServiceHelper.java,bytesToHex,"    public static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/19f366f7d9cf874cab0dae3fb01c7dca773202f9,"    public static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'bytesToHex', '(', 'byte', '[', ']', ' ', 'bytes', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'hexString', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'byte', ' ', 'b', ' ', ':', ' ', 'bytes', ')', ' ', '{', '\n', '            ', 'String', ' ', 'hex', ' ', '=', ' ', 'Integer', '.', 'toHexString', '(', '0xff', ' ', '&', ' ', 'b', ')', ';', '\n', '            ', 'if', ' ', '(', 'hex', '.', 'length', '(', ')', ' ', '=', '=', ' ', '1', ')', ' ', 'hexString', '.', 'append', '(', ""'0'"", ')', ';', '\n', '            ', 'hexString', '.', 'append', '(', 'hex', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'hexString', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b6eb668adfcfb02e4fa4299306f1d9707e624e33,MysqlBaseService.java,connect,"    public static Connection connect(String username, String password, String host, String port, String database, String driverName) throws ClassNotFoundException, SQLException {

        String url = String.format(""jdbc:mysql://%s:%s/%s"", host, port, database);
        url = url + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true""
                + ""&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"";

        String driver = (Objects.isNull(driverName) || driverName.isEmpty())
                        ? ""com.mysql.cj.jdbc.Driver""
                        : driverName;

        return doConnect(driver, url, username, password);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6eb668adfcfb02e4fa4299306f1d9707e624e33,"    public static Connection connect(String username, String password, String host, String port, String database, String driverName) throws ClassNotFoundException, SQLException {

        String url = String.format(""jdbc:mysql://%s:%s/%s"", host, port, database);
        url = url + ""?useUnicode=true&useJDBCCompliantTimezoneShift=true""
                + ""&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"";

        String driver = (Objects.isNull(driverName) || driverName.isEmpty())
                        ? ""com.mysql.cj.jdbc.Driver""
                        : driverName;

        return doConnect(driver, url, username, password);
    }
","['    ', 'public', ' ', 'static', ' ', 'Connection', ' ', 'connect', '(', 'String', ' ', 'username', ',', ' ', 'String', ' ', 'password', ',', ' ', 'String', ' ', 'host', ',', ' ', 'String', ' ', 'port', ',', ' ', 'String', ' ', 'database', ',', ' ', 'String', ' ', 'driverName', ')', ' ', 'throws', ' ', 'ClassNotFoundException', ',', ' ', 'SQLException', ' ', '{', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'String', '.', 'format', '(', '""', 'jdbc:mysql://%s:%s/%s', '""', ',', ' ', 'host', ',', ' ', 'port', ',', ' ', 'database', ')', ';', '\n', '        ', 'url', ' ', '=', ' ', 'url', ' ', '+', ' ', '""', '?useUnicode=true&useJDBCCompliantTimezoneShift=true', '""', '\n', '                ', '+', ' ', '""', '&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ';', '\n', '\n', '        ', 'String', ' ', 'driver', ' ', '=', ' ', '(', 'Objects', '.', 'isNull', '(', 'driverName', ')', ' ', '|', '|', ' ', 'driverName', '.', 'isEmpty', '(', ')', ')', '\n', '                        ', '?', ' ', '""', 'com.mysql.cj.jdbc.Driver', '""', '\n', '                        ', ':', ' ', 'driverName', ';', '\n', '\n', '        ', 'return', ' ', 'doConnect', '(', 'driver', ',', ' ', 'url', ',', ' ', 'username', ',', ' ', 'password', ')', ';', '\n', '    ', '}', '\n']"
master,b6eb668adfcfb02e4fa4299306f1d9707e624e33,MysqlImportService.java,importDatabase,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            String message = ""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"";
            logger.error(message);
            throw new MysqlBackup4JException(message);
        }


        //connect to the database
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password, host, port, database, jdbcDriver);
        }
        else {

            //this prioritizes the value set using the setDatabase() over the one extracted from the connection string
            //it will only use the one from the connection string if no value is set using the setDatabase()
            if(database == null || database.isEmpty()) {
                database = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcConnString);
                logger.debug(""database name extracted from connection string: "" + database);
            }

            connection = MysqlBaseService.connectWithURL(username, password, jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            //get all the tables, so as to eliminate delete errors due to non-existent tables
             TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);
             tables = allTablesAndViews.getTables();
             logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());


             //execute delete query for tables
            for (String table: tables) {

                //if deleteExisting and dropExisting is true
                //skip the deleteExisting query
                //dropExisting will take care of both
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }


             List<String> views = allTablesAndViews.getViews();
             //execute delete query for views
            for (String view: views) {
                if(dropExisting) {
                    String dropQ = ""DROP VIEW IF EXISTS "" + ""`"" + view + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }
            }

        }

        //disable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        //now process the sql string supplied
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            //get the chunk of the first statement to execute
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex).trim();
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            //remove the chunk from the whole to reduce it
            sqlString = sqlString.substring(endIndex + 1);

            //repeat
        }


        //add enable foreign key check
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        //now execute the batch
        long[] result = stmt.executeLargeBatch();

        if(logger.isDebugEnabled())
            logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + Arrays.toString(result));

        stmt.close();
        connection.close();

        return true;
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6eb668adfcfb02e4fa4299306f1d9707e624e33,"    public boolean importDatabase() throws SQLException, ClassNotFoundException {

        if(!this.assertValidParams()) {
            String message = ""Required Parameters not set or empty \n"" +
                    ""Ensure database, username, password, sqlString params are configured \n"" +
                    ""using their respective setters"";
            logger.error(message);
            throw new MysqlBackup4JException(message);
        }


        
        Connection connection;
        if(jdbcConnString == null || jdbcConnString.isEmpty()) {
            connection = MysqlBaseService.connect(username, password, host, port, database, jdbcDriver);
        }
        else {

            
            
            if(database == null || database.isEmpty()) {
                database = MysqlBaseService.extractDatabaseNameFromJDBCUrl(jdbcConnString);
                logger.debug(""database name extracted from connection string: "" + database);
            }

            connection = MysqlBaseService.connectWithURL(username, password, jdbcConnString, jdbcDriver);
        }

        Statement stmt = connection.createStatement();

         if(deleteExisting || dropExisting) {

            
             TablesResponse allTablesAndViews = MysqlBaseService.getAllTablesAndViews(database, stmt);
             tables = allTablesAndViews.getTables();
             logger.debug(""tables found for deleting/dropping: \n"" + tables.toString());


             
            for (String table: tables) {

                
                
                
                if(deleteExisting && !dropExisting) {
                    String delQ = ""DELETE FROM "" + ""`"" + table + ""`;"";
                    logger.debug(""adding "" + delQ + "" to batch"");
                    stmt.addBatch(delQ);
                }

                if(dropExisting) {
                    String dropQ = ""DROP TABLE IF EXISTS "" + ""`"" + table + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }

            }


             List<String> views = allTablesAndViews.getViews();
             
            for (String view: views) {
                if(dropExisting) {
                    String dropQ = ""DROP VIEW IF EXISTS "" + ""`"" + view + ""`"";
                    logger.debug(""adding "" + dropQ + "" to batch"");
                    stmt.addBatch(dropQ);
                }
            }

        }

        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 0"");


        
        while (sqlString.contains(MysqlBaseService.SQL_START_PATTERN)) {

            
            int startIndex = sqlString.indexOf(MysqlBaseService.SQL_START_PATTERN);
            int endIndex = sqlString.indexOf(MysqlBaseService.SQL_END_PATTERN);

            String executable = sqlString.substring(startIndex, endIndex).trim();
            logger.debug(""adding extracted executable SQL chunk to batch : \n"" + executable);
            stmt.addBatch(executable);

            
            sqlString = sqlString.substring(endIndex + 1);

            
        }


        
        stmt.addBatch(""SET FOREIGN_KEY_CHECKS = 1"");

        
        long[] result = stmt.executeLargeBatch();

        if(logger.isDebugEnabled())
            logger.debug( result.length + "" queries were executed in batches for provided SQL String with the following result : \n"" + Arrays.toString(result));

        stmt.close();
        connection.close();

        return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'importDatabase', '(', ')', ' ', 'throws', ' ', 'SQLException', ',', ' ', 'ClassNotFoundException', ' ', '{', '\n', '\n', '        ', 'if', '(', '!', 'this', '.', 'assertValidParams', '(', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'message', ' ', '=', ' ', '""', 'Required Parameters not set or empty ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'Ensure database, username, password, sqlString params are configured ', '\\', 'n', '""', ' ', '+', '\n', '                    ', '""', 'using their respective setters', '""', ';', '\n', '            ', 'logger', '.', 'error', '(', 'message', ')', ';', '\n', '            ', 'throw', ' ', 'new', ' ', 'MysqlBackup4JException', '(', 'message', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'Connection', ' ', 'connection', ';', '\n', '        ', 'if', '(', 'jdbcConnString', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'jdbcConnString', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'username', ',', ' ', 'password', ',', ' ', 'host', ',', ' ', 'port', ',', ' ', 'database', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '        ', 'else', ' ', '{', '\n', '\n', '            ', '\n', '            ', '\n', '            ', 'if', '(', 'database', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'database', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '                ', 'database', ' ', '=', ' ', 'MysqlBaseService', '.', 'extractDatabaseNameFromJDBCUrl', '(', 'jdbcConnString', ')', ';', '\n', '                ', 'logger', '.', 'debug', '(', '""', 'database name extracted from connection string: ', '""', ' ', '+', ' ', 'database', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connectWithURL', '(', 'username', ',', ' ', 'password', ',', ' ', 'jdbcConnString', ',', ' ', 'jdbcDriver', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Statement', ' ', 'stmt', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', ')', ';', '\n', '\n', '         ', 'if', '(', 'deleteExisting', ' ', '|', '|', ' ', 'dropExisting', ')', ' ', '{', '\n', '\n', '            ', '\n', '             ', 'TablesResponse', ' ', 'allTablesAndViews', ' ', '=', ' ', 'MysqlBaseService', '.', 'getAllTablesAndViews', '(', 'database', ',', ' ', 'stmt', ')', ';', '\n', '             ', 'tables', ' ', '=', ' ', 'allTablesAndViews', '.', 'getTables', '(', ')', ';', '\n', '             ', 'logger', '.', 'debug', '(', '""', 'tables found for deleting/dropping: ', '\\', 'n', '""', ' ', '+', ' ', 'tables', '.', 'toString', '(', ')', ')', ';', '\n', '\n', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'table', ':', ' ', 'tables', ')', ' ', '{', '\n', '\n', '                ', '\n', '                ', '\n', '                ', '\n', '                ', 'if', '(', 'deleteExisting', ' ', '&', '&', ' ', '!', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'delQ', ' ', '=', ' ', '""', 'DELETE FROM ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`;', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'delQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'delQ', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP TABLE IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'table', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '\n', '             ', 'List', '<', 'String', '>', ' ', 'views', ' ', '=', ' ', 'allTablesAndViews', '.', 'getViews', '(', ')', ';', '\n', '             ', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'view', ':', ' ', 'views', ')', ' ', '{', '\n', '                ', 'if', '(', 'dropExisting', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'dropQ', ' ', '=', ' ', '""', 'DROP VIEW IF EXISTS ', '""', ' ', '+', ' ', '""', '`', '""', ' ', '+', ' ', 'view', ' ', '+', ' ', '""', '`', '""', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'adding ', '""', ' ', '+', ' ', 'dropQ', ' ', '+', ' ', '""', ' to batch', '""', ')', ';', '\n', '                    ', 'stmt', '.', 'addBatch', '(', 'dropQ', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 0', '""', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'while', ' ', '(', 'sqlString', '.', 'contains', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ')', ' ', '{', '\n', '\n', '            ', '\n', '            ', 'int', ' ', 'startIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_START_PATTERN', ')', ';', '\n', '            ', 'int', ' ', 'endIndex', ' ', '=', ' ', 'sqlString', '.', 'indexOf', '(', 'MysqlBaseService', '.', 'SQL_END_PATTERN', ')', ';', '\n', '\n', '            ', 'String', ' ', 'executable', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'startIndex', ',', ' ', 'endIndex', ')', '.', 'trim', '(', ')', ';', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'adding extracted executable SQL chunk to batch : ', '\\', 'n', '""', ' ', '+', ' ', 'executable', ')', ';', '\n', '            ', 'stmt', '.', 'addBatch', '(', 'executable', ')', ';', '\n', '\n', '            ', '\n', '            ', 'sqlString', ' ', '=', ' ', 'sqlString', '.', 'substring', '(', 'endIndex', ' ', '+', ' ', '1', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', '\n', '        ', 'stmt', '.', 'addBatch', '(', '""', 'SET FOREIGN_KEY_CHECKS = 1', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'long', '[', ']', ' ', 'result', ' ', '=', ' ', 'stmt', '.', 'executeLargeBatch', '(', ')', ';', '\n', '\n', '        ', 'if', '(', 'logger', '.', 'isDebugEnabled', '(', ')', ')', '\n', '            ', 'logger', '.', 'debug', '(', ' ', 'result', '.', 'length', ' ', '+', ' ', '""', ' queries were executed in batches for provided SQL String with the following result : ', '\\', 'n', '""', ' ', '+', ' ', 'Arrays', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\n', '        ', 'stmt', '.', 'close', '(', ')', ';', '\n', '        ', 'connection', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,b6eb668adfcfb02e4fa4299306f1d9707e624e33,MysqlBackup4JIntegrationTest.java,givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());
//        logger.info(""generated SQL: \n"" + generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setHost(MYSQL_DB_HOST)
                .setPort(MYSQL_DB_PORT)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());

        assertDatabaseBackedUp();
",https://www.github.com/seunmatt/mysql-backup4j/commit/b6eb668adfcfb02e4fa4299306f1d9707e624e33,"    void givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");


        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
        Assertions.assertFalse(generatedSql.isEmpty());


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        logger.info(""Generated Filename: "" + file.getAbsolutePath());

        File sqlFile = new File(""external/sql/test_output_file_name.sql"");
        logger.info(""SQL File name: "" + sqlFile.getAbsolutePath());

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        MysqlImportService res = MysqlImportService.builder()
                .setJdbcDriver(""com.mysql.cj.jdbc.Driver"")
                .setDatabase(RESTORED_DB)
                .setSqlString(sql)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setHost(MYSQL_DB_HOST)
                .setPort(MYSQL_DB_PORT)
                .setDeleteExisting(true)
                .setDropExisting(true);

        assertTrue(res.importDatabase());

        assertDatabaseBackedUp();
","['    ', 'void', ' ', 'givenDBCredentials_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_HOST', ',', ' ', 'MYSQL_DB_HOST', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PORT', ',', ' ', 'MYSQL_DB_PORT', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '        ', 'Assertions', '.', 'assertFalse', '(', 'generatedSql', '.', 'isEmpty', '(', ')', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Generated Filename: ', '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'SQL File name: ', '""', ' ', '+', ' ', 'sqlFile', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'MysqlImportService', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setJdbcDriver', '(', '""', 'com.mysql.cj.jdbc.Driver', '""', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setHost', '(', 'MYSQL_DB_HOST', ')', '\n', '                ', '.', 'setPort', '(', 'MYSQL_DB_PORT', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', '.', 'importDatabase', '(', ')', ')', ';', '\n', '\n', '        ', 'assertDatabaseBackedUp', '(', ')', ';', '\n']"
master,b6eb668adfcfb02e4fa4299306f1d9707e624e33,MysqlBackup4JIntegrationTest.java,givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        String jdbcUrl = String.format(""jdbc:mysql://%s:%s/%s?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"",
                MYSQL_DB_HOST, MYSQL_DB_PORT, TEST_DB);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, jdbcUrl);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();
//        logger.debug(""Final Output:\n {}"", generatedSql);

        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        Assertions.assertEquals(""test_output_file_name.zip"", file.getName());


        //import
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        String restoredJdbcUrl = String.format(""jdbc:mysql://%s:%s/%s?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false""
                        + ""&serverTimezone=UTC&useSSL=false"",
                MYSQL_DB_HOST, MYSQL_DB_PORT, RESTORED_DB);
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(restoredJdbcUrl)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDatabase(RESTORED_DB)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);

        assertDatabaseBackedUp();
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6eb668adfcfb02e4fa4299306f1d9707e624e33,"    void givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully() throws Exception {

        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        String jdbcUrl = String.format(""jdbc:mysql://%s:%s/%s?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false"",
                MYSQL_DB_HOST, MYSQL_DB_PORT, TEST_DB);
        properties.setProperty(MysqlExportService.JDBC_CONNECTION_STRING, jdbcUrl);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();

        String generatedSql = mysqlExportService.getGeneratedSql();


        File file = mysqlExportService.getGeneratedZipFile();
        assertNotNull(file);
        Assertions.assertEquals(""test_output_file_name.zip"", file.getName());


        
        File sqlFile = new File(""external/sql/test_output_file_name.sql"");

        String sql = new String(Files.readAllBytes(sqlFile.toPath()));
        String restoredJdbcUrl = String.format(""jdbc:mysql://%s:%s/%s?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false""
                        + ""&serverTimezone=UTC&useSSL=false"",
                MYSQL_DB_HOST, MYSQL_DB_PORT, RESTORED_DB);
        boolean res = MysqlImportService.builder()
                .setSqlString(sql)
                .setJdbcConnString(restoredJdbcUrl)
                .setUsername(DB_USERNAME)
                .setPassword(DB_PASSWORD)
                .setDatabase(RESTORED_DB)
                .setDeleteExisting(true)
                .setDropExisting(true)
                .importDatabase();

        assertTrue(res);

        assertDatabaseBackedUp();
    }
","['    ', 'void', ' ', 'givenJDBCConString_whenExportDatabaseAndImportDatabase_thenBackUpAndRestoreTestDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'String', ' ', 'jdbcUrl', ' ', '=', ' ', 'String', '.', 'format', '(', '""', 'jdbc:mysql://%s:%s/%s?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false', '""', ',', '\n', '                ', 'MYSQL_DB_HOST', ',', ' ', 'MYSQL_DB_PORT', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_CONNECTION_STRING', ',', ' ', 'jdbcUrl', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'generatedSql', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedSql', '(', ')', ';', '\n', '\n', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'mysqlExportService', '.', 'getGeneratedZipFile', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'file', ')', ';', '\n', '        ', 'Assertions', '.', 'assertEquals', '(', '""', 'test_output_file_name.zip', '""', ',', ' ', 'file', '.', 'getName', '(', ')', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'File', ' ', 'sqlFile', ' ', '=', ' ', 'new', ' ', 'File', '(', '""', 'external/sql/test_output_file_name.sql', '""', ')', ';', '\n', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', 'new', ' ', 'String', '(', 'Files', '.', 'readAllBytes', '(', 'sqlFile', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'String', ' ', 'restoredJdbcUrl', ' ', '=', ' ', 'String', '.', 'format', '(', '""', 'jdbc:mysql://%s:%s/%s?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false', '""', '\n', '                        ', '+', ' ', '""', '&serverTimezone=UTC&useSSL=false', '""', ',', '\n', '                ', 'MYSQL_DB_HOST', ',', ' ', 'MYSQL_DB_PORT', ',', ' ', 'RESTORED_DB', ')', ';', '\n', '        ', 'boolean', ' ', 'res', ' ', '=', ' ', 'MysqlImportService', '.', 'builder', '(', ')', '\n', '                ', '.', 'setSqlString', '(', 'sql', ')', '\n', '                ', '.', 'setJdbcConnString', '(', 'restoredJdbcUrl', ')', '\n', '                ', '.', 'setUsername', '(', 'DB_USERNAME', ')', '\n', '                ', '.', 'setPassword', '(', 'DB_PASSWORD', ')', '\n', '                ', '.', 'setDatabase', '(', 'RESTORED_DB', ')', '\n', '                ', '.', 'setDeleteExisting', '(', 'true', ')', '\n', '                ', '.', 'setDropExisting', '(', 'true', ')', '\n', '                ', '.', 'importDatabase', '(', ')', ';', '\n', '\n', '        ', 'assertTrue', '(', 'res', ')', ';', '\n', '\n', '        ', 'assertDatabaseBackedUp', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b6eb668adfcfb02e4fa4299306f1d9707e624e33,MysqlBackup4JIntegrationTest.java,assertDatabaseBackedUp,"    private void assertDatabaseBackedUp() throws Exception {
        Connection connection = MysqlBaseService.connect(DB_USERNAME, DB_PASSWORD, MYSQL_DB_HOST, MYSQL_DB_PORT,
                RESTORED_DB, DRIVER_CLASS_NAME);
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        statement.execute(""SELECT COUNT(1) as total FROM users"");
        ResultSet resultSet = statement.getResultSet();
        resultSet.first();
        assertTrue(resultSet.getLong(""total"") > 0);
    }",https://www.github.com/seunmatt/mysql-backup4j/commit/b6eb668adfcfb02e4fa4299306f1d9707e624e33,"    private void assertDatabaseBackedUp() throws Exception {
        Connection connection = MysqlBaseService.connect(DB_USERNAME, DB_PASSWORD, MYSQL_DB_HOST, MYSQL_DB_PORT,
                RESTORED_DB, DRIVER_CLASS_NAME);
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        statement.execute(""SELECT COUNT(1) as total FROM users"");
        ResultSet resultSet = statement.getResultSet();
        resultSet.first();
        assertTrue(resultSet.getLong(""total"") > 0);
    }
","['    ', 'private', ' ', 'void', ' ', 'assertDatabaseBackedUp', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Connection', ' ', 'connection', ' ', '=', ' ', 'MysqlBaseService', '.', 'connect', '(', 'DB_USERNAME', ',', ' ', 'DB_PASSWORD', ',', ' ', 'MYSQL_DB_HOST', ',', ' ', 'MYSQL_DB_PORT', ',', '\n', '                ', 'RESTORED_DB', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'Statement', ' ', 'statement', ' ', '=', ' ', 'connection', '.', 'createStatement', '(', 'ResultSet', '.', 'TYPE_SCROLL_INSENSITIVE', ',', ' ', 'ResultSet', '.', 'CONCUR_READ_ONLY', ')', ';', '\n', '        ', 'statement', '.', 'execute', '(', '""', 'SELECT COUNT(1) as total FROM users', '""', ')', ';', '\n', '        ', 'ResultSet', ' ', 'resultSet', ' ', '=', ' ', 'statement', '.', 'getResultSet', '(', ')', ';', '\n', '        ', 'resultSet', '.', 'first', '(', ')', ';', '\n', '        ', 'assertTrue', '(', 'resultSet', '.', 'getLong', '(', '""', 'total', '""', ')', ' ', '>', ' ', '0', ')', ';', '\n', '    ', '}', '\n']"
master,9898b57eb5df6de771efcaa6423c11aad6319e62,MysqlBackup4JIntegrationTest.java,givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully,"    void givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully() throws Exception {

        GenericContainer<?> smtpServerContainer =
                new GenericContainer<>(""reachfive/fake-smtp-server:0.8.1"")
                        .withExposedPorts(1080, 1025);
        smtpServerContainer.start();
        int smtpPort = smtpServerContainer.getMappedPort(1025);
        int webPort = smtpServerContainer.getMappedPort(1080);


        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        //properties relating to email config
        properties.setProperty(MysqlExportService.EMAIL_HOST, ""127.0.0.1"");
        properties.setProperty(MysqlExportService.EMAIL_PORT, String.valueOf(smtpPort));
        properties.setProperty(MysqlExportService.EMAIL_USERNAME, ""username"");
        properties.setProperty(MysqlExportService.EMAIL_PASSWORD, ""password"");
        properties.setProperty(MysqlExportService.EMAIL_FROM, ""test@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_TO, ""backup@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_SSL_PROTOCOLS, ""TLSv1.2"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();


        String url = String.format(""http://127.0.0.1:%s/api/emails?from=test@smattme.com&to=backup@smattme.com"",
                webPort);

        InputStream inputStream = new URL(url).openConnection().getInputStream();
        try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
            String response = bufferedReader.lines().collect(Collectors.joining());
            Pattern pattern = Pattern.compile(""(.)*\""messageId\"":(?<msgId>\"".+\"").*"");
            Matcher matcher = pattern.matcher(response);
            Assertions.assertEquals(2, matcher.groupCount());
            Assertions.assertTrue(matcher.matches());
            Assertions.assertNotNull(matcher.group(""msgId""));
        }


        inputStream.close();
        smtpServerContainer.stop();
",https://www.github.com/seunmatt/mysql-backup4j/commit/9898b57eb5df6de771efcaa6423c11aad6319e62,"    void givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully() throws Exception {

        GenericContainer<?> smtpServerContainer =
                new GenericContainer<>(""reachfive/fake-smtp-server:0.8.1"")
                        .withExposedPorts(1080, 1025);
        smtpServerContainer.start();
        int smtpPort = smtpServerContainer.getMappedPort(1025);
        int webPort = smtpServerContainer.getMappedPort(1080);


        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        
        properties.setProperty(MysqlExportService.EMAIL_HOST, ""127.0.0.1"");
        properties.setProperty(MysqlExportService.EMAIL_PORT, String.valueOf(smtpPort));
        properties.setProperty(MysqlExportService.EMAIL_USERNAME, ""username"");
        properties.setProperty(MysqlExportService.EMAIL_PASSWORD, ""password"");
        properties.setProperty(MysqlExportService.EMAIL_FROM, ""test@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_TO, ""backup@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_SSL_PROTOCOLS, ""TLSv1.2"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();


        String url = String.format(""http://127.0.0.1:%s/api/emails?from=test@smattme.com&to=backup@smattme.com"",
                webPort);

        InputStream inputStream = new URL(url).openConnection().getInputStream();
        try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
            String response = bufferedReader.lines().collect(Collectors.joining());
            Pattern pattern = Pattern.compile(""(.)*\""messageId\"":(?<msgId>\"".+\"").*"");
            Matcher matcher = pattern.matcher(response);
            Assertions.assertEquals(2, matcher.groupCount());
            Assertions.assertTrue(matcher.matches());
            Assertions.assertNotNull(matcher.group(""msgId""));
        }


        inputStream.close();
        smtpServerContainer.stop();
","['    ', 'void', ' ', 'givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'GenericContainer', '<', '?', '>', ' ', 'smtpServerContainer', ' ', '=', '\n', '                ', 'new', ' ', 'GenericContainer', '<', '>', '(', '""', 'reachfive/fake-smtp-server:0.8.1', '""', ')', '\n', '                        ', '.', 'withExposedPorts', '(', '1080', ',', ' ', '1025', ')', ';', '\n', '        ', 'smtpServerContainer', '.', 'start', '(', ')', ';', '\n', '        ', 'int', ' ', 'smtpPort', ' ', '=', ' ', 'smtpServerContainer', '.', 'getMappedPort', '(', '1025', ')', ';', '\n', '        ', 'int', ' ', 'webPort', ' ', '=', ' ', 'smtpServerContainer', '.', 'getMappedPort', '(', '1080', ')', ';', '\n', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_HOST', ',', ' ', 'MYSQL_DB_HOST', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PORT', ',', ' ', 'MYSQL_DB_PORT', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_HOST', ',', ' ', '""', '127.0.0.1', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_PORT', ',', ' ', 'String', '.', 'valueOf', '(', 'smtpPort', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_USERNAME', ',', ' ', '""', 'username', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_PASSWORD', ',', ' ', '""', 'password', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_FROM', ',', ' ', '""', 'test@smattme.com', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_TO', ',', ' ', '""', 'backup@smattme.com', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_SSL_PROTOCOLS', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'String', '.', 'format', '(', '""', 'http://127.0.0.1:%s/api/emails?from=test@smattme.com&to=backup@smattme.com', '""', ',', '\n', '                ', 'webPort', ')', ';', '\n', '\n', '        ', 'InputStream', ' ', 'inputStream', ' ', '=', ' ', 'new', ' ', 'URL', '(', 'url', ')', '.', 'openConnection', '(', ')', '.', 'getInputStream', '(', ')', ';', '\n', '        ', 'try', '(', 'BufferedReader', ' ', 'bufferedReader', ' ', '=', ' ', 'new', ' ', 'BufferedReader', '(', 'new', ' ', 'InputStreamReader', '(', 'inputStream', ')', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'response', ' ', '=', ' ', 'bufferedReader', '.', 'lines', '(', ')', '.', 'collect', '(', 'Collectors', '.', 'joining', '(', ')', ')', ';', '\n', '            ', 'Pattern', ' ', 'pattern', ' ', '=', ' ', 'Pattern', '.', 'compile', '(', '""', '(.)*', '\\""', 'messageId', '\\""', ':(?<msgId>', '\\""', '.+', '\\""', ').*', '""', ')', ';', '\n', '            ', 'Matcher', ' ', 'matcher', ' ', '=', ' ', 'pattern', '.', 'matcher', '(', 'response', ')', ';', '\n', '            ', 'Assertions', '.', 'assertEquals', '(', '2', ',', ' ', 'matcher', '.', 'groupCount', '(', ')', ')', ';', '\n', '            ', 'Assertions', '.', 'assertTrue', '(', 'matcher', '.', 'matches', '(', ')', ')', ';', '\n', '            ', 'Assertions', '.', 'assertNotNull', '(', 'matcher', '.', 'group', '(', '""', 'msgId', '""', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'inputStream', '.', 'close', '(', ')', ';', '\n', '        ', 'smtpServerContainer', '.', 'stop', '(', ')', ';', '\n']"
master,670ba103fc42d72783436f4347e8ba6dc65ae625,MysqlBackup4JIntegrationTest.java,givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully,"    void givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully() throws Exception {

        GenericContainer<?> smtpServerContainer =
                new GenericContainer<>(""reachfive/fake-smtp-server:0.8.1"")
                        .withExposedPorts(1080, 1025);
        smtpServerContainer.start();
        int smtpPort = smtpServerContainer.getMappedPort(1025);
        int webPort = smtpServerContainer.getMappedPort(1080);
        String smtpServerHost = smtpServerContainer.getHost();


        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        //properties relating to email config
        properties.setProperty(MysqlExportService.EMAIL_HOST, smtpServerHost);
        properties.setProperty(MysqlExportService.EMAIL_PORT, String.valueOf(smtpPort));
        properties.setProperty(MysqlExportService.EMAIL_USERNAME, ""username"");
        properties.setProperty(MysqlExportService.EMAIL_PASSWORD, ""password"");
        properties.setProperty(MysqlExportService.EMAIL_FROM, ""test@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_TO, ""backup@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_SSL_PROTOCOLS, ""TLSv1.2"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();


        String url = String.format(""http://%s:%s/api/emails?from=test@smattme.com&to=backup@smattme.com"",
                smtpServerHost, webPort);

        InputStream inputStream = new URL(url).openConnection().getInputStream();
        try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
            String response = bufferedReader.lines().collect(Collectors.joining());
            Pattern pattern = Pattern.compile(""(.)*\""messageId\"":(?<msgId>\"".+\"").*"");
            Matcher matcher = pattern.matcher(response);
            Assertions.assertEquals(2, matcher.groupCount());
            Assertions.assertTrue(matcher.matches());
            Assertions.assertNotNull(matcher.group(""msgId""));
        }


        inputStream.close();
        smtpServerContainer.stop();
",https://www.github.com/seunmatt/mysql-backup4j/commit/670ba103fc42d72783436f4347e8ba6dc65ae625,"    void givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully() throws Exception {

        GenericContainer<?> smtpServerContainer =
                new GenericContainer<>(""reachfive/fake-smtp-server:0.8.1"")
                        .withExposedPorts(1080, 1025);
        smtpServerContainer.start();
        int smtpPort = smtpServerContainer.getMappedPort(1025);
        int webPort = smtpServerContainer.getMappedPort(1080);
        String smtpServerHost = smtpServerContainer.getHost();


        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        
        properties.setProperty(MysqlExportService.EMAIL_HOST, smtpServerHost);
        properties.setProperty(MysqlExportService.EMAIL_PORT, String.valueOf(smtpPort));
        properties.setProperty(MysqlExportService.EMAIL_USERNAME, ""username"");
        properties.setProperty(MysqlExportService.EMAIL_PASSWORD, ""password"");
        properties.setProperty(MysqlExportService.EMAIL_FROM, ""test@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_TO, ""backup@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_SSL_PROTOCOLS, ""TLSv1.2"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();


        String url = String.format(""http://%s:%s/api/emails?from=test@smattme.com&to=backup@smattme.com"",
                smtpServerHost, webPort);

        InputStream inputStream = new URL(url).openConnection().getInputStream();
        try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
            String response = bufferedReader.lines().collect(Collectors.joining());
            Pattern pattern = Pattern.compile(""(.)*\""messageId\"":(?<msgId>\"".+\"").*"");
            Matcher matcher = pattern.matcher(response);
            Assertions.assertEquals(2, matcher.groupCount());
            Assertions.assertTrue(matcher.matches());
            Assertions.assertNotNull(matcher.group(""msgId""));
        }


        inputStream.close();
        smtpServerContainer.stop();
","['    ', 'void', ' ', 'givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'GenericContainer', '<', '?', '>', ' ', 'smtpServerContainer', ' ', '=', '\n', '                ', 'new', ' ', 'GenericContainer', '<', '>', '(', '""', 'reachfive/fake-smtp-server:0.8.1', '""', ')', '\n', '                        ', '.', 'withExposedPorts', '(', '1080', ',', ' ', '1025', ')', ';', '\n', '        ', 'smtpServerContainer', '.', 'start', '(', ')', ';', '\n', '        ', 'int', ' ', 'smtpPort', ' ', '=', ' ', 'smtpServerContainer', '.', 'getMappedPort', '(', '1025', ')', ';', '\n', '        ', 'int', ' ', 'webPort', ' ', '=', ' ', 'smtpServerContainer', '.', 'getMappedPort', '(', '1080', ')', ';', '\n', '        ', 'String', ' ', 'smtpServerHost', ' ', '=', ' ', 'smtpServerContainer', '.', 'getHost', '(', ')', ';', '\n', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_HOST', ',', ' ', 'MYSQL_DB_HOST', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PORT', ',', ' ', 'MYSQL_DB_PORT', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_HOST', ',', ' ', 'smtpServerHost', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_PORT', ',', ' ', 'String', '.', 'valueOf', '(', 'smtpPort', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_USERNAME', ',', ' ', '""', 'username', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_PASSWORD', ',', ' ', '""', 'password', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_FROM', ',', ' ', '""', 'test@smattme.com', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_TO', ',', ' ', '""', 'backup@smattme.com', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_SSL_PROTOCOLS', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'String', '.', 'format', '(', '""', 'http://%s:%s/api/emails?from=test@smattme.com&to=backup@smattme.com', '""', ',', '\n', '                ', 'smtpServerHost', ',', ' ', 'webPort', ')', ';', '\n', '\n', '        ', 'InputStream', ' ', 'inputStream', ' ', '=', ' ', 'new', ' ', 'URL', '(', 'url', ')', '.', 'openConnection', '(', ')', '.', 'getInputStream', '(', ')', ';', '\n', '        ', 'try', '(', 'BufferedReader', ' ', 'bufferedReader', ' ', '=', ' ', 'new', ' ', 'BufferedReader', '(', 'new', ' ', 'InputStreamReader', '(', 'inputStream', ')', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'response', ' ', '=', ' ', 'bufferedReader', '.', 'lines', '(', ')', '.', 'collect', '(', 'Collectors', '.', 'joining', '(', ')', ')', ';', '\n', '            ', 'Pattern', ' ', 'pattern', ' ', '=', ' ', 'Pattern', '.', 'compile', '(', '""', '(.)*', '\\""', 'messageId', '\\""', ':(?<msgId>', '\\""', '.+', '\\""', ').*', '""', ')', ';', '\n', '            ', 'Matcher', ' ', 'matcher', ' ', '=', ' ', 'pattern', '.', 'matcher', '(', 'response', ')', ';', '\n', '            ', 'Assertions', '.', 'assertEquals', '(', '2', ',', ' ', 'matcher', '.', 'groupCount', '(', ')', ')', ';', '\n', '            ', 'Assertions', '.', 'assertTrue', '(', 'matcher', '.', 'matches', '(', ')', ')', ';', '\n', '            ', 'Assertions', '.', 'assertNotNull', '(', 'matcher', '.', 'group', '(', '""', 'msgId', '""', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'inputStream', '.', 'close', '(', ')', ';', '\n', '        ', 'smtpServerContainer', '.', 'stop', '(', ')', ';', '\n']"
master,99c773f6ecdb44e57e9ecef688005cb5a5403f92,MysqlBackup4JIntegrationTest.java,givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully,"    void givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully() throws Exception {

        GenericContainer<?> smtpServerContainer =
                new GenericContainer<>(""reachfive/fake-smtp-server:0.8.1"")
                        .withExposedPorts(1080, 1025);
        smtpServerContainer.start();
        int smtpPort = smtpServerContainer.getMappedPort(1025);
        int webPort = smtpServerContainer.getMappedPort(1080);
        String smtpServerHost = smtpServerContainer.getHost();


        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        //properties relating to email config
        properties.setProperty(MysqlExportService.EMAIL_HOST, smtpServerHost);
        properties.setProperty(MysqlExportService.EMAIL_PORT, String.valueOf(smtpPort));
        properties.setProperty(MysqlExportService.EMAIL_USERNAME, ""username"");
        properties.setProperty(MysqlExportService.EMAIL_PASSWORD, ""password"");
        properties.setProperty(MysqlExportService.EMAIL_FROM, ""test@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_TO, ""backup@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_SSL_PROTOCOLS, ""TLSv1.2"");
        properties.setProperty(MysqlExportService.EMAIL_SMTP_AUTH_ENABLED, ""true"");
        properties.setProperty(MysqlExportService.EMAIL_START_TLS_ENABLED, ""true"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();


        String url = String.format(""http://%s:%s/api/emails?from=test@smattme.com&to=backup@smattme.com"",
                smtpServerHost, webPort);

        InputStream inputStream = new URL(url).openConnection().getInputStream();
        try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
            String response = bufferedReader.lines().collect(Collectors.joining());
            Pattern pattern = Pattern.compile(""(.)*\""messageId\"":(?<msgId>\"".+\"").*"");
            Matcher matcher = pattern.matcher(response);
            Assertions.assertEquals(2, matcher.groupCount());
            Assertions.assertTrue(matcher.matches());
            Assertions.assertNotNull(matcher.group(""msgId""));
        }


        inputStream.close();
        smtpServerContainer.stop();
",https://www.github.com/seunmatt/mysql-backup4j/commit/99c773f6ecdb44e57e9ecef688005cb5a5403f92,"    void givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully() throws Exception {

        GenericContainer<?> smtpServerContainer =
                new GenericContainer<>(""reachfive/fake-smtp-server:0.8.1"")
                        .withExposedPorts(1080, 1025);
        smtpServerContainer.start();
        int smtpPort = smtpServerContainer.getMappedPort(1025);
        int webPort = smtpServerContainer.getMappedPort(1080);
        String smtpServerHost = smtpServerContainer.getHost();


        Properties properties = new Properties();
        properties.setProperty(MysqlExportService.DB_NAME, TEST_DB);
        properties.setProperty(MysqlExportService.DB_USERNAME, DB_USERNAME);
        properties.setProperty(MysqlExportService.DB_PASSWORD, DB_PASSWORD);

        properties.setProperty(MysqlExportService.DB_HOST, MYSQL_DB_HOST);
        properties.setProperty(MysqlExportService.DB_PORT, MYSQL_DB_PORT);

        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_ZIP, ""true"");
        properties.setProperty(MysqlExportService.PRESERVE_GENERATED_SQL_FILE, ""true"");

        properties.setProperty(MysqlExportService.JDBC_DRIVER_NAME, DRIVER_CLASS_NAME);
        properties.setProperty(MysqlExportService.ADD_IF_NOT_EXISTS, ""true"");

        properties.setProperty(MysqlExportService.TEMP_DIR, new File(""external"").getPath());
        properties.setProperty(MysqlExportService.SQL_FILE_NAME, ""test_output_file_name"");

        
        properties.setProperty(MysqlExportService.EMAIL_HOST, smtpServerHost);
        properties.setProperty(MysqlExportService.EMAIL_PORT, String.valueOf(smtpPort));
        properties.setProperty(MysqlExportService.EMAIL_USERNAME, ""username"");
        properties.setProperty(MysqlExportService.EMAIL_PASSWORD, ""password"");
        properties.setProperty(MysqlExportService.EMAIL_FROM, ""test@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_TO, ""backup@smattme.com"");
        properties.setProperty(MysqlExportService.EMAIL_SSL_PROTOCOLS, ""TLSv1.2"");
        properties.setProperty(MysqlExportService.EMAIL_SMTP_AUTH_ENABLED, ""true"");
        properties.setProperty(MysqlExportService.EMAIL_START_TLS_ENABLED, ""true"");

        MysqlExportService mysqlExportService = new MysqlExportService(properties);
        mysqlExportService.export();


        String url = String.format(""http://%s:%s/api/emails?from=test@smattme.com&to=backup@smattme.com"",
                smtpServerHost, webPort);

        InputStream inputStream = new URL(url).openConnection().getInputStream();
        try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
            String response = bufferedReader.lines().collect(Collectors.joining());
            Pattern pattern = Pattern.compile(""(.)*\""messageId\"":(?<msgId>\"".+\"").*"");
            Matcher matcher = pattern.matcher(response);
            Assertions.assertEquals(2, matcher.groupCount());
            Assertions.assertTrue(matcher.matches());
            Assertions.assertNotNull(matcher.group(""msgId""));
        }


        inputStream.close();
        smtpServerContainer.stop();
","['    ', 'void', ' ', 'givenDBCredentialsAndEmailConfig_whenExportDatabase_thenBackUpAndMailDbSuccessfully', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'GenericContainer', '<', '?', '>', ' ', 'smtpServerContainer', ' ', '=', '\n', '                ', 'new', ' ', 'GenericContainer', '<', '>', '(', '""', 'reachfive/fake-smtp-server:0.8.1', '""', ')', '\n', '                        ', '.', 'withExposedPorts', '(', '1080', ',', ' ', '1025', ')', ';', '\n', '        ', 'smtpServerContainer', '.', 'start', '(', ')', ';', '\n', '        ', 'int', ' ', 'smtpPort', ' ', '=', ' ', 'smtpServerContainer', '.', 'getMappedPort', '(', '1025', ')', ';', '\n', '        ', 'int', ' ', 'webPort', ' ', '=', ' ', 'smtpServerContainer', '.', 'getMappedPort', '(', '1080', ')', ';', '\n', '        ', 'String', ' ', 'smtpServerHost', ' ', '=', ' ', 'smtpServerContainer', '.', 'getHost', '(', ')', ';', '\n', '\n', '\n', '        ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_NAME', ',', ' ', 'TEST_DB', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_USERNAME', ',', ' ', 'DB_USERNAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PASSWORD', ',', ' ', 'DB_PASSWORD', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_HOST', ',', ' ', 'MYSQL_DB_HOST', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'DB_PORT', ',', ' ', 'MYSQL_DB_PORT', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_ZIP', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'PRESERVE_GENERATED_SQL_FILE', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'JDBC_DRIVER_NAME', ',', ' ', 'DRIVER_CLASS_NAME', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'ADD_IF_NOT_EXISTS', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'TEMP_DIR', ',', ' ', 'new', ' ', 'File', '(', '""', 'external', '""', ')', '.', 'getPath', '(', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'SQL_FILE_NAME', ',', ' ', '""', 'test_output_file_name', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_HOST', ',', ' ', 'smtpServerHost', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_PORT', ',', ' ', 'String', '.', 'valueOf', '(', 'smtpPort', ')', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_USERNAME', ',', ' ', '""', 'username', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_PASSWORD', ',', ' ', '""', 'password', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_FROM', ',', ' ', '""', 'test@smattme.com', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_TO', ',', ' ', '""', 'backup@smattme.com', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_SSL_PROTOCOLS', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_SMTP_AUTH_ENABLED', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'properties', '.', 'setProperty', '(', 'MysqlExportService', '.', 'EMAIL_START_TLS_ENABLED', ',', ' ', '""', 'true', '""', ')', ';', '\n', '\n', '        ', 'MysqlExportService', ' ', 'mysqlExportService', ' ', '=', ' ', 'new', ' ', 'MysqlExportService', '(', 'properties', ')', ';', '\n', '        ', 'mysqlExportService', '.', 'export', '(', ')', ';', '\n', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'String', '.', 'format', '(', '""', 'http://%s:%s/api/emails?from=test@smattme.com&to=backup@smattme.com', '""', ',', '\n', '                ', 'smtpServerHost', ',', ' ', 'webPort', ')', ';', '\n', '\n', '        ', 'InputStream', ' ', 'inputStream', ' ', '=', ' ', 'new', ' ', 'URL', '(', 'url', ')', '.', 'openConnection', '(', ')', '.', 'getInputStream', '(', ')', ';', '\n', '        ', 'try', '(', 'BufferedReader', ' ', 'bufferedReader', ' ', '=', ' ', 'new', ' ', 'BufferedReader', '(', 'new', ' ', 'InputStreamReader', '(', 'inputStream', ')', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'response', ' ', '=', ' ', 'bufferedReader', '.', 'lines', '(', ')', '.', 'collect', '(', 'Collectors', '.', 'joining', '(', ')', ')', ';', '\n', '            ', 'Pattern', ' ', 'pattern', ' ', '=', ' ', 'Pattern', '.', 'compile', '(', '""', '(.)*', '\\""', 'messageId', '\\""', ':(?<msgId>', '\\""', '.+', '\\""', ').*', '""', ')', ';', '\n', '            ', 'Matcher', ' ', 'matcher', ' ', '=', ' ', 'pattern', '.', 'matcher', '(', 'response', ')', ';', '\n', '            ', 'Assertions', '.', 'assertEquals', '(', '2', ',', ' ', 'matcher', '.', 'groupCount', '(', ')', ')', ';', '\n', '            ', 'Assertions', '.', 'assertTrue', '(', 'matcher', '.', 'matches', '(', ')', ')', ';', '\n', '            ', 'Assertions', '.', 'assertNotNull', '(', 'matcher', '.', 'group', '(', '""', 'msgId', '""', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'inputStream', '.', 'close', '(', ')', ';', '\n', '        ', 'smtpServerContainer', '.', 'stop', '(', ')', ';', '\n']"
