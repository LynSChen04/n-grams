Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,659837f22619274386e7944e0cf78ccb2967f2c3,Command.java,addParams,"	public void addParams(Param... params){
		for(Param param : params){
			addParam(param);",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addParams(Param... params){
		for(Param param : params){
			addParam(param);
","['\t', 'public', ' ', 'void', ' ', 'addParams', '(', 'Param', '.', '.', '.', ' ', 'params', ')', '{', '\n', '\t\t', 'for', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,Command.java,addParam,"	public void addParam(Param param){
		params.add(param);
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addParam(Param param){
		params.add(param);
	}
","['\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,HtmlToPdfUtils.java,execute,"	public static void execute(Pdf pdf){
		
		pdf.getAttrsAsCommandParams();
		
		Runtime rt = Runtime.getRuntime();
		
		Process proc = rt.exec();
		",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public static void execute(Pdf pdf){
		
		pdf.getAttrsAsCommandParams();
		
		Runtime rt = Runtime.getRuntime();
		
		Process proc = rt.exec();
		
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'execute', '(', 'Pdf', ' ', 'pdf', ')', '{', '\n', '\t\t', '\n', '\t\t', 'pdf', '.', 'getAttrsAsCommandParams', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', ')', ';', '\n', '\t\t', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,Pdf.java,addPage,"	public void addPage(String page) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * TODO
	 * Add a HTML file, a HTML string or a page from a URL
	 */
	public void addCover(String cover) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * TODO
	 * just the TOC option from wkhtmltopdf
	 */
	public void addToc() {
		// TODO Auto-generated method stub
		
	}

	/**
	 * TODO
	 * save file and returns
	 */
	public File saveAs(String path) {
		// TODO Auto-generated method stub
		return null;
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addPage(String page) {
		
		
	}

	
	public void addCover(String cover) {
		
		
	}

	
	public void addToc() {
		
		
	}

	
	public File saveAs(String path) {
		
		return null;
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addPage', '(', 'String', ' ', 'page', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'null', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,Pdf.java,addCover,"	public void addCover(String cover) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * TODO
	 * just the TOC option from wkhtmltopdf
	 */
	public void addToc() {
		// TODO Auto-generated method stub
		
	}

	/**
	 * TODO
	 * save file and returns
	 */
	public File saveAs(String path) {
		// TODO Auto-generated method stub
		return null;
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addCover(String cover) {
		
		
	}

	
	public void addToc() {
		
		
	}

	
	public File saveAs(String path) {
		
		return null;
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'null', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,Pdf.java,addToc,"	public void addToc() {
		// TODO Auto-generated method stub
		
	}

	/**
	 * TODO
	 * save file and returns
	 */
	public File saveAs(String path) {
		// TODO Auto-generated method stub
		return null;
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addToc() {
		
		
	}

	
	public File saveAs(String path) {
		
		return null;
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'null', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,Pdf.java,saveAs,"	public File saveAs(String path) {
		// TODO Auto-generated method stub
		return null;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public File saveAs(String path) {
		
		return null;
	}
","['\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', '{', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'null', ';', '\n', '\t', '}', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,PdfService.java,addPage,"	public void addPage(String page);
	
	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path);

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addPage(String page);
	
	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path);

}
","['\t', 'public', ' ', 'void', ' ', 'addPage', '(', 'String', ' ', 'page', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ';', '\n', '\n', '}', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,PdfService.java,addCover,"	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path);

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path);

}
","['\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ';', '\n', '\n', '}', '\n']"
master,659837f22619274386e7944e0cf78ccb2967f2c3,PdfService.java,addToc,"	public void addToc();
	
	public File saveAs(String path);

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/659837f22619274386e7944e0cf78ccb2967f2c3,"	public void addToc();
	
	public File saveAs(String path);

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ';', '\n', '\n', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Command.java,main,"	public static void main(String[] args) {
		Pdf pdf = new Pdf();
		
		pdf.getParams().add(new Param(""enable-javascript""), new Param(""html-header"", ""file:///lala.html""));
		
		System.out.println(pdf);
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public static void main(String[] args) {
		Pdf pdf = new Pdf();
		
		pdf.getParams().add(new Param(""enable-javascript""), new Param(""html-header"", ""file:///lala.html""));
		
		System.out.println(pdf);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\t\t', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'pdf', '.', 'getParams', '(', ')', '.', 'add', '(', 'new', ' ', 'Param', '(', '""', 'enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', 'html-header', '""', ',', ' ', '""', 'file:///lala.html', '""', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'System', '.', 'out', '.', 'println', '(', 'pdf', ')', ';', '\n', '\t', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Param.java,toString,"	public String toString() {
		StringBuilder sb = new StringBuilder().append(Symbol.separator)
				.append(Symbol.param).append(key).append(Symbol.separator)
				.append(value);
		return sb.toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public String toString() {
		StringBuilder sb = new StringBuilder().append(Symbol.separator)
				.append(Symbol.param).append(key).append(Symbol.separator)
				.append(value);
		return sb.toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '\n', '\t\t\t\t', '.', 'append', '(', 'Symbol', '.', 'param', ')', '.', 'append', '(', 'key', ')', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '\n', '\t\t\t\t', '.', 'append', '(', 'value', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Params.java,add,"	public void add(Param... params) {
		for (Param param : params) {
			add(param);",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public void add(Param... params) {
		for (Param param : params) {
			add(param);
","['\t', 'public', ' ', 'void', ' ', 'add', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'add', '(', 'param', ')', ';', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Params.java,toString,"	public String toString(){
		StringBuilder sb = new StringBuilder();
		for(Param param : params){
			sb.append(param);
		}
		return sb.toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public String toString(){
		StringBuilder sb = new StringBuilder();
		for(Param param : params){
			sb.append(param);
		}
		return sb.toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Pdf.java,addPage,"	public void addPage(String page) {
		// TODO Auto-generated method stub

	}

	/**
	 * TODO Add a HTML file, a HTML string or a page from a URL
	 */
	public void addCover(String cover) {
		// TODO Auto-generated method stub

	}

	/**
	 * TODO just the TOC option from wkhtmltopdf
	 */
	public void addToc() {
		// TODO Auto-generated method stub

	}

	/**
	 * TODO save file and returns
	 * @throws IOException 
	 * @throws InterruptedException 
	 */
	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public void addPage(String page) {
		

	}

	
	public void addCover(String cover) {
		

	}

	
	public void addToc() {
		

	}

	
	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addPage', '(', 'String', ' ', 'page', ')', ' ', '{', '\n', '\t\t', '\n', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ' ', '{', '\n', '\t\t', '\n', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'params', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Pdf.java,addCover,"	public void addCover(String cover) {
		// TODO Auto-generated method stub

	}

	/**
	 * TODO just the TOC option from wkhtmltopdf
	 */
	public void addToc() {
		// TODO Auto-generated method stub

	}

	/**
	 * TODO save file and returns
	 * @throws IOException 
	 * @throws InterruptedException 
	 */
	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public void addCover(String cover) {
		

	}

	
	public void addToc() {
		

	}

	
	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ' ', '{', '\n', '\t\t', '\n', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'params', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Pdf.java,addToc,"	public void addToc() {
		// TODO Auto-generated method stub

	}

	/**
	 * TODO save file and returns
	 * @throws IOException 
	 * @throws InterruptedException 
	 */
	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public void addToc() {
		

	}

	
	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'params', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Pdf.java,saveAs,"	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public File saveAs(String path) throws IOException, InterruptedException {

		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString());
		
		proc.waitFor();

		return new File(path);
	}
","['\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,Pdf.java,toString,"	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public String toString() {
		StringBuilder sb = new StringBuilder(wkhtmlpdf).append(params);
		return sb.toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'params', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,PdfService.java,addPage,"	public void addPage(String page);
	
	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public void addPage(String page);
	
	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'public', ' ', 'void', ' ', 'addPage', '(', 'String', ' ', 'page', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,PdfService.java,addCover,"	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public void addCover(String cover);
	
	public void addToc();
	
	public File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,PdfService.java,addToc,"	public void addToc();
	
	public File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public void addToc();
	
	public File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,5d7976a368732e6555a6532f1b14d45cee07da30,PdfService.java,saveAs,"	public File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5d7976a368732e6555a6532f1b14d45cee07da30,"	public File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Command.java,main,"	public static void main(String[] args) {
		Pdf pdf = new Pdf();
		
		pdf.addParam(new Param(""enable-javascript""), new Param(""html-header"", ""file:///lala.html""));
		
		System.out.println(pdf);
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public static void main(String[] args) {
		Pdf pdf = new Pdf();
		
		pdf.addParam(new Param(""enable-javascript""), new Param(""html-header"", ""file:///lala.html""));
		
		System.out.println(pdf);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\t\t', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', 'enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', 'html-header', '""', ',', ' ', '""', 'file:///lala.html', '""', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'System', '.', 'out', '.', 'println', '(', 'pdf', ')', ';', '\n', '\t', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Param.java,toString,"	public String toString() {
		StringBuilder sb = new StringBuilder().append(Symbol.separator)
				.append(Symbol.param).append(key);
		if (value != null)
			sb.append(Symbol.separator).append(value);
		return sb.toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public String toString() {
		StringBuilder sb = new StringBuilder().append(Symbol.separator)
				.append(Symbol.param).append(key);
		if (value != null)
			sb.append(Symbol.separator).append(value);
		return sb.toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '\n', '\t\t\t\t', '.', 'append', '(', 'Symbol', '.', 'param', ')', '.', 'append', '(', 'key', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'value', ' ', '!', '=', ' ', 'null', ')', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '.', 'append', '(', 'value', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,addPage,"	public void addPage(String page) {
		// TODO Auto-generated method stub
	}

	/**
	 * TODO Add a HTML file, a HTML string or a page from a URL
	 */
	public void addCover(String cover) {
		// TODO Auto-generated method stub
	}

	/**
	 * TODO just the TOC option from wkhtmltopdf
	 */
	public void addToc() {
		// TODO Auto-generated method stub
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	/**
	 * TODO save file and returns
	 * 
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public void addPage(String page) {
		
	}

	
	public void addCover(String cover) {
		
	}

	
	public void addToc() {
		
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addPage', '(', 'String', ' ', 'page', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ' ', '+', ' ', 'path', ')', ';', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'sb', '.', 'toString', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'GlobalOption', ' ', 'option', ')', ' ', '{', '\n', '\t\t', 'addParam', '(', 'new', ' ', 'Param', '(', 'option', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,addCover,"	public void addCover(String cover) {
		// TODO Auto-generated method stub
	}

	/**
	 * TODO just the TOC option from wkhtmltopdf
	 */
	public void addToc() {
		// TODO Auto-generated method stub
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	/**
	 * TODO save file and returns
	 * 
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public void addCover(String cover) {
		
	}

	
	public void addToc() {
		
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ' ', '+', ' ', 'path', ')', ';', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'sb', '.', 'toString', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'GlobalOption', ' ', 'option', ')', ' ', '{', '\n', '\t\t', 'addParam', '(', 'new', ' ', 'Param', '(', 'option', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,addToc,"	public void addToc() {
		// TODO Auto-generated method stub
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	/**
	 * TODO save file and returns
	 * 
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public void addToc() {
		
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ' ', '+', ' ', 'path', ')', ';', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'sb', '.', 'toString', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'GlobalOption', ' ', 'option', ')', ' ', '{', '\n', '\t\t', 'addParam', '(', 'new', ' ', 'Param', '(', 'option', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,addParam,"	public void addParam(Param param) {
		params.add(param);
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public void addParam(Param param) {
		params.add(param);
	}
","['\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,addParam,"	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
","['\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,saveAs,"	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(this.toString() + path);

		proc.waitFor();

		return new File(path);
	}
","['\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '\t\t', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'this', '.', 'toString', '(', ')', ' ', '+', ' ', 'path', ')', ';', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,toString,"	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return new StringBuilder(wkhtmlpdf).append(sb.toString()).toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'StringBuilder', '(', 'wkhtmlpdf', ')', '.', 'append', '(', 'sb', '.', 'toString', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,Pdf.java,addParam,"	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}
","['\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'GlobalOption', ' ', 'option', ')', ' ', '{', '\n', '\t\t', 'addParam', '(', 'new', ' ', 'Param', '(', 'option', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t', '}', '\n']"
master,ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,CommandBuilder.java,collate,"	public CommandBuilder collate() {
		pdf.addParam(GlobalOption.COLLATE);
		return this;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef5f5353f1f773de83c0b3ffd0bcb2ce3bb8c825,"	public CommandBuilder collate() {
		pdf.addParam(GlobalOption.COLLATE);
		return this;
	}
","['\t', 'public', ' ', 'CommandBuilder', ' ', 'collate', '(', ')', ' ', '{', '\n', '\t\t', 'pdf', '.', 'addParam', '(', 'GlobalOption', '.', 'COLLATE', ')', ';', '\n', '\t\t', 'return', ' ', 'this', ';', '\n', '\t', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,Command.java,main,"	public static void main(String[] args) {

		Pdf pdf = new Pdf();
		pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///lala.html""));
		System.out.println(pdf);
",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	public static void main(String[] args) {

		Pdf pdf = new Pdf();
		pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///lala.html""));
		System.out.println(pdf);
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\n', '\t\t', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '\t\t', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///lala.html', '""', ')', ')', ';', '\n', '\t\t', 'System', '.', 'out', '.', 'println', '(', 'pdf', ')', ';', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,Pdf.java,addHtmlInput,"	public void addHtmlInput(String input) {
        this.htmlFromString = true;
        this.htmlInput = input;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	public void addHtmlInput(String input) {
        this.htmlFromString = true;
        this.htmlInput = input;
	}
","['\t', 'public', ' ', 'void', ' ', 'addHtmlInput', '(', 'String', ' ', 'input', ')', ' ', '{', '\n', '        ', 'this', '.', 'htmlFromString', ' ', '=', ' ', 'true', ';', '\n', '        ', 'this', '.', 'htmlInput', ' ', '=', ' ', 'input', ';', '\n', '\t', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,Pdf.java,addToc,"	public void addToc() {
		// TODO Auto-generated method stub
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	/**
	 * TODO save file and returns
	 * 
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
        String command = this.commandWithParameters() + Symbol.separator + path;
        Process proc = rt.exec(command);
        if(htmlFromString) {
            OutputStream stdin = proc.getOutputStream();
            stdin.write(htmlInput.getBytes());
            stdin.close();
        }

		proc.waitFor();
        if(proc.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + command + "") exited with status code "" + proc.exitValue());
        }

		return new File(path);
	}

	public String commandWithParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	public void addToc() {
		
	}

	public void addParam(Param param) {
		params.add(param);
	}

	public void addParam(Param... params) {
		for (Param param : params) {
			addParam(param);
		}
	}

	
	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
        String command = this.commandWithParameters() + Symbol.separator + path;
        Process proc = rt.exec(command);
        if(htmlFromString) {
            OutputStream stdin = proc.getOutputStream();
            stdin.write(htmlInput.getBytes());
            stdin.close();
        }

		proc.waitFor();
        if(proc.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + command + "") exited with status code "" + proc.exitValue());
        }

		return new File(path);
	}

	public String commandWithParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}

	public void addParam(GlobalOption option) {
		addParam(new Param(option.toString()));
	}

}
","['\t', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '\t\t', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '\t\t', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'addParam', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\t', '}', '\n', '\n', '\t', '\n', '\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '        ', 'String', ' ', 'command', ' ', '=', ' ', 'this', '.', 'commandWithParameters', '(', ')', ' ', '+', ' ', 'Symbol', '.', 'separator', ' ', '+', ' ', 'path', ';', '\n', '        ', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'command', ')', ';', '\n', '        ', 'if', '(', 'htmlFromString', ')', ' ', '{', '\n', '            ', 'OutputStream', ' ', 'stdin', ' ', '=', ' ', 'proc', '.', 'getOutputStream', '(', ')', ';', '\n', '            ', 'stdin', '.', 'write', '(', 'htmlInput', '.', 'getBytes', '(', ')', ')', ';', '\n', '            ', 'stdin', '.', 'close', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '        ', 'if', '(', 'proc', '.', 'exitValue', '(', ')', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'Process (', '""', ' ', '+', ' ', 'command', ' ', '+', ' ', '""', ') exited with status code ', '""', ' ', '+', ' ', 'proc', '.', 'exitValue', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'String', ' ', 'commandWithParameters', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'command', ' ', '+', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '\n', '\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'GlobalOption', ' ', 'option', ')', ' ', '{', '\n', '\t\t', 'addParam', '(', 'new', ' ', 'Param', '(', 'option', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t', '}', '\n', '\n', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,Pdf.java,saveAs,"	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
        String command = this.commandWithParameters() + Symbol.separator + path;
        Process proc = rt.exec(command);
        if(htmlFromString) {
            OutputStream stdin = proc.getOutputStream();
            stdin.write(htmlInput.getBytes());
            stdin.close();
        }

		proc.waitFor();
        if(proc.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + command + "") exited with status code "" + proc.exitValue());
        }

		return new File(path);
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	public File saveAs(String path) throws IOException, InterruptedException {
		Runtime rt = Runtime.getRuntime();
        String command = this.commandWithParameters() + Symbol.separator + path;
        Process proc = rt.exec(command);
        if(htmlFromString) {
            OutputStream stdin = proc.getOutputStream();
            stdin.write(htmlInput.getBytes());
            stdin.close();
        }

		proc.waitFor();
        if(proc.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + command + "") exited with status code "" + proc.exitValue());
        }

		return new File(path);
	}
","['\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\t\t', 'Runtime', ' ', 'rt', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '        ', 'String', ' ', 'command', ' ', '=', ' ', 'this', '.', 'commandWithParameters', '(', ')', ' ', '+', ' ', 'Symbol', '.', 'separator', ' ', '+', ' ', 'path', ';', '\n', '        ', 'Process', ' ', 'proc', ' ', '=', ' ', 'rt', '.', 'exec', '(', 'command', ')', ';', '\n', '        ', 'if', '(', 'htmlFromString', ')', ' ', '{', '\n', '            ', 'OutputStream', ' ', 'stdin', ' ', '=', ' ', 'proc', '.', 'getOutputStream', '(', ')', ';', '\n', '            ', 'stdin', '.', 'write', '(', 'htmlInput', '.', 'getBytes', '(', ')', ')', ';', '\n', '            ', 'stdin', '.', 'close', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '\t\t', 'proc', '.', 'waitFor', '(', ')', ';', '\n', '        ', 'if', '(', 'proc', '.', 'exitValue', '(', ')', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'Process (', '""', ' ', '+', ' ', 'command', ' ', '+', ' ', '""', ') exited with status code ', '""', ' ', '+', ' ', 'proc', '.', 'exitValue', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\t', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,Pdf.java,commandWithParameters,"	public String commandWithParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	public String commandWithParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'commandWithParameters', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'command', ' ', '+', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,PdfService.java,addHtmlInput,"	void addHtmlInput(String page);
	
	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	void addHtmlInput(String page);
	
	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'void', ' ', 'addHtmlInput', '(', 'String', ' ', 'page', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,PdfService.java,addCover,"	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,PdfService.java,addToc,"	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,a9ac816c4e55c2f9678056602e525de2dbe54208,PdfService.java,saveAs,"	File saveAs(String path) throws IOException, InterruptedException;

}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a9ac816c4e55c2f9678056602e525de2dbe54208,"	File saveAs(String path) throws IOException, InterruptedException;

}
","['\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '}', '\n']"
master,1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,Pdf.java,saveAs,"	public File saveAs(String path) throws IOException, InterruptedException {
        byte[] pdf = this.getPDF();
        File file = new File(path);

        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
        bufferedOutputStream.write(pdf);
        bufferedOutputStream.flush();
        bufferedOutputStream.close();

        return file;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,"	public File saveAs(String path) throws IOException, InterruptedException {
        byte[] pdf = this.getPDF();
        File file = new File(path);

        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
        bufferedOutputStream.write(pdf);
        bufferedOutputStream.flush();
        bufferedOutputStream.close();

        return file;
	}
","['\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'pdf', ' ', '=', ' ', 'this', '.', 'getPDF', '(', ')', ';', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\n', '        ', 'BufferedOutputStream', ' ', 'bufferedOutputStream', ' ', '=', ' ', 'new', ' ', 'BufferedOutputStream', '(', 'new', ' ', 'FileOutputStream', '(', 'file', ')', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'write', '(', 'pdf', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'flush', '(', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'file', ';', '\n', '\t', '}', '\n']"
master,1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,PdfService.java,addHtmlInput,"	void addHtmlInput(String page);
	
	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,"	void addHtmlInput(String page);
	
	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['\t', 'void', ' ', 'addHtmlInput', '(', 'String', ' ', 'page', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,PdfService.java,addCover,"	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,"	void addCover(String cover);
	
	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['\t', 'void', ' ', 'addCover', '(', 'String', ' ', 'cover', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,PdfService.java,addToc,"	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,"	void addToc();
	
	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['\t', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\t', '\n', '\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,PdfService.java,saveAs,"	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,"	File saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['\t', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,PdfService.java,getPDF,"	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/1c7cc9f94f3b353ec84016b0865a1848b1d07a8d,"	byte[] getPDF() throws IOException, InterruptedException;
}
","['\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,2bd8c29ac857d8d186c64005ffa45412483f7619,Pdf.java,saveAs,"	public File saveAs(String path) throws IOException, InterruptedException {
        File file = new File(path);
        getPDF(path);
        return file;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2bd8c29ac857d8d186c64005ffa45412483f7619,"	public File saveAs(String path) throws IOException, InterruptedException {
        File file = new File(path);
        getPDF(path);
        return file;
	}
","['\t', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'getPDF', '(', 'path', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '\t', '}', '\n']"
master,2bd8c29ac857d8d186c64005ffa45412483f7619,Pdf.java,saveAs,"    public File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);

        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
        bufferedOutputStream.write(document);
        bufferedOutputStream.flush();
        bufferedOutputStream.close();

        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2bd8c29ac857d8d186c64005ffa45412483f7619,"    public File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);

        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
        bufferedOutputStream.write(document);
        bufferedOutputStream.flush();
        bufferedOutputStream.close();

        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ',', ' ', 'byte', '[', ']', ' ', 'document', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\n', '        ', 'BufferedOutputStream', ' ', 'bufferedOutputStream', ' ', '=', ' ', 'new', ' ', 'BufferedOutputStream', '(', 'new', ' ', 'FileOutputStream', '(', 'file', ')', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'write', '(', 'document', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'flush', '(', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,2bd8c29ac857d8d186c64005ffa45412483f7619,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException {
        return getPDF(STDOUT);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2bd8c29ac857d8d186c64005ffa45412483f7619,"    public byte[] getPDF() throws IOException, InterruptedException {
        return getPDF(STDOUT);
    }
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'return', ' ', 'getPDF', '(', 'STDOUT', ')', ';', '\n', '    ', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,Pdf.java,saveAs,"	public void saveAs(String path) throws IOException, InterruptedException {
        saveAs(path, getPDF());
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"	public void saveAs(String path) throws IOException, InterruptedException {
        saveAs(path, getPDF());
	}
","['\t', 'public', ' ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'saveAs', '(', 'path', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '\t', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,Pdf.java,saveAs,"    private File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);

        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
        bufferedOutputStream.write(document);
        bufferedOutputStream.flush();
        bufferedOutputStream.close();

        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"    private File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);

        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
        bufferedOutputStream.write(document);
        bufferedOutputStream.flush();
        bufferedOutputStream.close();

        return file;
    }
","['    ', 'private', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ',', ' ', 'byte', '[', ']', ' ', 'document', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '\n', '        ', 'BufferedOutputStream', ' ', 'bufferedOutputStream', ' ', '=', ' ', 'new', ' ', 'BufferedOutputStream', '(', 'new', ' ', 'FileOutputStream', '(', 'file', ')', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'write', '(', 'document', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'flush', '(', ')', ';', '\n', '        ', 'bufferedOutputStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,Pdf.java,commandParameters,"	public String commandParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"	public String commandParameters() {
		StringBuilder sb = new StringBuilder();
		for (Param param : params) {
			sb.append(param);
		}

		return command + sb.toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'commandParameters', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'command', ' ', '+', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,PdfService.java,addHtmlInput,"	void addHtmlInput(String page);

    void addParam(Param param);

    void addParam(Param... params);
	
	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"	void addHtmlInput(String page);

    void addParam(Param param);

    void addParam(Param... params);
	
	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['\t', 'void', ' ', 'addHtmlInput', '(', 'String', ' ', 'page', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,PdfService.java,addParam,"    void addParam(Param param);

    void addParam(Param... params);
	
	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"    void addParam(Param param);

    void addParam(Param... params);
	
	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,PdfService.java,addParam,"    void addParam(Param... params);
	
	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"    void addParam(Param... params);
	
	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ';', '\n', '\t', '\n', '\t', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,PdfService.java,saveAs,"	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"	void saveAs(String path) throws IOException, InterruptedException;

	byte[] getPDF() throws IOException, InterruptedException;
}
","['\t', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '\t', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,714adc2f185e757b02cc119977e96b9ae43c9dde,PdfTest.java,testCommand,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.commandParameters(), containsString(""wkhtmltopdf --enable-javascript --html-header file:///example.html""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/714adc2f185e757b02cc119977e96b9ae43c9dde,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.commandParameters(), containsString(""wkhtmltopdf --enable-javascript --html-header file:///example.html""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///example.html', '""', ')', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain the --enable-javascript and --html-header', '""', ',', ' ', 'pdf', '.', 'commandParameters', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf --enable-javascript --html-header file:///example.html', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,98606eab20071eebec0b26375fc495b8d0c90008,Pdf.java,addHtmlInput,"    public void addHtmlInput(String input) {
        this.htmlFromString = true;
        this.htmlInput = input;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/98606eab20071eebec0b26375fc495b8d0c90008,"    public void addHtmlInput(String input) {
        this.htmlFromString = true;
        this.htmlInput = input;
	}
","['    ', 'public', ' ', 'void', ' ', 'addHtmlInput', '(', 'String', ' ', 'input', ')', ' ', '{', '\n', '        ', 'this', '.', 'htmlFromString', ' ', '=', ' ', 'true', ';', '\n', '        ', 'this', '.', 'htmlInput', ' ', '=', ' ', 'input', ';', '\n', '\t', '}', '\n']"
master,98606eab20071eebec0b26375fc495b8d0c90008,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException {

        if(htmlFromString && !this.params.contains(new Param(""-""))) {
            this.addParam(new Param(""-""));
        }

        Runtime runtime = Runtime.getRuntime();
        Process process = runtime.exec(getCommandAsArray());

        if(htmlFromString) {
            OutputStream stdInStream = process.getOutputStream();
            stdInStream.write(htmlInput.getBytes(""UTF-8""));
            stdInStream.close();
        }

        InputStream stdOutStream = process.getInputStream();
        InputStream stdErrStream = process.getErrorStream();
        process.waitFor();

        ByteArrayOutputStream stdOut = new ByteArrayOutputStream();
        ByteArrayOutputStream stdErr = new ByteArrayOutputStream();

        while(stdOutStream.available()>0) {
            stdOut.write((char) stdOutStream.read());
        }
        stdOutStream.close();
        while(stdErrStream.available()>0) {
            stdErr.write((char) stdErrStream.read());
        }
        stdErrStream.close();

        if(process.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + getCommand() + "") exited with status code "" + process.exitValue() + "":\n""+new String(stdErr.toByteArray()));
        }

        return stdOut.toByteArray();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/98606eab20071eebec0b26375fc495b8d0c90008,"    public byte[] getPDF() throws IOException, InterruptedException {

        if(htmlFromString && !this.params.contains(new Param(""-""))) {
            this.addParam(new Param(""-""));
        }

        Runtime runtime = Runtime.getRuntime();
        Process process = runtime.exec(getCommandAsArray());

        if(htmlFromString) {
            OutputStream stdInStream = process.getOutputStream();
            stdInStream.write(htmlInput.getBytes(""UTF-8""));
            stdInStream.close();
        }

        InputStream stdOutStream = process.getInputStream();
        InputStream stdErrStream = process.getErrorStream();
        process.waitFor();

        ByteArrayOutputStream stdOut = new ByteArrayOutputStream();
        ByteArrayOutputStream stdErr = new ByteArrayOutputStream();

        while(stdOutStream.available()>0) {
            stdOut.write((char) stdOutStream.read());
        }
        stdOutStream.close();
        while(stdErrStream.available()>0) {
            stdErr.write((char) stdErrStream.read());
        }
        stdErrStream.close();

        if(process.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + getCommand() + "") exited with status code "" + process.exitValue() + "":\n""+new String(stdErr.toByteArray()));
        }

        return stdOut.toByteArray();
    }
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '        ', 'if', '(', 'htmlFromString', ' ', '&', '&', ' ', '!', 'this', '.', 'params', '.', 'contains', '(', 'new', ' ', 'Param', '(', '""', '-', '""', ')', ')', ')', ' ', '{', '\n', '            ', 'this', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '-', '""', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Runtime', ' ', 'runtime', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n', '        ', 'Process', ' ', 'process', ' ', '=', ' ', 'runtime', '.', 'exec', '(', 'getCommandAsArray', '(', ')', ')', ';', '\n', '\n', '        ', 'if', '(', 'htmlFromString', ')', ' ', '{', '\n', '            ', 'OutputStream', ' ', 'stdInStream', ' ', '=', ' ', 'process', '.', 'getOutputStream', '(', ')', ';', '\n', '            ', 'stdInStream', '.', 'write', '(', 'htmlInput', '.', 'getBytes', '(', '""', 'UTF-8', '""', ')', ')', ';', '\n', '            ', 'stdInStream', '.', 'close', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'InputStream', ' ', 'stdOutStream', ' ', '=', ' ', 'process', '.', 'getInputStream', '(', ')', ';', '\n', '        ', 'InputStream', ' ', 'stdErrStream', ' ', '=', ' ', 'process', '.', 'getErrorStream', '(', ')', ';', '\n', '        ', 'process', '.', 'waitFor', '(', ')', ';', '\n', '\n', '        ', 'ByteArrayOutputStream', ' ', 'stdOut', ' ', '=', ' ', 'new', ' ', 'ByteArrayOutputStream', '(', ')', ';', '\n', '        ', 'ByteArrayOutputStream', ' ', 'stdErr', ' ', '=', ' ', 'new', ' ', 'ByteArrayOutputStream', '(', ')', ';', '\n', '\n', '        ', 'while', '(', 'stdOutStream', '.', 'available', '(', ')', '>', '0', ')', ' ', '{', '\n', '            ', 'stdOut', '.', 'write', '(', '(', 'char', ')', ' ', 'stdOutStream', '.', 'read', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'stdOutStream', '.', 'close', '(', ')', ';', '\n', '        ', 'while', '(', 'stdErrStream', '.', 'available', '(', ')', '>', '0', ')', ' ', '{', '\n', '            ', 'stdErr', '.', 'write', '(', '(', 'char', ')', ' ', 'stdErrStream', '.', 'read', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'stdErrStream', '.', 'close', '(', ')', ';', '\n', '\n', '        ', 'if', '(', 'process', '.', 'exitValue', '(', ')', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'Process (', '""', ' ', '+', ' ', 'getCommand', '(', ')', ' ', '+', ' ', '""', ') exited with status code ', '""', ' ', '+', ' ', 'process', '.', 'exitValue', '(', ')', ' ', '+', ' ', '""', ':', '\\', 'n', '""', '+', 'new', ' ', 'String', '(', 'stdErr', '.', 'toByteArray', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'stdOut', '.', 'toByteArray', '(', ')', ';', '\n', '    ', '}', '\n']"
master,98606eab20071eebec0b26375fc495b8d0c90008,Param.java,toString,"    public String toString() {
		StringBuilder sb = new StringBuilder().append(Symbol.separator)
				.append(Symbol.param).append(key);
		if (value != null)
			sb.append(Symbol.separator).append(value);
		return sb.toString();
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/98606eab20071eebec0b26375fc495b8d0c90008,"    public String toString() {
		StringBuilder sb = new StringBuilder().append(Symbol.separator)
				.append(Symbol.param).append(key);
		if (value != null)
			sb.append(Symbol.separator).append(value);
		return sb.toString();
	}
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '\n', '\t\t\t\t', '.', 'append', '(', 'Symbol', '.', 'param', ')', '.', 'append', '(', 'key', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'value', ' ', '!', '=', ' ', 'null', ')', '\n', '\t\t\t', 'sb', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '.', 'append', '(', 'value', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,0624e89f5704bdac6df7d62c2a0d36e0571fe0b7,WrapperConfigBuilder.java,build,"    public WrapperConfig build() {
        return new WrapperConfig(wkhtmltopdfCommand);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/0624e89f5704bdac6df7d62c2a0d36e0571fe0b7,"    public WrapperConfig build() {
        return new WrapperConfig(wkhtmltopdfCommand);
    }
","['    ', 'public', ' ', 'WrapperConfig', ' ', 'build', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'WrapperConfig', '(', 'wkhtmltopdfCommand', ')', ';', '\n', '    ', '}', '\n']"
master,df3287d6d0aa6f85fbef6a1085a4f959c376115b,PdfTest.java,testCommand,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""wkhtmltopdf --enable-javascript --html-header file:///example.html""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/df3287d6d0aa6f85fbef6a1085a4f959c376115b,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""wkhtmltopdf --enable-javascript --html-header file:///example.html""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///example.html', '""', ')', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain the --enable-javascript and --html-header', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf --enable-javascript --html-header file:///example.html', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Pdf.java,addPage,"    public void addPage(String source, PageType type) {
        this.pages.add(new Page(source, type));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void addPage(String source, PageType type) {
        this.pages.add(new Page(source, type));
    }
","['    ', 'public', ' ', 'void', ' ', 'addPage', '(', 'String', ' ', 'source', ',', ' ', 'PageType', ' ', 'type', ')', ' ', '{', '\n', '        ', 'this', '.', 'pages', '.', 'add', '(', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'type', ')', ')', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Pdf.java,addToc,"    public void addToc() {
        this.hasToc = true;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void addToc() {
        this.hasToc = true;
    }
","['    ', 'public', ' ', 'void', ' ', 'addToc', '(', ')', ' ', '{', '\n', '        ', 'this', '.', 'hasToc', ' ', '=', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Pdf.java,addParam,"    public void addParam(Param param) {
        params.add(param);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void addParam(Param param) {
        params.add(param);
    }
","['    ', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '        ', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Pdf.java,addParam,"    public void addParam(Param... params) {
        for (Param param : params) {
            addParam(param);",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void addParam(Param... params) {
        for (Param param : params) {
            addParam(param);
","['    ', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '            ', 'addParam', '(', 'param', ')', ';', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Pdf.java,saveAs,"    public void saveAs(String path) throws IOException, InterruptedException {
        saveAs(path, getPDF());
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void saveAs(String path) throws IOException, InterruptedException {
        saveAs(path, getPDF());
    }
","['    ', 'public', ' ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'saveAs', '(', 'path', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,PdfService.java,addPage,"    void addPage(String page, PageType type);

    void addToc();

    void addParam(Param param);

    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    void addPage(String page, PageType type);

    void addToc();

    void addParam(Param param);

    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'void', ' ', 'addPage', '(', 'String', ' ', 'page', ',', ' ', 'PageType', ' ', 'type', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ';', '\n', '\n', '    ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '    ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,PdfService.java,addToc,"    void addToc();

    void addParam(Param param);

    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    void addToc();

    void addParam(Param param);

    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'void', ' ', 'addToc', '(', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ';', '\n', '\n', '    ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '    ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,PdfService.java,addParam,"    void addParam(Param param);

    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    void addParam(Param param);

    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ')', ';', '\n', '\n', '    ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ';', '\n', '\n', '    ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '    ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,PdfService.java,addParam,"    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    void addParam(Param... params);

    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'void', ' ', 'addParam', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ';', '\n', '\n', '    ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '    ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,PdfService.java,saveAs,"    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    void saveAs(String path) throws IOException, InterruptedException;

    byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'void', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '\n', '    ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,PdfService.java,getPDF,"    byte[] getPDF() throws IOException, InterruptedException;
}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    byte[] getPDF() throws IOException, InterruptedException;
}
","['    ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ';', '\n', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Param.java,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder().append(Symbol.separator)
                .append(Symbol.param).append(key);
        if (value != null)
            sb.append(Symbol.separator).append(value);
        return sb.toString();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public String toString() {
        StringBuilder sb = new StringBuilder().append(Symbol.separator)
                .append(Symbol.param).append(key);
        if (value != null)
            sb.append(Symbol.separator).append(value);
        return sb.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '\n', '                ', '.', 'append', '(', 'Symbol', '.', 'param', ')', '.', 'append', '(', 'key', ')', ';', '\n', '        ', 'if', ' ', '(', 'value', ' ', '!', '=', ' ', 'null', ')', '\n', '            ', 'sb', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '.', 'append', '(', 'value', ')', ';', '\n', '        ', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Params.java,add,"    public void add(Param param) {
        params.add(param);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void add(Param param) {
        params.add(param);
    }
","['    ', 'public', ' ', 'void', ' ', 'add', '(', 'Param', ' ', 'param', ')', ' ', '{', '\n', '        ', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Params.java,add,"    public void add(Param... params) {
        for (Param param : params) {
            add(param);",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void add(Param... params) {
        for (Param param : params) {
            add(param);
","['    ', 'public', ' ', 'void', ' ', 'add', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '            ', 'add', '(', 'param', ')', ';', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Params.java,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (Param param : params) {
            sb.append(param);
        }
        return sb.toString();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (Param param : params) {
            sb.append(param);
        }
        return sb.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '            ', 'sb', '.', 'append', '(', 'param', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,Symbol.java,toString,"    public String toString() {
        return symbol;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public String toString() {
        return symbol;
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'symbol', ';', '\n', '    ', '}', '\n']"
master,6052ff0ed4175c7cc8207db02e8ca6abc49a6116,PdfTest.java,testCommand,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addToc();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPage(""http://www.google.com"", PageType.url);
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6052ff0ed4175c7cc8207db02e8ca6abc49a6116,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addToc();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPage(""http://www.google.com"", PageType.url);
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///example.html', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPage', '(', '""', 'http://www.google.com', '""', ',', ' ', 'PageType', '.', 'url', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain the --enable-javascript and --html-header', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--enable-javascript --html-header file:///example.html', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,48f883b06f6b5c13316e7126d5eaee55ecfcf5cb,Pdf.java,run,"		public void run() {
			try {
				int bytesRead = stream.read();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/48f883b06f6b5c13316e7126d5eaee55ecfcf5cb,"		public void run() {
			try {
				int bytesRead = stream.read();
","['\t\t', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'int', ' ', 'bytesRead', ' ', '=', ' ', 'stream', '.', 'read', '(', ')', ';', '\n']"
master,315b056d088ac6e081f8de6289cbccfe2dff16a4,WrapperConfig.java,findExecutable,"    public String findExecutable() {

        try {

            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd;
            if (osname.contains(""windows""))
                cmd = ""where wkhtmltopdf"";
            else cmd = ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(p.getInputStream()));

            StringBuilder sb = new StringBuilder();
            String line = """";
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }

            if (sb.toString().isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(sb.toString());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/315b056d088ac6e081f8de6289cbccfe2dff16a4,"    public String findExecutable() {

        try {

            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd;
            if (osname.contains(""windows""))
                cmd = ""where wkhtmltopdf"";
            else cmd = ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(p.getInputStream()));

            StringBuilder sb = new StringBuilder();
            String line = """";
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }

            if (sb.toString().isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(sb.toString());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ';', '\n', '            ', 'if', ' ', '(', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ')', '\n', '                ', 'cmd', ' ', '=', ' ', '""', 'where wkhtmltopdf', '""', ';', '\n', '            ', 'else', ' ', 'cmd', ' ', '=', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'BufferedReader', ' ', 'reader', ' ', '=', '\n', '                    ', 'new', ' ', 'BufferedReader', '(', 'new', ' ', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';', '\n', '\n', '            ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '            ', 'String', ' ', 'line', ' ', '=', ' ', '""', '""', ';', '\n', '            ', 'while', ' ', '(', '(', 'line', ' ', '=', ' ', 'reader', '.', 'readLine', '(', ')', ')', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'sb', '.', 'append', '(', 'line', ' ', '+', ' ', '""', '\\', 'n', '""', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'if', ' ', '(', 'sb', '.', 'toString', '(', ')', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', ')', ';', '\n', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'sb', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,315b056d088ac6e081f8de6289cbccfe2dff16a4,PdfTest.java,findExecutable,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfigBuilder().build();
        Assert.assertThat(""executable should be /usr/bin/wkhtmltopdf"", wc.findExecutable(), containsString(""/usr/bin/wkhtmltopdf""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/315b056d088ac6e081f8de6289cbccfe2dff16a4,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfigBuilder().build();
        Assert.assertThat(""executable should be /usr/bin/wkhtmltopdf"", wc.findExecutable(), containsString(""/usr/bin/wkhtmltopdf""));
    }
","['    ', 'public', ' ', 'void', ' ', 'findExecutable', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfigBuilder', '(', ')', '.', 'build', '(', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'executable should be /usr/bin/wkhtmltopdf', '""', ',', ' ', 'wc', '.', 'findExecutable', '(', ')', ',', ' ', 'containsString', '(', '""', '/usr/bin/wkhtmltopdf', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,b91ebc06e7ad27517771191b9db8bd28210fc331,PdfTest.java,findExecutable,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        Assert.assertThat(""executable should be /usr/bin/wkhtmltopdf"", wc.findExecutable(), containsString(""/usr/bin/wkhtmltopdf""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/b91ebc06e7ad27517771191b9db8bd28210fc331,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        Assert.assertThat(""executable should be /usr/bin/wkhtmltopdf"", wc.findExecutable(), containsString(""/usr/bin/wkhtmltopdf""));
    }
","['    ', 'public', ' ', 'void', ' ', 'findExecutable', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'executable should be /usr/bin/wkhtmltopdf', '""', ',', ' ', 'wc', '.', 'findExecutable', '(', ')', ',', ' ', 'containsString', '(', '""', '/usr/bin/wkhtmltopdf', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,45a8b20029bb6f384b75d4d9176a015a40a0ca72,WrapperConfig.java,isXvfbEnabled,"    public boolean isXvfbEnabled() {
        return xvfbEnabled;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/45a8b20029bb6f384b75d4d9176a015a40a0ca72,"    public boolean isXvfbEnabled() {
        return xvfbEnabled;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isXvfbEnabled', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'xvfbEnabled', ';', '\n', '    ', '}', '\n']"
master,45a8b20029bb6f384b75d4d9176a015a40a0ca72,WrapperConfig.java,findExecutable,"    public String findExecutable() {

        try {

            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd;
            if (osname.contains(""windows""))
                cmd = ""where wkhtmltopdf"";
            else cmd = ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(p.getInputStream()));

            StringBuilder sb = new StringBuilder();
            String line = """";
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }

            if (sb.toString().isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(sb.toString());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/45a8b20029bb6f384b75d4d9176a015a40a0ca72,"    public String findExecutable() {

        try {

            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd;
            if (osname.contains(""windows""))
                cmd = ""where wkhtmltopdf"";
            else cmd = ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(p.getInputStream()));

            StringBuilder sb = new StringBuilder();
            String line = """";
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }

            if (sb.toString().isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(sb.toString());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ';', '\n', '            ', 'if', ' ', '(', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ')', '\n', '                ', 'cmd', ' ', '=', ' ', '""', 'where wkhtmltopdf', '""', ';', '\n', '            ', 'else', ' ', 'cmd', ' ', '=', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'BufferedReader', ' ', 'reader', ' ', '=', '\n', '                    ', 'new', ' ', 'BufferedReader', '(', 'new', ' ', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';', '\n', '\n', '            ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '            ', 'String', ' ', 'line', ' ', '=', ' ', '""', '""', ';', '\n', '            ', 'while', ' ', '(', '(', 'line', ' ', '=', ' ', 'reader', '.', 'readLine', '(', ')', ')', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'sb', '.', 'append', '(', 'line', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'if', ' ', '(', 'sb', '.', 'toString', '(', ')', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', ')', ';', '\n', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'sb', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,abceb80433b17d65e937fd95e1c57ecb05dc94e8,Pdf.java,run,"        public void run() {
            try {
                int bytesRead = stream.read();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/abceb80433b17d65e937fd95e1c57ecb05dc94e8,"        public void run() {
            try {
                int bytesRead = stream.read();
","['        ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'int', ' ', 'bytesRead', ' ', '=', ' ', 'stream', '.', 'read', '(', ')', ';', '\n']"
master,abceb80433b17d65e937fd95e1c57ecb05dc94e8,WrapperConfig.java,isXvfbEnabled,"    public boolean isXvfbEnabled() {
        return xvfbConfig != null;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/abceb80433b17d65e937fd95e1c57ecb05dc94e8,"    public boolean isXvfbEnabled() {
        return xvfbConfig != null;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isXvfbEnabled', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'xvfbConfig', ' ', '!', '=', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,abceb80433b17d65e937fd95e1c57ecb05dc94e8,XvfbConfig.java,addParams,"    public void addParams(Param... params) {
        for (Param param : params) {
            this.params.add(param);",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/abceb80433b17d65e937fd95e1c57ecb05dc94e8,"    public void addParams(Param... params) {
        for (Param param : params) {
            this.params.add(param);
","['    ', 'public', ' ', 'void', ' ', 'addParams', '(', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'Param', ' ', 'param', ' ', ':', ' ', 'params', ')', ' ', '{', '\n', '            ', 'this', '.', 'params', '.', 'add', '(', 'param', ')', ';', '\n']"
master,abceb80433b17d65e937fd95e1c57ecb05dc94e8,XvfbTest.java,testXvfbCommand,"    public void testXvfbCommand() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/abceb80433b17d65e937fd95e1c57ecb05dc94e8,"    public void testXvfbCommand() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testXvfbCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', ')', ';', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'new', ' ', 'XvfbConfig', '(', ')', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command should contain xvfb-run config', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,abceb80433b17d65e937fd95e1c57ecb05dc94e8,XvfbTest.java,testPdfWithXvfb,"    public void testPdfWithXvfb() throws Exception {

        XvfbConfig xc = new XvfbConfig();
        xc.addParams(new Param(""--auto-servernum""), new Param(""--server-num=1""));

        WrapperConfig wc = new WrapperConfig();
        wc.setXvfbConfig(xc);

        Pdf pdf = new Pdf(wc);
        pdf.addPage(""http://www.google.com"", PageType.url);

        pdf.saveAs(""output.pdf"");

        // WHEN
        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        // that is a valid PDF (otherwise an IOException occurs)
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should be generated"", pdfText, containsString(""Google""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/abceb80433b17d65e937fd95e1c57ecb05dc94e8,"    public void testPdfWithXvfb() throws Exception {

        XvfbConfig xc = new XvfbConfig();
        xc.addParams(new Param(""--auto-servernum""), new Param(""--server-num=1""));

        WrapperConfig wc = new WrapperConfig();
        wc.setXvfbConfig(xc);

        Pdf pdf = new Pdf(wc);
        pdf.addPage(""http://www.google.com"", PageType.url);

        pdf.saveAs(""output.pdf"");

        
        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should be generated"", pdfText, containsString(""Google""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testPdfWithXvfb', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\n', '        ', 'XvfbConfig', ' ', 'xc', ' ', '=', ' ', 'new', ' ', 'XvfbConfig', '(', ')', ';', '\n', '        ', 'xc', '.', 'addParams', '(', 'new', ' ', 'Param', '(', '""', '--auto-servernum', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--server-num=1', '""', ')', ')', ';', '\n', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', ')', ';', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'xc', ')', ';', '\n', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'pdf', '.', 'addPage', '(', '""', 'http://www.google.com', '""', ',', ' ', 'PageType', '.', 'url', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'saveAs', '(', '""', 'output.pdf', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'PDFParser', ' ', 'parser', ' ', '=', ' ', 'new', ' ', 'PDFParser', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'parser', '.', 'parse', '(', ')', ';', '\n', '        ', 'PDFTextStripper', ' ', 'pdfTextStripper', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'pdfTextStripper', '.', 'getText', '(', 'new', ' ', 'PDDocument', '(', 'parser', '.', 'getDocument', '(', ')', ')', ')', ';', '\n', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should be generated', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Google', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,5412a04628c598636621d615523a1fbf8717d271,Pdf.java,getCommand,"    public String getCommand() throws IOException {
        return StringUtils.join(getCommandAsArray(), "" "");
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5412a04628c598636621d615523a1fbf8717d271,"    public String getCommand() throws IOException {
        return StringUtils.join(getCommandAsArray(), "" "");
    }
","['    ', 'public', ' ', 'String', ' ', 'getCommand', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'return', ' ', 'StringUtils', '.', 'join', '(', 'getCommandAsArray', '(', ')', ',', ' ', '""', ' ', '""', ')', ';', '\n', '    ', '}', '\n']"
master,5412a04628c598636621d615523a1fbf8717d271,PdfTest.java,testMultiplePages,"    public void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPage(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"", PageType.htmlAsString);
        pdf.addPage(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"", PageType.htmlAsString);
        pdf.addPage(""http://www.google.com"", PageType.url);
        pdf.addPage(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"", PageType.htmlAsString);

        // WHEN
        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        // that is a valid PDF (otherwise an IOException occurs)
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5412a04628c598636621d615523a1fbf8717d271,"    public void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPage(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"", PageType.htmlAsString);
        pdf.addPage(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"", PageType.htmlAsString);
        pdf.addPage(""http://www.google.com"", PageType.url);
        pdf.addPage(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"", PageType.htmlAsString);

        
        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testMultiplePages', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPage', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 1</h1></html>', '""', ',', ' ', 'PageType', '.', 'htmlAsString', ')', ';', '\n', '        ', 'pdf', '.', 'addPage', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 2</h1></html>', '""', ',', ' ', 'PageType', '.', 'htmlAsString', ')', ';', '\n', '        ', 'pdf', '.', 'addPage', '(', '""', 'http://www.google.com', '""', ',', ' ', 'PageType', '.', 'url', ')', ';', '\n', '        ', 'pdf', '.', 'addPage', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 4</h1></html>', '""', ',', ' ', 'PageType', '.', 'htmlAsString', ')', ';', '\n', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'PDFParser', ' ', 'parser', ' ', '=', ' ', 'new', ' ', 'PDFParser', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'parser', '.', 'parse', '(', ')', ';', '\n', '        ', 'PDFTextStripper', ' ', 'pdfTextStripper', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'pdfTextStripper', '.', 'getText', '(', 'new', ' ', 'PDDocument', '(', 'parser', '.', 'getDocument', '(', ')', ')', ')', ';', '\n', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should contain the fourth page name', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Page 4', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c7b603d4d1554fb5b4458eab540fa3e238d89a06,WrapperConfig.java,findExecutable,"    public String findExecutable() {

        try {

            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd;
            if (osname.contains(""windows""))
                cmd = ""where wkhtmltopdf"";
            else cmd = ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(p.getInputStream()));

            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }

            if (sb.toString().isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(sb.toString());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c7b603d4d1554fb5b4458eab540fa3e238d89a06,"    public String findExecutable() {

        try {

            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd;
            if (osname.contains(""windows""))
                cmd = ""where wkhtmltopdf"";
            else cmd = ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(p.getInputStream()));

            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }

            if (sb.toString().isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(sb.toString());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ';', '\n', '            ', 'if', ' ', '(', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ')', '\n', '                ', 'cmd', ' ', '=', ' ', '""', 'where wkhtmltopdf', '""', ';', '\n', '            ', 'else', ' ', 'cmd', ' ', '=', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'BufferedReader', ' ', 'reader', ' ', '=', '\n', '                    ', 'new', ' ', 'BufferedReader', '(', 'new', ' ', 'InputStreamReader', '(', 'p', '.', 'getInputStream', '(', ')', ')', ')', ';', '\n', '\n', '            ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '            ', 'String', ' ', 'line', ';', '\n', '            ', 'while', ' ', '(', '(', 'line', ' ', '=', ' ', 'reader', '.', 'readLine', '(', ')', ')', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'sb', '.', 'append', '(', 'line', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'if', ' ', '(', 'sb', '.', 'toString', '(', ')', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', ')', ';', '\n', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'sb', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b4054764247e579db8cb97b6474ce32df4255669,Param.java,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder().append(Symbol.separator)
                .append(Symbol.param).append(key);
        for (String value : values)
            sb.append(Symbol.separator).append(value);
        return sb.toString();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/b4054764247e579db8cb97b6474ce32df4255669,"    public String toString() {
        StringBuilder sb = new StringBuilder().append(Symbol.separator)
                .append(Symbol.param).append(key);
        for (String value : values)
            sb.append(Symbol.separator).append(value);
        return sb.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '\n', '                ', '.', 'append', '(', 'Symbol', '.', 'param', ')', '.', 'append', '(', 'key', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'value', ' ', ':', ' ', 'values', ')', '\n', '            ', 'sb', '.', 'append', '(', 'Symbol', '.', 'separator', ')', '.', 'append', '(', 'value', ')', ';', '\n', '        ', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,effb733021f59d19c6a716ce81979c60a181bee4,Pdf.java,addParam,"    public void addParam(Param param, Param... params) {
        this.params.add( param, params );
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/effb733021f59d19c6a716ce81979c60a181bee4,"    public void addParam(Param param, Param... params) {
        this.params.add( param, params );
    }
","['    ', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', ' ', 'param', ',', ' ', 'params', ' ', ')', ';', '\n', '    ', '}', '\n']"
master,effb733021f59d19c6a716ce81979c60a181bee4,Pdf.java,saveAs,"    private static File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile( file, document );

        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/effb733021f59d19c6a716ce81979c60a181bee4,"    private static File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile( file, document );

        return file;
    }
","['    ', 'private', ' ', 'static', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ',', ' ', 'byte', '[', ']', ' ', 'document', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'FileUtils', '.', 'writeByteArrayToFile', '(', ' ', 'file', ',', ' ', 'document', ' ', ')', ';', '\n', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,effb733021f59d19c6a716ce81979c60a181bee4,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException {
        Process process = Runtime.getRuntime().exec(getCommandAsArray());

        byte[] inputBytes = IOUtils.toByteArray( process.getInputStream() );
        byte[] errorBytes = IOUtils.toByteArray( process.getErrorStream() );
        
        process.waitFor();

        if (process.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + getCommand() + "") exited with status code "" + process.exitValue() + "":\n"" + new String(errorBytes));
        }

        return inputBytes;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/effb733021f59d19c6a716ce81979c60a181bee4,"    public byte[] getPDF() throws IOException, InterruptedException {
        Process process = Runtime.getRuntime().exec(getCommandAsArray());

        byte[] inputBytes = IOUtils.toByteArray( process.getInputStream() );
        byte[] errorBytes = IOUtils.toByteArray( process.getErrorStream() );
        
        process.waitFor();

        if (process.exitValue() != 0) {
            throw new RuntimeException(""Process ("" + getCommand() + "") exited with status code "" + process.exitValue() + "":\n"" + new String(errorBytes));
        }

        return inputBytes;
    }
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'Process', ' ', 'process', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'getCommandAsArray', '(', ')', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'inputBytes', ' ', '=', ' ', 'IOUtils', '.', 'toByteArray', '(', ' ', 'process', '.', 'getInputStream', '(', ')', ' ', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'errorBytes', ' ', '=', ' ', 'IOUtils', '.', 'toByteArray', '(', ' ', 'process', '.', 'getErrorStream', '(', ')', ' ', ')', ';', '\n', '        ', '\n', '        ', 'process', '.', 'waitFor', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'process', '.', 'exitValue', '(', ')', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'Process (', '""', ' ', '+', ' ', 'getCommand', '(', ')', ' ', '+', ' ', '""', ') exited with status code ', '""', ' ', '+', ' ', 'process', '.', 'exitValue', '(', ')', ' ', '+', ' ', '""', ':', '\\', 'n', '""', ' ', '+', ' ', 'new', ' ', 'String', '(', 'errorBytes', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'inputBytes', ';', '\n', '    ', '}', '\n']"
master,effb733021f59d19c6a716ce81979c60a181bee4,WrapperConfig.java,findExecutable,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset());

            if (text.isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/effb733021f59d19c6a716ce81979c60a181bee4,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset());

            if (text.isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ' ', '=', ' ', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ' ', '?', ' ', '""', 'where wkhtmltopdf', '""', ' ', ':', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'text', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'p', '.', 'getInputStream', '(', ')', ',', ' ', 'Charset', '.', 'defaultCharset', '(', ')', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'text', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', ')', ';', '\n', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'text', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,effb733021f59d19c6a716ce81979c60a181bee4,XvfbConfig.java,addParams,"    public void addParams(Param param, Param... params) {
        this.params.add(param, params);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/effb733021f59d19c6a716ce81979c60a181bee4,"    public void addParams(Param param, Param... params) {
        this.params.add(param, params);
    }
","['    ', 'public', ' ', 'void', ' ', 'addParams', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ',', ' ', 'params', ')', ';', '\n', '    ', '}', '\n']"
master,effb733021f59d19c6a716ce81979c60a181bee4,Params.java,add,"    public void add(Param param, Param... params) {
        this.params.add(param);
        this.params.addAll( Arrays.asList( params ) );
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/effb733021f59d19c6a716ce81979c60a181bee4,"    public void add(Param param, Param... params) {
        this.params.add(param);
        this.params.addAll( Arrays.asList( params ) );
    }
","['    ', 'public', ' ', 'void', ' ', 'add', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '        ', 'this', '.', 'params', '.', 'addAll', '(', ' ', 'Arrays', '.', 'asList', '(', ' ', 'params', ' ', ')', ' ', ')', ';', '\n', '    ', '}', '\n']"
master,effb733021f59d19c6a716ce81979c60a181bee4,Params.java,toString,"    public String toString() {
      return StringUtils.join(params, """");
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/effb733021f59d19c6a716ce81979c60a181bee4,"    public String toString() {
      return StringUtils.join(params, """");
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '      ', 'return', ' ', 'StringUtils', '.', 'join', '(', 'params', ',', ' ', '""', '""', ')', ';', '\n', '    ', '}', '\n']"
master,f4458005a315eee3b48eecee0f9bb71d9e288935,WrapperConfig.java,findExecutable,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/f4458005a315eee3b48eecee0f9bb71d9e288935,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new RuntimeException();

            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ' ', '=', ' ', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ' ', '?', ' ', '""', 'where wkhtmltopdf', '""', ' ', ':', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'text', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'p', '.', 'getInputStream', '(', ')', ',', ' ', 'Charset', '.', 'defaultCharset', '(', ')', ')', '.', 'trim', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'text', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', ')', ';', '\n', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'text', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,Pdf.java,addPageFromUrl,"    public void addPageFromUrl(String source) {
        this.pages.add(new Page(source, PageType.url));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public void addPageFromUrl(String source) {
        this.pages.add(new Page(source, PageType.url));
    }
","['    ', 'public', ' ', 'void', ' ', 'addPageFromUrl', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'this', '.', 'pages', '.', 'add', '(', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'PageType', '.', 'url', ')', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,Pdf.java,addPageFromString,"    public void addPageFromString(String source) {
        this.pages.add(new Page(source, PageType.htmlAsString));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public void addPageFromString(String source) {
        this.pages.add(new Page(source, PageType.htmlAsString));
    }
","['    ', 'public', ' ', 'void', ' ', 'addPageFromString', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'this', '.', 'pages', '.', 'add', '(', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'PageType', '.', 'htmlAsString', ')', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,Pdf.java,addPageFromFile,"    public void addPageFromFile(String source) {
        this.pages.add(new Page(source, PageType.file));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public void addPageFromFile(String source) {
        this.pages.add(new Page(source, PageType.file));
    }
","['    ', 'public', ' ', 'void', ' ', 'addPageFromFile', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'this', '.', 'pages', '.', 'add', '(', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'PageType', '.', 'file', ')', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,Pdf.java,addParam,"    public void addParam(Param param, Param... params) {
        this.params.add(param, params);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public void addParam(Param param, Param... params) {
        this.params.add(param, params);
    }
","['    ', 'public', ' ', 'void', ' ', 'addParam', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ',', ' ', 'params', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,Pdf.java,saveAs,"    public File saveAs(String path) throws IOException, InterruptedException {
        return saveAs(path, getPDF());
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public File saveAs(String path) throws IOException, InterruptedException {
        return saveAs(path, getPDF());
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'return', ' ', 'saveAs', '(', 'path', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,Pdf.java,saveAs,"    private File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, document);

        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    private File saveAs(String path, byte[] document) throws IOException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, document);

        return file;
    }
","['    ', 'private', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ',', ' ', 'byte', '[', ']', ' ', 'document', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'FileUtils', '.', 'writeByteArrayToFile', '(', 'file', ',', ' ', 'document', ')', ';', '\n', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException {

        try {
            Process process = Runtime.getRuntime().exec(getCommandAsArray());",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public byte[] getPDF() throws IOException, InterruptedException {

        try {
            Process process = Runtime.getRuntime().exec(getCommandAsArray());
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'Process', ' ', 'process', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'getCommandAsArray', '(', ')', ')', ';', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,PdfTest.java,testCommand,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addToc();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public void testCommand() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addToc();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///example.html', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain the --enable-javascript and --html-header', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--enable-javascript --html-header file:///example.html', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,PdfTest.java,testMultiplePages,"    public void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        // WHEN
        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        // that is a valid PDF (otherwise an IOException occurs)
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        
        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testMultiplePages', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 1</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 2</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 4</h1></html>', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'PDFParser', ' ', 'parser', ' ', '=', ' ', 'new', ' ', 'PDFParser', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'parser', '.', 'parse', '(', ')', ';', '\n', '        ', 'PDFTextStripper', ' ', 'pdfTextStripper', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'pdfTextStripper', '.', 'getText', '(', 'new', ' ', 'PDDocument', '(', 'parser', '.', 'getDocument', '(', ')', ')', ')', ';', '\n', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should contain the fourth page name', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Page 4', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,PdfTest.java,testRemovingGeneratedFile,"    public void testRemovingGeneratedFile() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        File savedPdf = pdf.saveAs(""output.pdf"");
        Assert.assertTrue(savedPdf.delete());
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/7cfc3c9c08f0f2e801c6db3f4f1b597959b606ea,"    public void testRemovingGeneratedFile() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        File savedPdf = pdf.saveAs(""output.pdf"");
        Assert.assertTrue(savedPdf.delete());
    }
","['    ', 'public', ' ', 'void', ' ', 'testRemovingGeneratedFile', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 1</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 2</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 4</h1></html>', '""', ')', ';', '\n', '\n', '        ', 'File', ' ', 'savedPdf', ' ', '=', ' ', 'pdf', '.', 'saveAs', '(', '""', 'output.pdf', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'savedPdf', '.', 'delete', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c018ecd9c6257e16a47f9da91967765e82842956,Pdf.java,saveAs,"    public File saveAs(String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c018ecd9c6257e16a47f9da91967765e82842956,"    public File saveAs(String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'FileUtils', '.', 'writeByteArrayToFile', '(', 'file', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            Process process = Runtime.getRuntime().exec(getCommandAsArray());",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,"    public byte[] getPDF() throws IOException, InterruptedException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            Process process = Runtime.getRuntime().exec(getCommandAsArray());
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '        ', 'ExecutorService', ' ', 'executor', ' ', '=', ' ', 'Executors', '.', 'newFixedThreadPool', '(', '2', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'Process', ' ', 'process', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'getCommandAsArray', '(', ')', ')', ';', '\n']"
master,2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,Pdf.java,streamToByteArrayTask,"    private Callable<byte[]> streamToByteArrayTask(final InputStream input) {
        return new Callable<byte[]>() {
            public byte[] call() throws Exception {",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,"    private Callable<byte[]> streamToByteArrayTask(final InputStream input) {
        return new Callable<byte[]>() {
            public byte[] call() throws Exception {
","['    ', 'private', ' ', 'Callable', '<', 'byte', '[', ']', '>', ' ', 'streamToByteArrayTask', '(', 'final', ' ', 'InputStream', ' ', 'input', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'Callable', '<', 'byte', '[', ']', '>', '(', ')', ' ', '{', '\n', '            ', 'public', ' ', 'byte', '[', ']', ' ', 'call', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n']"
master,2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,Pdf.java,call,"            public byte[] call() throws Exception {
                return IOUtils.toByteArray(input);
            }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2a3b9f32eeea8e493cee9578b4c57c57ee7df3e8,"            public byte[] call() throws Exception {
                return IOUtils.toByteArray(input);
            }
","['            ', 'public', ' ', 'byte', '[', ']', ' ', 'call', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '                ', 'return', ' ', 'IOUtils', '.', 'toByteArray', '(', 'input', ')', ';', '\n', '            ', '}', '\n']"
master,a6b54ac8774f5db07244133ca293b0ce88df540b,Pdf.java,addTocParam,"    public void addTocParam(Param param, Param... params) {
        this.tocParams.add(param, params);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/a6b54ac8774f5db07244133ca293b0ce88df540b,"    public void addTocParam(Param param, Param... params) {
        this.tocParams.add(param, params);
    }
","['    ', 'public', ' ', 'void', ' ', 'addTocParam', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'tocParams', '.', 'add', '(', 'param', ',', ' ', 'params', ')', ';', '\n', '    ', '}', '\n']"
master,ccb2d5fb346778866e6f7ac5b6971a9e11471a6b,PdfTest.java,callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput,"    public void callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput() throws Exception {
        Pdf pdf = new Pdf();

        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Twice</h1></html>"");

        // WHEN
        pdf.getCommand();//The command side effect cause the second call to getPDF to go wrong

        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        // that is a valid PDF (otherwise an IOException occurs)
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should contain the string that was originally inserted"", pdfText, containsString(""Twice""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ccb2d5fb346778866e6f7ac5b6971a9e11471a6b,"    public void callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput() throws Exception {
        Pdf pdf = new Pdf();

        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Twice</h1></html>"");

        
        pdf.getCommand();

        byte[] pdfBytes = pdf.getPDF();

        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        String pdfText = pdfTextStripper.getText(new PDDocument(parser.getDocument()));

        Assert.assertThat(""document should contain the string that was originally inserted"", pdfText, containsString(""Twice""));
    }
","['    ', 'public', ' ', 'void', ' ', 'callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Twice</h1></html>', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'pdf', '.', 'getCommand', '(', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'PDFParser', ' ', 'parser', ' ', '=', ' ', 'new', ' ', 'PDFParser', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'parser', '.', 'parse', '(', ')', ';', '\n', '        ', 'PDFTextStripper', ' ', 'pdfTextStripper', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'pdfTextStripper', '.', 'getText', '(', 'new', ' ', 'PDDocument', '(', 'parser', '.', 'getDocument', '(', ')', ')', ')', ';', '\n', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should contain the string that was originally inserted', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Twice', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,6f9eda86d556129e9f765a5ab6e1a1ac7547c0ad,PdfTest.java,testMultiplePages,"    public void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        // WHEN
        byte[] pdfBytes = pdf.getPDF();

        String pdfText = getPdfTextFromBytes(pdfBytes);

        Assert.assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6f9eda86d556129e9f765a5ab6e1a1ac7547c0ad,"    public void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        
        byte[] pdfBytes = pdf.getPDF();

        String pdfText = getPdfTextFromBytes(pdfBytes);

        Assert.assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testMultiplePages', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 1</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 2</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 4</h1></html>', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'getPdfTextFromBytes', '(', 'pdfBytes', ')', ';', '\n', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should contain the fourth page name', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Page 4', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,6f9eda86d556129e9f765a5ab6e1a1ac7547c0ad,PdfTest.java,callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput,"    public void callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput() throws Exception {
        Pdf pdf = new Pdf();

        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Twice</h1></html>"");

        // WHEN
        pdf.getCommand();
        //Followed by
        byte[] pdfBytes = pdf.getPDF();//Causes the page fromString's content to have become the file path

        String pdfText = getPdfTextFromBytes(pdfBytes);

        Assert.assertThat(""document should contain the string that was originally inserted"", pdfText, containsString(""Twice""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6f9eda86d556129e9f765a5ab6e1a1ac7547c0ad,"    public void callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput() throws Exception {
        Pdf pdf = new Pdf();

        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Twice</h1></html>"");

        
        pdf.getCommand();
        
        byte[] pdfBytes = pdf.getPDF();

        String pdfText = getPdfTextFromBytes(pdfBytes);

        Assert.assertThat(""document should contain the string that was originally inserted"", pdfText, containsString(""Twice""));
    }
","['    ', 'public', ' ', 'void', ' ', 'callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Twice</h1></html>', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'pdf', '.', 'getCommand', '(', ')', ';', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'getPdfTextFromBytes', '(', 'pdfBytes', ')', ';', '\n', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should contain the string that was originally inserted', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Twice', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,6f9eda86d556129e9f765a5ab6e1a1ac7547c0ad,PdfTest.java,getPdfTextFromBytes,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        // that is a valid PDF (otherwise an IOException occurs)
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        return pdfTextStripper.getText(new PDDocument(parser.getDocument()));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/6f9eda86d556129e9f765a5ab6e1a1ac7547c0ad,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        return pdfTextStripper.getText(new PDDocument(parser.getDocument()));
    }
","['    ', 'private', ' ', 'String', ' ', 'getPdfTextFromBytes', '(', 'byte', '[', ']', ' ', 'pdfBytes', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'PDFParser', ' ', 'parser', ' ', '=', ' ', 'new', ' ', 'PDFParser', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'parser', '.', 'parse', '(', ')', ';', '\n', '        ', 'PDFTextStripper', ' ', 'pdfTextStripper', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', ';', '\n', '        ', 'return', ' ', 'pdfTextStripper', '.', 'getText', '(', 'new', ' ', 'PDDocument', '(', 'parser', '.', 'getDocument', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n']"
master,ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,Pdf.java,saveAs,"    public File saveAs(String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        logger.info(""PDF successfully saved in {}"", file.getAbsolutePath());
        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,"    public File saveAs(String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        logger.info(""PDF successfully saved in {}"", file.getAbsolutePath());
        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAs', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'FileUtils', '.', 'writeByteArrayToFile', '(', 'file', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'PDF successfully saved in {}', '""', ',', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            logger.debug(""Generating pdf with: {}"", getCommand());",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,"    public byte[] getPDF() throws IOException, InterruptedException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            logger.debug(""Generating pdf with: {}"", getCommand());
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '\n', '        ', 'ExecutorService', ' ', 'executor', ' ', '=', ' ', 'Executors', '.', 'newFixedThreadPool', '(', '2', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'Generating pdf with: {}', '""', ',', ' ', 'getCommand', '(', ')', ')', ';', '\n']"
master,ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,WrapperConfig.java,findExecutable,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new RuntimeException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new RuntimeException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ' ', '=', ' ', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ' ', '?', ' ', '""', 'where wkhtmltopdf', '""', ' ', ':', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'text', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'p', '.', 'getInputStream', '(', ')', ',', ' ', 'Charset', '.', 'defaultCharset', '(', ')', ')', '.', 'trim', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'text', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'wkhtmltopdf command was not found in your classpath. ', '""', ' ', '+', '\n', '                        ', '""', 'Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf', '""', ')', ';', '\n', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'Wkhtmltopdf command found in classpath: {}', '""', ',', ' ', 'text', ')', ';', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'text', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'e', '.', 'printStackTrace', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,WrapperConfig.java,toString,"    public String toString() {
        return ""{"" +
                ""xvfbConfig="" + xvfbConfig +",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,"    public String toString() {
        return ""{"" +
                ""xvfbConfig="" + xvfbConfig +
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', '{', '""', ' ', '+', '\n', '                ', '""', 'xvfbConfig=', '""', ' ', '+', ' ', 'xvfbConfig', ' ', '+', '\n']"
master,ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,XvfbConfig.java,toString,"    public String toString() {
        return ""{"" +
                ""command='"" + command + '\'' +",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,"    public String toString() {
        return ""{"" +
                ""command='"" + command + '\'' +
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', '{', '""', ' ', '+', '\n', '                ', '""', ""command='"", '""', ' ', '+', ' ', 'command', ' ', '+', ' ', ""'\\''"", ' ', '+', '\n']"
master,ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,PdfTest.java,getPdfTextFromBytes,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        // that is a valid PDF (otherwise an IOException occurs)
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        PDDocument pdDocument = new PDDocument(parser.getDocument());
        String text = pdfTextStripper.getText(pdDocument);
        pdDocument.close();
        return text;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/ef07e0b1a5ca0c5978341aaca9d1b4d62affc7e1,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDFParser parser = new PDFParser(new ByteArrayInputStream(pdfBytes));

        
        parser.parse();
        PDFTextStripper pdfTextStripper = new PDFTextStripper();
        PDDocument pdDocument = new PDDocument(parser.getDocument());
        String text = pdfTextStripper.getText(pdDocument);
        pdDocument.close();
        return text;
    }
","['    ', 'private', ' ', 'String', ' ', 'getPdfTextFromBytes', '(', 'byte', '[', ']', ' ', 'pdfBytes', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'PDFParser', ' ', 'parser', ' ', '=', ' ', 'new', ' ', 'PDFParser', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'parser', '.', 'parse', '(', ')', ';', '\n', '        ', 'PDFTextStripper', ' ', 'pdfTextStripper', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', ';', '\n', '        ', 'PDDocument', ' ', 'pdDocument', ' ', '=', ' ', 'new', ' ', 'PDDocument', '(', 'parser', '.', 'getDocument', '(', ')', ')', ';', '\n', '        ', 'String', ' ', 'text', ' ', '=', ' ', 'pdfTextStripper', '.', 'getText', '(', 'pdDocument', ')', ';', '\n', '        ', 'pdDocument', '.', 'close', '(', ')', ';', '\n', '        ', 'return', ' ', 'text', ';', '\n', '    ', '}', '\n']"
master,48a5600f4db6ace368ee853792c41b6799388533,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException, PDFExportException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            logger.debug(""Generating pdf with: {}"", getCommand());",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/48a5600f4db6ace368ee853792c41b6799388533,"    public byte[] getPDF() throws IOException, InterruptedException, PDFExportException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            logger.debug(""Generating pdf with: {}"", getCommand());
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ',', ' ', 'PDFExportException', ' ', '{', '\n', '\n', '        ', 'ExecutorService', ' ', 'executor', ' ', '=', ' ', 'Executors', '.', 'newFixedThreadPool', '(', '2', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'Generating pdf with: {}', '""', ',', ' ', 'getCommand', '(', ')', ')', ';', '\n']"
master,736977e9153be614439d463506b17711d8bfe753,Pdf.java,getPDF,"    public byte[] getPDF() throws IOException, InterruptedException, PDFExportException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            String command = getCommand();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/736977e9153be614439d463506b17711d8bfe753,"    public byte[] getPDF() throws IOException, InterruptedException, PDFExportException {

        ExecutorService executor = Executors.newFixedThreadPool(2);

        try {
            String command = getCommand();
","['    ', 'public', ' ', 'byte', '[', ']', ' ', 'getPDF', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ',', ' ', 'PDFExportException', ' ', '{', '\n', '\n', '        ', 'ExecutorService', ' ', 'executor', ' ', '=', ' ', 'Executors', '.', 'newFixedThreadPool', '(', '2', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'command', ' ', '=', ' ', 'getCommand', '(', ')', ';', '\n']"
master,736977e9153be614439d463506b17711d8bfe753,WrapperConfig.java,findExecutable,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new RuntimeException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            logger.error(""Fatal:"",e);
        } catch (IOException e) {
            logger.error(""Fatal:"",e);
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/736977e9153be614439d463506b17711d8bfe753,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new RuntimeException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            logger.error(""Fatal:"",e);
        } catch (IOException e) {
            logger.error(""Fatal:"",e);
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ' ', '=', ' ', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ' ', '?', ' ', '""', 'where wkhtmltopdf', '""', ' ', ':', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'text', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'p', '.', 'getInputStream', '(', ')', ',', ' ', 'Charset', '.', 'defaultCharset', '(', ')', ')', '.', 'trim', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'text', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'wkhtmltopdf command was not found in your classpath. ', '""', ' ', '+', '\n', '                        ', '""', 'Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf', '""', ')', ';', '\n', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'Wkhtmltopdf command found in classpath: {}', '""', ',', ' ', 'text', ')', ';', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'text', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Fatal:', '""', ',', 'e', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Fatal:', '""', ',', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,736977e9153be614439d463506b17711d8bfe753,CleanUpTempFilesTest.java,test,"    public void test(){
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            byte[] pdfAsByteArray = pdf.getPDF();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/736977e9153be614439d463506b17711d8bfe753,"    public void test(){
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            byte[] pdfAsByteArray = pdf.getPDF();
","['    ', 'public', ' ', 'void', ' ', 'test', '(', ')', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>', '""', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'byte', '[', ']', ' ', 'pdfAsByteArray', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n']"
master,736977e9153be614439d463506b17711d8bfe753,PdfTest.java,findExecutable,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        //see if executable is installed
        try {
            wc.findExecutable();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/736977e9153be614439d463506b17711d8bfe753,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        
        try {
            wc.findExecutable();
","['    ', 'public', ' ', 'void', ' ', 'findExecutable', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', ')', ';', '\n', '        ', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'wc', '.', 'findExecutable', '(', ')', ';', '\n']"
master,170e5c17b617a82c1e88652e1707c35f262d0188,WrapperConfig.java,findExecutable,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new WkhtmltopdfConfigurationException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            logger.error(""Fatal:"",e);
        } catch (IOException e) {
            logger.error(""Fatal:"",e);
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/170e5c17b617a82c1e88652e1707c35f262d0188,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new WkhtmltopdfConfigurationException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            logger.error(""Fatal:"",e);
        } catch (IOException e) {
            logger.error(""Fatal:"",e);
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ' ', '=', ' ', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ' ', '?', ' ', '""', 'where wkhtmltopdf', '""', ' ', ':', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'text', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'p', '.', 'getInputStream', '(', ')', ',', ' ', 'Charset', '.', 'defaultCharset', '(', ')', ')', '.', 'trim', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'text', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'WkhtmltopdfConfigurationException', '(', '""', 'wkhtmltopdf command was not found in your classpath. ', '""', ' ', '+', '\n', '                        ', '""', 'Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf', '""', ')', ';', '\n', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'Wkhtmltopdf command found in classpath: {}', '""', ',', ' ', 'text', ')', ';', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'text', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Fatal:', '""', ',', 'e', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Fatal:', '""', ',', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,170e5c17b617a82c1e88652e1707c35f262d0188,PdfIntegrationTests.java,CleanUpTempFilesTest,"    public void CleanUpTempFilesTest(){
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            pdf.getPDF();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/170e5c17b617a82c1e88652e1707c35f262d0188,"    public void CleanUpTempFilesTest(){
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            pdf.getPDF();
","['    ', 'public', ' ', 'void', ' ', 'CleanUpTempFilesTest', '(', ')', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>', '""', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n']"
master,170e5c17b617a82c1e88652e1707c35f262d0188,CommandTests.java,testCommand,"    public void testCommand() throws Exception {
        WrapperConfig wc = new WrapperConfig(""wkhtmltopdf"");
        Pdf pdf = new Pdf(wc);
        pdf.addToc();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/170e5c17b617a82c1e88652e1707c35f262d0188,"    public void testCommand() throws Exception {
        WrapperConfig wc = new WrapperConfig(""wkhtmltopdf"");
        Pdf pdf = new Pdf(wc);
        pdf.addToc();
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', '""', 'wkhtmltopdf', '""', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///example.html', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain the --enable-javascript and --html-header', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--enable-javascript --html-header file:///example.html', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,170e5c17b617a82c1e88652e1707c35f262d0188,CommandTests.java,testXvfbCommand,"    public void testXvfbCommand() throws Exception {
        WrapperConfig wc = new WrapperConfig(""wkhtmltopdf"");
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/170e5c17b617a82c1e88652e1707c35f262d0188,"    public void testXvfbCommand() throws Exception {
        WrapperConfig wc = new WrapperConfig(""wkhtmltopdf"");
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testXvfbCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', '""', 'wkhtmltopdf', '""', ')', ';', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'new', ' ', 'XvfbConfig', '(', ')', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command should contain xvfb-run config', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,0010a9dfb61d56daeef62d90440203cefefb188c,WrapperConfig.java,findExecutable,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where.exe wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new WkhtmltopdfConfigurationException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            logger.error(""Fatal:"",e);
        } catch (IOException e) {
            logger.error(""Fatal:"",e);
        }

        return getWkhtmltopdfCommand();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/0010a9dfb61d56daeef62d90440203cefefb188c,"    public String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();

            String cmd = osname.contains(""windows"") ? ""where.exe wkhtmltopdf"" : ""which wkhtmltopdf"";

            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();

            String text = IOUtils.toString(p.getInputStream(), Charset.defaultCharset()).trim();

            if (text.isEmpty())
                throw new WkhtmltopdfConfigurationException(""wkhtmltopdf command was not found in your classpath. "" +
                        ""Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf"");

            logger.debug(""Wkhtmltopdf command found in classpath: {}"", text);
            setWkhtmltopdfCommand(text);
        } catch (InterruptedException e) {
            logger.error(""Fatal:"",e);
        } catch (IOException e) {
            logger.error(""Fatal:"",e);
        }

        return getWkhtmltopdfCommand();
    }
","['    ', 'public', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'cmd', ' ', '=', ' ', 'osname', '.', 'contains', '(', '""', 'windows', '""', ')', ' ', '?', ' ', '""', 'where.exe wkhtmltopdf', '""', ' ', ':', ' ', '""', 'which wkhtmltopdf', '""', ';', '\n', '\n', '            ', 'Process', ' ', 'p', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n', '            ', 'p', '.', 'waitFor', '(', ')', ';', '\n', '\n', '            ', 'String', ' ', 'text', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'p', '.', 'getInputStream', '(', ')', ',', ' ', 'Charset', '.', 'defaultCharset', '(', ')', ')', '.', 'trim', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'text', '.', 'isEmpty', '(', ')', ')', '\n', '                ', 'throw', ' ', 'new', ' ', 'WkhtmltopdfConfigurationException', '(', '""', 'wkhtmltopdf command was not found in your classpath. ', '""', ' ', '+', '\n', '                        ', '""', 'Verify its installation or initialize wrapper configurations with correct path/to/wkhtmltopdf', '""', ')', ';', '\n', '\n', '            ', 'logger', '.', 'debug', '(', '""', 'Wkhtmltopdf command found in classpath: {}', '""', ',', ' ', 'text', ')', ';', '\n', '            ', 'setWkhtmltopdfCommand', '(', 'text', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'InterruptedException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Fatal:', '""', ',', 'e', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', 'Fatal:', '""', ',', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getWkhtmltopdfCommand', '(', ')', ';', '\n', '    ', '}', '\n']"
master,2f72a2fc29bad264a2f52583a1d6947078410f33,Pdf.java,saveAsDirect,"    public File saveAsDirect(String path)throws IOException, InterruptedException  {
        File file = new File(path);
        outputFilename = file.getAbsolutePath();
        getPDF();
        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2f72a2fc29bad264a2f52583a1d6947078410f33,"    public File saveAsDirect(String path)throws IOException, InterruptedException  {
        File file = new File(path);
        outputFilename = file.getAbsolutePath();
        getPDF();
        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAsDirect', '(', 'String', ' ', 'path', ')', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', '  ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'outputFilename', ' ', '=', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ';', '\n', '        ', 'getPDF', '(', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,e2a5cdd8730ef2243d95b2d6d558aebaaedc5e3c,PdfIntegrationTests.java,getPdfTextFromBytes,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDDocument pdDocument = PDDocument.load(new ByteArrayInputStream(pdfBytes));
        String text = new PDFTextStripper().getText(pdDocument);

        pdDocument.close();
        return text;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e2a5cdd8730ef2243d95b2d6d558aebaaedc5e3c,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDDocument pdDocument = PDDocument.load(new ByteArrayInputStream(pdfBytes));
        String text = new PDFTextStripper().getText(pdDocument);

        pdDocument.close();
        return text;
    }
","['    ', 'private', ' ', 'String', ' ', 'getPdfTextFromBytes', '(', 'byte', '[', ']', ' ', 'pdfBytes', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'PDDocument', ' ', 'pdDocument', ' ', '=', ' ', 'PDDocument', '.', 'load', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '        ', 'String', ' ', 'text', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', '.', 'getText', '(', 'pdDocument', ')', ';', '\n', '\n', '        ', 'pdDocument', '.', 'close', '(', ')', ';', '\n', '        ', 'return', ' ', 'text', ';', '\n', '    ', '}', '\n']"
master,e272eb7368b8778b43ac5d9a4bec850c3998c986,WrapperConfig.java,findExecutable,"    public static String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e272eb7368b8778b43ac5d9a4bec850c3998c986,"    public static String findExecutable() {
        try {
            String osname = System.getProperty(""os.name"").toLowerCase();
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'osname', ' ', '=', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'toLowerCase', '(', ')', ';', '\n']"
master,e272eb7368b8778b43ac5d9a4bec850c3998c986,PdfTest.java,testParams,"    public void testParams() throws Exception {
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e272eb7368b8778b43ac5d9a4bec850c3998c986,"    public void testParams() throws Exception {
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testParams', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///example.html', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain the --enable-javascript and --html-header', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--enable-javascript --html-header file:///example.html', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e272eb7368b8778b43ac5d9a4bec850c3998c986,PdfTest.java,testMissingAssetsProperty,"    public void testMissingAssetsProperty() {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.setAllowMissingAssets();
        Assert.assertTrue(pdf.getAllowMissingAssets());
        pdf.setSuccessValues(Arrays.asList(0, 1));
        Assert.assertTrue(pdf.getAllowMissingAssets());
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e272eb7368b8778b43ac5d9a4bec850c3998c986,"    public void testMissingAssetsProperty() {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.setAllowMissingAssets();
        Assert.assertTrue(pdf.getAllowMissingAssets());
        pdf.setSuccessValues(Arrays.asList(0, 1));
        Assert.assertTrue(pdf.getAllowMissingAssets());
    }
","['    ', 'public', ' ', 'void', ' ', 'testMissingAssetsProperty', '(', ')', ' ', '{', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'setAllowMissingAssets', '(', ')', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'pdf', '.', 'getAllowMissingAssets', '(', ')', ')', ';', '\n', '        ', 'pdf', '.', 'setSuccessValues', '(', 'Arrays', '.', 'asList', '(', '0', ',', ' ', '1', ')', ')', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'pdf', '.', 'getAllowMissingAssets', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e272eb7368b8778b43ac5d9a4bec850c3998c986,PdfTest.java,testTocParams,"    public void testTocParams() throws IOException {
        pdf.addToc();
        pdf.addTocParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e272eb7368b8778b43ac5d9a4bec850c3998c986,"    public void testTocParams() throws IOException {
        pdf.addToc();
        pdf.addTocParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testTocParams', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addTocParam', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain toc params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--test-param2 test-value', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e272eb7368b8778b43ac5d9a4bec850c3998c986,PdfTest.java,testXvfbCommand,"    public void testXvfbCommand() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e272eb7368b8778b43ac5d9a4bec850c3998c986,"    public void testXvfbCommand() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testXvfbCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'new', ' ', 'XvfbConfig', '(', ')', ')', ';', '\n', '        ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command should contain xvfb-run config', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e272eb7368b8778b43ac5d9a4bec850c3998c986,XvfbConfigTest.java,testXvfbEnable,"    public void testXvfbEnable() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e272eb7368b8778b43ac5d9a4bec850c3998c986,"    public void testXvfbEnable() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        Assert.assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testXvfbEnable', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'new', ' ', 'XvfbConfig', '(', ')', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command should contain xvfb-run config', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e272eb7368b8778b43ac5d9a4bec850c3998c986,XvfbConfigTest.java,testXvfbParams,"    public void testXvfbParams() throws Exception {
        XvfbConfig xvfbConfig = new XvfbConfig();
        xvfbConfig.addParams(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        wc.setXvfbConfig(xvfbConfig);
        Pdf pdf = new Pdf(wc);
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain xvfb params"", pdf.getCommand(), containsString(""xvfb-run --test-param --test-param2 test-value wkhtmltopdf http://www.google.com -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/e272eb7368b8778b43ac5d9a4bec850c3998c986,"    public void testXvfbParams() throws Exception {
        XvfbConfig xvfbConfig = new XvfbConfig();
        xvfbConfig.addParams(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        wc.setXvfbConfig(xvfbConfig);
        Pdf pdf = new Pdf(wc);
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain xvfb params"", pdf.getCommand(), containsString(""xvfb-run --test-param --test-param2 test-value wkhtmltopdf http://www.google.com -""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testXvfbParams', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'XvfbConfig', ' ', 'xvfbConfig', ' ', '=', ' ', 'new', ' ', 'XvfbConfig', '(', ')', ';', '\n', '        ', 'xvfbConfig', '.', 'addParams', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'xvfbConfig', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain xvfb params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run --test-param --test-param2 test-value wkhtmltopdf http://www.google.com -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,Pdf.java,saveAsDirect,"    public File saveAsDirect(String path) throws IOException, InterruptedException {
        File file = new File(path);
        outputFilename = file.getAbsolutePath();
        getPDF();
        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public File saveAsDirect(String path) throws IOException, InterruptedException {
        File file = new File(path);
        outputFilename = file.getAbsolutePath();
        getPDF();
        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAsDirect', '(', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'outputFilename', ' ', '=', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ';', '\n', '        ', 'getPDF', '(', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,Pdf.java,cleanAllTempFiles,"    public void cleanAllTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        final File folder = new File(System.getProperty(""java.io.tmpdir""));
        final File[] files = folder.listFiles(new FilenameFilterConfig());
        for (final File file : files) {
            if (!file.delete()) {
                logger.warn(""Couldn't delete temp file "" + file.getAbsolutePath());
            }
        }
        logger.debug(""{} temporary files removed."", files.length);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public void cleanAllTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        final File folder = new File(System.getProperty(""java.io.tmpdir""));
        final File[] files = folder.listFiles(new FilenameFilterConfig());
        for (final File file : files) {
            if (!file.delete()) {
                logger.warn(""Couldn't delete temp file "" + file.getAbsolutePath());
            }
        }
        logger.debug(""{} temporary files removed."", files.length);
    }
","['    ', 'public', ' ', 'void', ' ', 'cleanAllTempFiles', '(', ')', ' ', '{', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Cleaning up temporary files...', '""', ')', ';', '\n', '        ', 'final', ' ', 'File', ' ', 'folder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'System', '.', 'getProperty', '(', '""', 'java.io.tmpdir', '""', ')', ')', ';', '\n', '        ', 'final', ' ', 'File', '[', ']', ' ', 'files', ' ', '=', ' ', 'folder', '.', 'listFiles', '(', 'new', ' ', 'FilenameFilterConfig', '(', ')', ')', ';', '\n', '        ', 'for', ' ', '(', 'final', ' ', 'File', ' ', 'file', ' ', ':', ' ', 'files', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', '!', 'file', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '                ', 'logger', '.', 'warn', '(', '""', ""Couldn't delete temp file "", '""', ' ', '+', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'logger', '.', 'debug', '(', '""', '{} temporary files removed.', '""', ',', ' ', 'files', '.', 'length', ')', ';', '\n', '    ', '}', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,FilenameFilterConfig.java,accept,"    public boolean accept(File dir, String name) {
        return name.matches(""java-wkhtmltopdf-wrapper.*"");
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public boolean accept(File dir, String name) {
        return name.matches(""java-wkhtmltopdf-wrapper.*"");
    }
","['    ', 'public', ' ', 'boolean', ' ', 'accept', '(', 'File', ' ', 'dir', ',', ' ', 'String', ' ', 'name', ')', ' ', '{', '\n', '        ', 'return', ' ', 'name', '.', 'matches', '(', '""', 'java-wkhtmltopdf-wrapper.*', '""', ')', ';', '\n', '    ', '}', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,Params.java,add,"    public void add(Param param, Param... params) {
        this.params.add(param);
        this.params.addAll(Arrays.asList(params));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public void add(Param param, Param... params) {
        this.params.add(param);
        this.params.addAll(Arrays.asList(params));
    }
","['    ', 'public', ' ', 'void', ' ', 'add', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '        ', 'this', '.', 'params', '.', 'addAll', '(', 'Arrays', '.', 'asList', '(', 'params', ')', ')', ';', '\n', '    ', '}', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,Params.java,toString,"    public String toString() {
        return StringUtils.join(params, """");
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public String toString() {
        return StringUtils.join(params, """");
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'StringUtils', '.', 'join', '(', 'params', ',', ' ', '""', '""', ')', ';', '\n', '    ', '}', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,PdfIntegrationTests.java,findExecutable,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        //see if executable is installed
        try {
            WrapperConfig.findExecutable();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public void findExecutable() throws Exception {
        WrapperConfig wc = new WrapperConfig();
        
        try {
            WrapperConfig.findExecutable();
","['    ', 'public', ' ', 'void', ' ', 'findExecutable', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', ')', ';', '\n', '        ', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,PdfIntegrationTests.java,CleanUpTempFilesTest,"    public void CleanUpTempFilesTest() {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            pdf.getPDF();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public void CleanUpTempFilesTest() {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            pdf.getPDF();
","['    ', 'public', ' ', 'void', ' ', 'CleanUpTempFilesTest', '(', ')', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>', '""', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n']"
master,2330c91287047279a081e03db8a75a8e32be7076,PdfTests.java,cleanUp,"    public void cleanUp() {
        pdf.cleanAllTempFiles();
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/2330c91287047279a081e03db8a75a8e32be7076,"    public void cleanUp() {
        pdf.cleanAllTempFiles();
    }
","['    ', 'public', ' ', 'void', ' ', 'cleanUp', '(', ')', ' ', '{', '\n', '        ', 'pdf', '.', 'cleanAllTempFiles', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b84f9047cb80b96d17d457d10881866dea2db3a4,PdfIntegrationTests.java,findExecutable,"    public void findExecutable() {
        WrapperConfig wc = new WrapperConfig();
        //see if executable is installed
        try {
            WrapperConfig.findExecutable();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/b84f9047cb80b96d17d457d10881866dea2db3a4,"    public void findExecutable() {
        WrapperConfig wc = new WrapperConfig();
        
        try {
            WrapperConfig.findExecutable();
","['    ', 'public', ' ', 'void', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', 'WrapperConfig', ' ', 'wc', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', ')', ';', '\n', '        ', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n']"
master,79c91c12b9da864dd2db71aed78e9e62e47ac7ad,PdfIntegrationTests.java,findExecutable,"    public void findExecutable() {
        //see if executable is installed
        try {
            WrapperConfig.findExecutable();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/79c91c12b9da864dd2db71aed78e9e62e47ac7ad,"    public void findExecutable() {
        
        try {
            WrapperConfig.findExecutable();
","['    ', 'public', ' ', 'void', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n']"
master,79c91c12b9da864dd2db71aed78e9e62e47ac7ad,PdfIntegrationTests.java,testPdfWithLongParameters,"    public void testPdfWithLongParameters() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        pdf.addParam(new Param(""--javascript-delay"", ""2000""));

        pdf.saveAs(""output.pdf"");

        // WHEN
        byte[] pdfBytes = pdf.getPDF();
        PDDocument pdDocument = PDDocument.load(new ByteArrayInputStream(pdfBytes));
        String pdfText = new PDFTextStripper().getText(pdDocument);

        Assert.assertThat(""document should be generated"", pdfText, containsString(""Google""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/79c91c12b9da864dd2db71aed78e9e62e47ac7ad,"    public void testPdfWithLongParameters() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        pdf.addParam(new Param(""--javascript-delay"", ""2000""));

        pdf.saveAs(""output.pdf"");

        
        byte[] pdfBytes = pdf.getPDF();
        PDDocument pdDocument = PDDocument.load(new ByteArrayInputStream(pdfBytes));
        String pdfText = new PDFTextStripper().getText(pdDocument);

        Assert.assertThat(""document should be generated"", pdfText, containsString(""Google""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testPdfWithLongParameters', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'executable', ' ', '=', ' ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'new', ' ', 'WrapperConfig', '(', 'executable', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--javascript-delay', '""', ',', ' ', '""', '2000', '""', ')', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'saveAs', '(', '""', 'output.pdf', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '        ', 'PDDocument', ' ', 'pdDocument', ' ', '=', ' ', 'PDDocument', '.', 'load', '(', 'new', ' ', 'ByteArrayInputStream', '(', 'pdfBytes', ')', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', '.', 'getText', '(', 'pdDocument', ')', ';', '\n', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should be generated', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Google', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addPage,"    public Page addPage(String source, SourceType type) {
        Page page = new Page(source, type);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public Page addPage(String source, SourceType type) {
        Page page = new Page(source, type);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPage', '(', 'String', ' ', 'source', ',', ' ', 'SourceType', ' ', 'type', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'type', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addCoverFromUrl,"    public Cover addCoverFromUrl(String source) {
        Cover cover = new Cover(source, SourceType.url);
        this.objects.add(cover);
        return cover;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public Cover addCoverFromUrl(String source) {
        Cover cover = new Cover(source, SourceType.url);
        this.objects.add(cover);
        return cover;
    }
","['    ', 'public', ' ', 'Cover', ' ', 'addCoverFromUrl', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'new', ' ', 'Cover', '(', 'source', ',', ' ', 'SourceType', '.', 'url', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'cover', ')', ';', '\n', '        ', 'return', ' ', 'cover', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addCoverFromString,"    public Cover addCoverFromString(String source) {
        Cover cover = new Cover(source, SourceType.htmlAsString);
        this.objects.add(cover);
        return cover;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public Cover addCoverFromString(String source) {
        Cover cover = new Cover(source, SourceType.htmlAsString);
        this.objects.add(cover);
        return cover;
    }
","['    ', 'public', ' ', 'Cover', ' ', 'addCoverFromString', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'new', ' ', 'Cover', '(', 'source', ',', ' ', 'SourceType', '.', 'htmlAsString', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'cover', ')', ';', '\n', '        ', 'return', ' ', 'cover', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addCoverFromFile,"    public Cover addCoverFromFile(String source) {
        Cover cover = new Cover(source, SourceType.file);
        this.objects.add(cover);
        return cover;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public Cover addCoverFromFile(String source) {
        Cover cover = new Cover(source, SourceType.file);
        this.objects.add(cover);
        return cover;
    }
","['    ', 'public', ' ', 'Cover', ' ', 'addCoverFromFile', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'new', ' ', 'Cover', '(', 'source', ',', ' ', 'SourceType', '.', 'file', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'cover', ')', ';', '\n', '        ', 'return', ' ', 'cover', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addPageFromUrl,"    public Page addPageFromUrl(String source) {
        Page page = new Page(source, SourceType.url);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public Page addPageFromUrl(String source) {
        Page page = new Page(source, SourceType.url);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPageFromUrl', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'SourceType', '.', 'url', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addPageFromString,"    public Page addPageFromString(String source) {
        Page page = new Page(source, SourceType.htmlAsString);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public Page addPageFromString(String source) {
        Page page = new Page(source, SourceType.htmlAsString);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPageFromString', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'SourceType', '.', 'htmlAsString', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addPageFromFile,"    public Page addPageFromFile(String source) {
        Page page = new Page(source, SourceType.file);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public Page addPageFromFile(String source) {
        Page page = new Page(source, SourceType.file);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPageFromFile', '(', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'SourceType', '.', 'file', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addToc,"    public TableOfContents addToc() {
        TableOfContents toc = new TableOfContents();
        this.objects.add(toc);
        this.lastToc = toc;
        return toc;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public TableOfContents addToc() {
        TableOfContents toc = new TableOfContents();
        this.objects.add(toc);
        this.lastToc = toc;
        return toc;
    }
","['    ', 'public', ' ', 'TableOfContents', ' ', 'addToc', '(', ')', ' ', '{', '\n', '        ', 'TableOfContents', ' ', 'toc', ' ', '=', ' ', 'new', ' ', 'TableOfContents', '(', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'toc', ')', ';', '\n', '        ', 'this', '.', 'lastToc', ' ', '=', ' ', 'toc', ';', '\n', '        ', 'return', ' ', 'toc', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,addTocParam,"    public void addTocParam(Param param, Param... params) {
        this.lastToc.addParam(param, params);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void addTocParam(Param param, Param... params) {
        this.lastToc.addParam(param, params);
    }
","['    ', 'public', ' ', 'void', ' ', 'addTocParam', '(', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'lastToc', '.', 'addParam', '(', 'param', ',', ' ', 'params', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Pdf.java,cleanTempFiles,"    private void cleanTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        for (BaseObject object : objects) {
            if(object instanceof Page) {",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    private void cleanTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        for (BaseObject object : objects) {
            if(object instanceof Page) {
","['    ', 'private', ' ', 'void', ' ', 'cleanTempFiles', '(', ')', ' ', '{', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Cleaning up temporary files...', '""', ')', ';', '\n', '        ', 'for', ' ', '(', 'BaseObject', ' ', 'object', ' ', ':', ' ', 'objects', ')', ' ', '{', '\n', '            ', 'if', '(', 'object', ' ', 'instanceof', ' ', 'Page', ')', ' ', '{', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,BaseObject.java,addParam,"	public void addParam( Param param, Param... params )
	{
		this.params.add( param, params );
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"	public void addParam( Param param, Param... params )
	{
		this.params.add( param, params );
	}
","['\t', 'public', ' ', 'void', ' ', 'addParam', '(', ' ', 'Param', ' ', 'param', ',', ' ', 'Param', '.', '.', '.', ' ', 'params', ' ', ')', '\n', '\t', '{', '\n', '\t\t', 'this', '.', 'params', '.', 'add', '(', ' ', 'param', ',', ' ', 'params', ' ', ')', ';', '\n', '\t', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,BaseObject.java,getCommandAsList,"	public List<String> getCommandAsList(Pdf pdf) throws IOException
	{
		List<String> commands = new ArrayList<>();
		if(StringUtils.isNotBlank(objectIdentifier)){
			commands.add( objectIdentifier );
		}
		commands.addAll( this.params.getParamsAsStringList() );
		return commands;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"	public List<String> getCommandAsList(Pdf pdf) throws IOException
	{
		List<String> commands = new ArrayList<>();
		if(StringUtils.isNotBlank(objectIdentifier)){
			commands.add( objectIdentifier );
		}
		commands.addAll( this.params.getParamsAsStringList() );
		return commands;
	}
","['\t', 'public', ' ', 'List', '<', 'String', '>', ' ', 'getCommandAsList', '(', 'Pdf', ' ', 'pdf', ')', ' ', 'throws', ' ', 'IOException', '\n', '\t', '{', '\n', '\t\t', 'List', '<', 'String', '>', ' ', 'commands', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '\t\t', 'if', '(', 'StringUtils', '.', 'isNotBlank', '(', 'objectIdentifier', ')', ')', '{', '\n', '\t\t\t', 'commands', '.', 'add', '(', ' ', 'objectIdentifier', ' ', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'commands', '.', 'addAll', '(', ' ', 'this', '.', 'params', '.', 'getParamsAsStringList', '(', ')', ' ', ')', ';', '\n', '\t\t', 'return', ' ', 'commands', ';', '\n', '\t', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Cover.java,SetObjectIdentifier,"    public String SetObjectIdentifier()
    {
        return ""cover"";
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public String SetObjectIdentifier()
    {
        return ""cover"";
    }
","['    ', 'public', ' ', 'String', ' ', 'SetObjectIdentifier', '(', ')', '\n', '    ', '{', '\n', '        ', 'return', ' ', '""', 'cover', '""', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,Page.java,SetObjectIdentifier,"    public String SetObjectIdentifier()
    {
        // leave blank as 'page' identifier is optional as per the wkhtmltopdf documentation
        return """";
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public String SetObjectIdentifier()
    {
        
        return """";
    }
","['    ', 'public', ' ', 'String', ' ', 'SetObjectIdentifier', '(', ')', '\n', '    ', '{', '\n', '        ', '\n', '        ', 'return', ' ', '""', '""', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,TableOfContents.java,SetObjectIdentifier,"    public String SetObjectIdentifier()
    {
        return ""toc"";
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public String SetObjectIdentifier()
    {
        return ""toc"";
    }
","['    ', 'public', ' ', 'String', ' ', 'SetObjectIdentifier', '(', ')', '\n', '    ', '{', '\n', '        ', 'return', ' ', '""', 'toc', '""', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfIntegrationTests.java,testMultipleObjectsOrder,"    public void testMultipleObjectsOrder() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        WrapperConfig config = new WrapperConfig(executable);
        config.setAlwaysPutTocFirst(false);
        Pdf pdf = new Pdf(config);

        pdf.addCoverFromString(""<html><head><meta charset=\""utf-8\""></head><h1>CoverPage</h1></html>"");

        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--toc-header-text"", ""TableOfContents""));

        Page mainPage = pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h2>Heading1</h2></html>"");
        mainPage.addParam(new Param(""--exclude-from-outline""));
        
        byte[] pdfBytes = pdf.getPDF();
        String pdfText = getPdfTextFromBytes(pdfBytes);

        // verify that cover comes before toc and toc before the main page
        int indexOfCover = pdfText.indexOf(""CoverPage"");
        int indexOfToc = pdfText.indexOf(""TableOfContents"");
        int indexOfMainPage = pdfText.indexOf(""Heading1"");
        
        Assert.assertThat(""document should have a cover page before the table of contents"", indexOfCover < indexOfToc, is(true));
        Assert.assertThat(""document should have a table of contents before the main page"", indexOfToc < indexOfMainPage, is(true));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void testMultipleObjectsOrder() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        WrapperConfig config = new WrapperConfig(executable);
        config.setAlwaysPutTocFirst(false);
        Pdf pdf = new Pdf(config);

        pdf.addCoverFromString(""<html><head><meta charset=\""utf-8\""></head><h1>CoverPage</h1></html>"");

        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--toc-header-text"", ""TableOfContents""));

        Page mainPage = pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h2>Heading1</h2></html>"");
        mainPage.addParam(new Param(""--exclude-from-outline""));
        
        byte[] pdfBytes = pdf.getPDF();
        String pdfText = getPdfTextFromBytes(pdfBytes);

        
        int indexOfCover = pdfText.indexOf(""CoverPage"");
        int indexOfToc = pdfText.indexOf(""TableOfContents"");
        int indexOfMainPage = pdfText.indexOf(""Heading1"");
        
        Assert.assertThat(""document should have a cover page before the table of contents"", indexOfCover < indexOfToc, is(true));
        Assert.assertThat(""document should have a table of contents before the main page"", indexOfToc < indexOfMainPage, is(true));
    }
","['    ', 'public', ' ', 'void', ' ', 'testMultipleObjectsOrder', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'executable', ' ', '=', ' ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n', '        ', 'WrapperConfig', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', 'executable', ')', ';', '\n', '        ', 'config', '.', 'setAlwaysPutTocFirst', '(', 'false', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'config', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addCoverFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>CoverPage</h1></html>', '""', ')', ';', '\n', '\n', '        ', 'TableOfContents', ' ', 'toc', ' ', '=', ' ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'toc', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--toc-header-text', '""', ',', ' ', '""', 'TableOfContents', '""', ')', ')', ';', '\n', '\n', '        ', 'Page', ' ', 'mainPage', ' ', '=', ' ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h2>Heading1</h2></html>', '""', ')', ';', '\n', '        ', 'mainPage', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--exclude-from-outline', '""', ')', ')', ';', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'getPdfTextFromBytes', '(', 'pdfBytes', ')', ';', '\n', '\n', '        ', '\n', '        ', 'int', ' ', 'indexOfCover', ' ', '=', ' ', 'pdfText', '.', 'indexOf', '(', '""', 'CoverPage', '""', ')', ';', '\n', '        ', 'int', ' ', 'indexOfToc', ' ', '=', ' ', 'pdfText', '.', 'indexOf', '(', '""', 'TableOfContents', '""', ')', ';', '\n', '        ', 'int', ' ', 'indexOfMainPage', ' ', '=', ' ', 'pdfText', '.', 'indexOf', '(', '""', 'Heading1', '""', ')', ';', '\n', '        ', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should have a cover page before the table of contents', '""', ',', ' ', 'indexOfCover', ' ', '<', ' ', 'indexOfToc', ',', ' ', 'is', '(', 'true', ')', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'document should have a table of contents before the main page', '""', ',', ' ', 'indexOfToc', ' ', '<', ' ', 'indexOfMainPage', ',', ' ', 'is', '(', 'true', ')', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfIntegrationTests.java,getPdfTextForPage,"    private String getPdfTextForPage(PDDocument document, int page) throws IOException {
        PDFTextStripper reader = new PDFTextStripper();
        reader.setStartPage(page);
        reader.setEndPage(page);
        String pageText = reader.getText(document);
        return pageText;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    private String getPdfTextForPage(PDDocument document, int page) throws IOException {
        PDFTextStripper reader = new PDFTextStripper();
        reader.setStartPage(page);
        reader.setEndPage(page);
        String pageText = reader.getText(document);
        return pageText;
    }
","['    ', 'private', ' ', 'String', ' ', 'getPdfTextForPage', '(', 'PDDocument', ' ', 'document', ',', ' ', 'int', ' ', 'page', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'PDFTextStripper', ' ', 'reader', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', ';', '\n', '        ', 'reader', '.', 'setStartPage', '(', 'page', ')', ';', '\n', '        ', 'reader', '.', 'setEndPage', '(', 'page', ')', ';', '\n', '        ', 'String', ' ', 'pageText', ' ', '=', ' ', 'reader', '.', 'getText', '(', 'document', ')', ';', '\n', '        ', 'return', ' ', 'pageText', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfTests.java,testTocParamsUsingTocObject,"    public void testTocParamsUsingTocObject() throws IOException {
        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void testTocParamsUsingTocObject() throws IOException {
        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testTocParamsUsingTocObject', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TableOfContents', ' ', 'toc', ' ', '=', ' ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'toc', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain toc params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--test-param2 test-value', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfTests.java,testTocAlwaysFirstByDefault,"    public void testTocAlwaysFirstByDefault() throws Exception {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        Assert.assertThat(""command params should contain toc before pages"", pdf.getCommand(), containsString(""wkhtmltopdf toc http://www.google.com test.html -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void testTocAlwaysFirstByDefault() throws Exception {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        Assert.assertThat(""command params should contain toc before pages"", pdf.getCommand(), containsString(""wkhtmltopdf toc http://www.google.com test.html -""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testTocAlwaysFirstByDefault', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain toc before pages', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf toc http://www.google.com test.html -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfTests.java,testTocCustomLocation,"    public void testTocCustomLocation() throws Exception {
        wc.setAlwaysPutTocFirst(false);
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        Assert.assertThat(""command params should contain toc after url page and before file page"", pdf.getCommand(), containsString(""wkhtmltopdf http://www.google.com toc test.html -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void testTocCustomLocation() throws Exception {
        wc.setAlwaysPutTocFirst(false);
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        Assert.assertThat(""command params should contain toc after url page and before file page"", pdf.getCommand(), containsString(""wkhtmltopdf http://www.google.com toc test.html -""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testTocCustomLocation', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'wc', '.', 'setAlwaysPutTocFirst', '(', 'false', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain toc after url page and before file page', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf http://www.google.com toc test.html -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfTests.java,testPageParams,"    public void testPageParams() throws IOException {
        Page page1 = pdf.addPageFromUrl(""http://www.google.com"");
        page1.addParam(new Param(""--exclude-from-outline""));
        Page page2 = pdf.addPageFromFile(""test.html"");
        page2.addParam( new Param(""--zoom"", ""2""));
        Assert.assertThat(""command url page should contain page specific params"", pdf.getCommand(), containsString(""http://www.google.com --exclude-from-outline""));
        Assert.assertThat(""command file page should contain page specific params"", pdf.getCommand(), containsString(""test.html --zoom""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void testPageParams() throws IOException {
        Page page1 = pdf.addPageFromUrl(""http://www.google.com"");
        page1.addParam(new Param(""--exclude-from-outline""));
        Page page2 = pdf.addPageFromFile(""test.html"");
        page2.addParam( new Param(""--zoom"", ""2""));
        Assert.assertThat(""command url page should contain page specific params"", pdf.getCommand(), containsString(""http://www.google.com --exclude-from-outline""));
        Assert.assertThat(""command file page should contain page specific params"", pdf.getCommand(), containsString(""test.html --zoom""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testPageParams', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Page', ' ', 'page1', ' ', '=', ' ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'page1', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--exclude-from-outline', '""', ')', ')', ';', '\n', '        ', 'Page', ' ', 'page2', ' ', '=', ' ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'page2', '.', 'addParam', '(', ' ', 'new', ' ', 'Param', '(', '""', '--zoom', '""', ',', ' ', '""', '2', '""', ')', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command url page should contain page specific params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'http://www.google.com --exclude-from-outline', '""', ')', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command file page should contain page specific params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'test.html --zoom', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfTests.java,testCoverParams,"    public void testCoverParams() throws IOException {
        Cover cover = pdf.addCoverFromFile(""cover.html"");
        cover.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain cover params"", pdf.getCommand(), containsString(""cover cover.html --test-param --test-param2 test-value""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void testCoverParams() throws IOException {
        Cover cover = pdf.addCoverFromFile(""cover.html"");
        cover.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        Assert.assertThat(""command params should contain cover params"", pdf.getCommand(), containsString(""cover cover.html --test-param --test-param2 test-value""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testCoverParams', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'pdf', '.', 'addCoverFromFile', '(', '""', 'cover.html', '""', ')', ';', '\n', '        ', 'cover', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command params should contain cover params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'cover cover.html --test-param --test-param2 test-value', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,013a4d83f385bb883c81edd8fb91500579d48f4d,PdfTests.java,testMulipleObjects,"    public void testMulipleObjects() throws IOException {
        wc.setAlwaysPutTocFirst(false);
        pdf.addCoverFromFile(""cover.html"");
        pdf.addPageFromFile(""foreword.html"");
        pdf.addToc();
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromFile(""test.html"");
        Assert.assertThat(""command should match the order objects are added"", pdf.getCommand(), containsString(""wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/013a4d83f385bb883c81edd8fb91500579d48f4d,"    public void testMulipleObjects() throws IOException {
        wc.setAlwaysPutTocFirst(false);
        pdf.addCoverFromFile(""cover.html"");
        pdf.addPageFromFile(""foreword.html"");
        pdf.addToc();
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromFile(""test.html"");
        Assert.assertThat(""command should match the order objects are added"", pdf.getCommand(), containsString(""wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -""));
    }
","['    ', 'public', ' ', 'void', ' ', 'testMulipleObjects', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'wc', '.', 'setAlwaysPutTocFirst', '(', 'false', ')', ';', '\n', '        ', 'pdf', '.', 'addCoverFromFile', '(', '""', 'cover.html', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'foreword.html', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertThat', '(', '""', 'command should match the order objects are added', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addPage,"    public Page addPage(final String source, final SourceType type) {
        Page page = new Page(source, type);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public Page addPage(final String source, final SourceType type) {
        Page page = new Page(source, type);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPage', '(', 'final', ' ', 'String', ' ', 'source', ',', ' ', 'final', ' ', 'SourceType', ' ', 'type', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'type', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addCoverFromUrl,"    public Cover addCoverFromUrl(final String source) {
        Cover cover = new Cover(source, SourceType.url);
        this.objects.add(cover);
        return cover;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public Cover addCoverFromUrl(final String source) {
        Cover cover = new Cover(source, SourceType.url);
        this.objects.add(cover);
        return cover;
    }
","['    ', 'public', ' ', 'Cover', ' ', 'addCoverFromUrl', '(', 'final', ' ', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'new', ' ', 'Cover', '(', 'source', ',', ' ', 'SourceType', '.', 'url', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'cover', ')', ';', '\n', '        ', 'return', ' ', 'cover', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addCoverFromString,"    public Cover addCoverFromString(final String source) {
        Cover cover = new Cover(source, SourceType.htmlAsString);
        this.objects.add(cover);
        return cover;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public Cover addCoverFromString(final String source) {
        Cover cover = new Cover(source, SourceType.htmlAsString);
        this.objects.add(cover);
        return cover;
    }
","['    ', 'public', ' ', 'Cover', ' ', 'addCoverFromString', '(', 'final', ' ', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'new', ' ', 'Cover', '(', 'source', ',', ' ', 'SourceType', '.', 'htmlAsString', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'cover', ')', ';', '\n', '        ', 'return', ' ', 'cover', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addCoverFromFile,"    public Cover addCoverFromFile(final String source) {
        Cover cover = new Cover(source, SourceType.file);
        this.objects.add(cover);
        return cover;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public Cover addCoverFromFile(final String source) {
        Cover cover = new Cover(source, SourceType.file);
        this.objects.add(cover);
        return cover;
    }
","['    ', 'public', ' ', 'Cover', ' ', 'addCoverFromFile', '(', 'final', ' ', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'new', ' ', 'Cover', '(', 'source', ',', ' ', 'SourceType', '.', 'file', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'cover', ')', ';', '\n', '        ', 'return', ' ', 'cover', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addPageFromUrl,"    public Page addPageFromUrl(final String source) {
        Page page = new Page(source, SourceType.url);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public Page addPageFromUrl(final String source) {
        Page page = new Page(source, SourceType.url);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPageFromUrl', '(', 'final', ' ', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'SourceType', '.', 'url', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addPageFromString,"    public Page addPageFromString(final String source) {
        Page page = new Page(source, SourceType.htmlAsString);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public Page addPageFromString(final String source) {
        Page page = new Page(source, SourceType.htmlAsString);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPageFromString', '(', 'final', ' ', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'SourceType', '.', 'htmlAsString', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addPageFromFile,"    public Page addPageFromFile(final String source) {
        Page page = new Page(source, SourceType.file);
        this.objects.add(page);
        return page;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public Page addPageFromFile(final String source) {
        Page page = new Page(source, SourceType.file);
        this.objects.add(page);
        return page;
    }
","['    ', 'public', ' ', 'Page', ' ', 'addPageFromFile', '(', 'final', ' ', 'String', ' ', 'source', ')', ' ', '{', '\n', '        ', 'Page', ' ', 'page', ' ', '=', ' ', 'new', ' ', 'Page', '(', 'source', ',', ' ', 'SourceType', '.', 'file', ')', ';', '\n', '        ', 'this', '.', 'objects', '.', 'add', '(', 'page', ')', ';', '\n', '        ', 'return', ' ', 'page', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addParam,"    public void addParam(final Param param, final Param... params) {
        this.params.add(param, params);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public void addParam(final Param param, final Param... params) {
        this.params.add(param, params);
    }
","['    ', 'public', ' ', 'void', ' ', 'addParam', '(', 'final', ' ', 'Param', ' ', 'param', ',', ' ', 'final', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ',', ' ', 'params', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,addTocParam,"    public void addTocParam(final Param param, final Param... params) {
        this.lastToc.addParam(param, params);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public void addTocParam(final Param param, final Param... params) {
        this.lastToc.addParam(param, params);
    }
","['    ', 'public', ' ', 'void', ' ', 'addTocParam', '(', 'final', ' ', 'Param', ' ', 'param', ',', ' ', 'final', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'lastToc', '.', 'addParam', '(', 'param', ',', ' ', 'params', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,saveAs,"    public File saveAs(final String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        logger.info(""PDF successfully saved in {}"", file.getAbsolutePath());
        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public File saveAs(final String path) throws IOException, InterruptedException {
        File file = new File(path);
        FileUtils.writeByteArrayToFile(file, getPDF());
        logger.info(""PDF successfully saved in {}"", file.getAbsolutePath());
        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAs', '(', 'final', ' ', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'FileUtils', '.', 'writeByteArrayToFile', '(', 'file', ',', ' ', 'getPDF', '(', ')', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', '""', 'PDF successfully saved in {}', '""', ',', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,saveAsDirect,"    public File saveAsDirect(final String path) throws IOException, InterruptedException {
        File file = new File(path);
        outputFilename = file.getAbsolutePath();
        getPDF();
        return file;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public File saveAsDirect(final String path) throws IOException, InterruptedException {
        File file = new File(path);
        outputFilename = file.getAbsolutePath();
        getPDF();
        return file;
    }
","['    ', 'public', ' ', 'File', ' ', 'saveAsDirect', '(', 'final', ' ', 'String', ' ', 'path', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'File', ' ', 'file', ' ', '=', ' ', 'new', ' ', 'File', '(', 'path', ')', ';', '\n', '        ', 'outputFilename', ' ', '=', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ';', '\n', '        ', 'getPDF', '(', ')', ';', '\n', '        ', 'return', ' ', 'file', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Pdf.java,cleanTempFiles,"    private void cleanTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        for (BaseObject object : objects) {
            if (object instanceof Page) {",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    private void cleanTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        for (BaseObject object : objects) {
            if (object instanceof Page) {
","['    ', 'private', ' ', 'void', ' ', 'cleanTempFiles', '(', ')', ' ', '{', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Cleaning up temporary files...', '""', ')', ';', '\n', '        ', 'for', ' ', '(', 'BaseObject', ' ', 'object', ' ', ':', ' ', 'objects', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'object', ' ', 'instanceof', ' ', 'Page', ')', ' ', '{', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,XvfbConfig.java,addParams,"    public void addParams(final Param param, final Param... params) {
        this.params.add(param, params);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public void addParams(final Param param, final Param... params) {
        this.params.add(param, params);
    }
","['    ', 'public', ' ', 'void', ' ', 'addParams', '(', 'final', ' ', 'Param', ' ', 'param', ',', ' ', 'final', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ',', ' ', 'params', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,BaseObject.java,addParam,"	public void addParam(final Param param, final Param... params )
	{
		this.params.add( param, params );
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"	public void addParam(final Param param, final Param... params )
	{
		this.params.add( param, params );
	}
","['\t', 'public', ' ', 'void', ' ', 'addParam', '(', 'final', ' ', 'Param', ' ', 'param', ',', ' ', 'final', ' ', 'Param', '.', '.', '.', ' ', 'params', ' ', ')', '\n', '\t', '{', '\n', '\t\t', 'this', '.', 'params', '.', 'add', '(', ' ', 'param', ',', ' ', 'params', ' ', ')', ';', '\n', '\t', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,BaseObject.java,getCommandAsList,"	public List<String> getCommandAsList(final Pdf pdf) throws IOException
	{
		List<String> commands = new ArrayList<>();
		if(StringUtils.isNotBlank(objectIdentifier)){
			commands.add(objectIdentifier);
		}
		commands.addAll(this.params.getParamsAsStringList());
		return commands;
	}",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"	public List<String> getCommandAsList(final Pdf pdf) throws IOException
	{
		List<String> commands = new ArrayList<>();
		if(StringUtils.isNotBlank(objectIdentifier)){
			commands.add(objectIdentifier);
		}
		commands.addAll(this.params.getParamsAsStringList());
		return commands;
	}
","['\t', 'public', ' ', 'List', '<', 'String', '>', ' ', 'getCommandAsList', '(', 'final', ' ', 'Pdf', ' ', 'pdf', ')', ' ', 'throws', ' ', 'IOException', '\n', '\t', '{', '\n', '\t\t', 'List', '<', 'String', '>', ' ', 'commands', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '\t\t', 'if', '(', 'StringUtils', '.', 'isNotBlank', '(', 'objectIdentifier', ')', ')', '{', '\n', '\t\t\t', 'commands', '.', 'add', '(', 'objectIdentifier', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'commands', '.', 'addAll', '(', 'this', '.', 'params', '.', 'getParamsAsStringList', '(', ')', ')', ';', '\n', '\t\t', 'return', ' ', 'commands', ';', '\n', '\t', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Cover.java,SetObjectIdentifier,"    public String SetObjectIdentifier() {
        return ""cover"";
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public String SetObjectIdentifier() {
        return ""cover"";
    }
","['    ', 'public', ' ', 'String', ' ', 'SetObjectIdentifier', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'cover', '""', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,TableOfContents.java,SetObjectIdentifier,"    public String SetObjectIdentifier() {
        return ""toc"";
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public String SetObjectIdentifier() {
        return ""toc"";
    }
","['    ', 'public', ' ', 'String', ' ', 'SetObjectIdentifier', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'toc', '""', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,Params.java,add,"    public void add(final Param param, final Param... params) {
        this.params.add(param);
        this.params.addAll(Arrays.asList(params));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    public void add(final Param param, final Param... params) {
        this.params.add(param);
        this.params.addAll(Arrays.asList(params));
    }
","['    ', 'public', ' ', 'void', ' ', 'add', '(', 'final', ' ', 'Param', ' ', 'param', ',', ' ', 'final', ' ', 'Param', '.', '.', '.', ' ', 'params', ')', ' ', '{', '\n', '        ', 'this', '.', 'params', '.', 'add', '(', 'param', ')', ';', '\n', '        ', 'this', '.', 'params', '.', 'addAll', '(', 'Arrays', '.', 'asList', '(', 'params', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,findExecutable,"    void findExecutable() {
        //see if executable is installed
        try {
            WrapperConfig.findExecutable();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void findExecutable() {
        
        try {
            WrapperConfig.findExecutable();
","['    ', 'void', ' ', 'findExecutable', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,testMultipleObjectsOrder,"    void testMultipleObjectsOrder() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        WrapperConfig config = new WrapperConfig(executable);
        config.setAlwaysPutTocFirst(false);
        Pdf pdf = new Pdf(config);

        pdf.addCoverFromString(""<html><head><meta charset=\""utf-8\""></head><h1>CoverPage</h1></html>"");

        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--toc-header-text"", ""TableOfContents""));

        Page mainPage = pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h2>Heading1</h2></html>"");
        mainPage.addParam(new Param(""--exclude-from-outline""));

        byte[] pdfBytes = pdf.getPDF();
        String pdfText = getPdfTextFromBytes(pdfBytes);

        // verify that cover comes before toc and toc before the main page
        int indexOfCover = pdfText.indexOf(""CoverPage"");
        int indexOfToc = pdfText.indexOf(""TableOfContents"");
        int indexOfMainPage = pdfText.indexOf(""Heading1"");

        assertThat(""document should have a cover page before the table of contents"", indexOfCover < indexOfToc, is(true));
        assertThat(""document should have a table of contents before the main page"", indexOfToc < indexOfMainPage, is(true));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testMultipleObjectsOrder() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        WrapperConfig config = new WrapperConfig(executable);
        config.setAlwaysPutTocFirst(false);
        Pdf pdf = new Pdf(config);

        pdf.addCoverFromString(""<html><head><meta charset=\""utf-8\""></head><h1>CoverPage</h1></html>"");

        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--toc-header-text"", ""TableOfContents""));

        Page mainPage = pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h2>Heading1</h2></html>"");
        mainPage.addParam(new Param(""--exclude-from-outline""));

        byte[] pdfBytes = pdf.getPDF();
        String pdfText = getPdfTextFromBytes(pdfBytes);

        
        int indexOfCover = pdfText.indexOf(""CoverPage"");
        int indexOfToc = pdfText.indexOf(""TableOfContents"");
        int indexOfMainPage = pdfText.indexOf(""Heading1"");

        assertThat(""document should have a cover page before the table of contents"", indexOfCover < indexOfToc, is(true));
        assertThat(""document should have a table of contents before the main page"", indexOfToc < indexOfMainPage, is(true));
    }
","['    ', 'void', ' ', 'testMultipleObjectsOrder', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'executable', ' ', '=', ' ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n', '        ', 'WrapperConfig', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'WrapperConfig', '(', 'executable', ')', ';', '\n', '        ', 'config', '.', 'setAlwaysPutTocFirst', '(', 'false', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'config', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addCoverFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>CoverPage</h1></html>', '""', ')', ';', '\n', '\n', '        ', 'TableOfContents', ' ', 'toc', ' ', '=', ' ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'toc', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--toc-header-text', '""', ',', ' ', '""', 'TableOfContents', '""', ')', ')', ';', '\n', '\n', '        ', 'Page', ' ', 'mainPage', ' ', '=', ' ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h2>Heading1</h2></html>', '""', ')', ';', '\n', '        ', 'mainPage', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--exclude-from-outline', '""', ')', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'getPdfTextFromBytes', '(', 'pdfBytes', ')', ';', '\n', '\n', '        ', '\n', '        ', 'int', ' ', 'indexOfCover', ' ', '=', ' ', 'pdfText', '.', 'indexOf', '(', '""', 'CoverPage', '""', ')', ';', '\n', '        ', 'int', ' ', 'indexOfToc', ' ', '=', ' ', 'pdfText', '.', 'indexOf', '(', '""', 'TableOfContents', '""', ')', ';', '\n', '        ', 'int', ' ', 'indexOfMainPage', ' ', '=', ' ', 'pdfText', '.', 'indexOf', '(', '""', 'Heading1', '""', ')', ';', '\n', '\n', '        ', 'assertThat', '(', '""', 'document should have a cover page before the table of contents', '""', ',', ' ', 'indexOfCover', ' ', '<', ' ', 'indexOfToc', ',', ' ', 'is', '(', 'true', ')', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'document should have a table of contents before the main page', '""', ',', ' ', 'indexOfToc', ' ', '<', ' ', 'indexOfMainPage', ',', ' ', 'is', '(', 'true', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,testMultiplePages,"    void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        // WHEN
        byte[] pdfBytes = pdf.getPDF();

        String pdfText = getPdfTextFromBytes(pdfBytes);

        assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testMultiplePages() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        
        byte[] pdfBytes = pdf.getPDF();

        String pdfText = getPdfTextFromBytes(pdfBytes);

        assertThat(""document should contain the fourth page name"", pdfText, containsString(""Page 4""));
    }
","['    ', 'void', ' ', 'testMultiplePages', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 1</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 2</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 4</h1></html>', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'getPdfTextFromBytes', '(', 'pdfBytes', ')', ';', '\n', '\n', '        ', 'assertThat', '(', '""', 'document should contain the fourth page name', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Page 4', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput,"    void callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput() throws Exception {
        Pdf pdf = new Pdf();

        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Twice</h1></html>"");

        // WHEN
        pdf.getCommand();
        //Followed by
        byte[] pdfBytes = pdf.getPDF();//Causes the page fromString's content to have become the file path

        String pdfText = getPdfTextFromBytes(pdfBytes);

        assertThat(""document should contain the string that was originally inserted"", pdfText, containsString(""Twice""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput() throws Exception {
        Pdf pdf = new Pdf();

        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Twice</h1></html>"");

        
        pdf.getCommand();
        
        byte[] pdfBytes = pdf.getPDF();

        String pdfText = getPdfTextFromBytes(pdfBytes);

        assertThat(""document should contain the string that was originally inserted"", pdfText, containsString(""Twice""));
    }
","['    ', 'void', ' ', 'callingGetCommandFollowedByGetPdfShouldNotInfluenceTheOutput', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Twice</h1></html>', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'pdf', '.', 'getCommand', '(', ')', ';', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'getPdfTextFromBytes', '(', 'pdfBytes', ')', ';', '\n', '\n', '        ', 'assertThat', '(', '""', 'document should contain the string that was originally inserted', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Twice', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,testRemovingGeneratedFile,"    void testRemovingGeneratedFile() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        File savedPdf = pdf.saveAs(""output.pdf"");
        assertTrue(savedPdf.delete());
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testRemovingGeneratedFile() throws Exception {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 1</h1></html>"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 2</h1></html>"");
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromString(""<html><head><meta charset=\""utf-8\""></head><h1>Page 4</h1></html>"");

        File savedPdf = pdf.saveAs(""output.pdf"");
        assertTrue(savedPdf.delete());
    }
","['    ', 'void', ' ', 'testRemovingGeneratedFile', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 1</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 2</h1></html>', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<html><head><meta charset=', '\\""', 'utf-8', '\\""', '></head><h1>Page 4</h1></html>', '""', ')', ';', '\n', '\n', '        ', 'File', ' ', 'savedPdf', ' ', '=', ' ', 'pdf', '.', 'saveAs', '(', '""', 'output.pdf', '""', ')', ';', '\n', '        ', 'assertTrue', '(', 'savedPdf', '.', 'delete', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,getPdfTextFromBytes,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDDocument pdDocument = Loader.loadPDF(pdfBytes);
        String text = new PDFTextStripper().getText(pdDocument);

        pdDocument.close();
        return text;
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    private String getPdfTextFromBytes(byte[] pdfBytes) throws IOException {
        PDDocument pdDocument = Loader.loadPDF(pdfBytes);
        String text = new PDFTextStripper().getText(pdDocument);

        pdDocument.close();
        return text;
    }
","['    ', 'private', ' ', 'String', ' ', 'getPdfTextFromBytes', '(', 'byte', '[', ']', ' ', 'pdfBytes', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'PDDocument', ' ', 'pdDocument', ' ', '=', ' ', 'Loader', '.', 'loadPDF', '(', 'pdfBytes', ')', ';', '\n', '        ', 'String', ' ', 'text', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', '.', 'getText', '(', 'pdDocument', ')', ';', '\n', '\n', '        ', 'pdDocument', '.', 'close', '(', ')', ';', '\n', '        ', 'return', ' ', 'text', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,CleanUpTempFilesTest,"    void CleanUpTempFilesTest() {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            pdf.getPDF();",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void CleanUpTempFilesTest() {
        Pdf pdf = new Pdf();
        pdf.addPageFromString(""<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>"");
        try {
            pdf.getPDF();
","['    ', 'void', ' ', 'CleanUpTempFilesTest', '(', ')', ' ', '{', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromString', '(', '""', '<!DOCTYPE html><head><title>title</title></head><body><p>TEST</p></body>', '""', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfIntegrationTests.java,testPdfWithLongParameters,"    void testPdfWithLongParameters() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        pdf.addParam(new Param(""--javascript-delay"", ""2000""));

        pdf.saveAs(""output.pdf"");

        // WHEN
        byte[] pdfBytes = pdf.getPDF();
        PDDocument pdDocument = Loader.loadPDF(pdfBytes);
        String pdfText = new PDFTextStripper().getText(pdDocument);

        assertThat(""document should be generated"", pdfText, containsString(""Google""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testPdfWithLongParameters() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        pdf.addParam(new Param(""--javascript-delay"", ""2000""));

        pdf.saveAs(""output.pdf"");

        
        byte[] pdfBytes = pdf.getPDF();
        PDDocument pdDocument = Loader.loadPDF(pdfBytes);
        String pdfText = new PDFTextStripper().getText(pdDocument);

        assertThat(""document should be generated"", pdfText, containsString(""Google""));
    }
","['    ', 'void', ' ', 'testPdfWithLongParameters', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'executable', ' ', '=', ' ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'new', ' ', 'WrapperConfig', '(', 'executable', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--javascript-delay', '""', ',', ' ', '""', '2000', '""', ')', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'saveAs', '(', '""', 'output.pdf', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'pdfBytes', ' ', '=', ' ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '        ', 'PDDocument', ' ', 'pdDocument', ' ', '=', ' ', 'Loader', '.', 'loadPDF', '(', 'pdfBytes', ')', ';', '\n', '        ', 'String', ' ', 'pdfText', ' ', '=', ' ', 'new', ' ', 'PDFTextStripper', '(', ')', '.', 'getText', '(', 'pdDocument', ')', ';', '\n', '\n', '        ', 'assertThat', '(', '""', 'document should be generated', '""', ',', ' ', 'pdfText', ',', ' ', 'containsString', '(', '""', 'Google', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testParams,"    void testParams() throws Exception {
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testParams() throws Exception {
        pdf.addParam(new Param(""--enable-javascript""), new Param(""--html-header"", ""file:///example.html""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain the --enable-javascript and --html-header"", pdf.getCommand(), containsString(""--enable-javascript --html-header file:///example.html""));
    }
","['    ', 'void', ' ', 'testParams', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--enable-javascript', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--html-header', '""', ',', ' ', '""', 'file:///example.html', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command params should contain the --enable-javascript and --html-header', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--enable-javascript --html-header file:///example.html', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testMissingAssetsProperty,"    void testMissingAssetsProperty() {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.setAllowMissingAssets();
        assertTrue(pdf.getAllowMissingAssets());
        pdf.setSuccessValues(Arrays.asList(0, 1));
        assertTrue(pdf.getAllowMissingAssets());
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testMissingAssetsProperty() {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.setAllowMissingAssets();
        assertTrue(pdf.getAllowMissingAssets());
        pdf.setSuccessValues(Arrays.asList(0, 1));
        assertTrue(pdf.getAllowMissingAssets());
    }
","['    ', 'void', ' ', 'testMissingAssetsProperty', '(', ')', ' ', '{', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'setAllowMissingAssets', '(', ')', ';', '\n', '        ', 'assertTrue', '(', 'pdf', '.', 'getAllowMissingAssets', '(', ')', ')', ';', '\n', '        ', 'pdf', '.', 'setSuccessValues', '(', 'Arrays', '.', 'asList', '(', '0', ',', ' ', '1', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'pdf', '.', 'getAllowMissingAssets', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testTocParams,"    void testTocParams() throws IOException {
        pdf.addToc();
        pdf.addTocParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testTocParams() throws IOException {
        pdf.addToc();
        pdf.addTocParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }
","['    ', 'void', ' ', 'testTocParams', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addTocParam', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command params should contain toc params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--test-param2 test-value', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testTocParamsUsingTocObject,"    void testTocParamsUsingTocObject() throws IOException {
        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testTocParamsUsingTocObject() throws IOException {
        TableOfContents toc = pdf.addToc();
        toc.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain toc params"", pdf.getCommand(), containsString(""--test-param2 test-value""));
    }
","['    ', 'void', ' ', 'testTocParamsUsingTocObject', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TableOfContents', ' ', 'toc', ' ', '=', ' ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'toc', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command params should contain toc params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', '--test-param2 test-value', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testXvfbCommand,"    void testXvfbCommand() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        pdf = new Pdf(wc);
        assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testXvfbCommand() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        pdf = new Pdf(wc);
        assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }
","['    ', 'void', ' ', 'testXvfbCommand', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'new', ' ', 'XvfbConfig', '(', ')', ')', ';', '\n', '        ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command should contain xvfb-run config', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testTocAlwaysFirstByDefault,"    void testTocAlwaysFirstByDefault() throws Exception {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        assertThat(""command params should contain toc before pages"", pdf.getCommand(), containsString(""wkhtmltopdf toc http://www.google.com test.html -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testTocAlwaysFirstByDefault() throws Exception {
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        assertThat(""command params should contain toc before pages"", pdf.getCommand(), containsString(""wkhtmltopdf toc http://www.google.com test.html -""));
    }
","['    ', 'void', ' ', 'testTocAlwaysFirstByDefault', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command params should contain toc before pages', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf toc http://www.google.com test.html -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testTocCustomLocation,"    void testTocCustomLocation() throws Exception {
        wc.setAlwaysPutTocFirst(false);
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        assertThat(""command params should contain toc after url page and before file page"", pdf.getCommand(), containsString(""wkhtmltopdf http://www.google.com toc test.html -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testTocCustomLocation() throws Exception {
        wc.setAlwaysPutTocFirst(false);
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addToc();
        pdf.addPageFromFile(""test.html"");
        assertThat(""command params should contain toc after url page and before file page"", pdf.getCommand(), containsString(""wkhtmltopdf http://www.google.com toc test.html -""));
    }
","['    ', 'void', ' ', 'testTocCustomLocation', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'wc', '.', 'setAlwaysPutTocFirst', '(', 'false', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command params should contain toc after url page and before file page', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf http://www.google.com toc test.html -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testPageParams,"    void testPageParams() throws IOException {
        Page page1 = pdf.addPageFromUrl(""http://www.google.com"");
        page1.addParam(new Param(""--exclude-from-outline""));
        Page page2 = pdf.addPageFromFile(""test.html"");
        page2.addParam( new Param(""--zoom"", ""2""));
        assertThat(""command url page should contain page specific params"", pdf.getCommand(), containsString(""http://www.google.com --exclude-from-outline""));
        assertThat(""command file page should contain page specific params"", pdf.getCommand(), containsString(""test.html --zoom""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testPageParams() throws IOException {
        Page page1 = pdf.addPageFromUrl(""http://www.google.com"");
        page1.addParam(new Param(""--exclude-from-outline""));
        Page page2 = pdf.addPageFromFile(""test.html"");
        page2.addParam( new Param(""--zoom"", ""2""));
        assertThat(""command url page should contain page specific params"", pdf.getCommand(), containsString(""http://www.google.com --exclude-from-outline""));
        assertThat(""command file page should contain page specific params"", pdf.getCommand(), containsString(""test.html --zoom""));
    }
","['    ', 'void', ' ', 'testPageParams', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Page', ' ', 'page1', ' ', '=', ' ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'page1', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--exclude-from-outline', '""', ')', ')', ';', '\n', '        ', 'Page', ' ', 'page2', ' ', '=', ' ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'page2', '.', 'addParam', '(', ' ', 'new', ' ', 'Param', '(', '""', '--zoom', '""', ',', ' ', '""', '2', '""', ')', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command url page should contain page specific params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'http://www.google.com --exclude-from-outline', '""', ')', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command file page should contain page specific params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'test.html --zoom', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testCoverParams,"    void testCoverParams() throws IOException {
        Cover cover = pdf.addCoverFromFile(""cover.html"");
        cover.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain cover params"", pdf.getCommand(), containsString(""cover cover.html --test-param --test-param2 test-value""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testCoverParams() throws IOException {
        Cover cover = pdf.addCoverFromFile(""cover.html"");
        cover.addParam(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain cover params"", pdf.getCommand(), containsString(""cover cover.html --test-param --test-param2 test-value""));
    }
","['    ', 'void', ' ', 'testCoverParams', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Cover', ' ', 'cover', ' ', '=', ' ', 'pdf', '.', 'addCoverFromFile', '(', '""', 'cover.html', '""', ')', ';', '\n', '        ', 'cover', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command params should contain cover params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'cover cover.html --test-param --test-param2 test-value', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,PdfTests.java,testMulipleObjects,"    void testMulipleObjects() throws IOException {
        wc.setAlwaysPutTocFirst(false);
        pdf.addCoverFromFile(""cover.html"");
        pdf.addPageFromFile(""foreword.html"");
        pdf.addToc();
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromFile(""test.html"");
        assertThat(""command should match the order objects are added"", pdf.getCommand(), containsString(""wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testMulipleObjects() throws IOException {
        wc.setAlwaysPutTocFirst(false);
        pdf.addCoverFromFile(""cover.html"");
        pdf.addPageFromFile(""foreword.html"");
        pdf.addToc();
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromFile(""test.html"");
        assertThat(""command should match the order objects are added"", pdf.getCommand(), containsString(""wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -""));
    }
","['    ', 'void', ' ', 'testMulipleObjects', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'wc', '.', 'setAlwaysPutTocFirst', '(', 'false', ')', ';', '\n', '        ', 'pdf', '.', 'addCoverFromFile', '(', '""', 'cover.html', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'foreword.html', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command should match the order objects are added', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,XvfbConfigTests.java,testXvfbEnable,"    void testXvfbEnable() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testXvfbEnable() throws Exception {
        wc.setXvfbConfig(new XvfbConfig());
        Pdf pdf = new Pdf(wc);
        assertThat(""command should contain xvfb-run config"", pdf.getCommand(), containsString(""xvfb-run""));
    }
","['    ', 'void', ' ', 'testXvfbEnable', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'new', ' ', 'XvfbConfig', '(', ')', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command should contain xvfb-run config', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,XvfbConfigTests.java,testXvfbParams,"    void testXvfbParams() throws Exception {
        XvfbConfig xvfbConfig = new XvfbConfig();
        xvfbConfig.addParams(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        wc.setXvfbConfig(xvfbConfig);
        Pdf pdf = new Pdf(wc);
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain xvfb params"", pdf.getCommand(), containsString(""xvfb-run --test-param --test-param2 test-value wkhtmltopdf http://www.google.com -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/c5fbf480c6c73e4c5f4c9314860da9b08c24bd4f,"    void testXvfbParams() throws Exception {
        XvfbConfig xvfbConfig = new XvfbConfig();
        xvfbConfig.addParams(new Param(""--test-param""), new Param(""--test-param2"", ""test-value""));
        wc.setXvfbConfig(xvfbConfig);
        Pdf pdf = new Pdf(wc);
        pdf.addPageFromUrl(""http://www.google.com"");
        assertThat(""command params should contain xvfb params"", pdf.getCommand(), containsString(""xvfb-run --test-param --test-param2 test-value wkhtmltopdf http://www.google.com -""));
    }
","['    ', 'void', ' ', 'testXvfbParams', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'XvfbConfig', ' ', 'xvfbConfig', ' ', '=', ' ', 'new', ' ', 'XvfbConfig', '(', ')', ';', '\n', '        ', 'xvfbConfig', '.', 'addParams', '(', 'new', ' ', 'Param', '(', '""', '--test-param', '""', ')', ',', ' ', 'new', ' ', 'Param', '(', '""', '--test-param2', '""', ',', ' ', '""', 'test-value', '""', ')', ')', ';', '\n', '        ', 'wc', '.', 'setXvfbConfig', '(', 'xvfbConfig', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'wc', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command params should contain xvfb params', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'xvfb-run --test-param --test-param2 test-value wkhtmltopdf http://www.google.com -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,bac139438971be855bc2e1037eaa383092127b54,PdfIntegrationTests.java,testPdfWithWindowStatusTimeoutParameters,"    void testPdfWithWindowStatusTimeoutParameters() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        pdf.addParam(new Param(""--window-status"", ""complete""));

        String exceptionMessage = """";
        try {
            /*
             * Due to the absence of the `window.status` assignment on the `www.google.com` page, a timeout exception is certain to occur.
             * This simulates a scenario where the `window.status` assignment fails.
             * */
            pdf.getPDF();
        } catch (RuntimeException e) {
            exceptionMessage = e.getMessage();
        }
        assertThat(""it should throw a PDF generation timeout exception"", exceptionMessage, containsString(""PDF generation timeout by user""));
",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/bac139438971be855bc2e1037eaa383092127b54,"    void testPdfWithWindowStatusTimeoutParameters() throws Exception {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        pdf.addParam(new Param(""--window-status"", ""complete""));

        String exceptionMessage = """";
        try {
            
            pdf.getPDF();
        } catch (RuntimeException e) {
            exceptionMessage = e.getMessage();
        }
        assertThat(""it should throw a PDF generation timeout exception"", exceptionMessage, containsString(""PDF generation timeout by user""));
","['    ', 'void', ' ', 'testPdfWithWindowStatusTimeoutParameters', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'executable', ' ', '=', ' ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'new', ' ', 'WrapperConfig', '(', 'executable', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--window-status', '""', ',', ' ', '""', 'complete', '""', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'exceptionMessage', ' ', '=', ' ', '""', '""', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', '\n', '            ', 'pdf', '.', 'getPDF', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'exceptionMessage', ' ', '=', ' ', 'e', '.', 'getMessage', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'assertThat', '(', '""', 'it should throw a PDF generation timeout exception', '""', ',', ' ', 'exceptionMessage', ',', ' ', 'containsString', '(', '""', 'PDF generation timeout by user', '""', ')', ')', ';', '\n']"
master,5fc09374aeeb4708fa25cd741c13923f0a4274c3,Pdf.java,streamToByteArrayTask,"    private Callable<byte[]> streamToByteArrayTask(final InputStream input) {
        return () -> IOUtils.toByteArray(input);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5fc09374aeeb4708fa25cd741c13923f0a4274c3,"    private Callable<byte[]> streamToByteArrayTask(final InputStream input) {
        return () -> IOUtils.toByteArray(input);
    }
","['    ', 'private', ' ', 'Callable', '<', 'byte', '[', ']', '>', ' ', 'streamToByteArrayTask', '(', 'final', ' ', 'InputStream', ' ', 'input', ')', ' ', '{', '\n', '        ', 'return', ' ', '(', ')', ' ', '-', '>', ' ', 'IOUtils', '.', 'toByteArray', '(', 'input', ')', ';', '\n', '    ', '}', '\n']"
master,5fc09374aeeb4708fa25cd741c13923f0a4274c3,Pdf.java,cleanAllTempFiles,"    public void cleanAllTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        final File folder = new File(System.getProperty(""java.io.tmpdir""));
        final File[] files = folder.listFiles(new FilenameFilterConfig());
        for (final File file : files) {
            if (!file.delete()) {
                logger.warn(""Couldn't delete temp file '{}'"", file.getAbsolutePath());
            }
        }
        logger.debug(""{} temporary files removed."", files.length);
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5fc09374aeeb4708fa25cd741c13923f0a4274c3,"    public void cleanAllTempFiles() {
        logger.debug(""Cleaning up temporary files..."");
        final File folder = new File(System.getProperty(""java.io.tmpdir""));
        final File[] files = folder.listFiles(new FilenameFilterConfig());
        for (final File file : files) {
            if (!file.delete()) {
                logger.warn(""Couldn't delete temp file '{}'"", file.getAbsolutePath());
            }
        }
        logger.debug(""{} temporary files removed."", files.length);
    }
","['    ', 'public', ' ', 'void', ' ', 'cleanAllTempFiles', '(', ')', ' ', '{', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Cleaning up temporary files...', '""', ')', ';', '\n', '        ', 'final', ' ', 'File', ' ', 'folder', ' ', '=', ' ', 'new', ' ', 'File', '(', 'System', '.', 'getProperty', '(', '""', 'java.io.tmpdir', '""', ')', ')', ';', '\n', '        ', 'final', ' ', 'File', '[', ']', ' ', 'files', ' ', '=', ' ', 'folder', '.', 'listFiles', '(', 'new', ' ', 'FilenameFilterConfig', '(', ')', ')', ';', '\n', '        ', 'for', ' ', '(', 'final', ' ', 'File', ' ', 'file', ' ', ':', ' ', 'files', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', '!', 'file', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '                ', 'logger', '.', 'warn', '(', '""', ""Couldn't delete temp file '{}'"", '""', ',', ' ', 'file', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'logger', '.', 'debug', '(', '""', '{} temporary files removed.', '""', ',', ' ', 'files', '.', 'length', ')', ';', '\n', '    ', '}', '\n']"
master,5fc09374aeeb4708fa25cd741c13923f0a4274c3,PdfIntegrationTests.java,testPdfWithWindowStatusTimeoutParameters,"    void testPdfWithWindowStatusTimeoutParameters() {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        /*
         * Due to the absence of the `window.status` assignment on the `www.google.com` page, a timeout exception is certain to occur.
         * This simulates a scenario where the `window.status` assignment fails.
         *
         */
        pdf.addParam(new Param(""--window-status"", ""complete""));

        final PDFTimeoutException pdfTimeoutException = assertThrows(PDFTimeoutException.class, pdf::getPDF);
        assertThat(""Message should contain timeout seconds"", pdfTimeoutException.getMessage(),
                containsString(""timeout after 10 seconds""));
        assertThat(""Message should contain suggestion to increase"", pdfTimeoutException.getMessage(),
                containsString(""Try to increase the timeout via the 'PDF.setTimeout()' method.""));",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5fc09374aeeb4708fa25cd741c13923f0a4274c3,"    void testPdfWithWindowStatusTimeoutParameters() {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");

        
        pdf.addParam(new Param(""--window-status"", ""complete""));

        final PDFTimeoutException pdfTimeoutException = assertThrows(PDFTimeoutException.class, pdf::getPDF);
        assertThat(""Message should contain timeout seconds"", pdfTimeoutException.getMessage(),
                containsString(""timeout after 10 seconds""));
        assertThat(""Message should contain suggestion to increase"", pdfTimeoutException.getMessage(),
                containsString(""Try to increase the timeout via the 'PDF.setTimeout()' method.""));
","['    ', 'void', ' ', 'testPdfWithWindowStatusTimeoutParameters', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'executable', ' ', '=', ' ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'new', ' ', 'WrapperConfig', '(', 'executable', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '\n', '        ', '\n', '        ', 'pdf', '.', 'addParam', '(', 'new', ' ', 'Param', '(', '""', '--window-status', '""', ',', ' ', '""', 'complete', '""', ')', ')', ';', '\n', '\n', '        ', 'final', ' ', 'PDFTimeoutException', ' ', 'pdfTimeoutException', ' ', '=', ' ', 'assertThrows', '(', 'PDFTimeoutException', '.', 'class', ',', ' ', 'pdf', ':', ':', 'getPDF', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'Message should contain timeout seconds', '""', ',', ' ', 'pdfTimeoutException', '.', 'getMessage', '(', ')', ',', '\n', '                ', 'containsString', '(', '""', 'timeout after 10 seconds', '""', ')', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'Message should contain suggestion to increase', '""', ',', ' ', 'pdfTimeoutException', '.', 'getMessage', '(', ')', ',', '\n', '                ', 'containsString', '(', '""', ""Try to increase the timeout via the 'PDF.setTimeout()' method."", '""', ')', ')', ';', '\n']"
master,5fc09374aeeb4708fa25cd741c13923f0a4274c3,PdfIntegrationTests.java,testPdfWithShortTimeoutParameters,"    void testPdfWithShortTimeoutParameters() {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.setTimeout(0);

        final PDFTimeoutException pdfTimeoutException = assertThrows(PDFTimeoutException.class, pdf::getPDF);
        assertThat(""Message should contain timeout seconds"", pdfTimeoutException.getMessage(),
                containsString(""timeout after 0 seconds""));
        assertThat(""Message should contain suggestion to increase"", pdfTimeoutException.getMessage(),
                containsString(""Try to increase the timeout via the 'PDF.setTimeout()' method.""));",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5fc09374aeeb4708fa25cd741c13923f0a4274c3,"    void testPdfWithShortTimeoutParameters() {
        final String executable = WrapperConfig.findExecutable();
        Pdf pdf = new Pdf(new WrapperConfig(executable));
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.setTimeout(0);

        final PDFTimeoutException pdfTimeoutException = assertThrows(PDFTimeoutException.class, pdf::getPDF);
        assertThat(""Message should contain timeout seconds"", pdfTimeoutException.getMessage(),
                containsString(""timeout after 0 seconds""));
        assertThat(""Message should contain suggestion to increase"", pdfTimeoutException.getMessage(),
                containsString(""Try to increase the timeout via the 'PDF.setTimeout()' method.""));
","['    ', 'void', ' ', 'testPdfWithShortTimeoutParameters', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'executable', ' ', '=', ' ', 'WrapperConfig', '.', 'findExecutable', '(', ')', ';', '\n', '        ', 'Pdf', ' ', 'pdf', ' ', '=', ' ', 'new', ' ', 'Pdf', '(', 'new', ' ', 'WrapperConfig', '(', 'executable', ')', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'setTimeout', '(', '0', ')', ';', '\n', '\n', '        ', 'final', ' ', 'PDFTimeoutException', ' ', 'pdfTimeoutException', ' ', '=', ' ', 'assertThrows', '(', 'PDFTimeoutException', '.', 'class', ',', ' ', 'pdf', ':', ':', 'getPDF', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'Message should contain timeout seconds', '""', ',', ' ', 'pdfTimeoutException', '.', 'getMessage', '(', ')', ',', '\n', '                ', 'containsString', '(', '""', 'timeout after 0 seconds', '""', ')', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'Message should contain suggestion to increase', '""', ',', ' ', 'pdfTimeoutException', '.', 'getMessage', '(', ')', ',', '\n', '                ', 'containsString', '(', '""', ""Try to increase the timeout via the 'PDF.setTimeout()' method."", '""', ')', ')', ';', '\n']"
master,5fc09374aeeb4708fa25cd741c13923f0a4274c3,PdfTests.java,testMultipleObjects,"    void testMultipleObjects() throws IOException {
        wc.setAlwaysPutTocFirst(false);
        pdf.addCoverFromFile(""cover.html"");
        pdf.addPageFromFile(""foreword.html"");
        pdf.addToc();
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromFile(""test.html"");
        assertThat(""command should match the order objects are added"", pdf.getCommand(), containsString(""wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -""));
    }",https://www.github.com/jhonnymertz/java-wkhtmltopdf-wrapper/commit/5fc09374aeeb4708fa25cd741c13923f0a4274c3,"    void testMultipleObjects() throws IOException {
        wc.setAlwaysPutTocFirst(false);
        pdf.addCoverFromFile(""cover.html"");
        pdf.addPageFromFile(""foreword.html"");
        pdf.addToc();
        pdf.addPageFromUrl(""http://www.google.com"");
        pdf.addPageFromFile(""test.html"");
        assertThat(""command should match the order objects are added"", pdf.getCommand(), containsString(""wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -""));
    }
","['    ', 'void', ' ', 'testMultipleObjects', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'wc', '.', 'setAlwaysPutTocFirst', '(', 'false', ')', ';', '\n', '        ', 'pdf', '.', 'addCoverFromFile', '(', '""', 'cover.html', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'foreword.html', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addToc', '(', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromUrl', '(', '""', 'http://www.google.com', '""', ')', ';', '\n', '        ', 'pdf', '.', 'addPageFromFile', '(', '""', 'test.html', '""', ')', ';', '\n', '        ', 'assertThat', '(', '""', 'command should match the order objects are added', '""', ',', ' ', 'pdf', '.', 'getCommand', '(', ')', ',', ' ', 'containsString', '(', '""', 'wkhtmltopdf cover cover.html foreword.html toc http://www.google.com test.html -', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
