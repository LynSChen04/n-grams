Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,d1396a2d26495ce900c516042607c1f3031dd4c4,UI.java,init,"	public void init() {
		frame.setVisible(true);
		frame.setSize(250,250);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);
		
		panel.add(text);
		panel.add(but1);
		panel.add(but2);
		panel.add(but3);
		panel.add(but4);
		panel.add(but5);
		panel.add(but6);
		panel.add(but7);
		panel.add(but8);
		panel.add(but9);
		panel.add(but0);
		
		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
		panel.add(butEqual);
		
		panel.add(butCancel);
		
		but1.addActionListener(this);
		but2.addActionListener(this);
		but3.addActionListener(this);
		but4.addActionListener(this);
		but5.addActionListener(this);
		but6.addActionListener(this);
		but7.addActionListener(this);
		but8.addActionListener(this);
		but9.addActionListener(this);
		but0.addActionListener(this);
		
		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
		butEqual.addActionListener(this);
		
		butCancel.addActionListener(this);
",https://www.github.com/ph-7/simple-java-calculator/commit/d1396a2d26495ce900c516042607c1f3031dd4c4,"	public void init() {
		frame.setVisible(true);
		frame.setSize(250,250);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);
		
		panel.add(text);
		panel.add(but1);
		panel.add(but2);
		panel.add(but3);
		panel.add(but4);
		panel.add(but5);
		panel.add(but6);
		panel.add(but7);
		panel.add(but8);
		panel.add(but9);
		panel.add(but0);
		
		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
		panel.add(butEqual);
		
		panel.add(butCancel);
		
		but1.addActionListener(this);
		but2.addActionListener(this);
		but3.addActionListener(this);
		but4.addActionListener(this);
		but5.addActionListener(this);
		but6.addActionListener(this);
		but7.addActionListener(this);
		but8.addActionListener(this);
		but9.addActionListener(this);
		but0.addActionListener(this);
		
		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
		butEqual.addActionListener(this);
		
		butCancel.addActionListener(this);
","['\t', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '\t\t', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '\t\t', 'frame', '.', 'setSize', '(', '250', ',', '250', ')', ';', '\n', '\t\t', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '\t\t', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\t\t', '\n', '\t\t', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but1', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but2', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but3', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but4', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but5', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but6', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but7', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but8', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but9', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but0', ')', ';', '\n', '\t\t', '\n', '\t\t', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '\t\t', '\n', '\t\t', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\t\t', '\n', '\t\t', 'but1', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but2', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but3', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but4', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but5', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but6', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but7', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but8', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but9', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but0', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', '\n', '\t\t', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', '\n', '\t\t', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n']"
master,d1396a2d26495ce900c516042607c1f3031dd4c4,UI.java,actionPerformed,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		
		if(source == but1) {
			text.append(""1"");
		}
		
		if(source == but2) {
			text.append(""2"");
		}

		if(source == but3) {
			text.append(""3"");
		}
		
		if(source == but4) {
			text.append(""4"");
		}
		
		if(source == but5) {
			text.append(""5"");
		}
		
		if(source == but6) {
			text.append(""6"");
		}
		
		if(source == but7) {
			text.append(""7"");
		}
		
		if(source == but8) {
			text.append(""8"");
		}
		
		if(source == but9) {
			text.append(""9"");
		}
		
		if(source == but0) {
			text.append(""0"");
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
			
		}
		
		if(source == butCancel) {
			num1 = 0.0;",https://www.github.com/ph-7/simple-java-calculator/commit/d1396a2d26495ce900c516042607c1f3031dd4c4,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		
		if(source == but1) {
			text.append(""1"");
		}
		
		if(source == but2) {
			text.append(""2"");
		}

		if(source == but3) {
			text.append(""3"");
		}
		
		if(source == but4) {
			text.append(""4"");
		}
		
		if(source == but5) {
			text.append(""5"");
		}
		
		if(source == but6) {
			text.append(""6"");
		}
		
		if(source == but7) {
			text.append(""7"");
		}
		
		if(source == but8) {
			text.append(""8"");
		}
		
		if(source == but9) {
			text.append(""9"");
		}
		
		if(source == but0) {
			text.append(""0"");
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
			
		}
		
		if(source == butCancel) {
			num1 = 0.0;
","['\t', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '\t\t', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but1', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '1', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but2', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '2', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but3', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '3', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but4', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '4', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but5', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '5', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but6', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '6', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but7', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '7', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but8', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '8', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but9', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '9', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but0', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '0', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '1', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '\t\t\t', 'num2', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'add', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '+', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'minus', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '-', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'multiply', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '*', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'divide', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '/', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', '0.0', ';', '\n']"
master,d1396a2d26495ce900c516042607c1f3031dd4c4,UI.java,reader,"	public double reader() {
		Double num;
		String str;
		str = text.getText();
		num = Double.valueOf(str);
		
		return num;	
	}",https://www.github.com/ph-7/simple-java-calculator/commit/d1396a2d26495ce900c516042607c1f3031dd4c4,"	public double reader() {
		Double num;
		String str;
		str = text.getText();
		num = Double.valueOf(str);
		
		return num;	
	}
","['\t', 'public', ' ', 'double', ' ', 'reader', '(', ')', ' ', '{', '\n', '\t\t', 'Double', ' ', 'num', ';', '\n', '\t\t', 'String', ' ', 'str', ';', '\n', '\t\t', 'str', ' ', '=', ' ', 'text', '.', 'getText', '(', ')', ';', '\n', '\t\t', 'num', ' ', '=', ' ', 'Double', '.', 'valueOf', '(', 'str', ')', ';', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'num', ';', '\t', '\n', '\t', '}', '\n']"
master,c8e66cc14a964859acdbc155eea74d548de13fe7,UI.java,init,"	public void init() {
		frame.setVisible(true);
		frame.setSize(350,280);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);
		
		panel.add(text);
		panel.add(but1);
		panel.add(but2);
		panel.add(but3);
		panel.add(but4);
		panel.add(but5);
		panel.add(but6);
		panel.add(but7);
		panel.add(but8);
		panel.add(but9);
		panel.add(but0);
		
		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
                panel.add(butSquare);
                panel.add(butSquareRoot);
                panel.add(butOneDevidedBy);
                panel.add(butCos);
                panel.add(butSin);
                panel.add(butTan);
		
                panel.add(butEqual);
		panel.add(butCancel);
		
		but1.addActionListener(this);
		but2.addActionListener(this);
		but3.addActionListener(this);
		but4.addActionListener(this);
		but5.addActionListener(this);
		but6.addActionListener(this);
		but7.addActionListener(this);
		but8.addActionListener(this);
		but9.addActionListener(this);
		but0.addActionListener(this);
		
		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
                butSquare.addActionListener(this);
                butSquareRoot.addActionListener(this);
                butOneDevidedBy.addActionListener(this);
                butCos.addActionListener(this);
                butSin.addActionListener(this);
                butTan.addActionListener(this);
		
		butEqual.addActionListener(this);
		butCancel.addActionListener(this);
",https://www.github.com/ph-7/simple-java-calculator/commit/c8e66cc14a964859acdbc155eea74d548de13fe7,"	public void init() {
		frame.setVisible(true);
		frame.setSize(350,280);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);
		
		panel.add(text);
		panel.add(but1);
		panel.add(but2);
		panel.add(but3);
		panel.add(but4);
		panel.add(but5);
		panel.add(but6);
		panel.add(but7);
		panel.add(but8);
		panel.add(but9);
		panel.add(but0);
		
		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
                panel.add(butSquare);
                panel.add(butSquareRoot);
                panel.add(butOneDevidedBy);
                panel.add(butCos);
                panel.add(butSin);
                panel.add(butTan);
		
                panel.add(butEqual);
		panel.add(butCancel);
		
		but1.addActionListener(this);
		but2.addActionListener(this);
		but3.addActionListener(this);
		but4.addActionListener(this);
		but5.addActionListener(this);
		but6.addActionListener(this);
		but7.addActionListener(this);
		but8.addActionListener(this);
		but9.addActionListener(this);
		but0.addActionListener(this);
		
		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
                butSquare.addActionListener(this);
                butSquareRoot.addActionListener(this);
                butOneDevidedBy.addActionListener(this);
                butCos.addActionListener(this);
                butSin.addActionListener(this);
                butTan.addActionListener(this);
		
		butEqual.addActionListener(this);
		butCancel.addActionListener(this);
","['\t', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '\t\t', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '\t\t', 'frame', '.', 'setSize', '(', '350', ',', '280', ')', ';', '\n', '\t\t', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '\t\t', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\t\t', '\n', '\t\t', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but1', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but2', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but3', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but4', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but5', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but6', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but7', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but8', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but9', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'but0', ')', ';', '\n', '\t\t', '\n', '\t\t', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '                ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '                ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '                ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '                ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '                ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '                ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '\t\t', '\n', '                ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\t\t', '\n', '\t\t', 'but1', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but2', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but3', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but4', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but5', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but6', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but7', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but8', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but9', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'but0', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', '\n', '\t\t', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '                ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '                ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '                ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '                ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '                ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '                ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', '\n', '\t\t', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n']"
master,c8e66cc14a964859acdbc155eea74d548de13fe7,UI.java,actionPerformed,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		
		if(source == but1) {
			text.append(""1"");
		}
		
		if(source == but2) {
			text.append(""2"");
		}

		if(source == but3) {
			text.append(""3"");
		}
		
		if(source == but4) {
			text.append(""4"");
		}
		
		if(source == but5) {
			text.append(""5"");
		}
		
		if(source == but6) {
			text.append(""6"");
		}
		
		if(source == but7) {
			text.append(""7"");
		}
		
		if(source == but8) {
			text.append(""8"");
		}
		
		if(source == but9) {
			text.append(""9"");
		}
		
		if(source == but0) {
			text.append(""0"");
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}
                
                if(source == butSquare) {
			num1 = reader();
                        result = num1*num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butSquareRoot) {
			num1 = reader();
                        result = Math.sqrt(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butOneDevidedBy) {
			num1 = reader();
                        result = 1/num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butCos) {
			num1 = reader();
                        result = Math.cos(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butSin) {
			num1 = reader();
                        result = Math.sin(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butTan) {
			num1 = reader();
                        result = Math.tan(num1);
			text.setText(Double.toString(result));
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
			
		}
		
		if(source == butCancel) {
			num1 = 0.0;",https://www.github.com/ph-7/simple-java-calculator/commit/c8e66cc14a964859acdbc155eea74d548de13fe7,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		
		if(source == but1) {
			text.append(""1"");
		}
		
		if(source == but2) {
			text.append(""2"");
		}

		if(source == but3) {
			text.append(""3"");
		}
		
		if(source == but4) {
			text.append(""4"");
		}
		
		if(source == but5) {
			text.append(""5"");
		}
		
		if(source == but6) {
			text.append(""6"");
		}
		
		if(source == but7) {
			text.append(""7"");
		}
		
		if(source == but8) {
			text.append(""8"");
		}
		
		if(source == but9) {
			text.append(""9"");
		}
		
		if(source == but0) {
			text.append(""0"");
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}
                
                if(source == butSquare) {
			num1 = reader();
                        result = num1*num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butSquareRoot) {
			num1 = reader();
                        result = Math.sqrt(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butOneDevidedBy) {
			num1 = reader();
                        result = 1/num1;
			text.setText(Double.toString(result));
		}
                
                if(source == butCos) {
			num1 = reader();
                        result = Math.cos(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butSin) {
			num1 = reader();
                        result = Math.sin(num1);
			text.setText(Double.toString(result));
		}
                
                if(source == butTan) {
			num1 = reader();
                        result = Math.tan(num1);
			text.setText(Double.toString(result));
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
			
		}
		
		if(source == butCancel) {
			num1 = 0.0;
","['\t', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '\t\t', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but1', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '1', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but2', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '2', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but3', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '3', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but4', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '4', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but5', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '5', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but6', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '6', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but7', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '7', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but8', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '8', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but9', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '9', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but0', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'append', '(', '""', '0', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '1', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'num1', '*', 'num1', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'sqrt', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', '1', '/', 'num1', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'cos', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'sin', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '                ', '\n', '                ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '                        ', 'result', ' ', '=', ' ', 'Math', '.', 'tan', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '\t\t\t', 'num2', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'add', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '+', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'minus', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '-', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'multiply', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '*', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'divide', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '/', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', '0.0', ';', '\n']"
master,ce40e4428518589850aa0f8555a85064c836588a,UI.java,init,"	public void init() {
		frame.setVisible(true);
		frame.setSize(350,280);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);
		
		panel.add(text);
		for(int i = 0; i < 10; i++) {
			panel.add(but[i]);
			but[i].addActionListener(this);
		}

		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
		panel.add(butSquare);
		panel.add(butSquareRoot);
		panel.add(butOneDevidedBy);
		panel.add(butCos);
		panel.add(butSin);
		panel.add(butTan);

		panel.add(butEqual);
		panel.add(butCancel);
		
		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
		butSquare.addActionListener(this);
		butSquareRoot.addActionListener(this);
		butOneDevidedBy.addActionListener(this);
		butCos.addActionListener(this);
		butSin.addActionListener(this);
		butTan.addActionListener(this);
		
		butEqual.addActionListener(this);
		butCancel.addActionListener(this);
	}",https://www.github.com/ph-7/simple-java-calculator/commit/ce40e4428518589850aa0f8555a85064c836588a,"	public void init() {
		frame.setVisible(true);
		frame.setSize(350,280);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);
		
		panel.add(text);
		for(int i = 0; i < 10; i++) {
			panel.add(but[i]);
			but[i].addActionListener(this);
		}

		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
		panel.add(butSquare);
		panel.add(butSquareRoot);
		panel.add(butOneDevidedBy);
		panel.add(butCos);
		panel.add(butSin);
		panel.add(butTan);

		panel.add(butEqual);
		panel.add(butCancel);
		
		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
		butSquare.addActionListener(this);
		butSquareRoot.addActionListener(this);
		butOneDevidedBy.addActionListener(this);
		butCos.addActionListener(this);
		butSin.addActionListener(this);
		butTan.addActionListener(this);
		
		butEqual.addActionListener(this);
		butCancel.addActionListener(this);
	}
","['\t', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '\t\t', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '\t\t', 'frame', '.', 'setSize', '(', '350', ',', '280', ')', ';', '\n', '\t\t', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '\t\t', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\t\t', '\n', '\t\t', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '\t\t', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\t\t\t', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '\t\t\t', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '\n', '\t\t', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\t\t', '\n', '\t\t', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', '\n', '\t\t', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t', '}', '\n']"
master,ce40e4428518589850aa0f8555a85064c836588a,UI.java,actionPerformed,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();

		for(int i = 0; i < 10; i++) {
			if(source == but[i]) {
				text.append(buttonValue[i]);								
			}
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}

		if(source == butSquare) {
			num1 = reader();
			result = num1*num1;
			text.setText(Double.toString(result));
		}

		if(source == butSquareRoot) {
			num1 = reader();
			result = Math.sqrt(num1);
			text.setText(Double.toString(result));
		}

		if(source == butOneDevidedBy) {
			num1 = reader();
			result = 1/num1;
			text.setText(Double.toString(result));
		}

		if(source == butCos) {
			num1 = reader();
			result = Math.cos(num1);
			text.setText(Double.toString(result));
		}

		if(source == butSin) {
			num1 = reader();
			result = Math.sin(num1);
			text.setText(Double.toString(result));
		}

		if(source == butTan) {
			num1 = reader();
			result = Math.tan(num1);
			text.setText(Double.toString(result));
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
		}
		
		if(source == butCancel) {
			num1 = 0.0;",https://www.github.com/ph-7/simple-java-calculator/commit/ce40e4428518589850aa0f8555a85064c836588a,"	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();

		for(int i = 0; i < 10; i++) {
			if(source == but[i]) {
				text.append(buttonValue[i]);								
			}
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butAdd) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMinus) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 1;
			multiply = 0;
			divide = 0;
		}
		
		if(source == butMultiply) {
			num1 = reader();
			text.setText("""");
			add = 0;
			minus = 0;
			multiply = 1;
			divide = 0;
		}
		
		if(source == butDivide) {
			num1 = reader();
			text.setText("""");
			add = 1;
			minus = 0;
			multiply = 0;
			divide = 1;
		}

		if(source == butSquare) {
			num1 = reader();
			result = num1*num1;
			text.setText(Double.toString(result));
		}

		if(source == butSquareRoot) {
			num1 = reader();
			result = Math.sqrt(num1);
			text.setText(Double.toString(result));
		}

		if(source == butOneDevidedBy) {
			num1 = reader();
			result = 1/num1;
			text.setText(Double.toString(result));
		}

		if(source == butCos) {
			num1 = reader();
			result = Math.cos(num1);
			text.setText(Double.toString(result));
		}

		if(source == butSin) {
			num1 = reader();
			result = Math.sin(num1);
			text.setText(Double.toString(result));
		}

		if(source == butTan) {
			num1 = reader();
			result = Math.tan(num1);
			text.setText(Double.toString(result));
		}
		
		if(source == butEqual) {
			num2 = reader();
			
			if(add > 0) {
				result = num1+num2;
				text.setText(Double.toString(result));
			}
			
			if(minus > 0) {
				result = num1-num2;
				text.setText(Double.toString(result));
			}
			
			if(multiply > 0) {
				result = num1*num2;
				text.setText(Double.toString(result));
			}
			
			if(divide > 0) {
				result = num1/num2;
				text.setText(Double.toString(result));
			}
		}
		
		if(source == butCancel) {
			num1 = 0.0;
","['\t', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '\t\t', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '\t\t', 'for', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\t\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '\t\t\t\t', 'text', '.', 'append', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\t\t\t\t\t\t\t\t', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '0', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t\t', 'add', ' ', '=', ' ', '1', ';', '\n', '\t\t\t', 'minus', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'multiply', ' ', '=', ' ', '0', ';', '\n', '\t\t\t', 'divide', ' ', '=', ' ', '1', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'result', ' ', '=', ' ', 'num1', '*', 'num1', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'result', ' ', '=', ' ', 'Math', '.', 'sqrt', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'result', ' ', '=', ' ', '1', '/', 'num1', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'result', ' ', '=', ' ', 'Math', '.', 'cos', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'result', ' ', '=', ' ', 'Math', '.', 'sin', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', 'result', ' ', '=', ' ', 'Math', '.', 'tan', '(', 'num1', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '\t\t\t', 'num2', ' ', '=', ' ', 'reader', '(', ')', ';', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'add', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '+', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'minus', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '-', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'multiply', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '*', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '\n', '\t\t\t', 'if', '(', 'divide', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t\t', 'result', ' ', '=', ' ', 'num1', '/', 'num2', ';', '\n', '\t\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'result', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'if', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '\t\t\t', 'num1', ' ', '=', ' ', '0.0', ';', '\n']"
master,60b028d315655524150b9317ce99a6d02fb817f8,Calculator.java,calculateMono,"	public Double calculateMono(MonoOperatorModes newMode, Double num) {
		if (newMode == Calculator.MonoOperatorModes.square) {
			return num * num;
		}
		if (newMode == Calculator.MonoOperatorModes.squareRoot) {
			return Math.sqrt(num);
		}
		if (newMode == Calculator.MonoOperatorModes.oneDevidedBy) {
			return 1 / num;
		}
		if (newMode == Calculator.MonoOperatorModes.cos) {
			return Math.cos(num);
		}
		if (newMode == Calculator.MonoOperatorModes.sin) {
			return Math.sin(num);
		}
		if (newMode == Calculator.MonoOperatorModes.tan) {
			return Math.tan(num);
		}

		// never reach
		throw new Error();
	}",https://www.github.com/ph-7/simple-java-calculator/commit/60b028d315655524150b9317ce99a6d02fb817f8,"	public Double calculateMono(MonoOperatorModes newMode, Double num) {
		if (newMode == Calculator.MonoOperatorModes.square) {
			return num * num;
		}
		if (newMode == Calculator.MonoOperatorModes.squareRoot) {
			return Math.sqrt(num);
		}
		if (newMode == Calculator.MonoOperatorModes.oneDevidedBy) {
			return 1 / num;
		}
		if (newMode == Calculator.MonoOperatorModes.cos) {
			return Math.cos(num);
		}
		if (newMode == Calculator.MonoOperatorModes.sin) {
			return Math.sin(num);
		}
		if (newMode == Calculator.MonoOperatorModes.tan) {
			return Math.tan(num);
		}

		
		throw new Error();
	}
","['\t', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '\t', '}', '\n']"
master,60b028d315655524150b9317ce99a6d02fb817f8,Calculator.java,calculateBi,"	public Double calculateBi(Double num) {
		if (mode == Calculator.BiOperatorModes.normal) {
			return num;
		}
		if (mode == Calculator.BiOperatorModes.add) {
			return num1 + num;
		}
		if (mode == Calculator.BiOperatorModes.minus) {
			return num1 - num;
		}
		if (mode == Calculator.BiOperatorModes.multiply) {
			return num1 * num;
		}
		if (mode == Calculator.BiOperatorModes.divide) {
			return num1 / num;
		}

		// never reach
		throw new Error();
	}",https://www.github.com/ph-7/simple-java-calculator/commit/60b028d315655524150b9317ce99a6d02fb817f8,"	public Double calculateBi(Double num) {
		if (mode == Calculator.BiOperatorModes.normal) {
			return num;
		}
		if (mode == Calculator.BiOperatorModes.add) {
			return num1 + num;
		}
		if (mode == Calculator.BiOperatorModes.minus) {
			return num1 - num;
		}
		if (mode == Calculator.BiOperatorModes.multiply) {
			return num1 * num;
		}
		if (mode == Calculator.BiOperatorModes.divide) {
			return num1 / num;
		}

		
		throw new Error();
	}
","['\t', 'public', ' ', 'Double', ' ', 'calculateBi', '(', 'Double', ' ', 'num', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '+', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '-', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '*', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '/', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '\t', '}', '\n']"
master,60b028d315655524150b9317ce99a6d02fb817f8,UI.java,init,"	public void init() {
		frame.setVisible(true);
		frame.setSize(350, 280);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);

		panel.add(text);
		for (int i = 0; i < 10; i++) {
			panel.add(but[i]);
			but[i].addActionListener(this);
		}

		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
		panel.add(butSquare);
		panel.add(butSquareRoot);
		panel.add(butOneDevidedBy);
		panel.add(butCos);
		panel.add(butSin);
		panel.add(butTan);

		panel.add(butEqual);
		panel.add(butCancel);

		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
		butSquare.addActionListener(this);
		butSquareRoot.addActionListener(this);
		butOneDevidedBy.addActionListener(this);
		butCos.addActionListener(this);
		butSin.addActionListener(this);
		butTan.addActionListener(this);

		butEqual.addActionListener(this);
		butCancel.addActionListener(this);
	}",https://www.github.com/ph-7/simple-java-calculator/commit/60b028d315655524150b9317ce99a6d02fb817f8,"	public void init() {
		frame.setVisible(true);
		frame.setSize(350, 280);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(panel);

		panel.add(text);
		for (int i = 0; i < 10; i++) {
			panel.add(but[i]);
			but[i].addActionListener(this);
		}

		panel.add(butAdd);
		panel.add(butMinus);
		panel.add(butMultiply);
		panel.add(butDivide);
		panel.add(butSquare);
		panel.add(butSquareRoot);
		panel.add(butOneDevidedBy);
		panel.add(butCos);
		panel.add(butSin);
		panel.add(butTan);

		panel.add(butEqual);
		panel.add(butCancel);

		butAdd.addActionListener(this);
		butMinus.addActionListener(this);
		butMultiply.addActionListener(this);
		butDivide.addActionListener(this);
		butSquare.addActionListener(this);
		butSquareRoot.addActionListener(this);
		butOneDevidedBy.addActionListener(this);
		butCos.addActionListener(this);
		butSin.addActionListener(this);
		butTan.addActionListener(this);

		butEqual.addActionListener(this);
		butCancel.addActionListener(this);
	}
","['\t', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '\t\t', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '\t\t', 'frame', '.', 'setSize', '(', '350', ',', ' ', '280', ')', ';', '\n', '\t\t', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '\t\t', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '\t\t', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\t\t\t', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '\t\t\t', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '\n', '\t\t', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '\t\t', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '\t\t', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '\t\t', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t\t', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\t', '}', '\n']"
master,60b028d315655524150b9317ce99a6d02fb817f8,UI.java,actionPerformed,"	public void actionPerformed(ActionEvent e) {
		final Object source = e.getSource();

		for (int i = 0; i < 10; i++) {
			if (source == but[i]) {
				text.append(buttonValue[i]);
			}
		}

		if (source == butAdd) {
			calc.setValue(Calculator.BiOperatorModes.add, reader());
			text.setText("""");
		}

		if (source == butMinus) {
			calc.setValue(Calculator.BiOperatorModes.minus, reader());
			text.setText("""");
		}

		if (source == butMultiply) {
			calc.setValue(Calculator.BiOperatorModes.multiply, reader());
			text.setText("""");
		}

		if (source == butDivide) {
			calc.setValue(Calculator.BiOperatorModes.divide, reader());
			text.setText("""");
		}

		if (source == butSquare) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.square, reader())));
		}

		if (source == butSquareRoot) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.squareRoot, reader())));
		}

		if (source == butOneDevidedBy) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.oneDevidedBy, reader())));
		}

		if (source == butCos) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.cos, reader())));
		}

		if (source == butSin) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.sin, reader())));
		}

		if (source == butTan) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.tan, reader())));
		}

		if (source == butEqual) {
			text.setText(Double.toString(calc.calculateBi(reader())));
		}

		if (source == butCancel) {
			calc.setValue(Calculator.BiOperatorModes.normal, 0.0); // reset",https://www.github.com/ph-7/simple-java-calculator/commit/60b028d315655524150b9317ce99a6d02fb817f8,"	public void actionPerformed(ActionEvent e) {
		final Object source = e.getSource();

		for (int i = 0; i < 10; i++) {
			if (source == but[i]) {
				text.append(buttonValue[i]);
			}
		}

		if (source == butAdd) {
			calc.setValue(Calculator.BiOperatorModes.add, reader());
			text.setText("""");
		}

		if (source == butMinus) {
			calc.setValue(Calculator.BiOperatorModes.minus, reader());
			text.setText("""");
		}

		if (source == butMultiply) {
			calc.setValue(Calculator.BiOperatorModes.multiply, reader());
			text.setText("""");
		}

		if (source == butDivide) {
			calc.setValue(Calculator.BiOperatorModes.divide, reader());
			text.setText("""");
		}

		if (source == butSquare) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.square, reader())));
		}

		if (source == butSquareRoot) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.squareRoot, reader())));
		}

		if (source == butOneDevidedBy) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.oneDevidedBy, reader())));
		}

		if (source == butCos) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.cos, reader())));
		}

		if (source == butSin) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.sin, reader())));
		}

		if (source == butTan) {
			text.setText(Double.toString(calc.calculateMono(
					Calculator.MonoOperatorModes.tan, reader())));
		}

		if (source == butEqual) {
			text.setText(Double.toString(calc.calculateBi(reader())));
		}

		if (source == butCancel) {
			calc.setValue(Calculator.BiOperatorModes.normal, 0.0); 
","['\t', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '\t\t', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '\t\t\t\t', 'text', '.', 'append', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'calc', '.', 'setValue', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '\t\t\t', 'calc', '.', 'setValue', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '\t\t\t', 'calc', '.', 'setValue', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', ' ', 'reader', '(', ')', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '\t\t\t', 'calc', '.', 'setValue', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ';', '\n', '\t\t\t', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'calc', '.', 'calculateMono', '(', '\n', '\t\t\t\t\t', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', ' ', 'reader', '(', ')', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'calc', '.', 'calculateMono', '(', '\n', '\t\t\t\t\t', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', ' ', 'reader', '(', ')', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'calc', '.', 'calculateMono', '(', '\n', '\t\t\t\t\t', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'calc', '.', 'calculateMono', '(', '\n', '\t\t\t\t\t', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', ' ', 'reader', '(', ')', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'calc', '.', 'calculateMono', '(', '\n', '\t\t\t\t\t', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', ' ', 'reader', '(', ')', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'calc', '.', 'calculateMono', '(', '\n', '\t\t\t\t\t', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', ' ', 'reader', '(', ')', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '\t\t\t', 'text', '.', 'setText', '(', 'Double', '.', 'toString', '(', 'calc', '.', 'calculateBi', '(', 'reader', '(', ')', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '\t\t\t', 'calc', '.', 'setValue', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ',', ' ', '0.0', ')', ';', ' ', '\n']"
master,60b028d315655524150b9317ce99a6d02fb817f8,UI.java,reader,"	public double reader() {
		Double num;
		String str;
		str = text.getText();
		num = Double.valueOf(str);

		return num;
	}",https://www.github.com/ph-7/simple-java-calculator/commit/60b028d315655524150b9317ce99a6d02fb817f8,"	public double reader() {
		Double num;
		String str;
		str = text.getText();
		num = Double.valueOf(str);

		return num;
	}
","['\t', 'public', ' ', 'double', ' ', 'reader', '(', ')', ' ', '{', '\n', '\t\t', 'Double', ' ', 'num', ';', '\n', '\t\t', 'String', ' ', 'str', ';', '\n', '\t\t', 'str', ' ', '=', ' ', 'text', '.', 'getText', '(', ')', ';', '\n', '\t\t', 'num', ' ', '=', ' ', 'Double', '.', 'valueOf', '(', 'str', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'num', ';', '\n', '\t', '}', '\n']"
master,aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,Calculator.java,calculateBiImpl,"	private Double calculateBiImpl() {
		if (mode == BiOperatorModes.normal) {
			return num2;
		}
		if (mode == BiOperatorModes.add) {
			return num1 + num2;
		}
		if (mode == BiOperatorModes.minus) {
			return num1 - num2;
		}
		if (mode == BiOperatorModes.multiply) {
			return num1 * num2;
		}
		if (mode == BiOperatorModes.divide) {
			return num1 / num2;
		}

		// never reach
		throw new Error();
	}",https://www.github.com/ph-7/simple-java-calculator/commit/aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,"	private Double calculateBiImpl() {
		if (mode == BiOperatorModes.normal) {
			return num2;
		}
		if (mode == BiOperatorModes.add) {
			return num1 + num2;
		}
		if (mode == BiOperatorModes.minus) {
			return num1 - num2;
		}
		if (mode == BiOperatorModes.multiply) {
			return num1 * num2;
		}
		if (mode == BiOperatorModes.divide) {
			return num1 / num2;
		}

		
		throw new Error();
	}
","['\t', 'private', ' ', 'Double', ' ', 'calculateBiImpl', '(', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num2', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'add', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '+', ' ', 'num2', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'minus', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '-', ' ', 'num2', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'multiply', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '*', ' ', 'num2', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'divide', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num1', ' ', '/', ' ', 'num2', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '\t', '}', '\n']"
master,aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,Calculator.java,calculateBi,"	public Double calculateBi(BiOperatorModes newMode, Double num) {
		if (mode == BiOperatorModes.normal) {
			num2 = 0.0;",https://www.github.com/ph-7/simple-java-calculator/commit/aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,"	public Double calculateBi(BiOperatorModes newMode, Double num) {
		if (mode == BiOperatorModes.normal) {
			num2 = 0.0;
","['\t', 'public', ' ', 'Double', ' ', 'calculateBi', '(', 'BiOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '\t\t\t', 'num2', ' ', '=', ' ', '0.0', ';', '\n']"
master,aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,Calculator.java,calculateEqual,"	public Double calculateEqual(Double num) {
		return calculateBi(BiOperatorModes.normal, num);
	}",https://www.github.com/ph-7/simple-java-calculator/commit/aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,"	public Double calculateEqual(Double num) {
		return calculateBi(BiOperatorModes.normal, num);
	}
","['\t', 'public', ' ', 'Double', ' ', 'calculateEqual', '(', 'Double', ' ', 'num', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'calculateBi', '(', 'BiOperatorModes', '.', 'normal', ',', ' ', 'num', ')', ';', '\n', '\t', '}', '\n']"
master,aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,Calculator.java,reset,"	public Double reset() {
		num2 = 0.0;
		num1 = 0.0;
		mode = BiOperatorModes.normal;

		return Double.NaN;
	}",https://www.github.com/ph-7/simple-java-calculator/commit/aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,"	public Double reset() {
		num2 = 0.0;
		num1 = 0.0;
		mode = BiOperatorModes.normal;

		return Double.NaN;
	}
","['\t', 'public', ' ', 'Double', ' ', 'reset', '(', ')', ' ', '{', '\n', '\t\t', 'num2', ' ', '=', ' ', '0.0', ';', '\n', '\t\t', 'num1', ' ', '=', ' ', '0.0', ';', '\n', '\t\t', 'mode', ' ', '=', ' ', 'BiOperatorModes', '.', 'normal', ';', '\n', '\n', '\t\t', 'return', ' ', 'Double', '.', 'NaN', ';', '\n', '\t', '}', '\n']"
master,aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,Calculator.java,calculateMono,"	public Double calculateMono(MonoOperatorModes newMode, Double num) {
		if (newMode == MonoOperatorModes.square) {
			return num * num;
		}
		if (newMode == MonoOperatorModes.squareRoot) {
			return Math.sqrt(num);
		}
		if (newMode == MonoOperatorModes.oneDevidedBy) {
			return 1 / num;
		}
		if (newMode == MonoOperatorModes.cos) {
			return Math.cos(num);
		}
		if (newMode == MonoOperatorModes.sin) {
			return Math.sin(num);
		}
		if (newMode == MonoOperatorModes.tan) {
			return Math.tan(num);
		}

		// never reach
		throw new Error();
	}",https://www.github.com/ph-7/simple-java-calculator/commit/aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,"	public Double calculateMono(MonoOperatorModes newMode, Double num) {
		if (newMode == MonoOperatorModes.square) {
			return num * num;
		}
		if (newMode == MonoOperatorModes.squareRoot) {
			return Math.sqrt(num);
		}
		if (newMode == MonoOperatorModes.oneDevidedBy) {
			return 1 / num;
		}
		if (newMode == MonoOperatorModes.cos) {
			return Math.cos(num);
		}
		if (newMode == MonoOperatorModes.sin) {
			return Math.sin(num);
		}
		if (newMode == MonoOperatorModes.tan) {
			return Math.tan(num);
		}

		
		throw new Error();
	}
","['\t', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '\t', '}', '\n']"
master,aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,UI.java,actionPerformed,"	public void actionPerformed(ActionEvent e) {
		final Object source = e.getSource();

		for (int i = 0; i < 10; i++) {
			if (source == but[i]) {
				text.replaceSelection(buttonValue[i]);
				return;
			}
		}

		if (source == butAdd) {
			writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
		}

		if (source == butMinus) {
			writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
		}

		if (source == butMultiply) {
			writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
					reader()));
		}

		if (source == butDivide) {
			writer(calc
					.calculateBi(Calculator.BiOperatorModes.divide, reader()));
		}

		if (source == butSquare) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
					reader()));
		}

		if (source == butSquareRoot) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
					reader()));
		}

		if (source == butOneDevidedBy) {
			writer(calc.calculateMono(
					Calculator.MonoOperatorModes.oneDevidedBy, reader()));
		}

		if (source == butCos) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
					reader()));
		}

		if (source == butSin) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
					reader()));
		}

		if (source == butTan) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
					reader()));
		}

		if (source == butEqual) {
			writer(calc.calculateEqual(reader()));
		}

		if (source == butCancel) {
			writer(calc.reset());
		}

		text.selectAll();
	}",https://www.github.com/ph-7/simple-java-calculator/commit/aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,"	public void actionPerformed(ActionEvent e) {
		final Object source = e.getSource();

		for (int i = 0; i < 10; i++) {
			if (source == but[i]) {
				text.replaceSelection(buttonValue[i]);
				return;
			}
		}

		if (source == butAdd) {
			writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
		}

		if (source == butMinus) {
			writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
		}

		if (source == butMultiply) {
			writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
					reader()));
		}

		if (source == butDivide) {
			writer(calc
					.calculateBi(Calculator.BiOperatorModes.divide, reader()));
		}

		if (source == butSquare) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
					reader()));
		}

		if (source == butSquareRoot) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
					reader()));
		}

		if (source == butOneDevidedBy) {
			writer(calc.calculateMono(
					Calculator.MonoOperatorModes.oneDevidedBy, reader()));
		}

		if (source == butCos) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
					reader()));
		}

		if (source == butSin) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
					reader()));
		}

		if (source == butTan) {
			writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
					reader()));
		}

		if (source == butEqual) {
			writer(calc.calculateEqual(reader()));
		}

		if (source == butCancel) {
			writer(calc.reset());
		}

		text.selectAll();
	}
","['\t', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '\t\t', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '\t\t\t\t', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '\t\t\t\t\t', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '\n', '\t\t\t\t\t', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '\t\t\t\t\t', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '\t\t\t\t\t', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '\t\t\t\t\t', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '\t\t\t\t\t', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '\t\t\t\t\t', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '\t\t\t\t\t', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '\t\t\t', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'text', '.', 'selectAll', '(', ')', ';', '\n', '\t', '}', '\n']"
master,aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,UI.java,reader,"	public Double reader() {
		Double num;
		String str;
		str = text.getText();
		num = Double.valueOf(str);

		return num;
	}",https://www.github.com/ph-7/simple-java-calculator/commit/aa98ce9309e44bc2c26f9c4e3a22a7fbd9af3727,"	public Double reader() {
		Double num;
		String str;
		str = text.getText();
		num = Double.valueOf(str);

		return num;
	}
","['\t', 'public', ' ', 'Double', ' ', 'reader', '(', ')', ' ', '{', '\n', '\t\t', 'Double', ' ', 'num', ';', '\n', '\t\t', 'String', ' ', 'str', ';', '\n', '\t\t', 'str', ' ', '=', ' ', 'text', '.', 'getText', '(', ')', ';', '\n', '\t\t', 'num', ' ', '=', ' ', 'Double', '.', 'valueOf', '(', 'str', ')', ';', '\n', '\n', '\t\t', 'return', ' ', 'num', ';', '\n', '\t', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,Calculator.java,calculateBiImpl,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            return num1 + num2;
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            return num1 + num2;
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }

        
        throw new Error();
    }
","['    ', 'private', ' ', 'Double', ' ', 'calculateBiImpl', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'add', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '+', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'minus', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '-', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'multiply', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '*', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'divide', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '/', ' ', 'num2', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,Calculator.java,calculateBi,"    public Double calculateBi(BiOperatorModes newMode, Double num) {
        if (mode == BiOperatorModes.normal) {
            num2 = 0.0;",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public Double calculateBi(BiOperatorModes newMode, Double num) {
        if (mode == BiOperatorModes.normal) {
            num2 = 0.0;
","['    ', 'public', ' ', 'Double', ' ', 'calculateBi', '(', 'BiOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '            ', 'num2', ' ', '=', ' ', '0.0', ';', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,Calculator.java,calculateEqual,"    public Double calculateEqual(Double num) {
        return calculateBi(BiOperatorModes.normal, num);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public Double calculateEqual(Double num) {
        return calculateBi(BiOperatorModes.normal, num);
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateEqual', '(', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'return', ' ', 'calculateBi', '(', 'BiOperatorModes', '.', 'normal', ',', ' ', 'num', ')', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,Calculator.java,reset,"    public Double reset() {
        num2 = 0.0;
        num1 = 0.0;
        mode = BiOperatorModes.normal;

        return Double.NaN;
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public Double reset() {
        num2 = 0.0;
        num1 = 0.0;
        mode = BiOperatorModes.normal;

        return Double.NaN;
    }
","['    ', 'public', ' ', 'Double', ' ', 'reset', '(', ')', ' ', '{', '\n', '        ', 'num2', ' ', '=', ' ', '0.0', ';', '\n', '        ', 'num1', ' ', '=', ' ', '0.0', ';', '\n', '        ', 'mode', ' ', '=', ' ', 'BiOperatorModes', '.', 'normal', ';', '\n', '\n', '        ', 'return', ' ', 'Double', '.', 'NaN', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }

        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,SimpleJavaCalculator.java,main,"    public static void main(String[] args) {
        UI uiCal = new UI();
        uiCal.init();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public static void main(String[] args) {
        UI uiCal = new UI();
        uiCal.init();
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'UI', ' ', 'uiCal', ' ', '=', ' ', 'new', ' ', 'UI', '(', ')', ';', '\n', '        ', 'uiCal', '.', 'init', '(', ')', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(350, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
        for (int i = 0; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public void init() {
        frame.setVisible(true);
        frame.setSize(350, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
        for (int i = 0; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '350', ',', ' ', '280', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,UI.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                    reader()));
        }

        if (source == butDivide) {
            writer(calc
                    .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                    reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                    reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                    reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                    reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                    reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                    reader()));
        }

        if (source == butDivide) {
            writer(calc
                    .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                    reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                    reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                    reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                    reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                    reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '                ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                    ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                    ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,UI.java,reader,"    public Double reader() {
        Double num;
        String str;
        str = text.getText();
        num = Double.valueOf(str);

        return num;
    }",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public Double reader() {
        Double num;
        String str;
        str = text.getText();
        num = Double.valueOf(str);

        return num;
    }
","['    ', 'public', ' ', 'Double', ' ', 'reader', '(', ')', ' ', '{', '\n', '        ', 'Double', ' ', 'num', ';', '\n', '        ', 'String', ' ', 'str', ';', '\n', '        ', 'str', ' ', '=', ' ', 'text', '.', 'getText', '(', ')', ';', '\n', '        ', 'num', ' ', '=', ' ', 'Double', '.', 'valueOf', '(', 'str', ')', ';', '\n', '\n', '        ', 'return', ' ', 'num', ';', '\n', '    ', '}', '\n']"
master,ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,UI.java,writer,"    public void writer(final Double num) {
        if (Double.isNaN(num)) {
            text.setText("""");",https://www.github.com/ph-7/simple-java-calculator/commit/ed0fc7c381b4bffbfd474b0c0a34538ba62434e1,"    public void writer(final Double num) {
        if (Double.isNaN(num)) {
            text.setText("""");
","['    ', 'public', ' ', 'void', ' ', 'writer', '(', 'final', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'Double', '.', 'isNaN', '(', 'num', ')', ')', ' ', '{', '\n', '            ', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n']"
master,700e8cb8059eab827f98623350cb61976be6cb7c,UI.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/700e8cb8059eab827f98623350cb61976be6cb7c,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '                ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                    ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '    ', '}', '\n']"
master,8c2729c46c21a17111e8dd5b5b71af602f72a304,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(350, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
        for (int i = 0; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/8c2729c46c21a17111e8dd5b5b71af602f72a304,"    public void init() {
        frame.setVisible(true);
        frame.setSize(350, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
        for (int i = 0; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '350', ',', ' ', '280', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butlog', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butrate', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,8c2729c46c21a17111e8dd5b5b71af602f72a304,UI.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/8c2729c46c21a17111e8dd5b5b71af602f72a304,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '                ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                    ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '    ', '}', '\n']"
master,53fc1ba39abbf0c599f49adc3d42836e89363699,Calculator.java,calculateBiImpl,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            return num1 + num2;
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }
        if (mode == BiOperatorModes.xpowerofy) {
            return pow(num1,num2);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/53fc1ba39abbf0c599f49adc3d42836e89363699,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            return num1 + num2;
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }
        if (mode == BiOperatorModes.xpowerofy) {
            return pow(num1,num2);
        }

        
        throw new Error();
    }
","['    ', 'private', ' ', 'Double', ' ', 'calculateBiImpl', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'add', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '+', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'minus', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '-', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'multiply', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '*', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'divide', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '/', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'xpowerofy', ')', ' ', '{', '\n', '            ', 'return', ' ', 'pow', '(', 'num1', ',', 'num2', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,53fc1ba39abbf0c599f49adc3d42836e89363699,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num/100;
        }
        


        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/53fc1ba39abbf0c599f49adc3d42836e89363699,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num/100;
        }
        


        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', '/', '100', ';', '\n', '        ', '}', '\n', '        ', '\n', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,343f863759a2caa910c40c161bba4f5cd2df5fb2,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        


        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/343f863759a2caa910c40c161bba4f5cd2df5fb2,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        


        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', '\n', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,831cf76a77fe12f90df05abc1df7f94f5d9aa594,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/831cf76a77fe12f90df05abc1df7f94f5d9aa594,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '330', ',', ' ', '280', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '       ', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '1', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '        ', 'panel', '.', 'add', '(', 'but', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butlog', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butrate', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,c74527b9b35cdc727e4b2c408b326790a7feeaa4,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/c74527b9b35cdc727e4b2c408b326790a7feeaa4,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '330', ',', ' ', '300', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '       ', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '1', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '        ', 'panel', '.', 'add', '(', 'but', '[', '0', ']', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butlog', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butrate', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,9fc035aeebead0f982c2f498a5f57e1656f140eb,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);
        but[0].addActionListener(this);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/9fc035aeebead0f982c2f498a5f57e1656f140eb,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);
        but[0].addActionListener(this);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '330', ',', ' ', '300', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '       ', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '1', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '        ', 'panel', '.', 'add', '(', 'but', '[', '0', ']', ')', ';', '\n', '        ', 'but', '[', '0', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butlog', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butrate', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,c6635f7ffede38ad982321f72ed7e4c6a3054324,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if(newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }
        


        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/c6635f7ffede38ad982321f72ed7e4c6a3054324,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if(newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }
        


        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', 'if', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'abs', ')', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'abs', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,c6635f7ffede38ad982321f72ed7e4c6a3054324,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);
        but[0].addActionListener(this);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);
        panel.add(butabs);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);
        butabs.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/c6635f7ffede38ad982321f72ed7e4c6a3054324,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);
        but[0].addActionListener(this);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);
        panel.add(butabs);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);
        butabs.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '330', ',', ' ', '300', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '       ', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '1', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '        ', 'panel', '.', 'add', '(', 'but', '[', '0', ']', ')', ';', '\n', '        ', 'but', '[', '0', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butlog', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butrate', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butabs', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butabs', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,c6635f7ffede38ad982321f72ed7e4c6a3054324,UI.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }
         if(source == butabs){
             writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
         }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/c6635f7ffede38ad982321f72ed7e4c6a3054324,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }
         if(source == butabs){
             writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
         }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        text.selectAll();
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '                ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                    ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '         ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '{', '\n', '             ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '    ', '}', '\n']"
master,e5cf5e6ca3c361e26af24e05bccc74b89cd9ec2d,Calculator.java,calculateBiImpl,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            if(num2!=0) {
                return num1 + num2;
            }
            else {
                return num1;
            }
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }
        if (mode == BiOperatorModes.xpowerofy) {
            return pow(num1,num2);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/e5cf5e6ca3c361e26af24e05bccc74b89cd9ec2d,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            if(num2!=0) {
                return num1 + num2;
            }
            else {
                return num1;
            }
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }
        if (mode == BiOperatorModes.xpowerofy) {
            return pow(num1,num2);
        }

        
        throw new Error();
    }
","['    ', 'private', ' ', 'Double', ' ', 'calculateBiImpl', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'add', ')', ' ', '{', '\n', '            ', 'if', '(', 'num2', '!', '=', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'num1', ' ', '+', ' ', 'num2', ';', '\n', '            ', '}', '\n', '            ', 'else', ' ', '{', '\n', '                ', 'return', ' ', 'num1', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'minus', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '-', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'multiply', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '*', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'divide', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '/', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'xpowerofy', ')', ' ', '{', '\n', '            ', 'return', ' ', 'pow', '(', 'num1', ',', 'num2', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,815cd966fdd7942885a529437fbc41a11d6c1b3e,Calculator.java,reset,"    public Double reset() {
        num2 = 0.0;
        num1 = 0.0;
        mode = BiOperatorModes.normal;

        return NaN;
    }",https://www.github.com/ph-7/simple-java-calculator/commit/815cd966fdd7942885a529437fbc41a11d6c1b3e,"    public Double reset() {
        num2 = 0.0;
        num1 = 0.0;
        mode = BiOperatorModes.normal;

        return NaN;
    }
","['    ', 'public', ' ', 'Double', ' ', 'reset', '(', ')', ' ', '{', '\n', '        ', 'num2', ' ', '=', ' ', '0.0', ';', '\n', '        ', 'num1', ' ', '=', ' ', '0.0', ';', '\n', '        ', 'mode', ' ', '=', ' ', 'BiOperatorModes', '.', 'normal', ';', '\n', '\n', '        ', 'return', ' ', 'NaN', ';', '\n', '    ', '}', '\n']"
master,815cd966fdd7942885a529437fbc41a11d6c1b3e,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            if(num==0 || num%180==0)
                return 0.0;
            else if(num%90==0 && num%180!=0)
                return NaN;
            else
                return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if(newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }
        


        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/815cd966fdd7942885a529437fbc41a11d6c1b3e,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            if(num==0 || num%180==0)
                return 0.0;
            else if(num%90==0 && num%180!=0)
                return NaN;
            else
                return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if(newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }
        


        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'if', '(', 'num', '=', '=', '0', ' ', '|', '|', ' ', 'num', '%', '180', '=', '=', '0', ')', '\n', '                ', 'return', ' ', '0.0', ';', '\n', '            ', 'else', ' ', 'if', '(', 'num', '%', '90', '=', '=', '0', ' ', '&', '&', ' ', 'num', '%', '180', '!', '=', '0', ')', '\n', '                ', 'return', ' ', 'NaN', ';', '\n', '            ', 'else', '\n', '                ', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', 'if', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'abs', ')', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'abs', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,61c0d5d34d4d5d4aedb893f3b1d17f9340df9b94,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(350, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
        for (int i = 0; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butBinary);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
        butBinary.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/61c0d5d34d4d5d4aedb893f3b1d17f9340df9b94,"    public void init() {
        frame.setVisible(true);
        frame.setSize(350, 280);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
        for (int i = 0; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butBinary);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
        butBinary.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '350', ',', ' ', '280', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butBinary', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butBinary', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,61c0d5d34d4d5d4aedb893f3b1d17f9340df9b94,UI.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                    reader()));
        }

        if (source == butDivide) {
            writer(calc
                    .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                    reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                    reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                    reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                    reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                    reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        if (source == butBinary) {
            parsetoBinary();
        }

        text.selectAll();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/61c0d5d34d4d5d4aedb893f3b1d17f9340df9b94,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                    reader()));
        }

        if (source == butDivide) {
            writer(calc
                    .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                    reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                    reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                    Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                    reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                    reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                    reader()));
        }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        if (source == butBinary) {
            parsetoBinary();
        }

        text.selectAll();
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '                ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                    ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                    ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                    ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', ' ', '{', '\n', '            ', 'parsetoBinary', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '    ', '}', '\n']"
master,61c0d5d34d4d5d4aedb893f3b1d17f9340df9b94,UI.java,parsetoBinary,"    private void parsetoBinary() {
        try {
            text.setText("""" + Long.toBinaryString(Long.parseLong(text.getText())));",https://www.github.com/ph-7/simple-java-calculator/commit/61c0d5d34d4d5d4aedb893f3b1d17f9340df9b94,"    private void parsetoBinary() {
        try {
            text.setText("""" + Long.toBinaryString(Long.parseLong(text.getText())));
","['    ', 'private', ' ', 'void', ' ', 'parsetoBinary', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'text', '.', 'setText', '(', '""', '""', ' ', '+', ' ', 'Long', '.', 'toBinaryString', '(', 'Long', '.', 'parseLong', '(', 'text', '.', 'getText', '(', ')', ')', ')', ')', ';', '\n']"
master,4d0a6dd65fa66912fd628f2cd61847235abb9706,UI.java,init,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);
        but[0].addActionListener(this);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);
        panel.add(butabs);
        panel.add(butabs);
        panel.add(butBinary);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);
        butabs.addActionListener(this);
        butBinary.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }",https://www.github.com/ph-7/simple-java-calculator/commit/4d0a6dd65fa66912fd628f2cd61847235abb9706,"    public void init() {
        frame.setVisible(true);
        frame.setSize(330, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        panel.add(text);
       
        for (int i = 1; i < 10; i++) {
            panel.add(but[i]);
            but[i].addActionListener(this);
        }
        panel.add(but[0]);
        but[0].addActionListener(this);

        panel.add(butAdd);
        panel.add(butMinus);
        panel.add(butMultiply);
        panel.add(butDivide);
        panel.add(butSquare);
        panel.add(butSquareRoot);
        panel.add(butOneDevidedBy);
        panel.add(butCos);
        panel.add(butSin);
        panel.add(butTan);
        panel.add(butxpowerofy);
        panel.add(butlog);
        panel.add(butrate);
        panel.add(butabs);
        panel.add(butabs);
        panel.add(butBinary);

        panel.add(butEqual);
        panel.add(butCancel);

        butAdd.addActionListener(this);
        butMinus.addActionListener(this);
        butMultiply.addActionListener(this);
        butDivide.addActionListener(this);
        butSquare.addActionListener(this);
        butSquareRoot.addActionListener(this);
        butOneDevidedBy.addActionListener(this);
        butCos.addActionListener(this);
        butSin.addActionListener(this);
        butTan.addActionListener(this);
        butxpowerofy.addActionListener(this);
        butlog.addActionListener(this);
        butrate.addActionListener(this);
        butabs.addActionListener(this);
        butBinary.addActionListener(this);

        butEqual.addActionListener(this);
        butCancel.addActionListener(this);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '        ', 'frame', '.', 'setSize', '(', '330', ',', ' ', '300', ')', ';', '\n', '        ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', '\n', '        ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'text', ')', ';', '\n', '       ', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '1', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'panel', '.', 'add', '(', 'but', '[', 'i', ']', ')', ';', '\n', '            ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', '}', '\n', '        ', 'panel', '.', 'add', '(', 'but', '[', '0', ']', ')', ';', '\n', '        ', 'but', '[', '0', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butAdd', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMinus', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butDivide', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquare', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCos', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butSin', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butTan', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butlog', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butrate', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butabs', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butabs', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butBinary', ')', ';', '\n', '\n', '        ', 'panel', '.', 'add', '(', 'butEqual', ')', ';', '\n', '        ', 'panel', '.', 'add', '(', 'butCancel', ')', ';', '\n', '\n', '        ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butabs', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butBinary', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '\n', '        ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '        ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,4d0a6dd65fa66912fd628f2cd61847235abb9706,UI.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }
         if(source == butabs){
             writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
         }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        if (source == butBinary) {
            parsetoBinary();
        }

        text.selectAll();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/4d0a6dd65fa66912fd628f2cd61847235abb9706,"    public void actionPerformed(ActionEvent e) {
        final Object source = e.getSource();

        for (int i = 0; i < 10; i++) {
            if (source == but[i]) {
                text.replaceSelection(buttonValue[i]);
                return;
            }
        }

        if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
        }

        if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
        }

        if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                reader()));
        }

        if (source == butDivide) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.divide, reader()));
        }
        if (source == butxpowerofy) {
            writer(calc
                .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
        }

        if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                reader()));
        }

        if (source == butSquareRoot) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                reader()));
        }

        if (source == butOneDevidedBy) {
            writer(calc.calculateMono(
                Calculator.MonoOperatorModes.oneDevidedBy, reader()));
        }

        if (source == butCos) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                reader()));
        }

        if (source == butSin) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                reader()));
        }

        if (source == butTan) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                reader()));
        }
        if (source == butlog) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                reader()));
        }
         if (source == butrate) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                reader()));
        }
         if(source == butabs){
             writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
         }

        if (source == butEqual) {
            writer(calc.calculateEqual(reader()));
        }

        if (source == butCancel) {
            writer(calc.reset());
        }

        if (source == butBinary) {
            parsetoBinary();
        }

        text.selectAll();
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '                ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '\n', '                ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', '\n', '                ', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '         ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '{', '\n', '             ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', ' ', '{', '\n', '            ', 'parsetoBinary', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '    ', '}', '\n']"
master,2be1bd9cbefd6f04a3d676ff54cdd5961728bf86,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if(newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }
        
        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/2be1bd9cbefd6f04a3d676ff54cdd5961728bf86,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if(newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }
        
        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', 'if', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'abs', ')', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'abs', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,dca644b774f687dd115cba6b40c11eee55012bd9,Calculator.java,calculateBiImpl,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            if (num2 != 0) {
                return num1 + num2;
            }

            return num1;
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }
        if (mode == BiOperatorModes.xpowerofy) {
            return pow(num1,num2);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/dca644b774f687dd115cba6b40c11eee55012bd9,"    private Double calculateBiImpl() {
        if (mode == BiOperatorModes.normal) {
            return num2;
        }
        if (mode == BiOperatorModes.add) {
            if (num2 != 0) {
                return num1 + num2;
            }

            return num1;
        }
        if (mode == BiOperatorModes.minus) {
            return num1 - num2;
        }
        if (mode == BiOperatorModes.multiply) {
            return num1 * num2;
        }
        if (mode == BiOperatorModes.divide) {
            return num1 / num2;
        }
        if (mode == BiOperatorModes.xpowerofy) {
            return pow(num1,num2);
        }

        
        throw new Error();
    }
","['    ', 'private', ' ', 'Double', ' ', 'calculateBiImpl', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'normal', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'add', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'num2', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'num1', ' ', '+', ' ', 'num2', ';', '\n', '            ', '}', '\n', '\n', '            ', 'return', ' ', 'num1', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'minus', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '-', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'multiply', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '*', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'divide', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '/', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', ' ', '=', '=', ' ', 'BiOperatorModes', '.', 'xpowerofy', ')', ' ', '{', '\n', '            ', 'return', ' ', 'pow', '(', 'num1', ',', 'num2', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,dca644b774f687dd115cba6b40c11eee55012bd9,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            if (num == 0 || num % 180 == 0) {
                return 0.0;
            }
            if (num % 90 == 0 && num % 180 != 0) {
                return NaN;
            }

            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if (newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/dca644b774f687dd115cba6b40c11eee55012bd9,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDevidedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(num);
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(num);
        }
        if (newMode == MonoOperatorModes.tan) {
            if (num == 0 || num % 180 == 0) {
                return 0.0;
            }
            if (num % 90 == 0 && num % 180 != 0) {
                return NaN;
            }

            return Math.tan(num);
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if (newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }

        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDevidedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'num', ' ', '=', '=', ' ', '0', ' ', '|', '|', ' ', 'num', ' ', '%', ' ', '180', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', '0.0', ';', '\n', '            ', '}', '\n', '            ', 'if', ' ', '(', 'num', ' ', '%', ' ', '90', ' ', '=', '=', ' ', '0', ' ', '&', '&', ' ', 'num', ' ', '%', ' ', '180', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'NaN', ';', '\n', '            ', '}', '\n', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'abs', ')', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'abs', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,4f70bfc69a84d0b83be90b3e29e352258526e5a3,UI.java,init,"   public void init() {      
      frame.setSize(450, 450);
      frame.setVisible(true);
      frame.setLocationRelativeTo(null); 
      frame.setResizable(false);
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
      frame.setIconImage(image.getImage());
      
      text.setFont(textFont);
      text.setEditable(false);
      
      for (int i = 0; i < 10; i++) {
         but[i].setFont(font);
      }      
      butAdd.setFont(font);
      butMinus.setFont(font);
      butMultiply.setFont(font);
      butDivide.setFont(font);
      butEqual.setFont(font);
      butSquareRoot.setFont(font);
      butSquare.setFont(font);
      butOneDevidedBy.setFont(font);
      butCos.setFont(font);
      butSin.setFont(font);
      butTan.setFont(font);
      butxpowerofy.setFont(font);
      butlog.setFont(font);
      butrate.setFont(font);
      butabs.setFont(font);
      butCancel.setFont(font);
      butBinary.setFont(font); 
      
      panel.add(Box.createHorizontalStrut(100));
      panelSub1.add(text);
      panel.add(panelSub1);
      
      panelSub2.add(but[1]);
      panelSub2.add(but[2]);
      panelSub2.add(but[3]);
      panelSub2.add(Box.createHorizontalStrut(15));
      panelSub2.add(butAdd);
      panelSub2.add(butMinus);
      panel.add(panelSub2);
      
      panelSub3.add(but[4]);
      panelSub3.add(but[5]);
      panelSub3.add(but[6]);
      panelSub3.add(Box.createHorizontalStrut(15));
      panelSub3.add(butMultiply);
      panelSub3.add(butDivide);      
      panel.add(panelSub3);
      
      panelSub4.add(but[7]);
      panelSub4.add(but[8]);
      panelSub4.add(but[9]);
      panelSub4.add(Box.createHorizontalStrut(15));
      panelSub4.add(butEqual);
      panelSub4.add(butCancel);
      panel.add(panelSub4);
      
      panelSub5.add(but[0]);
      panelSub5.add(Box.createHorizontalStrut(210));
      panel.add(panelSub5);
      
      panelSub6.add(butSquare);
      panelSub6.add(butSquareRoot);
      panelSub6.add(butOneDevidedBy);
      panelSub6.add(butxpowerofy);
      panel.add(panelSub6);
      
      panelSub7.add(butCos);
      panelSub7.add(butSin);
      panelSub7.add(butTan);
      panel.add(panelSub7);
      
      panelSub8.add(butlog);
      panelSub8.add(butrate);
      panelSub8.add(butabs);
      panelSub8.add(butBinary);
      panel.add(panelSub8);
      
      but[0].addActionListener(this);      
      for (int i = 1; i < 10; i++) {
         but[i].addActionListener(this);
      }      
      butAdd.addActionListener(this);
      butMinus.addActionListener(this);
      butMultiply.addActionListener(this);
      butDivide.addActionListener(this);
      butSquare.addActionListener(this);
      butSquareRoot.addActionListener(this);
      butOneDevidedBy.addActionListener(this);
      butCos.addActionListener(this);
      butSin.addActionListener(this);
      butTan.addActionListener(this);
      butxpowerofy.addActionListener(this);
      butlog.addActionListener(this);
      butrate.addActionListener(this);
      butabs.addActionListener(this);
      butBinary.addActionListener(this);
      
      butEqual.addActionListener(this);
      butCancel.addActionListener(this);
      
      frame.add(panel);
   }",https://www.github.com/ph-7/simple-java-calculator/commit/4f70bfc69a84d0b83be90b3e29e352258526e5a3,"   public void init() {      
      frame.setSize(450, 450);
      frame.setVisible(true);
      frame.setLocationRelativeTo(null); 
      frame.setResizable(false);
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
      frame.setIconImage(image.getImage());
      
      text.setFont(textFont);
      text.setEditable(false);
      
      for (int i = 0; i < 10; i++) {
         but[i].setFont(font);
      }      
      butAdd.setFont(font);
      butMinus.setFont(font);
      butMultiply.setFont(font);
      butDivide.setFont(font);
      butEqual.setFont(font);
      butSquareRoot.setFont(font);
      butSquare.setFont(font);
      butOneDevidedBy.setFont(font);
      butCos.setFont(font);
      butSin.setFont(font);
      butTan.setFont(font);
      butxpowerofy.setFont(font);
      butlog.setFont(font);
      butrate.setFont(font);
      butabs.setFont(font);
      butCancel.setFont(font);
      butBinary.setFont(font); 
      
      panel.add(Box.createHorizontalStrut(100));
      panelSub1.add(text);
      panel.add(panelSub1);
      
      panelSub2.add(but[1]);
      panelSub2.add(but[2]);
      panelSub2.add(but[3]);
      panelSub2.add(Box.createHorizontalStrut(15));
      panelSub2.add(butAdd);
      panelSub2.add(butMinus);
      panel.add(panelSub2);
      
      panelSub3.add(but[4]);
      panelSub3.add(but[5]);
      panelSub3.add(but[6]);
      panelSub3.add(Box.createHorizontalStrut(15));
      panelSub3.add(butMultiply);
      panelSub3.add(butDivide);      
      panel.add(panelSub3);
      
      panelSub4.add(but[7]);
      panelSub4.add(but[8]);
      panelSub4.add(but[9]);
      panelSub4.add(Box.createHorizontalStrut(15));
      panelSub4.add(butEqual);
      panelSub4.add(butCancel);
      panel.add(panelSub4);
      
      panelSub5.add(but[0]);
      panelSub5.add(Box.createHorizontalStrut(210));
      panel.add(panelSub5);
      
      panelSub6.add(butSquare);
      panelSub6.add(butSquareRoot);
      panelSub6.add(butOneDevidedBy);
      panelSub6.add(butxpowerofy);
      panel.add(panelSub6);
      
      panelSub7.add(butCos);
      panelSub7.add(butSin);
      panelSub7.add(butTan);
      panel.add(panelSub7);
      
      panelSub8.add(butlog);
      panelSub8.add(butrate);
      panelSub8.add(butabs);
      panelSub8.add(butBinary);
      panel.add(panelSub8);
      
      but[0].addActionListener(this);      
      for (int i = 1; i < 10; i++) {
         but[i].addActionListener(this);
      }      
      butAdd.addActionListener(this);
      butMinus.addActionListener(this);
      butMultiply.addActionListener(this);
      butDivide.addActionListener(this);
      butSquare.addActionListener(this);
      butSquareRoot.addActionListener(this);
      butOneDevidedBy.addActionListener(this);
      butCos.addActionListener(this);
      butSin.addActionListener(this);
      butTan.addActionListener(this);
      butxpowerofy.addActionListener(this);
      butlog.addActionListener(this);
      butrate.addActionListener(this);
      butabs.addActionListener(this);
      butBinary.addActionListener(this);
      
      butEqual.addActionListener(this);
      butCancel.addActionListener(this);
      
      frame.add(panel);
   }
","['   ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '      ', '\n', '      ', 'frame', '.', 'setSize', '(', '450', ',', ' ', '450', ')', ';', '\n', '      ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '      ', 'frame', '.', 'setLocationRelativeTo', '(', 'null', ')', ';', ' ', '\n', '      ', 'frame', '.', 'setResizable', '(', 'false', ')', ';', '\n', '      ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', ' ', '\n', '      ', 'frame', '.', 'setIconImage', '(', 'image', '.', 'getImage', '(', ')', ')', ';', '\n', '      ', '\n', '      ', 'text', '.', 'setFont', '(', 'textFont', ')', ';', '\n', '      ', 'text', '.', 'setEditable', '(', 'false', ')', ';', '\n', '      ', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'but', '[', 'i', ']', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', '}', '      ', '\n', '      ', 'butAdd', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butMinus', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butMultiply', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butDivide', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butEqual', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butSquareRoot', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butSquare', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butOneDevidedBy', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butCos', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butSin', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butTan', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butxpowerofy', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butlog', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butrate', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butabs', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butCancel', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butBinary', '.', 'setFont', '(', 'font', ')', ';', ' ', '\n', '      ', '\n', '      ', 'panel', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '100', ')', ')', ';', '\n', '      ', 'panelSub1', '.', 'add', '(', 'text', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub1', ')', ';', '\n', '      ', '\n', '      ', 'panelSub2', '.', 'add', '(', 'but', '[', '1', ']', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'but', '[', '2', ']', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'but', '[', '3', ']', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '15', ')', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'butAdd', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'butMinus', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub2', ')', ';', '\n', '      ', '\n', '      ', 'panelSub3', '.', 'add', '(', 'but', '[', '4', ']', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'but', '[', '5', ']', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'but', '[', '6', ']', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '15', ')', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'butDivide', ')', ';', '      ', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub3', ')', ';', '\n', '      ', '\n', '      ', 'panelSub4', '.', 'add', '(', 'but', '[', '7', ']', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'but', '[', '8', ']', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'but', '[', '9', ']', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '15', ')', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'butEqual', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'butCancel', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub4', ')', ';', '\n', '      ', '\n', '      ', 'panelSub5', '.', 'add', '(', 'but', '[', '0', ']', ')', ';', '\n', '      ', 'panelSub5', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '210', ')', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub5', ')', ';', '\n', '      ', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butSquare', ')', ';', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub6', ')', ';', '\n', '      ', '\n', '      ', 'panelSub7', '.', 'add', '(', 'butCos', ')', ';', '\n', '      ', 'panelSub7', '.', 'add', '(', 'butSin', ')', ';', '\n', '      ', 'panelSub7', '.', 'add', '(', 'butTan', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub7', ')', ';', '\n', '      ', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butlog', ')', ';', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butrate', ')', ';', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butabs', ')', ';', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butBinary', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub8', ')', ';', '\n', '      ', '\n', '      ', 'but', '[', '0', ']', '.', 'addActionListener', '(', 'this', ')', ';', '      ', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '1', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', '}', '      ', '\n', '      ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butabs', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butBinary', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', '\n', '      ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', '\n', '      ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '   ', '}', '\n']"
master,4f70bfc69a84d0b83be90b3e29e352258526e5a3,UI.java,actionPerformed,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      
      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }
      
      if (source == butAdd) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
      }
      
      if (source == butMinus) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
      }
      
      if (source == butMultiply) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                                 reader()));
      }
      
      if (source == butDivide) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.divide, reader()));
      }
      if (source == butxpowerofy) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
      }
      
      if (source == butSquare) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                                   reader()));
      }
      
      if (source == butSquareRoot) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                                   reader()));
      }
      
      if (source == butOneDevidedBy) {
         writer(calc.calculateMono(
                                   Calculator.MonoOperatorModes.oneDevidedBy, reader()));
      }
      
      if (source == butCos) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                                   reader()));
      }
      
      if (source == butSin) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                                   reader()));
      }
      
      if (source == butTan) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                                   reader()));
      }
      if (source == butlog) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                                   reader()));
      }
      if (source == butrate) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                                   reader()));
      }
      if(source == butabs){
         writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
      }
      
      if (source == butEqual) {
         writer(calc.calculateEqual(reader()));
      }
      
      if (source == butCancel) {
         writer(calc.reset());
      }
      
      if (source == butBinary) {
         parsetoBinary();
      }
      
      text.selectAll();
   }",https://www.github.com/ph-7/simple-java-calculator/commit/4f70bfc69a84d0b83be90b3e29e352258526e5a3,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      
      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }
      
      if (source == butAdd) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
      }
      
      if (source == butMinus) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
      }
      
      if (source == butMultiply) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                                 reader()));
      }
      
      if (source == butDivide) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.divide, reader()));
      }
      if (source == butxpowerofy) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
      }
      
      if (source == butSquare) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                                   reader()));
      }
      
      if (source == butSquareRoot) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                                   reader()));
      }
      
      if (source == butOneDevidedBy) {
         writer(calc.calculateMono(
                                   Calculator.MonoOperatorModes.oneDevidedBy, reader()));
      }
      
      if (source == butCos) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                                   reader()));
      }
      
      if (source == butSin) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                                   reader()));
      }
      
      if (source == butTan) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                                   reader()));
      }
      if (source == butlog) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                                   reader()));
      }
      if (source == butrate) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                                   reader()));
      }
      if(source == butabs){
         writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
      }
      
      if (source == butEqual) {
         writer(calc.calculateEqual(reader()));
      }
      
      if (source == butCancel) {
         writer(calc.reset());
      }
      
      if (source == butBinary) {
         parsetoBinary();
      }
      
      text.selectAll();
   }
","['   ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '      ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '      ', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '            ', 'return', ';', '\n', '         ', '}', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                                 ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '\n', '                   ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '\n', '                   ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDevidedBy', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                                   ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', ' ', '{', '\n', '         ', 'parsetoBinary', '(', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '   ', '}', '\n']"
master,4f70bfc69a84d0b83be90b3e29e352258526e5a3,UI.java,parsetoBinary,"   private void parsetoBinary() {
      try {
         text.setText("""" + Long.toBinaryString(Long.parseLong(text.getText())));",https://www.github.com/ph-7/simple-java-calculator/commit/4f70bfc69a84d0b83be90b3e29e352258526e5a3,"   private void parsetoBinary() {
      try {
         text.setText("""" + Long.toBinaryString(Long.parseLong(text.getText())));
","['   ', 'private', ' ', 'void', ' ', 'parsetoBinary', '(', ')', ' ', '{', '\n', '      ', 'try', ' ', '{', '\n', '         ', 'text', '.', 'setText', '(', '""', '""', ' ', '+', ' ', 'Long', '.', 'toBinaryString', '(', 'Long', '.', 'parseLong', '(', 'text', '.', 'getText', '(', ')', ')', ')', ')', ';', '\n']"
master,4f70bfc69a84d0b83be90b3e29e352258526e5a3,UI.java,reader,"   public Double reader() {
      Double num;
      String str;
      str = text.getText();
      num = Double.valueOf(str);
      
      return num;
   }",https://www.github.com/ph-7/simple-java-calculator/commit/4f70bfc69a84d0b83be90b3e29e352258526e5a3,"   public Double reader() {
      Double num;
      String str;
      str = text.getText();
      num = Double.valueOf(str);
      
      return num;
   }
","['   ', 'public', ' ', 'Double', ' ', 'reader', '(', ')', ' ', '{', '\n', '      ', 'Double', ' ', 'num', ';', '\n', '      ', 'String', ' ', 'str', ';', '\n', '      ', 'str', ' ', '=', ' ', 'text', '.', 'getText', '(', ')', ';', '\n', '      ', 'num', ' ', '=', ' ', 'Double', '.', 'valueOf', '(', 'str', ')', ';', '\n', '      ', '\n', '      ', 'return', ' ', 'num', ';', '\n', '   ', '}', '\n']"
master,4f70bfc69a84d0b83be90b3e29e352258526e5a3,UI.java,writer,"   public void writer(final Double num) {
      if (Double.isNaN(num)) {
         text.setText("""");",https://www.github.com/ph-7/simple-java-calculator/commit/4f70bfc69a84d0b83be90b3e29e352258526e5a3,"   public void writer(final Double num) {
      if (Double.isNaN(num)) {
         text.setText("""");
","['   ', 'public', ' ', 'void', ' ', 'writer', '(', 'final', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '      ', 'if', ' ', '(', 'Double', '.', 'isNaN', '(', 'num', ')', ')', ' ', '{', '\n', '         ', 'text', '.', 'setText', '(', '""', '""', ')', ';', '\n']"
master,d10d5a0f94f779a2dafb50e8c4e72b30bb361d91,BufferedImageCustom.java,imageReturn,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      //the image here is not even an image file
      //but rather a binary data
      InputStream bis = getClass().getResourceAsStream(""/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       ",https://www.github.com/ph-7/simple-java-calculator/commit/d10d5a0f94f779a2dafb50e8c4e72b30bb361d91,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      
      
      InputStream bis = getClass().getResourceAsStream(""/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       
","['   ', 'public', ' ', 'Image', ' ', 'imageReturn', '(', ')', ' ', '\n', '      ', 'throws', ' ', 'IOException', ' ', '{', '\n', '      ', 'Image', ' ', 'image', ';', '\n', '      ', '\n', '      ', '\n', '      ', '\n', '      ', 'InputStream', ' ', 'bis', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getResourceAsStream', '(', '""', '/icon/icon.png', '""', ')', ';', '\n', '      ', 'BufferedImage', ' ', 'bImage2', ' ', '=', ' ', 'ImageIO', '.', 'read', '(', 'bis', ')', ';', '\n', '      ', 'image', ' ', '=', ' ', 'bImage2', ';', '\n', '      ', '\n', '      ', 'return', ' ', 'image', ';', '\n', '   ', '}', '       ', '\n']"
master,91c4782695321bc96cdf16826cd4b94e6292589d,BufferedImageCustom.java,imageReturn,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      InputStream bis = getClass().getResourceAsStream(""/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       ",https://www.github.com/ph-7/simple-java-calculator/commit/91c4782695321bc96cdf16826cd4b94e6292589d,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      InputStream bis = getClass().getResourceAsStream(""/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       
","['   ', 'public', ' ', 'Image', ' ', 'imageReturn', '(', ')', ' ', '\n', '      ', 'throws', ' ', 'IOException', ' ', '{', '\n', '      ', 'Image', ' ', 'image', ';', '\n', '      ', '\n', '      ', 'InputStream', ' ', 'bis', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getResourceAsStream', '(', '""', '/icon/icon.png', '""', ')', ';', '\n', '      ', 'BufferedImage', ' ', 'bImage2', ' ', '=', ' ', 'ImageIO', '.', 'read', '(', 'bis', ')', ';', '\n', '      ', 'image', ' ', '=', ' ', 'bImage2', ';', '\n', '      ', '\n', '      ', 'return', ' ', 'image', ';', '\n', '   ', '}', '       ', '\n']"
master,dba2aee2903610fdca070a15f246b64b6c1588e6,UI.java,init,"   public void init() {      
      frame.setSize(450, 450);
      frame.setVisible(true);
      frame.setLocationRelativeTo(null); 
      frame.setResizable(false);
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
      
      frame.setIconImage(image.getImage());
      
      text.setFont(textFont);
      text.setEditable(false);
      
      for (int i = 0; i < 10; i++) {
         but[i].setFont(font);
      }      
      butAdd.setFont(font);
      butMinus.setFont(font);
      butMultiply.setFont(font);
      butDivide.setFont(font);
      butEqual.setFont(font);
      butSquareRoot.setFont(font);
      butSquare.setFont(font);
      butOneDevidedBy.setFont(font);
      butCos.setFont(font);
      butSin.setFont(font);
      butTan.setFont(font);
      butxpowerofy.setFont(font);
      butlog.setFont(font);
      butrate.setFont(font);
      butabs.setFont(font);
      butCancel.setFont(font);
      butBinary.setFont(font); 
      
      panel.add(Box.createHorizontalStrut(100));
      panelSub1.add(text);
      panel.add(panelSub1);
      
      panelSub2.add(but[1]);
      panelSub2.add(but[2]);
      panelSub2.add(but[3]);
      panelSub2.add(Box.createHorizontalStrut(15));
      panelSub2.add(butAdd);
      panelSub2.add(butMinus);
      panel.add(panelSub2);
      
      panelSub3.add(but[4]);
      panelSub3.add(but[5]);
      panelSub3.add(but[6]);
      panelSub3.add(Box.createHorizontalStrut(15));
      panelSub3.add(butMultiply);
      panelSub3.add(butDivide);      
      panel.add(panelSub3);
      
      panelSub4.add(but[7]);
      panelSub4.add(but[8]);
      panelSub4.add(but[9]);
      panelSub4.add(Box.createHorizontalStrut(15));
      panelSub4.add(butEqual);
      panelSub4.add(butCancel);
      panel.add(panelSub4);
      
      panelSub5.add(but[0]);
      panelSub5.add(Box.createHorizontalStrut(210));
      panel.add(panelSub5);
      
      panelSub6.add(butSquare);
      panelSub6.add(butSquareRoot);
      panelSub6.add(butOneDevidedBy);
      panelSub6.add(butxpowerofy);
      panel.add(panelSub6);
      
      panelSub7.add(butCos);
      panelSub7.add(butSin);
      panelSub7.add(butTan);
      panel.add(panelSub7);
      
      panelSub8.add(butlog);
      panelSub8.add(butrate);
      panelSub8.add(butabs);
      panelSub8.add(butBinary);
      panel.add(panelSub8);
      
      for (int i = 0; i < 10; i++) {
         but[i].addActionListener(this);
      }      
      butAdd.addActionListener(this);
      butMinus.addActionListener(this);
      butMultiply.addActionListener(this);
      butDivide.addActionListener(this);
      butSquare.addActionListener(this);
      butSquareRoot.addActionListener(this);
      butOneDevidedBy.addActionListener(this);
      butCos.addActionListener(this);
      butSin.addActionListener(this);
      butTan.addActionListener(this);
      butxpowerofy.addActionListener(this);
      butlog.addActionListener(this);
      butrate.addActionListener(this);
      butabs.addActionListener(this);
      butBinary.addActionListener(this);
      
      butEqual.addActionListener(this);
      butCancel.addActionListener(this);
      
      frame.add(panel);
   }",https://www.github.com/ph-7/simple-java-calculator/commit/dba2aee2903610fdca070a15f246b64b6c1588e6,"   public void init() {      
      frame.setSize(450, 450);
      frame.setVisible(true);
      frame.setLocationRelativeTo(null); 
      frame.setResizable(false);
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
      
      frame.setIconImage(image.getImage());
      
      text.setFont(textFont);
      text.setEditable(false);
      
      for (int i = 0; i < 10; i++) {
         but[i].setFont(font);
      }      
      butAdd.setFont(font);
      butMinus.setFont(font);
      butMultiply.setFont(font);
      butDivide.setFont(font);
      butEqual.setFont(font);
      butSquareRoot.setFont(font);
      butSquare.setFont(font);
      butOneDevidedBy.setFont(font);
      butCos.setFont(font);
      butSin.setFont(font);
      butTan.setFont(font);
      butxpowerofy.setFont(font);
      butlog.setFont(font);
      butrate.setFont(font);
      butabs.setFont(font);
      butCancel.setFont(font);
      butBinary.setFont(font); 
      
      panel.add(Box.createHorizontalStrut(100));
      panelSub1.add(text);
      panel.add(panelSub1);
      
      panelSub2.add(but[1]);
      panelSub2.add(but[2]);
      panelSub2.add(but[3]);
      panelSub2.add(Box.createHorizontalStrut(15));
      panelSub2.add(butAdd);
      panelSub2.add(butMinus);
      panel.add(panelSub2);
      
      panelSub3.add(but[4]);
      panelSub3.add(but[5]);
      panelSub3.add(but[6]);
      panelSub3.add(Box.createHorizontalStrut(15));
      panelSub3.add(butMultiply);
      panelSub3.add(butDivide);      
      panel.add(panelSub3);
      
      panelSub4.add(but[7]);
      panelSub4.add(but[8]);
      panelSub4.add(but[9]);
      panelSub4.add(Box.createHorizontalStrut(15));
      panelSub4.add(butEqual);
      panelSub4.add(butCancel);
      panel.add(panelSub4);
      
      panelSub5.add(but[0]);
      panelSub5.add(Box.createHorizontalStrut(210));
      panel.add(panelSub5);
      
      panelSub6.add(butSquare);
      panelSub6.add(butSquareRoot);
      panelSub6.add(butOneDevidedBy);
      panelSub6.add(butxpowerofy);
      panel.add(panelSub6);
      
      panelSub7.add(butCos);
      panelSub7.add(butSin);
      panelSub7.add(butTan);
      panel.add(panelSub7);
      
      panelSub8.add(butlog);
      panelSub8.add(butrate);
      panelSub8.add(butabs);
      panelSub8.add(butBinary);
      panel.add(panelSub8);
      
      for (int i = 0; i < 10; i++) {
         but[i].addActionListener(this);
      }      
      butAdd.addActionListener(this);
      butMinus.addActionListener(this);
      butMultiply.addActionListener(this);
      butDivide.addActionListener(this);
      butSquare.addActionListener(this);
      butSquareRoot.addActionListener(this);
      butOneDevidedBy.addActionListener(this);
      butCos.addActionListener(this);
      butSin.addActionListener(this);
      butTan.addActionListener(this);
      butxpowerofy.addActionListener(this);
      butlog.addActionListener(this);
      butrate.addActionListener(this);
      butabs.addActionListener(this);
      butBinary.addActionListener(this);
      
      butEqual.addActionListener(this);
      butCancel.addActionListener(this);
      
      frame.add(panel);
   }
","['   ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '      ', '\n', '      ', 'frame', '.', 'setSize', '(', '450', ',', ' ', '450', ')', ';', '\n', '      ', 'frame', '.', 'setVisible', '(', 'true', ')', ';', '\n', '      ', 'frame', '.', 'setLocationRelativeTo', '(', 'null', ')', ';', ' ', '\n', '      ', 'frame', '.', 'setResizable', '(', 'false', ')', ';', '\n', '      ', 'frame', '.', 'setDefaultCloseOperation', '(', 'JFrame', '.', 'EXIT_ON_CLOSE', ')', ';', ' ', '\n', '      ', '\n', '      ', 'frame', '.', 'setIconImage', '(', 'image', '.', 'getImage', '(', ')', ')', ';', '\n', '      ', '\n', '      ', 'text', '.', 'setFont', '(', 'textFont', ')', ';', '\n', '      ', 'text', '.', 'setEditable', '(', 'false', ')', ';', '\n', '      ', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'but', '[', 'i', ']', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', '}', '      ', '\n', '      ', 'butAdd', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butMinus', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butMultiply', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butDivide', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butEqual', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butSquareRoot', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butSquare', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butOneDevidedBy', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butCos', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butSin', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butTan', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butxpowerofy', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butlog', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butrate', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butabs', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butCancel', '.', 'setFont', '(', 'font', ')', ';', '\n', '      ', 'butBinary', '.', 'setFont', '(', 'font', ')', ';', ' ', '\n', '      ', '\n', '      ', 'panel', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '100', ')', ')', ';', '\n', '      ', 'panelSub1', '.', 'add', '(', 'text', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub1', ')', ';', '\n', '      ', '\n', '      ', 'panelSub2', '.', 'add', '(', 'but', '[', '1', ']', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'but', '[', '2', ']', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'but', '[', '3', ']', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '15', ')', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'butAdd', ')', ';', '\n', '      ', 'panelSub2', '.', 'add', '(', 'butMinus', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub2', ')', ';', '\n', '      ', '\n', '      ', 'panelSub3', '.', 'add', '(', 'but', '[', '4', ']', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'but', '[', '5', ']', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'but', '[', '6', ']', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '15', ')', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'butMultiply', ')', ';', '\n', '      ', 'panelSub3', '.', 'add', '(', 'butDivide', ')', ';', '      ', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub3', ')', ';', '\n', '      ', '\n', '      ', 'panelSub4', '.', 'add', '(', 'but', '[', '7', ']', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'but', '[', '8', ']', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'but', '[', '9', ']', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '15', ')', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'butEqual', ')', ';', '\n', '      ', 'panelSub4', '.', 'add', '(', 'butCancel', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub4', ')', ';', '\n', '      ', '\n', '      ', 'panelSub5', '.', 'add', '(', 'but', '[', '0', ']', ')', ';', '\n', '      ', 'panelSub5', '.', 'add', '(', 'Box', '.', 'createHorizontalStrut', '(', '210', ')', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub5', ')', ';', '\n', '      ', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butSquare', ')', ';', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butSquareRoot', ')', ';', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butOneDevidedBy', ')', ';', '\n', '      ', 'panelSub6', '.', 'add', '(', 'butxpowerofy', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub6', ')', ';', '\n', '      ', '\n', '      ', 'panelSub7', '.', 'add', '(', 'butCos', ')', ';', '\n', '      ', 'panelSub7', '.', 'add', '(', 'butSin', ')', ';', '\n', '      ', 'panelSub7', '.', 'add', '(', 'butTan', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub7', ')', ';', '\n', '      ', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butlog', ')', ';', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butrate', ')', ';', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butabs', ')', ';', '\n', '      ', 'panelSub8', '.', 'add', '(', 'butBinary', ')', ';', '\n', '      ', 'panel', '.', 'add', '(', 'panelSub8', ')', ';', '\n', '      ', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'but', '[', 'i', ']', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', '}', '      ', '\n', '      ', 'butAdd', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butMinus', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butMultiply', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butDivide', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butSquare', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butSquareRoot', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butOneDevidedBy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butCos', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butSin', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butTan', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butxpowerofy', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butlog', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butrate', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butabs', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butBinary', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', '\n', '      ', 'butEqual', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', 'butCancel', '.', 'addActionListener', '(', 'this', ')', ';', '\n', '      ', '\n', '      ', 'frame', '.', 'add', '(', 'panel', ')', ';', '\n', '   ', '}', '\n']"
master,40d8696daea04f456575ec2062da2badf6123df0,BufferedImageCustom.java,imageReturn,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      InputStream bis = getClass().getResourceAsStream(""/Resources/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       ",https://www.github.com/ph-7/simple-java-calculator/commit/40d8696daea04f456575ec2062da2badf6123df0,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      InputStream bis = getClass().getResourceAsStream(""/Resources/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       
","['   ', 'public', ' ', 'Image', ' ', 'imageReturn', '(', ')', ' ', '\n', '      ', 'throws', ' ', 'IOException', ' ', '{', '\n', '      ', 'Image', ' ', 'image', ';', '\n', '      ', '\n', '      ', 'InputStream', ' ', 'bis', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getResourceAsStream', '(', '""', '/Resources/icon/icon.png', '""', ')', ';', '\n', '      ', 'BufferedImage', ' ', 'bImage2', ' ', '=', ' ', 'ImageIO', '.', 'read', '(', 'bis', ')', ';', '\n', '      ', 'image', ' ', '=', ' ', 'bImage2', ';', '\n', '      ', '\n', '      ', 'return', ' ', 'image', ';', '\n', '   ', '}', '       ', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,calculateBiNormalTest,"	void calculateBiNormalTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.0);
		Assertions.assertEquals(NaN, calculator.calculateBi(Calculator.BiOperatorModes.normal, 3.0));
    }",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void calculateBiNormalTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.0);
		Assertions.assertEquals(NaN, calculator.calculateBi(Calculator.BiOperatorModes.normal, 3.0));
    }
","['\t', 'void', ' ', 'calculateBiNormalTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ',', ' ', '2.0', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', 'NaN', ',', ' ', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ',', ' ', '3.0', ')', ')', ';', '\n', '    ', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,calculateBiAddTest,"	void calculateBiAddTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.add, 3.0);
		Assertions.assertEquals(5.5, calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.5));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void calculateBiAddTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.add, 3.0);
		Assertions.assertEquals(5.5, calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.5));
	}
","['\t', 'void', ' ', 'calculateBiAddTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', '3.0', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '5.5', ',', ' ', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ',', ' ', '2.5', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,calculateBiMinusTest,"	void calculateBiMinusTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.minus, 3.1415);
		Assertions.assertEquals(2.0415, calculator.calculateBi(Calculator.BiOperatorModes.normal, 1.1));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void calculateBiMinusTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.minus, 3.1415);
		Assertions.assertEquals(2.0415, calculator.calculateBi(Calculator.BiOperatorModes.normal, 1.1));
	}
","['\t', 'void', ' ', 'calculateBiMinusTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', '3.1415', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '2.0415', ',', ' ', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ',', ' ', '1.1', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,calculateBiMultiplyTest,"	void calculateBiMultiplyTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.multiply, 3.2);
		Assertions.assertEquals(6.4, calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void calculateBiMultiplyTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.multiply, 3.2);
		Assertions.assertEquals(6.4, calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.0));
	}
","['\t', 'void', ' ', 'calculateBiMultiplyTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', ' ', '3.2', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '6.4', ',', ' ', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ',', ' ', '2.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,calculateBiDivideTest,"	void calculateBiDivideTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.divide, 6.4);
		Assertions.assertEquals(3.2, calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void calculateBiDivideTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.divide, 6.4);
		Assertions.assertEquals(3.2, calculator.calculateBi(Calculator.BiOperatorModes.normal, 2.0));
	}
","['\t', 'void', ' ', 'calculateBiDivideTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', '6.4', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '3.2', ',', ' ', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'normal', ',', ' ', '2.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,calculateEqualTest,"	void calculateEqualTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.add, 6.4);
		calculator.calculateBi(Calculator.BiOperatorModes.add, 2.0);
		Assertions.assertEquals(11.4, calculator.calculateEqual(3.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void calculateEqualTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.add, 6.4);
		calculator.calculateBi(Calculator.BiOperatorModes.add, 2.0);
		Assertions.assertEquals(11.4, calculator.calculateEqual(3.0));
	}
","['\t', 'void', ' ', 'calculateEqualTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', '6.4', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', '2.0', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '11.4', ',', ' ', 'calculator', '.', 'calculateEqual', '(', '3.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,resetTest,"	void resetTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.add, 6.4);
		Assertions.assertEquals(8.4, calculator.calculateBi(Calculator.BiOperatorModes.add, 2.0));
		Assertions.assertEquals(NaN, calculator.reset());		
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void resetTest() {
		Calculator calculator = new Calculator();
		calculator.calculateBi(Calculator.BiOperatorModes.add, 6.4);
		Assertions.assertEquals(8.4, calculator.calculateBi(Calculator.BiOperatorModes.add, 2.0));
		Assertions.assertEquals(NaN, calculator.reset());		
	}
","['\t', 'void', ' ', 'resetTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', '6.4', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '8.4', ',', ' ', 'calculator', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', '2.0', ')', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', 'NaN', ',', ' ', 'calculator', '.', 'reset', '(', ')', ')', ';', '\t\t', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoSquareTest,"	void CalculateMonoSquareTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(9.0, calculator.calculateMono(Calculator.MonoOperatorModes.square, 3.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoSquareTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(9.0, calculator.calculateMono(Calculator.MonoOperatorModes.square, 3.0));
	}
","['\t', 'void', ' ', 'CalculateMonoSquareTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '9.0', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', ' ', '3.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoSquareRootTest,"	void CalculateMonoSquareRootTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(5.0, calculator.calculateMono(Calculator.MonoOperatorModes.squareRoot, 25.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoSquareRootTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(5.0, calculator.calculateMono(Calculator.MonoOperatorModes.squareRoot, 25.0));
	}
","['\t', 'void', ' ', 'CalculateMonoSquareRootTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '5.0', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', ' ', '25.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoOneDividedByTest,"	void CalculateMonoOneDividedByTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.10, calculator.calculateMono(Calculator.MonoOperatorModes.oneDevidedBy, 10.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoOneDividedByTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.10, calculator.calculateMono(Calculator.MonoOperatorModes.oneDevidedBy, 10.0));
	}
","['\t', 'void', ' ', 'CalculateMonoOneDividedByTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '0.10', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDevidedBy', ',', ' ', '10.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoSinTest,"	void CalculateMonoSinTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.5, calculator.calculateMono(Calculator.MonoOperatorModes.sin, java.lang.Math.PI / 6), 0.0000000001);
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoSinTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.5, calculator.calculateMono(Calculator.MonoOperatorModes.sin, java.lang.Math.PI / 6), 0.0000000001);
	}
","['\t', 'void', ' ', 'CalculateMonoSinTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '0.5', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', ' ', 'java', '.', 'lang', '.', 'Math', '.', 'PI', ' ', '/', ' ', '6', ')', ',', ' ', '0.0000000001', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoCosTest,"	void CalculateMonoCosTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.5, calculator.calculateMono(Calculator.MonoOperatorModes.cos, java.lang.Math.PI / 3), 0.0000000001);
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoCosTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.5, calculator.calculateMono(Calculator.MonoOperatorModes.cos, java.lang.Math.PI / 3), 0.0000000001);
	}
","['\t', 'void', ' ', 'CalculateMonoCosTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '0.5', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', ' ', 'java', '.', 'lang', '.', 'Math', '.', 'PI', ' ', '/', ' ', '3', ')', ',', ' ', '0.0000000001', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoTanTest,"	void CalculateMonoTanTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(1.0, calculator.calculateMono(Calculator.MonoOperatorModes.tan, java.lang.Math.PI / 4), 0.0000000001);
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoTanTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(1.0, calculator.calculateMono(Calculator.MonoOperatorModes.tan, java.lang.Math.PI / 4), 0.0000000001);
	}
","['\t', 'void', ' ', 'CalculateMonoTanTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '1.0', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', ' ', 'java', '.', 'lang', '.', 'Math', '.', 'PI', ' ', '/', ' ', '4', ')', ',', ' ', '0.0000000001', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoLogTest,"	void CalculateMonoLogTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(2.0, calculator.calculateMono(Calculator.MonoOperatorModes.log, 100.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoLogTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(2.0, calculator.calculateMono(Calculator.MonoOperatorModes.log, 100.0));
	}
","['\t', 'void', ' ', 'CalculateMonoLogTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '2.0', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', ' ', '100.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoRateTest,"	void CalculateMonoRateTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(.75, calculator.calculateMono(Calculator.MonoOperatorModes.rate, 75.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoRateTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(.75, calculator.calculateMono(Calculator.MonoOperatorModes.rate, 75.0));
	}
","['\t', 'void', ' ', 'CalculateMonoRateTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '.75', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', ' ', '75.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,70e10ca2d28ddcbb9e2c24858454cfea9e621621,CalculatorTest.java,CalculateMonoAbsTest,"	void CalculateMonoAbsTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(3.0, calculator.calculateMono(Calculator.MonoOperatorModes.abs, -3.0));
		Assertions.assertEquals(3.0, calculator.calculateMono(Calculator.MonoOperatorModes.abs, 3.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/70e10ca2d28ddcbb9e2c24858454cfea9e621621,"	void CalculateMonoAbsTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(3.0, calculator.calculateMono(Calculator.MonoOperatorModes.abs, -3.0));
		Assertions.assertEquals(3.0, calculator.calculateMono(Calculator.MonoOperatorModes.abs, 3.0));
	}
","['\t', 'void', ' ', 'CalculateMonoAbsTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '3.0', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', '-', '3.0', ')', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '3.0', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', '3.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,9575fc0c5adb4e0956d2afe300ae251bb4952e10,BufferedImageCustom.java,imageReturn,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      InputStream bis = getClass().getResourceAsStream(""/resources/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       ",https://www.github.com/ph-7/simple-java-calculator/commit/9575fc0c5adb4e0956d2afe300ae251bb4952e10,"   public Image imageReturn() 
      throws IOException {
      Image image;
      
      InputStream bis = getClass().getResourceAsStream(""/resources/icon/icon.png"");
      BufferedImage bImage2 = ImageIO.read(bis);
      image = bImage2;
      
      return image;
   }       
","['   ', 'public', ' ', 'Image', ' ', 'imageReturn', '(', ')', ' ', '\n', '      ', 'throws', ' ', 'IOException', ' ', '{', '\n', '      ', 'Image', ' ', 'image', ';', '\n', '      ', '\n', '      ', 'InputStream', ' ', 'bis', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getResourceAsStream', '(', '""', '/resources/icon/icon.png', '""', ')', ';', '\n', '      ', 'BufferedImage', ' ', 'bImage2', ' ', '=', ' ', 'ImageIO', '.', 'read', '(', 'bis', ')', ';', '\n', '      ', 'image', ' ', '=', ' ', 'bImage2', ';', '\n', '      ', '\n', '      ', 'return', ' ', 'image', ';', '\n', '   ', '}', '       ', '\n']"
master,c72e1476798406b685e37ea08be37c39f811e5f2,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDividedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.tan) {
            if (num == 0 || num % 180 == 0) {
                return 0.0;
            }
            if (num % 90 == 0 && num % 180 != 0) {
                return NaN;
            }

            return Math.tan(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if (newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/c72e1476798406b685e37ea08be37c39f811e5f2,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDividedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.tan) {
            if (num == 0 || num % 180 == 0) {
                return 0.0;
            }
            if (num % 90 == 0 && num % 180 != 0) {
                return NaN;
            }

            return Math.tan(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if (newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }

        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDividedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'num', ' ', '=', '=', ' ', '0', ' ', '|', '|', ' ', 'num', ' ', '%', ' ', '180', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', '0.0', ';', '\n', '            ', '}', '\n', '            ', 'if', ' ', '(', 'num', ' ', '%', ' ', '90', ' ', '=', '=', ' ', '0', ' ', '&', '&', ' ', 'num', ' ', '%', ' ', '180', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'NaN', ';', '\n', '            ', '}', '\n', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'abs', ')', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'abs', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,c72e1476798406b685e37ea08be37c39f811e5f2,UI.java,actionPerformed,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      
      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }
      
      if (source == butAdd) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
      }
      
      if (source == butMinus) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
      }
      
      if (source == butMultiply) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                                 reader()));
      }
      
      if (source == butDivide) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.divide, reader()));
      }
      if (source == butxpowerofy) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
      }
      
      if (source == butSquare) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                                   reader()));
      }
      
      if (source == butSquareRoot) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                                   reader()));
      }
      
      if (source == butOneDividedBy) {
         writer(calc.calculateMono(
                                   Calculator.MonoOperatorModes.oneDividedBy, reader()));
      }
      
      if (source == butCos) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                                   reader()));
      }
      
      if (source == butSin) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                                   reader()));
      }
      
      if (source == butTan) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                                   reader()));
      }
      if (source == butlog) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                                   reader()));
      }
      if (source == butrate) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                                   reader()));
      }
      if(source == butabs){
         writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
      }
      
      if (source == butEqual) {
         writer(calc.calculateEqual(reader()));
      }
      
      if (source == butCancel) {
         writer(calc.reset());
      }
      
      if (source == butBinary) {
         parsetoBinary();
      }
      
      text.selectAll();
   }",https://www.github.com/ph-7/simple-java-calculator/commit/c72e1476798406b685e37ea08be37c39f811e5f2,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      
      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }
      
      if (source == butAdd) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
      }
      
      if (source == butMinus) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
      }
      
      if (source == butMultiply) {
         writer(calc.calculateBi(Calculator.BiOperatorModes.multiply,
                                 reader()));
      }
      
      if (source == butDivide) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.divide, reader()));
      }
      if (source == butxpowerofy) {
         writer(calc
                   .calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
      }
      
      if (source == butSquare) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.square,
                                   reader()));
      }
      
      if (source == butSquareRoot) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot,
                                   reader()));
      }
      
      if (source == butOneDividedBy) {
         writer(calc.calculateMono(
                                   Calculator.MonoOperatorModes.oneDividedBy, reader()));
      }
      
      if (source == butCos) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.cos,
                                   reader()));
      }
      
      if (source == butSin) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.sin,
                                   reader()));
      }
      
      if (source == butTan) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.tan,
                                   reader()));
      }
      if (source == butlog) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.log,
                                   reader()));
      }
      if (source == butrate) {
         writer(calc.calculateMono(Calculator.MonoOperatorModes.rate,
                                   reader()));
      }
      if(source == butabs){
         writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));
      }
      
      if (source == butEqual) {
         writer(calc.calculateEqual(reader()));
      }
      
      if (source == butCancel) {
         writer(calc.reset());
      }
      
      if (source == butBinary) {
         parsetoBinary();
      }
      
      text.selectAll();
   }
","['   ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '      ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '      ', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '            ', 'return', ';', '\n', '         ', '}', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', '\n', '                                 ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '\n', '                   ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '\n', '                   ', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDividedBy', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', '\n', '                                   ', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDividedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', '\n', '                                   ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', 'if', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '         ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', ' ', '{', '\n', '         ', 'parsetoBinary', '(', ')', ';', '\n', '      ', '}', '\n', '      ', '\n', '      ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '   ', '}', '\n']"
master,c72e1476798406b685e37ea08be37c39f811e5f2,CalculatorTest.java,CalculateMonoOneDividedByTest,"	void CalculateMonoOneDividedByTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.10, calculator.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, 10.0));
	}",https://www.github.com/ph-7/simple-java-calculator/commit/c72e1476798406b685e37ea08be37c39f811e5f2,"	void CalculateMonoOneDividedByTest() {
		Calculator calculator = new Calculator();
		Assertions.assertEquals(0.10, calculator.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, 10.0));
	}
","['\t', 'void', ' ', 'CalculateMonoOneDividedByTest', '(', ')', ' ', '{', '\n', '\t\t', 'Calculator', ' ', 'calculator', ' ', '=', ' ', 'new', ' ', 'Calculator', '(', ')', ';', '\n', '\t\t', 'Assertions', '.', 'assertEquals', '(', '0.10', ',', ' ', 'calculator', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDividedBy', ',', ' ', '10.0', ')', ')', ';', '\n', '\t', '}', '\n']"
master,0788abfe30f5a19d9cb6ac4a745b9ec0519239f1,UI.java,actionPerformed,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();


      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

      Double checkNum = null;

      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k){

      }

      if(checkNum != null || source == butCancel){
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }
      text.selectAll();
   }",https://www.github.com/ph-7/simple-java-calculator/commit/0788abfe30f5a19d9cb6ac4a745b9ec0519239f1,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();


      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

      Double checkNum = null;

      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k){

      }

      if(checkNum != null || source == butCancel){
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }
      text.selectAll();
   }
","['   ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '      ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '\n', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '            ', 'return', ';', '\n', '         ', '}', '\n', '      ', '}', '\n', '\n', '      ', 'Double', ' ', 'checkNum', ' ', '=', ' ', 'null', ';', '\n', '\n', '      ', 'try', ' ', '{', '\n', '         ', 'checkNum', ' ', '=', ' ', 'Double', '.', 'parseDouble', '(', 'text', '.', 'getText', '(', ')', ')', ';', '\n', '      ', '}', ' ', 'catch', '(', 'NumberFormatException', ' ', 'k', ')', '{', '\n', '\n', '      ', '}', '\n', '\n', '      ', 'if', '(', 'checkNum', ' ', '!', '=', ' ', 'null', ' ', '|', '|', ' ', 'source', ' ', '=', '=', ' ', 'butCancel', ')', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butAdd', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMinus', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMultiply', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butDivide', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDividedBy', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDividedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', '\n', '            ', 'parsetoBinary', '(', ')', ';', '\n', '      ', '}', '\n', '      ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '   ', '}', '\n']"
master,96a525528bb1f5eaf8bc7cdc279653aa29389732,UI.java,actionPerformed,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      Double checkNum = null;

      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k){

      }

      if(checkNum != null || source == butCancel){
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }
      text.selectAll();
   }",https://www.github.com/ph-7/simple-java-calculator/commit/96a525528bb1f5eaf8bc7cdc279653aa29389732,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      Double checkNum = null;

      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k){

      }

      if(checkNum != null || source == butCancel){
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }
      text.selectAll();
   }
","['   ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '      ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '      ', 'Double', ' ', 'checkNum', ' ', '=', ' ', 'null', ';', '\n', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '            ', 'return', ';', '\n', '         ', '}', '\n', '      ', '}', '\n', '\n', '      ', 'try', ' ', '{', '\n', '         ', 'checkNum', ' ', '=', ' ', 'Double', '.', 'parseDouble', '(', 'text', '.', 'getText', '(', ')', ')', ';', '\n', '      ', '}', ' ', 'catch', '(', 'NumberFormatException', ' ', 'k', ')', '{', '\n', '\n', '      ', '}', '\n', '\n', '      ', 'if', '(', 'checkNum', ' ', '!', '=', ' ', 'null', ' ', '|', '|', ' ', 'source', ' ', '=', '=', ' ', 'butCancel', ')', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butAdd', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMinus', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMultiply', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butDivide', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDividedBy', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDividedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', '\n', '            ', 'parsetoBinary', '(', ')', ';', '\n', '      ', '}', '\n', '      ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '   ', '}', '\n']"
master,65f8ed5bd98d8a67259c2003d98954bf86cb1a95,UI.java,actionPerformed,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      Double checkNum = null;

      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k) {

      }

      if (checkNum != null || source == butCancel) {
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }

      text.selectAll();
   }",https://www.github.com/ph-7/simple-java-calculator/commit/65f8ed5bd98d8a67259c2003d98954bf86cb1a95,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      Double checkNum = null;

      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k) {

      }

      if (checkNum != null || source == butCancel) {
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }

      text.selectAll();
   }
","['   ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '      ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '      ', 'Double', ' ', 'checkNum', ' ', '=', ' ', 'null', ';', '\n', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '            ', 'return', ';', '\n', '         ', '}', '\n', '      ', '}', '\n', '\n', '      ', 'try', ' ', '{', '\n', '         ', 'checkNum', ' ', '=', ' ', 'Double', '.', 'parseDouble', '(', 'text', '.', 'getText', '(', ')', ')', ';', '\n', '      ', '}', ' ', 'catch', '(', 'NumberFormatException', ' ', 'k', ')', ' ', '{', '\n', '\n', '      ', '}', '\n', '\n', '      ', 'if', ' ', '(', 'checkNum', ' ', '!', '=', ' ', 'null', ' ', '|', '|', ' ', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butAdd', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMinus', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMultiply', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butDivide', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '         ', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDividedBy', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDividedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', '\n', '            ', 'parsetoBinary', '(', ')', ';', '\n', '      ', '}', '\n', '\n', '      ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '   ', '}', '\n']"
master,59936e9facf0b737ee1ff72abd3253f0887c07b8,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDividedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.tan) {
            if (num == 0 || num % 180 == 0) {
                return 0.0;
            }
            if (num % 90 == 0 && num % 180 != 0) {
                return NaN;
            }

            return Math.tan(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.ln) {
            return log(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if (newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/59936e9facf0b737ee1ff72abd3253f0887c07b8,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode == MonoOperatorModes.square) {
            return num * num;
        }
        if (newMode == MonoOperatorModes.squareRoot) {
            return Math.sqrt(num);
        }
        if (newMode == MonoOperatorModes.oneDividedBy) {
            return 1 / num;
        }
        if (newMode == MonoOperatorModes.cos) {
            return Math.cos(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.sin) {
            return Math.sin(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.tan) {
            if (num == 0 || num % 180 == 0) {
                return 0.0;
            }
            if (num % 90 == 0 && num % 180 != 0) {
                return NaN;
            }

            return Math.tan(Math.toRadians(num));
        }
        if (newMode == MonoOperatorModes.log) {
            return log10(num);
        }
        if (newMode == MonoOperatorModes.ln) {
            return log(num);
        }
        if (newMode == MonoOperatorModes.rate) {
           return num / 100;
        }
        if (newMode == MonoOperatorModes.abs){
            return Math.abs(num);
        }

        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'square', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'squareRoot', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'oneDividedBy', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'cos', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'sin', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'tan', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'num', ' ', '=', '=', ' ', '0', ' ', '|', '|', ' ', 'num', ' ', '%', ' ', '180', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', '0.0', ';', '\n', '            ', '}', '\n', '            ', 'if', ' ', '(', 'num', ' ', '%', ' ', '90', ' ', '=', '=', ' ', '0', ' ', '&', '&', ' ', 'num', ' ', '%', ' ', '180', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'NaN', ';', '\n', '            ', '}', '\n', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'log', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'ln', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'rate', ')', ' ', '{', '\n', '           ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', ' ', '=', '=', ' ', 'MonoOperatorModes', '.', 'abs', ')', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'abs', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,59936e9facf0b737ee1ff72abd3253f0887c07b8,UI.java,actionPerformed,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      Double checkNum = null;

      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

    
      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k) {

      }

      if (checkNum != null || source == butCancel) {
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butln)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.ln, reader())); 

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }

      text.selectAll();
   }",https://www.github.com/ph-7/simple-java-calculator/commit/59936e9facf0b737ee1ff72abd3253f0887c07b8,"   public void actionPerformed(ActionEvent e) {
      final Object source = e.getSource();
      Double checkNum = null;

      for (int i = 0; i < 10; i++) {
         if (source == but[i]) {
            text.replaceSelection(buttonValue[i]);
            return;
         }
      }

    
      try {
         checkNum = Double.parseDouble(text.getText());
      } catch(NumberFormatException k) {

      }

      if (checkNum != null || source == butCancel) {
         if (source == butAdd) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.add, reader()));
            text.replaceSelection(butAdd.getText());
         }

         if (source == butMinus) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.minus, reader()));
            text.replaceSelection(butMinus.getText());
         }

         if (source == butMultiply) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.multiply, reader()));
            text.replaceSelection(butMultiply.getText());
         }

         if (source == butDivide) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.divide, reader()));
            text.replaceSelection(butDivide.getText());
         }
         
         if (source == butxpowerofy) {
            writer(calc.calculateBi(Calculator.BiOperatorModes.xpowerofy, reader()));
         }

         if (source == butSquare) {
            writer(calc.calculateMono(Calculator.MonoOperatorModes.square, reader()));
         }

         if (source == butSquareRoot)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.squareRoot, reader()));

         if (source == butOneDividedBy)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.oneDividedBy, reader()));

         if (source == butCos)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.cos, reader()));

         if (source == butSin)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.sin, reader()));

         if (source == butTan)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.tan, reader()));

         if (source == butlog)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.log, reader()));

         if (source == butln)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.ln, reader())); 

         if (source == butrate)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.rate, reader()));

         if (source == butabs)
            writer(calc.calculateMono(Calculator.MonoOperatorModes.abs, reader()));

         if (source == butEqual)
            writer(calc.calculateEqual(reader()));

         if (source == butCancel)
            writer(calc.reset());

         if (source == butBinary)
            parsetoBinary();
      }

      text.selectAll();
   }
","['   ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '      ', 'final', ' ', 'Object', ' ', 'source', ' ', '=', ' ', 'e', '.', 'getSource', '(', ')', ';', '\n', '      ', 'Double', ' ', 'checkNum', ' ', '=', ' ', 'null', ';', '\n', '\n', '      ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '10', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'but', '[', 'i', ']', ')', ' ', '{', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'buttonValue', '[', 'i', ']', ')', ';', '\n', '            ', 'return', ';', '\n', '         ', '}', '\n', '      ', '}', '\n', '\n', '    ', '\n', '      ', 'try', ' ', '{', '\n', '         ', 'checkNum', ' ', '=', ' ', 'Double', '.', 'parseDouble', '(', 'text', '.', 'getText', '(', ')', ')', ';', '\n', '      ', '}', ' ', 'catch', '(', 'NumberFormatException', ' ', 'k', ')', ' ', '{', '\n', '\n', '      ', '}', '\n', '\n', '      ', 'if', ' ', '(', 'checkNum', ' ', '!', '=', ' ', 'null', ' ', '|', '|', ' ', 'source', ' ', '=', '=', ' ', 'butCancel', ')', ' ', '{', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butAdd', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'add', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butAdd', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMinus', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'minus', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMinus', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butMultiply', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'multiply', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butMultiply', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butDivide', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'divide', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '            ', 'text', '.', 'replaceSelection', '(', 'butDivide', '.', 'getText', '(', ')', ')', ';', '\n', '         ', '}', '\n', '         ', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butxpowerofy', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateBi', '(', 'Calculator', '.', 'BiOperatorModes', '.', 'xpowerofy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquare', ')', ' ', '{', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'square', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '         ', '}', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSquareRoot', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'squareRoot', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butOneDividedBy', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'oneDividedBy', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCos', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'cos', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butSin', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'sin', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butTan', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'tan', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butlog', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'log', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butln', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'ln', ',', ' ', 'reader', '(', ')', ')', ')', ';', ' ', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butrate', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'rate', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butabs', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateMono', '(', 'Calculator', '.', 'MonoOperatorModes', '.', 'abs', ',', ' ', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butEqual', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'calculateEqual', '(', 'reader', '(', ')', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butCancel', ')', '\n', '            ', 'writer', '(', 'calc', '.', 'reset', '(', ')', ')', ';', '\n', '\n', '         ', 'if', ' ', '(', 'source', ' ', '=', '=', ' ', 'butBinary', ')', '\n', '            ', 'parsetoBinary', '(', ')', ';', '\n', '      ', '}', '\n', '\n', '      ', 'text', '.', 'selectAll', '(', ')', ';', '\n', '   ', '}', '\n']"
master,a5fc3db6404fb28228be6e48b3817e1f04870cb4,Calculator.java,calculateBiImpl,"    private Double calculateBiImpl() {
        if (mode.equals(BiOperatorModes.normal)) {
            return num2;
        }
        if (mode.equals(BiOperatorModes.add)) {
            if (num2 != 0) {
                return num1 + num2;
            }

            return num1;
        }
        if (mode.equals(BiOperatorModes.minus)) {
            return num1 - num2;
        }
        if (mode.equals(BiOperatorModes.multiply)) {
            return num1 * num2;
        }
        if (mode.equals(BiOperatorModes.divide)) {
            return num1 / num2;
        }
        if (mode.equals(BiOperatorModes.xpowerofy)) {
            return pow(num1,num2);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/a5fc3db6404fb28228be6e48b3817e1f04870cb4,"    private Double calculateBiImpl() {
        if (mode.equals(BiOperatorModes.normal)) {
            return num2;
        }
        if (mode.equals(BiOperatorModes.add)) {
            if (num2 != 0) {
                return num1 + num2;
            }

            return num1;
        }
        if (mode.equals(BiOperatorModes.minus)) {
            return num1 - num2;
        }
        if (mode.equals(BiOperatorModes.multiply)) {
            return num1 * num2;
        }
        if (mode.equals(BiOperatorModes.divide)) {
            return num1 / num2;
        }
        if (mode.equals(BiOperatorModes.xpowerofy)) {
            return pow(num1,num2);
        }

        
        throw new Error();
    }
","['    ', 'private', ' ', 'Double', ' ', 'calculateBiImpl', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'mode', '.', 'equals', '(', 'BiOperatorModes', '.', 'normal', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', '.', 'equals', '(', 'BiOperatorModes', '.', 'add', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'num2', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'num1', ' ', '+', ' ', 'num2', ';', '\n', '            ', '}', '\n', '\n', '            ', 'return', ' ', 'num1', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', '.', 'equals', '(', 'BiOperatorModes', '.', 'minus', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '-', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', '.', 'equals', '(', 'BiOperatorModes', '.', 'multiply', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '*', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', '.', 'equals', '(', 'BiOperatorModes', '.', 'divide', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num1', ' ', '/', ' ', 'num2', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'mode', '.', 'equals', '(', 'BiOperatorModes', '.', 'xpowerofy', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'pow', '(', 'num1', ',', 'num2', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
master,a5fc3db6404fb28228be6e48b3817e1f04870cb4,Calculator.java,calculateBi,"    public Double calculateBi(BiOperatorModes newMode, Double num) {
        if (mode.equals(BiOperatorModes.normal)) {
            num2 = 0.0;",https://www.github.com/ph-7/simple-java-calculator/commit/a5fc3db6404fb28228be6e48b3817e1f04870cb4,"    public Double calculateBi(BiOperatorModes newMode, Double num) {
        if (mode.equals(BiOperatorModes.normal)) {
            num2 = 0.0;
","['    ', 'public', ' ', 'Double', ' ', 'calculateBi', '(', 'BiOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'mode', '.', 'equals', '(', 'BiOperatorModes', '.', 'normal', ')', ')', ' ', '{', '\n', '            ', 'num2', ' ', '=', ' ', '0.0', ';', '\n']"
master,a5fc3db6404fb28228be6e48b3817e1f04870cb4,Calculator.java,calculateMono,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode.equals(MonoOperatorModes.square)) {
            return num * num;
        }
        if (newMode.equals(MonoOperatorModes.squareRoot)) {
            return Math.sqrt(num);
        }
        if (newMode.equals(MonoOperatorModes.oneDividedBy)) {
            return 1 / num;
        }
        if (newMode.equals(MonoOperatorModes.cos)) {
            return Math.cos(Math.toRadians(num));
        }
        if (newMode.equals(MonoOperatorModes.sin)) {
            return Math.sin(Math.toRadians(num));
        }
        if (newMode.equals(MonoOperatorModes.tan)) {
            if (num == 0 || num % 180 == 0 ) {
                return 0.0;
            }
            if (num % 90 == 0.0 && num % 180 != 0.0) {
                return NaN;
            }

            return Math.tan(Math.toRadians(num));
        }
        if (newMode.equals(MonoOperatorModes.log)) {
            return log10(num);
        }
        if (newMode.equals(MonoOperatorModes.ln)) {
            return log(num);
        }
        if (newMode.equals(MonoOperatorModes.rate) ) {
            return num / 100;
        }
        if (newMode.equals(MonoOperatorModes.abs)){
            return Math.abs(num);
        }

        // never reach
        throw new Error();
    }",https://www.github.com/ph-7/simple-java-calculator/commit/a5fc3db6404fb28228be6e48b3817e1f04870cb4,"    public Double calculateMono(MonoOperatorModes newMode, Double num) {
        if (newMode.equals(MonoOperatorModes.square)) {
            return num * num;
        }
        if (newMode.equals(MonoOperatorModes.squareRoot)) {
            return Math.sqrt(num);
        }
        if (newMode.equals(MonoOperatorModes.oneDividedBy)) {
            return 1 / num;
        }
        if (newMode.equals(MonoOperatorModes.cos)) {
            return Math.cos(Math.toRadians(num));
        }
        if (newMode.equals(MonoOperatorModes.sin)) {
            return Math.sin(Math.toRadians(num));
        }
        if (newMode.equals(MonoOperatorModes.tan)) {
            if (num == 0 || num % 180 == 0 ) {
                return 0.0;
            }
            if (num % 90 == 0.0 && num % 180 != 0.0) {
                return NaN;
            }

            return Math.tan(Math.toRadians(num));
        }
        if (newMode.equals(MonoOperatorModes.log)) {
            return log10(num);
        }
        if (newMode.equals(MonoOperatorModes.ln)) {
            return log(num);
        }
        if (newMode.equals(MonoOperatorModes.rate) ) {
            return num / 100;
        }
        if (newMode.equals(MonoOperatorModes.abs)){
            return Math.abs(num);
        }

        
        throw new Error();
    }
","['    ', 'public', ' ', 'Double', ' ', 'calculateMono', '(', 'MonoOperatorModes', ' ', 'newMode', ',', ' ', 'Double', ' ', 'num', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'square', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '*', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'squareRoot', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sqrt', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'oneDividedBy', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', '1', ' ', '/', ' ', 'num', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'cos', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'cos', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'sin', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'sin', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'tan', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'num', ' ', '=', '=', ' ', '0', ' ', '|', '|', ' ', 'num', ' ', '%', ' ', '180', ' ', '=', '=', ' ', '0', ' ', ')', ' ', '{', '\n', '                ', 'return', ' ', '0.0', ';', '\n', '            ', '}', '\n', '            ', 'if', ' ', '(', 'num', ' ', '%', ' ', '90', ' ', '=', '=', ' ', '0.0', ' ', '&', '&', ' ', 'num', ' ', '%', ' ', '180', ' ', '!', '=', ' ', '0.0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'NaN', ';', '\n', '            ', '}', '\n', '\n', '            ', 'return', ' ', 'Math', '.', 'tan', '(', 'Math', '.', 'toRadians', '(', 'num', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'log', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log10', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'ln', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'log', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'rate', ')', ' ', ')', ' ', '{', '\n', '            ', 'return', ' ', 'num', ' ', '/', ' ', '100', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'newMode', '.', 'equals', '(', 'MonoOperatorModes', '.', 'abs', ')', ')', '{', '\n', '            ', 'return', ' ', 'Math', '.', 'abs', '(', 'num', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'throw', ' ', 'new', ' ', 'Error', '(', ')', ';', '\n', '    ', '}', '\n']"
