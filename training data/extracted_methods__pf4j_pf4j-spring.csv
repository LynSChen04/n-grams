Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,ExtensionsInjector.java,setApplicationContext,"    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }
","['    ', 'public', ' ', 'void', ' ', 'setApplicationContext', '(', 'ApplicationContext', ' ', 'applicationContext', ')', ' ', 'throws', ' ', 'BeansException', ' ', '{', '\n', '        ', 'this', '.', 'applicationContext', ' ', '=', ' ', 'applicationContext', ';', '\n', '    ', '}', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,ExtensionsInjector.java,postProcessBeanFactory,"    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
        injectExtensions(registry);
    }",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
        injectExtensions(registry);
    }
","['    ', 'public', ' ', 'void', ' ', 'postProcessBeanFactory', '(', 'ConfigurableListableBeanFactory', ' ', 'beanFactory', ')', ' ', 'throws', ' ', 'BeansException', ' ', '{', '\n', '        ', 'BeanDefinitionRegistry', ' ', 'registry', ' ', '=', ' ', '(', 'BeanDefinitionRegistry', ')', ' ', 'beanFactory', ';', '\n', '        ', 'injectExtensions', '(', 'registry', ')', ';', '\n', '    ', '}', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,ExtensionsInjector.java,injectExtensions,"    private void injectExtensions(BeanDefinitionRegistry registry) {
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    private void injectExtensions(BeanDefinitionRegistry registry) {
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());
","['    ', 'private', ' ', 'void', ' ', 'injectExtensions', '(', 'BeanDefinitionRegistry', ' ', 'registry', ')', ' ', '{', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'PluginManager', '.', 'class', ')', ';', '\n', '        ', 'List', '<', 'PluginWrapper', '>', ' ', 'startedPlugins', ' ', '=', ' ', 'pluginManager', '.', 'getStartedPlugins', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'PluginWrapper', ' ', 'plugin', ' ', ':', ' ', 'startedPlugins', ')', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Registering extensions of the plugin '{}' as beans"", '""', ',', ' ', 'plugin', '.', 'getPluginId', '(', ')', ')', ';', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,Boot.java,main,"    public static void main(String[] args) {
        // print logo
        printLogo();

        // retrieves the spring application context
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(Boot.class);

        // print greetings in System.out
        Greetings greetings = applicationContext.getBean(Greetings.class);
        greetings.printGreetings();

        // stop plugins
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        pluginManager.stopPlugins();
    }",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    public static void main(String[] args) {
        
        printLogo();

        
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(Boot.class);

        
        Greetings greetings = applicationContext.getBean(Greetings.class);
        greetings.printGreetings();

        
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        pluginManager.stopPlugins();
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', '\n', '        ', 'printLogo', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'ApplicationContext', ' ', 'applicationContext', ' ', '=', ' ', 'new', ' ', 'AnnotationConfigApplicationContext', '(', 'Boot', '.', 'class', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Greetings', ' ', 'greetings', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'Greetings', '.', 'class', ')', ';', '\n', '        ', 'greetings', '.', 'printGreetings', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'PluginManager', '.', 'class', ')', ';', '\n', '        ', 'pluginManager', '.', 'stopPlugins', '(', ')', ';', '\n', '    ', '}', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,Boot.java,pluginManager,"    public PluginManager pluginManager() {
        PluginManager pluginManager = new DefaultPluginManager();
        pluginManager.loadPlugins();

        // start (active/resolved) the plugins
        pluginManager.startPlugins();

        return pluginManager;
    }",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    public PluginManager pluginManager() {
        PluginManager pluginManager = new DefaultPluginManager();
        pluginManager.loadPlugins();

        
        pluginManager.startPlugins();

        return pluginManager;
    }
","['    ', 'public', ' ', 'PluginManager', ' ', 'pluginManager', '(', ')', ' ', '{', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'new', ' ', 'DefaultPluginManager', '(', ')', ';', '\n', '        ', 'pluginManager', '.', 'loadPlugins', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'pluginManager', '.', 'startPlugins', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'pluginManager', ';', '\n', '    ', '}', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,Boot.java,extensionsInjector,"    public static ExtensionsInjector extensionsInjector() {
        return new ExtensionsInjector();
    }",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    public static ExtensionsInjector extensionsInjector() {
        return new ExtensionsInjector();
    }
","['    ', 'public', ' ', 'static', ' ', 'ExtensionsInjector', ' ', 'extensionsInjector', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'ExtensionsInjector', '(', ')', ';', '\n', '    ', '}', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,Boot.java,greetings,"    public Greetings greetings() {
        return new Greetings();
    }",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    public Greetings greetings() {
        return new Greetings();
    }
","['    ', 'public', ' ', 'Greetings', ' ', 'greetings', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'Greetings', '(', ')', ';', '\n', '    ', '}', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,Boot.java,printLogo,"    private static void printLogo() {
        System.out.println(StringUtils.repeat(""#"", 40));
        System.out.println(StringUtils.center(""PF4J-SPRING"", 40));
        System.out.println(StringUtils.repeat(""#"", 40));
    }",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    private static void printLogo() {
        System.out.println(StringUtils.repeat(""#"", 40));
        System.out.println(StringUtils.center(""PF4J-SPRING"", 40));
        System.out.println(StringUtils.repeat(""#"", 40));
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'printLogo', '(', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'StringUtils', '.', 'repeat', '(', '""', '#', '""', ',', ' ', '40', ')', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'StringUtils', '.', 'center', '(', '""', 'PF4J-SPRING', '""', ',', ' ', '40', ')', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'StringUtils', '.', 'repeat', '(', '""', '#', '""', ',', ' ', '40', ')', ')', ';', '\n', '    ', '}', '\n']"
master,f8600a4c198f34ceb0869a575907a0d9a44dcddb,Greetings.java,printGreetings,"    public void printGreetings() {
        System.out.println(String.format(""Found %d extensions for extension point '%s'"", greetings.size(), Greeting.class.getName()));
        for (Greeting greeting : greetings) {
            System.out.println("">>> "" + greeting.getGreeting());",https://www.github.com/pf4j/pf4j-spring/commit/f8600a4c198f34ceb0869a575907a0d9a44dcddb,"    public void printGreetings() {
        System.out.println(String.format(""Found %d extensions for extension point '%s'"", greetings.size(), Greeting.class.getName()));
        for (Greeting greeting : greetings) {
            System.out.println("">>> "" + greeting.getGreeting());
","['    ', 'public', ' ', 'void', ' ', 'printGreetings', '(', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'String', '.', 'format', '(', '""', ""Found %d extensions for extension point '%s'"", '""', ',', ' ', 'greetings', '.', 'size', '(', ')', ',', ' ', 'Greeting', '.', 'class', '.', 'getName', '(', ')', ')', ')', ';', '\n', '        ', 'for', ' ', '(', 'Greeting', ' ', 'greeting', ' ', ':', ' ', 'greetings', ')', ' ', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', '>>> ', '""', ' ', '+', ' ', 'greeting', '.', 'getGreeting', '(', ')', ')', ';', '\n']"
master,30a8f80d8b57681f453b92dfffc1e4684df37490,Boot.java,main,"    public static void main(String[] args) {
        // print logo
        printLogo();

        // retrieves the spring application context
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);

        // print greetings in System.out
        Greetings greetings = applicationContext.getBean(Greetings.class);
        greetings.printGreetings();

        // stop plugins
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        pluginManager.stopPlugins();
    }",https://www.github.com/pf4j/pf4j-spring/commit/30a8f80d8b57681f453b92dfffc1e4684df37490,"    public static void main(String[] args) {
        
        printLogo();

        
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);

        
        Greetings greetings = applicationContext.getBean(Greetings.class);
        greetings.printGreetings();

        
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        pluginManager.stopPlugins();
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', '\n', '        ', 'printLogo', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'ApplicationContext', ' ', 'applicationContext', ' ', '=', ' ', 'new', ' ', 'AnnotationConfigApplicationContext', '(', 'AppConfig', '.', 'class', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Greetings', ' ', 'greetings', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'Greetings', '.', 'class', ')', ';', '\n', '        ', 'greetings', '.', 'printGreetings', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'PluginManager', '.', 'class', ')', ';', '\n', '        ', 'pluginManager', '.', 'stopPlugins', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6f0171ae10be18e133d5ccd70c8361825c76d5b9,WelcomePlugin.java,stop,"    public void stop() {
        System.out.println(""WelcomePlugin.stop()"");
    }",https://www.github.com/pf4j/pf4j-spring/commit/6f0171ae10be18e133d5ccd70c8361825c76d5b9,"    public void stop() {
        System.out.println(""WelcomePlugin.stop()"");
    }
","['    ', 'public', ' ', 'void', ' ', 'stop', '(', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'WelcomePlugin.stop()', '""', ')', ';', '\n', '    ', '}', '\n']"
master,6f0171ae10be18e133d5ccd70c8361825c76d5b9,HelloPlugin.java,start,"    public void start() {
        System.out.println(""HelloPlugin.start()"");
    }",https://www.github.com/pf4j/pf4j-spring/commit/6f0171ae10be18e133d5ccd70c8361825c76d5b9,"    public void start() {
        System.out.println(""HelloPlugin.start()"");
    }
","['    ', 'public', ' ', 'void', ' ', 'start', '(', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'HelloPlugin.start()', '""', ')', ';', '\n', '    ', '}', '\n']"
master,6f0171ae10be18e133d5ccd70c8361825c76d5b9,HelloPlugin.java,stop,"    public void stop() {
        System.out.println(""HelloPlugin.stop()"");
    }",https://www.github.com/pf4j/pf4j-spring/commit/6f0171ae10be18e133d5ccd70c8361825c76d5b9,"    public void stop() {
        System.out.println(""HelloPlugin.stop()"");
    }
","['    ', 'public', ' ', 'void', ' ', 'stop', '(', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'HelloPlugin.stop()', '""', ')', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,Boot.java,main,"    public static void main(String[] args) {
        // print logo
        printLogo();

        // retrieves the spring application context
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(SpringConfiguration.class);

        // retrieves automatically the extensions for the Greeting.class extension point
        Greetings greetings = applicationContext.getBean(Greetings.class);
        greetings.printGreetings();

        // stop plugins
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        /*
        // retrieves manually the extensions for the Greeting.class extension point
        List<Greeting> greetings = pluginManager.getExtensions(Greeting.class);
        System.out.println(""greetings.size() = "" + greetings.size());
        */
        pluginManager.stopPlugins();
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    public static void main(String[] args) {
        
        printLogo();

        
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(SpringConfiguration.class);

        
        Greetings greetings = applicationContext.getBean(Greetings.class);
        greetings.printGreetings();

        
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        
        pluginManager.stopPlugins();
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', '\n', '        ', 'printLogo', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'ApplicationContext', ' ', 'applicationContext', ' ', '=', ' ', 'new', ' ', 'AnnotationConfigApplicationContext', '(', 'SpringConfiguration', '.', 'class', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Greetings', ' ', 'greetings', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'Greetings', '.', 'class', ')', ';', '\n', '        ', 'greetings', '.', 'printGreetings', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'PluginManager', '.', 'class', ')', ';', '\n', '        ', '\n', '        ', 'pluginManager', '.', 'stopPlugins', '(', ')', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,SpringConfiguration.java,pluginManager,"    public PluginManager pluginManager() {
        PluginManager pluginManager = new DefaultPluginManager() {

            @Override
            protected ExtensionFactory createExtensionFactory() {
                return new SpringExtensionFactory(this);
            }

        };
        pluginManager.loadPlugins();

        // start (active/resolved) the plugins
        pluginManager.startPlugins();

        return pluginManager;
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    public PluginManager pluginManager() {
        PluginManager pluginManager = new DefaultPluginManager() {

            @Override
            protected ExtensionFactory createExtensionFactory() {
                return new SpringExtensionFactory(this);
            }

        };
        pluginManager.loadPlugins();

        
        pluginManager.startPlugins();

        return pluginManager;
    }
","['    ', 'public', ' ', 'PluginManager', ' ', 'pluginManager', '(', ')', ' ', '{', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'new', ' ', 'DefaultPluginManager', '(', ')', ' ', '{', '\n', '\n', '            ', '@Override', '\n', '            ', 'protected', ' ', 'ExtensionFactory', ' ', 'createExtensionFactory', '(', ')', ' ', '{', '\n', '                ', 'return', ' ', 'new', ' ', 'SpringExtensionFactory', '(', 'this', ')', ';', '\n', '            ', '}', '\n', '\n', '        ', '}', ';', '\n', '        ', 'pluginManager', '.', 'loadPlugins', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'pluginManager', '.', 'startPlugins', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'pluginManager', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,SpringConfiguration.java,createExtensionFactory,"            protected ExtensionFactory createExtensionFactory() {
                return new SpringExtensionFactory(this);
            }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"            protected ExtensionFactory createExtensionFactory() {
                return new SpringExtensionFactory(this);
            }
","['            ', 'protected', ' ', 'ExtensionFactory', ' ', 'createExtensionFactory', '(', ')', ' ', '{', '\n', '                ', 'return', ' ', 'new', ' ', 'SpringExtensionFactory', '(', 'this', ')', ';', '\n', '            ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,HelloPlugin.java,stop,"    public void stop() {
        System.out.println(""HelloPlugin.stop()"");
        super.stop(); // to close applicationContext
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    public void stop() {
        System.out.println(""HelloPlugin.stop()"");
        super.stop(); 
    }
","['    ', 'public', ' ', 'void', ' ', 'stop', '(', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'HelloPlugin.stop()', '""', ')', ';', '\n', '        ', 'super', '.', 'stop', '(', ')', ';', ' ', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,HelloPlugin.java,createApplicationContext,"    protected ApplicationContext createApplicationContext() {
        AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();
        applicationContext.setClassLoader(getWrapper().getPluginClassLoader());
        applicationContext.register(SpringConfiguration.class);
        applicationContext.refresh();

        return applicationContext;
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    protected ApplicationContext createApplicationContext() {
        AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();
        applicationContext.setClassLoader(getWrapper().getPluginClassLoader());
        applicationContext.register(SpringConfiguration.class);
        applicationContext.refresh();

        return applicationContext;
    }
","['    ', 'protected', ' ', 'ApplicationContext', ' ', 'createApplicationContext', '(', ')', ' ', '{', '\n', '        ', 'AnnotationConfigApplicationContext', ' ', 'applicationContext', ' ', '=', ' ', 'new', ' ', 'AnnotationConfigApplicationContext', '(', ')', ';', '\n', '        ', 'applicationContext', '.', 'setClassLoader', '(', 'getWrapper', '(', ')', '.', 'getPluginClassLoader', '(', ')', ')', ';', '\n', '        ', 'applicationContext', '.', 'register', '(', 'SpringConfiguration', '.', 'class', ')', ';', '\n', '        ', 'applicationContext', '.', 'refresh', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'applicationContext', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,SpringConfiguration.java,messageProvider,"    public MessageProvider messageProvider() {
        return new HelloMessageProvider();
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    public MessageProvider messageProvider() {
        return new HelloMessageProvider();
    }
","['    ', 'public', ' ', 'MessageProvider', ' ', 'messageProvider', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'HelloMessageProvider', '(', ')', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,ExtensionsInjector.java,postProcessBeanFactory,"    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        // inject extensions
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        ExtensionFactory extensionFactory = pluginManager.getExtensionFactory();
        // TODO inject default extensions (not inside of any plugin)
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        
        PluginManager pluginManager = applicationContext.getBean(PluginManager.class);
        ExtensionFactory extensionFactory = pluginManager.getExtensionFactory();
        
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());
","['    ', 'public', ' ', 'void', ' ', 'postProcessBeanFactory', '(', 'ConfigurableListableBeanFactory', ' ', 'beanFactory', ')', ' ', 'throws', ' ', 'BeansException', ' ', '{', '\n', '        ', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'applicationContext', '.', 'getBean', '(', 'PluginManager', '.', 'class', ')', ';', '\n', '        ', 'ExtensionFactory', ' ', 'extensionFactory', ' ', '=', ' ', 'pluginManager', '.', 'getExtensionFactory', '(', ')', ';', '\n', '        ', '\n', '        ', 'List', '<', 'PluginWrapper', '>', ' ', 'startedPlugins', ' ', '=', ' ', 'pluginManager', '.', 'getStartedPlugins', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'PluginWrapper', ' ', 'plugin', ' ', ':', ' ', 'startedPlugins', ')', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Registering extensions of the plugin '{}' as beans"", '""', ',', ' ', 'plugin', '.', 'getPluginId', '(', ')', ')', ';', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,ExtensionsInjector.java,createBeanDefinition,"    protected BeanDefinition createBeanDefinition(Class<?> extensionClass) {
        // optionally configure all bean properties, like scope, prototype/singleton, etc
//        return new RootBeanDefinition(extensionClass);
        return new RootBeanDefinition(extensionClass, Autowire.BY_TYPE.value(), true);
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    protected BeanDefinition createBeanDefinition(Class<?> extensionClass) {
        

        return new RootBeanDefinition(extensionClass, Autowire.BY_TYPE.value(), true);
    }
","['    ', 'protected', ' ', 'BeanDefinition', ' ', 'createBeanDefinition', '(', 'Class', '<', '?', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', '\n', '\n', '        ', 'return', ' ', 'new', ' ', 'RootBeanDefinition', '(', 'extensionClass', ',', ' ', 'Autowire', '.', 'BY_TYPE', '.', 'value', '(', ')', ',', ' ', 'true', ')', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,SpringExtensionFactory.java,create,"    public Object create(Class<?> extensionClass) {
        Object extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            // test for SpringBean
            PluginWrapper pluginWrapper = pluginManager.whichPlugin(extensionClass);
            if (pluginWrapper != null) {
                Plugin plugin = pluginWrapper.getPlugin();
                if (plugin instanceof SpringPlugin) {
                    // autowire
                    ApplicationContext pluginContext = ((SpringPlugin) plugin).getApplicationContext();
                    pluginContext.getAutowireCapableBeanFactory().autowireBean(extension);
                }
            }
        }

        return extension;
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    public Object create(Class<?> extensionClass) {
        Object extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            
            PluginWrapper pluginWrapper = pluginManager.whichPlugin(extensionClass);
            if (pluginWrapper != null) {
                Plugin plugin = pluginWrapper.getPlugin();
                if (plugin instanceof SpringPlugin) {
                    
                    ApplicationContext pluginContext = ((SpringPlugin) plugin).getApplicationContext();
                    pluginContext.getAutowireCapableBeanFactory().autowireBean(extension);
                }
            }
        }

        return extension;
    }
","['    ', 'public', ' ', 'Object', ' ', 'create', '(', 'Class', '<', '?', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'Object', ' ', 'extension', ' ', '=', ' ', 'createWithoutSpring', '(', 'extensionClass', ')', ';', '\n', '        ', 'if', ' ', '(', 'autowire', ' ', '&', '&', ' ', 'extension', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', '\n', '            ', 'PluginWrapper', ' ', 'pluginWrapper', ' ', '=', ' ', 'pluginManager', '.', 'whichPlugin', '(', 'extensionClass', ')', ';', '\n', '            ', 'if', ' ', '(', 'pluginWrapper', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'Plugin', ' ', 'plugin', ' ', '=', ' ', 'pluginWrapper', '.', 'getPlugin', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'plugin', ' ', 'instanceof', ' ', 'SpringPlugin', ')', ' ', '{', '\n', '                    ', '\n', '                    ', 'ApplicationContext', ' ', 'pluginContext', ' ', '=', ' ', '(', '(', 'SpringPlugin', ')', ' ', 'plugin', ')', '.', 'getApplicationContext', '(', ')', ';', '\n', '                    ', 'pluginContext', '.', 'getAutowireCapableBeanFactory', '(', ')', '.', 'autowireBean', '(', 'extension', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'extension', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,SpringExtensionFactory.java,createWithoutSpring,"    protected Object createWithoutSpring(Class<?> extensionClass) {
        try {
            return extensionClass.newInstance();
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

        return null;
    }",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    protected Object createWithoutSpring(Class<?> extensionClass) {
        try {
            return extensionClass.newInstance();
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

        return null;
    }
","['    ', 'protected', ' ', 'Object', ' ', 'createWithoutSpring', '(', 'Class', '<', '?', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'extensionClass', '.', 'newInstance', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,SpringPlugin.java,stop,"    public void stop() {
        // close applicationContext
        if ((applicationContext != null) && (applicationContext instanceof ConfigurableApplicationContext)) {
            ((ConfigurableApplicationContext) applicationContext).close();",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    public void stop() {
        
        if ((applicationContext != null) && (applicationContext instanceof ConfigurableApplicationContext)) {
            ((ConfigurableApplicationContext) applicationContext).close();
","['    ', 'public', ' ', 'void', ' ', 'stop', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'if', ' ', '(', '(', 'applicationContext', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'applicationContext', ' ', 'instanceof', ' ', 'ConfigurableApplicationContext', ')', ')', ' ', '{', '\n', '            ', '(', '(', 'ConfigurableApplicationContext', ')', ' ', 'applicationContext', ')', '.', 'close', '(', ')', ';', '\n']"
master,7837ffb3dc8451a78a02780ca3c1742bb13da836,SpringPlugin.java,createApplicationContext,"    protected abstract ApplicationContext createApplicationContext();

}",https://www.github.com/pf4j/pf4j-spring/commit/7837ffb3dc8451a78a02780ca3c1742bb13da836,"    protected abstract ApplicationContext createApplicationContext();

}
","['    ', 'protected', ' ', 'abstract', ' ', 'ApplicationContext', ' ', 'createApplicationContext', '(', ')', ';', '\n', '\n', '}', '\n']"
master,6a6f7633acf8fa4b6dfbbc6d966c2455e71b505a,ExtensionsInjector.java,postProcessBeanFactory,"    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        PluginManager pluginManager = beanFactory.getBean(PluginManager.class);
        ExtensionFactory extensionFactory = pluginManager.getExtensionFactory();

        // add extensions from classpath (non plugin)
        Set<String> extensionClassNames = pluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                beanFactory.registerSingleton(extensionClassName, extensionFactory.create(extensionClass));
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        // add extensions for each started plugin
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());",https://www.github.com/pf4j/pf4j-spring/commit/6a6f7633acf8fa4b6dfbbc6d966c2455e71b505a,"    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        PluginManager pluginManager = beanFactory.getBean(PluginManager.class);
        ExtensionFactory extensionFactory = pluginManager.getExtensionFactory();

        
        Set<String> extensionClassNames = pluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                beanFactory.registerSingleton(extensionClassName, extensionFactory.create(extensionClass));
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());
","['    ', 'public', ' ', 'void', ' ', 'postProcessBeanFactory', '(', 'ConfigurableListableBeanFactory', ' ', 'beanFactory', ')', ' ', 'throws', ' ', 'BeansException', ' ', '{', '\n', '        ', 'PluginManager', ' ', 'pluginManager', ' ', '=', ' ', 'beanFactory', '.', 'getBean', '(', 'PluginManager', '.', 'class', ')', ';', '\n', '        ', 'ExtensionFactory', ' ', 'extensionFactory', ' ', '=', ' ', 'pluginManager', '.', 'getExtensionFactory', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Set', '<', 'String', '>', ' ', 'extensionClassNames', ' ', '=', ' ', 'pluginManager', '.', 'getExtensionClassNames', '(', 'null', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'extensionClassName', ' ', ':', ' ', 'extensionClassNames', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'log', '.', 'debug', '(', '""', ""Register extension '{}' as bean"", '""', ',', ' ', 'extensionClassName', ')', ';', '\n', '                ', 'Class', '<', '?', '>', ' ', 'extensionClass', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getClassLoader', '(', ')', '.', 'loadClass', '(', 'extensionClassName', ')', ';', '\n', '                ', 'beanFactory', '.', 'registerSingleton', '(', 'extensionClassName', ',', ' ', 'extensionFactory', '.', 'create', '(', 'extensionClass', ')', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'ClassNotFoundException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'PluginWrapper', '>', ' ', 'startedPlugins', ' ', '=', ' ', 'pluginManager', '.', 'getStartedPlugins', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'PluginWrapper', ' ', 'plugin', ' ', ':', ' ', 'startedPlugins', ')', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Registering extensions of the plugin '{}' as beans"", '""', ',', ' ', 'plugin', '.', 'getPluginId', '(', ')', ')', ';', '\n']"
master,e00e15ea3099c959e5bc448e1e5218ed1c292351,SingletonSpringExtensionFactory.java,create,"    public Object create(Class<?> extensionClass) {
        String extensionClassName = extensionClass.getName();
        if (cache.containsKey(extensionClassName)) {
            return cache.get(extensionClassName);
        }

        Object extension = super.create(extensionClass);
        if (extensionClassNames.isEmpty() || extensionClassNames.contains(extensionClassName)) {
            cache.put(extensionClassName, extension);
        }

        return extension;
    }",https://www.github.com/pf4j/pf4j-spring/commit/e00e15ea3099c959e5bc448e1e5218ed1c292351,"    public Object create(Class<?> extensionClass) {
        String extensionClassName = extensionClass.getName();
        if (cache.containsKey(extensionClassName)) {
            return cache.get(extensionClassName);
        }

        Object extension = super.create(extensionClass);
        if (extensionClassNames.isEmpty() || extensionClassNames.contains(extensionClassName)) {
            cache.put(extensionClassName, extension);
        }

        return extension;
    }
","['    ', 'public', ' ', 'Object', ' ', 'create', '(', 'Class', '<', '?', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'String', ' ', 'extensionClassName', ' ', '=', ' ', 'extensionClass', '.', 'getName', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'cache', '.', 'containsKey', '(', 'extensionClassName', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'cache', '.', 'get', '(', 'extensionClassName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Object', ' ', 'extension', ' ', '=', ' ', 'super', '.', 'create', '(', 'extensionClass', ')', ';', '\n', '        ', 'if', ' ', '(', 'extensionClassNames', '.', 'isEmpty', '(', ')', ' ', '|', '|', ' ', 'extensionClassNames', '.', 'contains', '(', 'extensionClassName', ')', ')', ' ', '{', '\n', '            ', 'cache', '.', 'put', '(', 'extensionClassName', ',', ' ', 'extension', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'extension', ';', '\n', '    ', '}', '\n']"
master,1139d13ff2f100b00d482b094ff22793534302e5,SpringConfiguration.java,extensionsInjector,"    public ExtensionsInjector extensionsInjector() {
        return new ExtensionsInjector(pluginManager());
    }",https://www.github.com/pf4j/pf4j-spring/commit/1139d13ff2f100b00d482b094ff22793534302e5,"    public ExtensionsInjector extensionsInjector() {
        return new ExtensionsInjector(pluginManager());
    }
","['    ', 'public', ' ', 'ExtensionsInjector', ' ', 'extensionsInjector', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'ExtensionsInjector', '(', 'pluginManager', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,1139d13ff2f100b00d482b094ff22793534302e5,ExtensionsInjector.java,injectExtensions,"    public void injectExtensions(SingletonBeanRegistry beanRegistry) {
        ExtensionFactory extensionFactory = pluginManager.getExtensionFactory();

        // add extensions from classpath (non plugin)
        Set<String> extensionClassNames = pluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionFactory.create(extensionClass), beanRegistry);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        // add extensions for each started plugin
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());",https://www.github.com/pf4j/pf4j-spring/commit/1139d13ff2f100b00d482b094ff22793534302e5,"    public void injectExtensions(SingletonBeanRegistry beanRegistry) {
        ExtensionFactory extensionFactory = pluginManager.getExtensionFactory();

        
        Set<String> extensionClassNames = pluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionFactory.create(extensionClass), beanRegistry);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());
","['    ', 'public', ' ', 'void', ' ', 'injectExtensions', '(', 'SingletonBeanRegistry', ' ', 'beanRegistry', ')', ' ', '{', '\n', '        ', 'ExtensionFactory', ' ', 'extensionFactory', ' ', '=', ' ', 'pluginManager', '.', 'getExtensionFactory', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Set', '<', 'String', '>', ' ', 'extensionClassNames', ' ', '=', ' ', 'pluginManager', '.', 'getExtensionClassNames', '(', 'null', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'extensionClassName', ' ', ':', ' ', 'extensionClassNames', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'log', '.', 'debug', '(', '""', ""Register extension '{}' as bean"", '""', ',', ' ', 'extensionClassName', ')', ';', '\n', '                ', 'Class', '<', '?', '>', ' ', 'extensionClass', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getClassLoader', '(', ')', '.', 'loadClass', '(', 'extensionClassName', ')', ';', '\n', '                ', 'registerExtension', '(', 'extensionFactory', '.', 'create', '(', 'extensionClass', ')', ',', ' ', 'beanRegistry', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'ClassNotFoundException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'PluginWrapper', '>', ' ', 'startedPlugins', ' ', '=', ' ', 'pluginManager', '.', 'getStartedPlugins', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'PluginWrapper', ' ', 'plugin', ' ', ':', ' ', 'startedPlugins', ')', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Registering extensions of the plugin '{}' as beans"", '""', ',', ' ', 'plugin', '.', 'getPluginId', '(', ')', ')', ';', '\n']"
master,1139d13ff2f100b00d482b094ff22793534302e5,ExtensionsInjector.java,registerExtension,"    protected void registerExtension(Object extension, SingletonBeanRegistry beanRegistry) {
        beanRegistry.registerSingleton(extension.getClass().getName(), extension);
    }",https://www.github.com/pf4j/pf4j-spring/commit/1139d13ff2f100b00d482b094ff22793534302e5,"    protected void registerExtension(Object extension, SingletonBeanRegistry beanRegistry) {
        beanRegistry.registerSingleton(extension.getClass().getName(), extension);
    }
","['    ', 'protected', ' ', 'void', ' ', 'registerExtension', '(', 'Object', ' ', 'extension', ',', ' ', 'SingletonBeanRegistry', ' ', 'beanRegistry', ')', ' ', '{', '\n', '        ', 'beanRegistry', '.', 'registerSingleton', '(', 'extension', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', ' ', 'extension', ')', ';', '\n', '    ', '}', '\n']"
master,4fc56f868855e129f99812d74073c699623d9e1d,SpringConfiguration.java,pluginManager,"    public SpringPluginManager pluginManager() {
        return new SpringPluginManager();
    }",https://www.github.com/pf4j/pf4j-spring/commit/4fc56f868855e129f99812d74073c699623d9e1d,"    public SpringPluginManager pluginManager() {
        return new SpringPluginManager();
    }
","['    ', 'public', ' ', 'SpringPluginManager', ' ', 'pluginManager', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'SpringPluginManager', '(', ')', ';', '\n', '    ', '}', '\n']"
master,4fc56f868855e129f99812d74073c699623d9e1d,ExtensionsInjector.java,injectExtensions,"    public void injectExtensions() {
        // add extensions from classpath (non plugin)
        Set<String> extensionClassNames = pluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionClass);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        // add extensions for each started plugin
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());",https://www.github.com/pf4j/pf4j-spring/commit/4fc56f868855e129f99812d74073c699623d9e1d,"    public void injectExtensions() {
        
        Set<String> extensionClassNames = pluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionClass);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        
        List<PluginWrapper> startedPlugins = pluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());
","['    ', 'public', ' ', 'void', ' ', 'injectExtensions', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'Set', '<', 'String', '>', ' ', 'extensionClassNames', ' ', '=', ' ', 'pluginManager', '.', 'getExtensionClassNames', '(', 'null', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'extensionClassName', ' ', ':', ' ', 'extensionClassNames', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'log', '.', 'debug', '(', '""', ""Register extension '{}' as bean"", '""', ',', ' ', 'extensionClassName', ')', ';', '\n', '                ', 'Class', '<', '?', '>', ' ', 'extensionClass', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getClassLoader', '(', ')', '.', 'loadClass', '(', 'extensionClassName', ')', ';', '\n', '                ', 'registerExtension', '(', 'extensionClass', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'ClassNotFoundException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'PluginWrapper', '>', ' ', 'startedPlugins', ' ', '=', ' ', 'pluginManager', '.', 'getStartedPlugins', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'PluginWrapper', ' ', 'plugin', ' ', ':', ' ', 'startedPlugins', ')', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Registering extensions of the plugin '{}' as beans"", '""', ',', ' ', 'plugin', '.', 'getPluginId', '(', ')', ')', ';', '\n']"
master,4fc56f868855e129f99812d74073c699623d9e1d,ExtensionsInjector.java,registerExtension,"    protected void registerExtension(Class<?> extensionClass) {
        Object extension = pluginManager.getExtensionFactory().create(extensionClass);
        beanFactory.registerSingleton(extension.getClass().getName(), extension);
    }",https://www.github.com/pf4j/pf4j-spring/commit/4fc56f868855e129f99812d74073c699623d9e1d,"    protected void registerExtension(Class<?> extensionClass) {
        Object extension = pluginManager.getExtensionFactory().create(extensionClass);
        beanFactory.registerSingleton(extension.getClass().getName(), extension);
    }
","['    ', 'protected', ' ', 'void', ' ', 'registerExtension', '(', 'Class', '<', '?', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'Object', ' ', 'extension', ' ', '=', ' ', 'pluginManager', '.', 'getExtensionFactory', '(', ')', '.', 'create', '(', 'extensionClass', ')', ';', '\n', '        ', 'beanFactory', '.', 'registerSingleton', '(', 'extension', '.', 'getClass', '(', ')', '.', 'getName', '(', ')', ',', ' ', 'extension', ')', ';', '\n', '    ', '}', '\n']"
master,4fc56f868855e129f99812d74073c699623d9e1d,SpringPluginManager.java,createExtensionFactory,"    protected ExtensionFactory createExtensionFactory() {
        return new SpringExtensionFactory(this);
    }",https://www.github.com/pf4j/pf4j-spring/commit/4fc56f868855e129f99812d74073c699623d9e1d,"    protected ExtensionFactory createExtensionFactory() {
        return new SpringExtensionFactory(this);
    }
","['    ', 'protected', ' ', 'ExtensionFactory', ' ', 'createExtensionFactory', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'SpringExtensionFactory', '(', 'this', ')', ';', '\n', '    ', '}', '\n']"
master,4fc56f868855e129f99812d74073c699623d9e1d,SpringPluginManager.java,init,"    public void init() {
        loadPlugins();
        startPlugins();

        AbstractAutowireCapableBeanFactory beanFactory = (AbstractAutowireCapableBeanFactory) applicationContext.getAutowireCapableBeanFactory();
        ExtensionsInjector extensionsInjector = new ExtensionsInjector(this, beanFactory);
        extensionsInjector.injectExtensions();
    }",https://www.github.com/pf4j/pf4j-spring/commit/4fc56f868855e129f99812d74073c699623d9e1d,"    public void init() {
        loadPlugins();
        startPlugins();

        AbstractAutowireCapableBeanFactory beanFactory = (AbstractAutowireCapableBeanFactory) applicationContext.getAutowireCapableBeanFactory();
        ExtensionsInjector extensionsInjector = new ExtensionsInjector(this, beanFactory);
        extensionsInjector.injectExtensions();
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', ')', ' ', '{', '\n', '        ', 'loadPlugins', '(', ')', ';', '\n', '        ', 'startPlugins', '(', ')', ';', '\n', '\n', '        ', 'AbstractAutowireCapableBeanFactory', ' ', 'beanFactory', ' ', '=', ' ', '(', 'AbstractAutowireCapableBeanFactory', ')', ' ', 'applicationContext', '.', 'getAutowireCapableBeanFactory', '(', ')', ';', '\n', '        ', 'ExtensionsInjector', ' ', 'extensionsInjector', ' ', '=', ' ', 'new', ' ', 'ExtensionsInjector', '(', 'this', ',', ' ', 'beanFactory', ')', ';', '\n', '        ', 'extensionsInjector', '.', 'injectExtensions', '(', ')', ';', '\n', '    ', '}', '\n']"
master,0ec63805023e1f4b86f76be97b8e2c71443f463c,SingletonSpringExtensionFactory.java,create,"    public <T> T create(Class<T> extensionClass) {
        String extensionClassName = extensionClass.getName();
        if (cache.containsKey(extensionClassName)) {
            return (T) cache.get(extensionClassName);
        }

        T extension = super.create(extensionClass);
        if (extensionClassNames.isEmpty() || extensionClassNames.contains(extensionClassName)) {
            cache.put(extensionClassName, extension);
        }

        return extension;
    }",https://www.github.com/pf4j/pf4j-spring/commit/0ec63805023e1f4b86f76be97b8e2c71443f463c,"    public <T> T create(Class<T> extensionClass) {
        String extensionClassName = extensionClass.getName();
        if (cache.containsKey(extensionClassName)) {
            return (T) cache.get(extensionClassName);
        }

        T extension = super.create(extensionClass);
        if (extensionClassNames.isEmpty() || extensionClassNames.contains(extensionClassName)) {
            cache.put(extensionClassName, extension);
        }

        return extension;
    }
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'T', ' ', 'create', '(', 'Class', '<', 'T', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'String', ' ', 'extensionClassName', ' ', '=', ' ', 'extensionClass', '.', 'getName', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'cache', '.', 'containsKey', '(', 'extensionClassName', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', '(', 'T', ')', ' ', 'cache', '.', 'get', '(', 'extensionClassName', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'T', ' ', 'extension', ' ', '=', ' ', 'super', '.', 'create', '(', 'extensionClass', ')', ';', '\n', '        ', 'if', ' ', '(', 'extensionClassNames', '.', 'isEmpty', '(', ')', ' ', '|', '|', ' ', 'extensionClassNames', '.', 'contains', '(', 'extensionClassName', ')', ')', ' ', '{', '\n', '            ', 'cache', '.', 'put', '(', 'extensionClassName', ',', ' ', 'extension', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'extension', ';', '\n', '    ', '}', '\n']"
master,0ec63805023e1f4b86f76be97b8e2c71443f463c,SpringExtensionFactory.java,create,"    public <T> T create(Class<T> extensionClass) {
        T extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            // test for SpringBean
            PluginWrapper pluginWrapper = pluginManager.whichPlugin(extensionClass);
            if (pluginWrapper != null) {
                Plugin plugin = pluginWrapper.getPlugin();
                if (plugin instanceof SpringPlugin) {
                    // autowire
                    ApplicationContext pluginContext = ((SpringPlugin) plugin).getApplicationContext();
                    pluginContext.getAutowireCapableBeanFactory().autowireBean(extension);
                }
            }
        }

        return extension;
    }",https://www.github.com/pf4j/pf4j-spring/commit/0ec63805023e1f4b86f76be97b8e2c71443f463c,"    public <T> T create(Class<T> extensionClass) {
        T extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            
            PluginWrapper pluginWrapper = pluginManager.whichPlugin(extensionClass);
            if (pluginWrapper != null) {
                Plugin plugin = pluginWrapper.getPlugin();
                if (plugin instanceof SpringPlugin) {
                    
                    ApplicationContext pluginContext = ((SpringPlugin) plugin).getApplicationContext();
                    pluginContext.getAutowireCapableBeanFactory().autowireBean(extension);
                }
            }
        }

        return extension;
    }
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'T', ' ', 'create', '(', 'Class', '<', 'T', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'T', ' ', 'extension', ' ', '=', ' ', 'createWithoutSpring', '(', 'extensionClass', ')', ';', '\n', '        ', 'if', ' ', '(', 'autowire', ' ', '&', '&', ' ', 'extension', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', '\n', '            ', 'PluginWrapper', ' ', 'pluginWrapper', ' ', '=', ' ', 'pluginManager', '.', 'whichPlugin', '(', 'extensionClass', ')', ';', '\n', '            ', 'if', ' ', '(', 'pluginWrapper', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'Plugin', ' ', 'plugin', ' ', '=', ' ', 'pluginWrapper', '.', 'getPlugin', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'plugin', ' ', 'instanceof', ' ', 'SpringPlugin', ')', ' ', '{', '\n', '                    ', '\n', '                    ', 'ApplicationContext', ' ', 'pluginContext', ' ', '=', ' ', '(', '(', 'SpringPlugin', ')', ' ', 'plugin', ')', '.', 'getApplicationContext', '(', ')', ';', '\n', '                    ', 'pluginContext', '.', 'getAutowireCapableBeanFactory', '(', ')', '.', 'autowireBean', '(', 'extension', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'extension', ';', '\n', '    ', '}', '\n']"
master,0ec63805023e1f4b86f76be97b8e2c71443f463c,SpringExtensionFactory.java,createWithoutSpring,"    protected <T> T createWithoutSpring(Class<?> extensionClass) {
        try {
            return (T) extensionClass.newInstance();
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

        return null;
    }",https://www.github.com/pf4j/pf4j-spring/commit/0ec63805023e1f4b86f76be97b8e2c71443f463c,"    protected <T> T createWithoutSpring(Class<?> extensionClass) {
        try {
            return (T) extensionClass.newInstance();
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

        return null;
    }
","['    ', 'protected', ' ', '<', 'T', '>', ' ', 'T', ' ', 'createWithoutSpring', '(', 'Class', '<', '?', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', '(', 'T', ')', ' ', 'extensionClass', '.', 'newInstance', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,9bdeb578dea170d13d8d93e5b4a393f93728556c,SpringExtensionFactory.java,create,"    public <T> T create(Class<T> extensionClass) {
        T extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            // test for SpringBean
            PluginWrapper pluginWrapper = pluginManager.whichPlugin(extensionClass);
            if (pluginWrapper != null) { // is plugin extension
                Plugin plugin = pluginWrapper.getPlugin();
                if (plugin instanceof SpringPlugin) {
                    // autowire
                    ApplicationContext pluginContext = ((SpringPlugin) plugin).getApplicationContext();
                    pluginContext.getAutowireCapableBeanFactory().autowireBean(extension);
                } else if (this.pluginManager instanceof SpringPluginManager) { // is system extension and plugin manager is SpringPluginManager
                    SpringPluginManager springPluginManager = (SpringPluginManager) this.pluginManager;
                    ApplicationContext plugiContext = springPluginManager.getApplicationContext();
                    plugiContext.getAutowireCapableBeanFactory().autowireBean(extension);
                }
            }
        }

        return extension;
    }",https://www.github.com/pf4j/pf4j-spring/commit/9bdeb578dea170d13d8d93e5b4a393f93728556c,"    public <T> T create(Class<T> extensionClass) {
        T extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            
            PluginWrapper pluginWrapper = pluginManager.whichPlugin(extensionClass);
            if (pluginWrapper != null) { 
                Plugin plugin = pluginWrapper.getPlugin();
                if (plugin instanceof SpringPlugin) {
                    
                    ApplicationContext pluginContext = ((SpringPlugin) plugin).getApplicationContext();
                    pluginContext.getAutowireCapableBeanFactory().autowireBean(extension);
                } else if (this.pluginManager instanceof SpringPluginManager) { 
                    SpringPluginManager springPluginManager = (SpringPluginManager) this.pluginManager;
                    ApplicationContext plugiContext = springPluginManager.getApplicationContext();
                    plugiContext.getAutowireCapableBeanFactory().autowireBean(extension);
                }
            }
        }

        return extension;
    }
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'T', ' ', 'create', '(', 'Class', '<', 'T', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'T', ' ', 'extension', ' ', '=', ' ', 'createWithoutSpring', '(', 'extensionClass', ')', ';', '\n', '        ', 'if', ' ', '(', 'autowire', ' ', '&', '&', ' ', 'extension', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', '\n', '            ', 'PluginWrapper', ' ', 'pluginWrapper', ' ', '=', ' ', 'pluginManager', '.', 'whichPlugin', '(', 'extensionClass', ')', ';', '\n', '            ', 'if', ' ', '(', 'pluginWrapper', ' ', '!', '=', ' ', 'null', ')', ' ', '{', ' ', '\n', '                ', 'Plugin', ' ', 'plugin', ' ', '=', ' ', 'pluginWrapper', '.', 'getPlugin', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'plugin', ' ', 'instanceof', ' ', 'SpringPlugin', ')', ' ', '{', '\n', '                    ', '\n', '                    ', 'ApplicationContext', ' ', 'pluginContext', ' ', '=', ' ', '(', '(', 'SpringPlugin', ')', ' ', 'plugin', ')', '.', 'getApplicationContext', '(', ')', ';', '\n', '                    ', 'pluginContext', '.', 'getAutowireCapableBeanFactory', '(', ')', '.', 'autowireBean', '(', 'extension', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'this', '.', 'pluginManager', ' ', 'instanceof', ' ', 'SpringPluginManager', ')', ' ', '{', ' ', '\n', '                    ', 'SpringPluginManager', ' ', 'springPluginManager', ' ', '=', ' ', '(', 'SpringPluginManager', ')', ' ', 'this', '.', 'pluginManager', ';', '\n', '                    ', 'ApplicationContext', ' ', 'plugiContext', ' ', '=', ' ', 'springPluginManager', '.', 'getApplicationContext', '(', ')', ';', '\n', '                    ', 'plugiContext', '.', 'getAutowireCapableBeanFactory', '(', ')', '.', 'autowireBean', '(', 'extension', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'extension', ';', '\n', '    ', '}', '\n']"
master,bfca0574c53f11316b0c8749784349df8ed6475c,ExtensionsInjector.java,injectExtensions,"    public void injectExtensions() {
        // add extensions from classpath (non plugin)
        Set<String> extensionClassNames = springPluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionClass);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        // add extensions for each started plugin
        List<PluginWrapper> startedPlugins = springPluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());",https://www.github.com/pf4j/pf4j-spring/commit/bfca0574c53f11316b0c8749784349df8ed6475c,"    public void injectExtensions() {
        
        Set<String> extensionClassNames = springPluginManager.getExtensionClassNames(null);
        for (String extensionClassName : extensionClassNames) {
            try {
                log.debug(""Register extension '{}' as bean"", extensionClassName);
                Class<?> extensionClass = getClass().getClassLoader().loadClass(extensionClassName);
                registerExtension(extensionClass);
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage(), e);
            }
        }

        
        List<PluginWrapper> startedPlugins = springPluginManager.getStartedPlugins();
        for (PluginWrapper plugin : startedPlugins) {
            log.debug(""Registering extensions of the plugin '{}' as beans"", plugin.getPluginId());
","['    ', 'public', ' ', 'void', ' ', 'injectExtensions', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'Set', '<', 'String', '>', ' ', 'extensionClassNames', ' ', '=', ' ', 'springPluginManager', '.', 'getExtensionClassNames', '(', 'null', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'extensionClassName', ' ', ':', ' ', 'extensionClassNames', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'log', '.', 'debug', '(', '""', ""Register extension '{}' as bean"", '""', ',', ' ', 'extensionClassName', ')', ';', '\n', '                ', 'Class', '<', '?', '>', ' ', 'extensionClass', ' ', '=', ' ', 'getClass', '(', ')', '.', 'getClassLoader', '(', ')', '.', 'loadClass', '(', 'extensionClassName', ')', ';', '\n', '                ', 'registerExtension', '(', 'extensionClass', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'ClassNotFoundException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'PluginWrapper', '>', ' ', 'startedPlugins', ' ', '=', ' ', 'springPluginManager', '.', 'getStartedPlugins', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'PluginWrapper', ' ', 'plugin', ' ', ':', ' ', 'startedPlugins', ')', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Registering extensions of the plugin '{}' as beans"", '""', ',', ' ', 'plugin', '.', 'getPluginId', '(', ')', ')', ';', '\n']"
master,bfca0574c53f11316b0c8749784349df8ed6475c,ExtensionsInjector.java,registerExtension,"    protected void registerExtension(Class<?> extensionClass) {
        Map<String, ?> extensionBeanMap = springPluginManager.getApplicationContext().getBeansOfType(extensionClass);
        if (extensionBeanMap.isEmpty()) {
            Object extension = springPluginManager.getExtensionFactory().create(extensionClass);",https://www.github.com/pf4j/pf4j-spring/commit/bfca0574c53f11316b0c8749784349df8ed6475c,"    protected void registerExtension(Class<?> extensionClass) {
        Map<String, ?> extensionBeanMap = springPluginManager.getApplicationContext().getBeansOfType(extensionClass);
        if (extensionBeanMap.isEmpty()) {
            Object extension = springPluginManager.getExtensionFactory().create(extensionClass);
","['    ', 'protected', ' ', 'void', ' ', 'registerExtension', '(', 'Class', '<', '?', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'Map', '<', 'String', ',', ' ', '?', '>', ' ', 'extensionBeanMap', ' ', '=', ' ', 'springPluginManager', '.', 'getApplicationContext', '(', ')', '.', 'getBeansOfType', '(', 'extensionClass', ')', ';', '\n', '        ', 'if', ' ', '(', 'extensionBeanMap', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'Object', ' ', 'extension', ' ', '=', ' ', 'springPluginManager', '.', 'getExtensionFactory', '(', ')', '.', 'create', '(', 'extensionClass', ')', ';', '\n']"
master,bfca0574c53f11316b0c8749784349df8ed6475c,SpringExtensionFactory.java,create,"    public <T> T create(Class<T> extensionClass) {
        T extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            ApplicationContext applicationContext = this.getApplicationContext(extensionClass);
            if (applicationContext != null) {
                Map<String, T> extensionBeanMap = applicationContext.getBeansOfType(extensionClass);
                if (!extensionBeanMap.isEmpty()) {
                    if (extensionBeanMap.size() > 1) {
                        log.error(""There are more than 1 extension bean '{}' defined!"", extensionClass.getName());
                    }
                    extension = extensionBeanMap.values().iterator().next();
                }
                applicationContext.getAutowireCapableBeanFactory().autowireBean(extension);
            }
        }

        return extension;
    }",https://www.github.com/pf4j/pf4j-spring/commit/bfca0574c53f11316b0c8749784349df8ed6475c,"    public <T> T create(Class<T> extensionClass) {
        T extension = createWithoutSpring(extensionClass);
        if (autowire && extension != null) {
            ApplicationContext applicationContext = this.getApplicationContext(extensionClass);
            if (applicationContext != null) {
                Map<String, T> extensionBeanMap = applicationContext.getBeansOfType(extensionClass);
                if (!extensionBeanMap.isEmpty()) {
                    if (extensionBeanMap.size() > 1) {
                        log.error(""There are more than 1 extension bean '{}' defined!"", extensionClass.getName());
                    }
                    extension = extensionBeanMap.values().iterator().next();
                }
                applicationContext.getAutowireCapableBeanFactory().autowireBean(extension);
            }
        }

        return extension;
    }
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'T', ' ', 'create', '(', 'Class', '<', 'T', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'T', ' ', 'extension', ' ', '=', ' ', 'createWithoutSpring', '(', 'extensionClass', ')', ';', '\n', '        ', 'if', ' ', '(', 'autowire', ' ', '&', '&', ' ', 'extension', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'ApplicationContext', ' ', 'applicationContext', ' ', '=', ' ', 'this', '.', 'getApplicationContext', '(', 'extensionClass', ')', ';', '\n', '            ', 'if', ' ', '(', 'applicationContext', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'Map', '<', 'String', ',', ' ', 'T', '>', ' ', 'extensionBeanMap', ' ', '=', ' ', 'applicationContext', '.', 'getBeansOfType', '(', 'extensionClass', ')', ';', '\n', '                ', 'if', ' ', '(', '!', 'extensionBeanMap', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '                    ', 'if', ' ', '(', 'extensionBeanMap', '.', 'size', '(', ')', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                        ', 'log', '.', 'error', '(', '""', ""There are more than 1 extension bean '{}' defined!"", '""', ',', ' ', 'extensionClass', '.', 'getName', '(', ')', ')', ';', '\n', '                    ', '}', '\n', '                    ', 'extension', ' ', '=', ' ', 'extensionBeanMap', '.', 'values', '(', ')', '.', 'iterator', '(', ')', '.', 'next', '(', ')', ';', '\n', '                ', '}', '\n', '                ', 'applicationContext', '.', 'getAutowireCapableBeanFactory', '(', ')', '.', 'autowireBean', '(', 'extension', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'extension', ';', '\n', '    ', '}', '\n']"
master,bfca0574c53f11316b0c8749784349df8ed6475c,SpringExtensionFactory.java,createWithoutSpring,"    protected <T> T createWithoutSpring(Class<T> extensionClass) {
        try {
            return extensionClass.getDeclaredConstructor().newInstance();
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

        return null;
    }",https://www.github.com/pf4j/pf4j-spring/commit/bfca0574c53f11316b0c8749784349df8ed6475c,"    protected <T> T createWithoutSpring(Class<T> extensionClass) {
        try {
            return extensionClass.getDeclaredConstructor().newInstance();
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

        return null;
    }
","['    ', 'protected', ' ', '<', 'T', '>', ' ', 'T', ' ', 'createWithoutSpring', '(', 'Class', '<', 'T', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'extensionClass', '.', 'getDeclaredConstructor', '(', ')', '.', 'newInstance', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,2282e1c13380b53b8714b2bd36bd6557a243b3bc,SpringExtensionFactory.java,create,"    public <T> T create(final Class<T> extensionClass) {
        if (!this.autowire) {
            log.warn(""Create instance of '"" + nameOf(extensionClass) + ""' without using springs possibilities as"" +
                     "" autowiring is disabled."");
            return createWithoutSpring(extensionClass);
        }

        return getApplicationContextBy(extensionClass)
            .map(applicationContext -> createWithSpring(extensionClass, applicationContext))",https://www.github.com/pf4j/pf4j-spring/commit/2282e1c13380b53b8714b2bd36bd6557a243b3bc,"    public <T> T create(final Class<T> extensionClass) {
        if (!this.autowire) {
            log.warn(""Create instance of '"" + nameOf(extensionClass) + ""' without using springs possibilities as"" +
                     "" autowiring is disabled."");
            return createWithoutSpring(extensionClass);
        }

        return getApplicationContextBy(extensionClass)
            .map(applicationContext -> createWithSpring(extensionClass, applicationContext))
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'T', ' ', 'create', '(', 'final', ' ', 'Class', '<', 'T', '>', ' ', 'extensionClass', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', '!', 'this', '.', 'autowire', ')', ' ', '{', '\n', '            ', 'log', '.', 'warn', '(', '""', ""Create instance of '"", '""', ' ', '+', ' ', 'nameOf', '(', 'extensionClass', ')', ' ', '+', ' ', '""', ""' without using springs possibilities as"", '""', ' ', '+', '\n', '                     ', '""', ' autowiring is disabled.', '""', ')', ';', '\n', '            ', 'return', ' ', 'createWithoutSpring', '(', 'extensionClass', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'getApplicationContextBy', '(', 'extensionClass', ')', '\n', '            ', '.', 'map', '(', 'applicationContext', ' ', '-', '>', ' ', 'createWithSpring', '(', 'extensionClass', ',', ' ', 'applicationContext', ')', ')', '\n']"
master,2282e1c13380b53b8714b2bd36bd6557a243b3bc,SpringExtensionFactory.java,createWithoutSpring,"    protected <T> T createWithoutSpring(final Class<T> extensionClass) throws IllegalArgumentException {
        final Constructor<?> constructor = getPublicConstructorWithShortestParameterList(extensionClass)
            // An extension class is required to have at least one public constructor.
            .orElseThrow(() -> new IllegalArgumentException(""Extension class '"" + nameOf(extensionClass)
                                                            + ""' must have at least one public constructor.""));
        try {
            log.debug(""Instantiate '"" + nameOf(extensionClass) + ""' by calling '"" + constructor + ""'with standard Java reflection."");",https://www.github.com/pf4j/pf4j-spring/commit/2282e1c13380b53b8714b2bd36bd6557a243b3bc,"    protected <T> T createWithoutSpring(final Class<T> extensionClass) throws IllegalArgumentException {
        final Constructor<?> constructor = getPublicConstructorWithShortestParameterList(extensionClass)
            
            .orElseThrow(() -> new IllegalArgumentException(""Extension class '"" + nameOf(extensionClass)
                                                            + ""' must have at least one public constructor.""));
        try {
            log.debug(""Instantiate '"" + nameOf(extensionClass) + ""' by calling '"" + constructor + ""'with standard Java reflection."");
","['    ', 'protected', ' ', '<', 'T', '>', ' ', 'T', ' ', 'createWithoutSpring', '(', 'final', ' ', 'Class', '<', 'T', '>', ' ', 'extensionClass', ')', ' ', 'throws', ' ', 'IllegalArgumentException', ' ', '{', '\n', '        ', 'final', ' ', 'Constructor', '<', '?', '>', ' ', 'constructor', ' ', '=', ' ', 'getPublicConstructorWithShortestParameterList', '(', 'extensionClass', ')', '\n', '            ', '\n', '            ', '.', 'orElseThrow', '(', '(', ')', ' ', '-', '>', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', ""Extension class '"", '""', ' ', '+', ' ', 'nameOf', '(', 'extensionClass', ')', '\n', '                                                            ', '+', ' ', '""', ""' must have at least one public constructor."", '""', ')', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'log', '.', 'debug', '(', '""', ""Instantiate '"", '""', ' ', '+', ' ', 'nameOf', '(', 'extensionClass', ')', ' ', '+', ' ', '""', ""' by calling '"", '""', ' ', '+', ' ', 'constructor', ' ', '+', ' ', '""', ""'with standard Java reflection."", '""', ')', ';', '\n']"
master,2282e1c13380b53b8714b2bd36bd6557a243b3bc,SpringExtensionFactory.java,nullParameters,"    private Object[] nullParameters(final Constructor<?> constructor) {
        return new Object[constructor.getParameterCount()];
    }",https://www.github.com/pf4j/pf4j-spring/commit/2282e1c13380b53b8714b2bd36bd6557a243b3bc,"    private Object[] nullParameters(final Constructor<?> constructor) {
        return new Object[constructor.getParameterCount()];
    }
","['    ', 'private', ' ', 'Object', '[', ']', ' ', 'nullParameters', '(', 'final', ' ', 'Constructor', '<', '?', '>', ' ', 'constructor', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'Object', '[', 'constructor', '.', 'getParameterCount', '(', ')', ']', ';', '\n', '    ', '}', '\n']"
master,2282e1c13380b53b8714b2bd36bd6557a243b3bc,SpringExtensionFactory.java,nameOf,"    private String nameOf(final Plugin plugin) {
        return nonNull(plugin)
            ? plugin.getWrapper().getPluginId()",https://www.github.com/pf4j/pf4j-spring/commit/2282e1c13380b53b8714b2bd36bd6557a243b3bc,"    private String nameOf(final Plugin plugin) {
        return nonNull(plugin)
            ? plugin.getWrapper().getPluginId()
","['    ', 'private', ' ', 'String', ' ', 'nameOf', '(', 'final', ' ', 'Plugin', ' ', 'plugin', ')', ' ', '{', '\n', '        ', 'return', ' ', 'nonNull', '(', 'plugin', ')', '\n', '            ', '?', ' ', 'plugin', '.', 'getWrapper', '(', ')', '.', 'getPluginId', '(', ')', '\n']"
master,2282e1c13380b53b8714b2bd36bd6557a243b3bc,SpringExtensionFactory.java,nameOf,"    private <T> String nameOf(final Class<T> clazz) {
        return clazz.getName();
    }",https://www.github.com/pf4j/pf4j-spring/commit/2282e1c13380b53b8714b2bd36bd6557a243b3bc,"    private <T> String nameOf(final Class<T> clazz) {
        return clazz.getName();
    }
","['    ', 'private', ' ', '<', 'T', '>', ' ', 'String', ' ', 'nameOf', '(', 'final', ' ', 'Class', '<', 'T', '>', ' ', 'clazz', ')', ' ', '{', '\n', '        ', 'return', ' ', 'clazz', '.', 'getName', '(', ')', ';', '\n', '    ', '}', '\n']"
master,5d26e9b0f2c8021a1a1ae959fff04c0797b50faa,SpringPlugin.java,stop,"    public void stop() {
        // close applicationContext
        if (applicationContext instanceof ConfigurableApplicationContext) {
            ((ConfigurableApplicationContext) applicationContext).close();
        }

        applicationContext = null;
    }",https://www.github.com/pf4j/pf4j-spring/commit/5d26e9b0f2c8021a1a1ae959fff04c0797b50faa,"    public void stop() {
        
        if (applicationContext instanceof ConfigurableApplicationContext) {
            ((ConfigurableApplicationContext) applicationContext).close();
        }

        applicationContext = null;
    }
","['    ', 'public', ' ', 'void', ' ', 'stop', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'applicationContext', ' ', 'instanceof', ' ', 'ConfigurableApplicationContext', ')', ' ', '{', '\n', '            ', '(', '(', 'ConfigurableApplicationContext', ')', ' ', 'applicationContext', ')', '.', 'close', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'applicationContext', ' ', '=', ' ', 'null', ';', '\n', '    ', '}', '\n']"
