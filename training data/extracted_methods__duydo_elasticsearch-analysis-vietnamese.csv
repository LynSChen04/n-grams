Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,c29fbac926a3e55752dfe653095bb492fca92016,AppE.java,getTokenizerProperties,"    public static Properties getTokenizerProperties() throws IOException {
        final Properties properties = new Properties();
        properties.load(AppE.class.getResourceAsStream(""/vi-tokenizer.properties""));
        Enumeration e = properties.propertyNames();
        final Properties tokenizerProperties = new Properties();
        for (; e.hasMoreElements(); ) {
            final Object key = e.nextElement();
            final String value = String.valueOf(properties.get(key));
           tokenizerProperties.put(key, AppE.class.getResource(value).getFile());
        }
        return tokenizerProperties;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public static Properties getTokenizerProperties() throws IOException {
        final Properties properties = new Properties();
        properties.load(AppE.class.getResourceAsStream(""/vi-tokenizer.properties""));
        Enumeration e = properties.propertyNames();
        final Properties tokenizerProperties = new Properties();
        for (; e.hasMoreElements(); ) {
            final Object key = e.nextElement();
            final String value = String.valueOf(properties.get(key));
           tokenizerProperties.put(key, AppE.class.getResource(value).getFile());
        }
        return tokenizerProperties;
    }
","['    ', 'public', ' ', 'static', ' ', 'Properties', ' ', 'getTokenizerProperties', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'load', '(', 'AppE', '.', 'class', '.', 'getResourceAsStream', '(', '""', '/vi-tokenizer.properties', '""', ')', ')', ';', '\n', '        ', 'Enumeration', ' ', 'e', ' ', '=', ' ', 'properties', '.', 'propertyNames', '(', ')', ';', '\n', '        ', 'final', ' ', 'Properties', ' ', 'tokenizerProperties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'for', ' ', '(', ';', ' ', 'e', '.', 'hasMoreElements', '(', ')', ';', ' ', ')', ' ', '{', '\n', '            ', 'final', ' ', 'Object', ' ', 'key', ' ', '=', ' ', 'e', '.', 'nextElement', '(', ')', ';', '\n', '            ', 'final', ' ', 'String', ' ', 'value', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'properties', '.', 'get', '(', 'key', ')', ')', ';', '\n', '           ', 'tokenizerProperties', '.', 'put', '(', 'key', ',', ' ', 'AppE', '.', 'class', '.', 'getResource', '(', 'value', ')', '.', 'getFile', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'tokenizerProperties', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,AppE.java,extractWords,"    static void extractWords(String target, BreakIterator wordIterator) {

        wordIterator.setText(target);
        int start = wordIterator.first();
        int end = wordIterator.next();

        while (end != BreakIterator.DONE) {
            String word = target.substring(start,end);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    static void extractWords(String target, BreakIterator wordIterator) {

        wordIterator.setText(target);
        int start = wordIterator.first();
        int end = wordIterator.next();

        while (end != BreakIterator.DONE) {
            String word = target.substring(start,end);
","['    ', 'static', ' ', 'void', ' ', 'extractWords', '(', 'String', ' ', 'target', ',', ' ', 'BreakIterator', ' ', 'wordIterator', ')', ' ', '{', '\n', '\n', '        ', 'wordIterator', '.', 'setText', '(', 'target', ')', ';', '\n', '        ', 'int', ' ', 'start', ' ', '=', ' ', 'wordIterator', '.', 'first', '(', ')', ';', '\n', '        ', 'int', ' ', 'end', ' ', '=', ' ', 'wordIterator', '.', 'next', '(', ')', ';', '\n', '\n', '        ', 'while', ' ', '(', 'end', ' ', '!', '=', ' ', 'BreakIterator', '.', 'DONE', ')', ' ', '{', '\n', '            ', 'String', ' ', 'word', ' ', '=', ' ', 'target', '.', 'substring', '(', 'start', ',', 'end', ')', ';', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseAnalysisBinderProcessor.java,processAnalyzers,"    public void processAnalyzers(AnalyzersBindings analyzersBindings) {
        analyzersBindings.processAnalyzer(""vi_analyzer"", VietnameseAnalyzerProvider.class);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public void processAnalyzers(AnalyzersBindings analyzersBindings) {
        analyzersBindings.processAnalyzer(""vi_analyzer"", VietnameseAnalyzerProvider.class);
    }
","['    ', 'public', ' ', 'void', ' ', 'processAnalyzers', '(', 'AnalyzersBindings', ' ', 'analyzersBindings', ')', ' ', '{', '\n', '        ', 'analyzersBindings', '.', 'processAnalyzer', '(', '""', 'vi_analyzer', '""', ',', ' ', 'VietnameseAnalyzerProvider', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseAnalysisBinderProcessor.java,processTokenizers,"    public void processTokenizers(TokenizersBindings tokenizersBindings) {
        tokenizersBindings.processTokenizer(""vi_tokenizer"", VietnameseTokenizerFactory.class);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public void processTokenizers(TokenizersBindings tokenizersBindings) {
        tokenizersBindings.processTokenizer(""vi_tokenizer"", VietnameseTokenizerFactory.class);
    }
","['    ', 'public', ' ', 'void', ' ', 'processTokenizers', '(', 'TokenizersBindings', ' ', 'tokenizersBindings', ')', ' ', '{', '\n', '        ', 'tokenizersBindings', '.', 'processTokenizer', '(', '""', 'vi_tokenizer', '""', ',', ' ', 'VietnameseTokenizerFactory', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseAnalyzerProvider.java,get,"    public VietnameseAnalyzer get() {
        return analyzer;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public VietnameseAnalyzer get() {
        return analyzer;
    }
","['    ', 'public', ' ', 'VietnameseAnalyzer', ' ', 'get', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'analyzer', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseTokenizerFactory.java,create,"    public Tokenizer create(Reader reader) {
        return new VietnameseTokenizer(reader);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public Tokenizer create(Reader reader) {
        return new VietnameseTokenizer(reader);
    }
","['    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseIndicesAnalysis.java,name,"                    public String name() {
                        return ""vi_tokenizer"";
                    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"                    public String name() {
                        return ""vi_tokenizer"";
                    }
","['                    ', 'public', ' ', 'String', ' ', 'name', '(', ')', ' ', '{', '\n', '                        ', 'return', ' ', '""', 'vi_tokenizer', '""', ';', '\n', '                    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseIndicesAnalysis.java,create,"                    public Tokenizer create(Reader reader) {
                        return new VietnameseTokenizer(reader);
                    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"                    public Tokenizer create(Reader reader) {
                        return new VietnameseTokenizer(reader);
                    }
","['                    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '                        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ')', ';', '\n', '                    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseIndicesModule.java,configure,"    protected void configure() {
        bind(VietnameseIndicesAnalysis.class).asEagerSingleton();
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    protected void configure() {
        bind(VietnameseIndicesAnalysis.class).asEagerSingleton();
    }
","['    ', 'protected', ' ', 'void', ' ', 'configure', '(', ')', ' ', '{', '\n', '        ', 'bind', '(', 'VietnameseIndicesAnalysis', '.', 'class', ')', '.', 'asEagerSingleton', '(', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,AnalysisVietnamesePlugin.java,name,"    public String name() {
        return ""analysis-vietnamese"";
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public String name() {
        return ""analysis-vietnamese"";
    }
","['    ', 'public', ' ', 'String', ' ', 'name', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'analysis-vietnamese', '""', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,AnalysisVietnamesePlugin.java,description,"    public String description() {
        return ""Vietnamese Analysis plugin"";
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public String description() {
        return ""Vietnamese Analysis plugin"";
    }
","['    ', 'public', ' ', 'String', ' ', 'description', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'Vietnamese Analysis plugin', '""', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,AnalysisVietnamesePlugin.java,modules,"    public Collection<Class<? extends Module>> modules() {
        return ImmutableList.<Class<? extends Module>>of(VietnameseIndicesModule.class);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public Collection<Class<? extends Module>> modules() {
        return ImmutableList.<Class<? extends Module>>of(VietnameseIndicesModule.class);
    }
","['    ', 'public', ' ', 'Collection', '<', 'Class', '<', '?', ' ', 'extends', ' ', 'Module', '>', '>', ' ', 'modules', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'ImmutableList', '.', '<', 'Class', '<', '?', ' ', 'extends', ' ', 'Module', '>', '>', 'of', '(', 'VietnameseIndicesModule', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,AnalysisVietnamesePlugin.java,onModule,"    public void onModule(AnalysisModule module){
        module.addProcessor(new VietnameseAnalysisBinderProcessor());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public void onModule(AnalysisModule module){
        module.addProcessor(new VietnameseAnalysisBinderProcessor());
    }
","['    ', 'public', ' ', 'void', ' ', 'onModule', '(', 'AnalysisModule', ' ', 'module', ')', '{', '\n', '        ', 'module', '.', 'addProcessor', '(', 'new', ' ', 'VietnameseAnalysisBinderProcessor', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer source = new VietnameseTokenizer(reader);
        TokenStream result = new LowerCaseFilter(matchVersion, source);
        result = new StopFilter(matchVersion, result, stopwords);
        return new TokenStreamComponents(source, result);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer source = new VietnameseTokenizer(reader);
        TokenStream result = new LowerCaseFilter(matchVersion, source);
        result = new StopFilter(matchVersion, result, stopwords);
        return new TokenStreamComponents(source, result);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ',', ' ', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'source', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ')', ';', '\n', '        ', 'TokenStream', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'matchVersion', ',', ' ', 'source', ')', ';', '\n', '        ', 'result', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'matchVersion', ',', ' ', 'result', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'source', ',', ' ', 'result', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseTokenizer.java,getTokenizerProperties,"    private Properties getTokenizerProperties() throws IOException {
        final Properties properties = new Properties();
        properties.load(getClass().getResourceAsStream(""/vi-tokenizer.properties""));
//        Enumeration e = properties.propertyNames();
//        final Properties tokenizerProperties = new Properties();
//        for (; e.hasMoreElements(); ) {
//            final Object key = e.nextElement();
//            final String value = String.valueOf(properties.get(key));
//            String path = getClass().getResource(value).getPath();
//            if (path != null && path.startsWith(""file:"")) {
//                path = path.substring(5);
//            }
//            tokenizerProperties.put(key, path);
//        }
//        return tokenizerProperties;
        return properties;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    private Properties getTokenizerProperties() throws IOException {
        final Properties properties = new Properties();
        properties.load(getClass().getResourceAsStream(""/vi-tokenizer.properties""));












        return properties;
    }
","['    ', 'private', ' ', 'Properties', ' ', 'getTokenizerProperties', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'Properties', ' ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '        ', 'properties', '.', 'load', '(', 'getClass', '(', ')', '.', 'getResourceAsStream', '(', '""', '/vi-tokenizer.properties', '""', ')', ')', ';', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '        ', 'return', ' ', 'properties', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        if (tokens.hasNext()) {
            clearAttributes();
            final TaggedWord word = tokens.next();
            termAtt.append(word.getText());
            type.setType(word.getRule().getName());
            end = start + word.getText().length();
            offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(end));
            start = end;
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public final boolean incrementToken() throws IOException {
        if (tokens.hasNext()) {
            clearAttributes();
            final TaggedWord word = tokens.next();
            termAtt.append(word.getText());
            type.setType(word.getRule().getName());
            end = start + word.getText().length();
            offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(end));
            start = end;
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'tokens', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'clearAttributes', '(', ')', ';', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'tokens', '.', 'next', '(', ')', ';', '\n', '            ', 'termAtt', '.', 'append', '(', 'word', '.', 'getText', '(', ')', ')', ';', '\n', '            ', 'type', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '            ', 'end', ' ', '=', ' ', 'start', ' ', '+', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'start', ')', ',', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'end', ')', ')', ';', '\n', '            ', 'start', ' ', '=', ' ', 'end', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(finalOffset, finalOffset);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(finalOffset, finalOffset);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '    ', '}', '\n']"
master,c29fbac926a3e55752dfe653095bb492fca92016,VietnameseTokenizer.java,reset,"    public void reset() throws IOException {
        super.reset();
        finalOffset = 0;
        start = 0;
        end = 0;
//        generateVietnameseTokens(input);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c29fbac926a3e55752dfe653095bb492fca92016,"    public void reset() throws IOException {
        super.reset();
        finalOffset = 0;
        start = 0;
        end = 0;

","['    ', 'public', ' ', 'void', ' ', 'reset', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'reset', '(', ')', ';', '\n', '        ', 'finalOffset', ' ', '=', ' ', '0', ';', '\n', '        ', 'start', ' ', '=', ' ', '0', ';', '\n', '        ', 'end', ' ', '=', ' ', '0', ';', '\n']"
master,69717aeb2ee264132bc56ab35bc773e5bcb03d13,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            termAtt.append(word.getText());
            type.setType(word.getRule().getName());
            final int wordLength = word.getText().length();
            offsetAtt.setOffset(offset, offset + wordLength);
            offset += wordLength;
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/69717aeb2ee264132bc56ab35bc773e5bcb03d13,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            termAtt.append(word.getText());
            type.setType(word.getRule().getName());
            final int wordLength = word.getText().length();
            offsetAtt.setOffset(offset, offset + wordLength);
            offset += wordLength;
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'termAtt', '.', 'append', '(', 'word', '.', 'getText', '(', ')', ')', ';', '\n', '            ', 'type', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'wordLength', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'offsetAtt', '.', 'setOffset', '(', 'offset', ',', ' ', 'offset', ' ', '+', ' ', 'wordLength', ')', ';', '\n', '            ', 'offset', ' ', '+', '=', ' ', 'wordLength', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,69717aeb2ee264132bc56ab35bc773e5bcb03d13,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        final int finalOffset = correctOffset(offset);
        offsetAtt.setOffset(finalOffset, finalOffset);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/69717aeb2ee264132bc56ab35bc773e5bcb03d13,"    public final void end() throws IOException {
        super.end();
        final int finalOffset = correctOffset(offset);
        offsetAtt.setOffset(finalOffset, finalOffset);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'final', ' ', 'int', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ')', ';', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '    ', '}', '\n']"
master,69717aeb2ee264132bc56ab35bc773e5bcb03d13,VietnameseTokenizer.java,reset,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        tokenize(input);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/69717aeb2ee264132bc56ab35bc773e5bcb03d13,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        tokenize(input);
    }
","['    ', 'public', ' ', 'void', ' ', 'reset', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'reset', '(', ')', ';', '\n', '        ', 'offset', ' ', '=', ' ', '0', ';', '\n', '        ', 'tokenize', '(', 'input', ')', ';', '\n', '    ', '}', '\n']"
master,8cd71b761ae80cbad9742a91ebcc5d1089eb3548,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer source = new VietnameseTokenizer(reader);
        TokenStream result = new LowerCaseFilter(matchVersion, new StandardFilter(matchVersion, source));
        result = new StopFilter(matchVersion, result, stopwords);
        return new TokenStreamComponents(source, result);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8cd71b761ae80cbad9742a91ebcc5d1089eb3548,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer source = new VietnameseTokenizer(reader);
        TokenStream result = new LowerCaseFilter(matchVersion, new StandardFilter(matchVersion, source));
        result = new StopFilter(matchVersion, result, stopwords);
        return new TokenStreamComponents(source, result);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ',', ' ', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'source', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ')', ';', '\n', '        ', 'TokenStream', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'matchVersion', ',', ' ', 'new', ' ', 'StandardFilter', '(', 'matchVersion', ',', ' ', 'source', ')', ')', ';', '\n', '        ', 'result', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'matchVersion', ',', ' ', 'result', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'source', ',', ' ', 'result', ')', ';', '\n', '    ', '}', '\n']"
master,8cd71b761ae80cbad9742a91ebcc5d1089eb3548,VietnameseTokenizer.java,tokenize,"    private void tokenize(Reader input) throws IOException {
        final List<TaggedWord> words = Lists.newArrayList();
        String[] sentences = sentenceDetector.detectSentences(input);
        for (String s : sentences) {
            tokenizer.tokenize(new StringReader(s));
            words.addAll(tokenizer.getResult());
        }
        taggedWords = words.iterator();
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8cd71b761ae80cbad9742a91ebcc5d1089eb3548,"    private void tokenize(Reader input) throws IOException {
        final List<TaggedWord> words = Lists.newArrayList();
        String[] sentences = sentenceDetector.detectSentences(input);
        for (String s : sentences) {
            tokenizer.tokenize(new StringReader(s));
            words.addAll(tokenizer.getResult());
        }
        taggedWords = words.iterator();
    }
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', 'Reader', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'List', '<', 'TaggedWord', '>', ' ', 'words', ' ', '=', ' ', 'Lists', '.', 'newArrayList', '(', ')', ';', '\n', '        ', 'String', '[', ']', ' ', 'sentences', ' ', '=', ' ', 'sentenceDetector', '.', 'detectSentences', '(', 'input', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 's', ' ', ':', ' ', 'sentences', ')', ' ', '{', '\n', '            ', 'tokenizer', '.', 'tokenize', '(', 'new', ' ', 'StringReader', '(', 's', ')', ')', ';', '\n', '            ', 'words', '.', 'addAll', '(', 'tokenizer', '.', 'getResult', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'taggedWords', ' ', '=', ' ', 'words', '.', 'iterator', '(', ')', ';', '\n', '    ', '}', '\n']"
master,8cd71b761ae80cbad9742a91ebcc5d1089eb3548,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int wordLength = word.getText().length();
            termAttribute.copyBuffer(word.getText().trim().toCharArray(), 0, wordLength);
            typeAttribute.setType(word.getRule().getName());
            offsetAttribute.setOffset(correctOffset(offset), finalOffset = correctOffset(offset + wordLength));
            offset += wordLength;
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8cd71b761ae80cbad9742a91ebcc5d1089eb3548,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int wordLength = word.getText().length();
            termAttribute.copyBuffer(word.getText().trim().toCharArray(), 0, wordLength);
            typeAttribute.setType(word.getRule().getName());
            offsetAttribute.setOffset(correctOffset(offset), finalOffset = correctOffset(offset + wordLength));
            offset += wordLength;
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'wordLength', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'termAttribute', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'trim', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'wordLength', ')', ';', '\n', '            ', 'typeAttribute', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '            ', 'offsetAttribute', '.', 'setOffset', '(', 'correctOffset', '(', 'offset', ')', ',', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ' ', '+', ' ', 'wordLength', ')', ')', ';', '\n', '            ', 'offset', ' ', '+', '=', ' ', 'wordLength', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,8cd71b761ae80cbad9742a91ebcc5d1089eb3548,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        offsetAttribute.setOffset(finalOffset, finalOffset);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8cd71b761ae80cbad9742a91ebcc5d1089eb3548,"    public final void end() throws IOException {
        super.end();
        offsetAttribute.setOffset(finalOffset, finalOffset);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'offsetAttribute', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '    ', '}', '\n']"
master,8cd71b761ae80cbad9742a91ebcc5d1089eb3548,VietnameseTokenizer.java,reset,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        finalOffset = 0;
        tokenize(input);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8cd71b761ae80cbad9742a91ebcc5d1089eb3548,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        finalOffset = 0;
        tokenize(input);
    }
","['    ', 'public', ' ', 'void', ' ', 'reset', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'reset', '(', ')', ';', '\n', '        ', 'offset', ' ', '=', ' ', '0', ';', '\n', '        ', 'finalOffset', ' ', '=', ' ', '0', ';', '\n', '        ', 'tokenize', '(', 'input', ')', ';', '\n', '    ', '}', '\n']"
master,38c26e5a1e938bee3fc59c32e78ce3bcb79f1028,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int wordLength = word.getText().length();
            termAttribute.copyBuffer(word.getText().trim().toCharArray(), 0, wordLength);
            typeAttribute.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
            offsetAttribute.setOffset(correctOffset(offset), finalOffset = correctOffset(offset + wordLength));
            offset += wordLength;
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/38c26e5a1e938bee3fc59c32e78ce3bcb79f1028,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int wordLength = word.getText().length();
            termAttribute.copyBuffer(word.getText().trim().toCharArray(), 0, wordLength);
            typeAttribute.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
            offsetAttribute.setOffset(correctOffset(offset), finalOffset = correctOffset(offset + wordLength));
            offset += wordLength;
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'wordLength', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'termAttribute', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'trim', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'wordLength', ')', ';', '\n', '            ', 'typeAttribute', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', '.', 'toUpperCase', '(', ')', ')', ')', ';', '\n', '            ', 'offsetAttribute', '.', 'setOffset', '(', 'correctOffset', '(', 'offset', ')', ',', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ' ', '+', ' ', 'wordLength', ')', ')', ';', '\n', '            ', 'offset', ' ', '+', '=', ' ', 'wordLength', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,6eb984aeb7ecc07b6868b0da37a5d5d4999ac88e,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int length = word.getText().length();
            termAttribute.copyBuffer(word.getText().trim().toCharArray(), 0, length);
            typeAttribute.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
            offsetAttribute.setOffset(correctOffset(offset), finalOffset = correctOffset(offset + length));
            offset += length;
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/6eb984aeb7ecc07b6868b0da37a5d5d4999ac88e,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        if (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int length = word.getText().length();
            termAttribute.copyBuffer(word.getText().trim().toCharArray(), 0, length);
            typeAttribute.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
            offsetAttribute.setOffset(correctOffset(offset), finalOffset = correctOffset(offset + length));
            offset += length;
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'termAttribute', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'trim', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '            ', 'typeAttribute', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', '.', 'toUpperCase', '(', ')', ')', ')', ';', '\n', '            ', 'offsetAttribute', '.', 'setOffset', '(', 'correctOffset', '(', 'offset', ')', ',', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ' ', '+', ' ', 'length', ')', ')', ';', '\n', '            ', 'offset', ' ', '+', '=', ' ', 'length', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,f724eebc5d69f3cabcf200c36039af9cb02e3704,VietnameseTokenizer.java,tokenize,"    private void tokenize(Reader input) throws IOException {
        if(sentenceDetector == null) {
            tokenizer.tokenize(input);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f724eebc5d69f3cabcf200c36039af9cb02e3704,"    private void tokenize(Reader input) throws IOException {
        if(sentenceDetector == null) {
            tokenizer.tokenize(input);
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', 'Reader', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', '(', 'sentenceDetector', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'tokenizer', '.', 'tokenize', '(', 'input', ')', ';', '\n']"
master,f724eebc5d69f3cabcf200c36039af9cb02e3704,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int length = word.getText().length();
            final int currentOffset = offset;
            offset += length;
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                termAtt.copyBuffer(word.getText().trim().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(currentOffset), finalOffset = correctOffset(offset));
                typeAtt.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
                return true;
            } else {
                // When we skip non-word characters, we still increment the position increment
                skippedPositions++;
            }
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f724eebc5d69f3cabcf200c36039af9cb02e3704,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int length = word.getText().length();
            final int currentOffset = offset;
            offset += length;
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                termAtt.copyBuffer(word.getText().trim().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(currentOffset), finalOffset = correctOffset(offset));
                typeAtt.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
                return true;
            } else {
                
                skippedPositions++;
            }
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'currentOffset', ' ', '=', ' ', 'offset', ';', '\n', '            ', 'offset', ' ', '+', '=', ' ', 'length', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'skippedPositions', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'trim', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'currentOffset', ')', ',', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ')', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', '.', 'toUpperCase', '(', ')', ')', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', '\n', '                ', 'skippedPositions', '+', '+', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,f724eebc5d69f3cabcf200c36039af9cb02e3704,VietnameseTokenizer.java,accept,"    private final boolean accept(TaggedWord word) {
        final String token = word.getText();
        if (token.length() == 1) {
            return Character.isLetterOrDigit(token.charAt(0));
        }
        return true;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f724eebc5d69f3cabcf200c36039af9cb02e3704,"    private final boolean accept(TaggedWord word) {
        final String token = word.getText();
        if (token.length() == 1) {
            return Character.isLetterOrDigit(token.charAt(0));
        }
        return true;
    }
","['    ', 'private', ' ', 'final', ' ', 'boolean', ' ', 'accept', '(', 'TaggedWord', ' ', 'word', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'token', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'token', '.', 'length', '(', ')', ' ', '=', '=', ' ', '1', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Character', '.', 'isLetterOrDigit', '(', 'token', '.', 'charAt', '(', '0', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,f724eebc5d69f3cabcf200c36039af9cb02e3704,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f724eebc5d69f3cabcf200c36039af9cb02e3704,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '        ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'posIncrAtt', '.', 'getPositionIncrement', '(', ')', ' ', '+', ' ', 'skippedPositions', ')', ';', '\n', '    ', '}', '\n']"
master,f724eebc5d69f3cabcf200c36039af9cb02e3704,VietnameseTokenizer.java,reset,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        finalOffset = 0;
        skippedPositions = 0;
        tokenize(input);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f724eebc5d69f3cabcf200c36039af9cb02e3704,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        finalOffset = 0;
        skippedPositions = 0;
        tokenize(input);
    }
","['    ', 'public', ' ', 'void', ' ', 'reset', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'reset', '(', ')', ';', '\n', '        ', 'offset', ' ', '=', ' ', '0', ';', '\n', '        ', 'finalOffset', ' ', '=', ' ', '0', ';', '\n', '        ', 'skippedPositions', ' ', '=', ' ', '0', ';', '\n', '        ', 'tokenize', '(', 'input', ')', ';', '\n', '    ', '}', '\n']"
master,236563036d73a06b816df58c7ff8f638fe1b7ae5,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        // set final offset
        offsetAtt.setOffset(finalOffset, finalOffset);
        // adjust any skipped tokens
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/236563036d73a06b816df58c7ff8f638fe1b7ae5,"    public final void end() throws IOException {
        super.end();
        
        offsetAtt.setOffset(finalOffset, finalOffset);
        
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '        ', '\n', '        ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'posIncrAtt', '.', 'getPositionIncrement', '(', ')', ' ', '+', ' ', 'skippedPositions', ')', ';', '\n', '    ', '}', '\n']"
master,12f22c864807f7fb4aaa91cfb2e42319fa814cd6,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer tokenizer = new VietnameseTokenizer(reader);
        TokenStream tokenStream = new LowerCaseFilter(matchVersion, tokenizer);
        tokenStream = new StopFilter(matchVersion, tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/12f22c864807f7fb4aaa91cfb2e42319fa814cd6,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer tokenizer = new VietnameseTokenizer(reader);
        TokenStream tokenStream = new LowerCaseFilter(matchVersion, tokenizer);
        tokenStream = new StopFilter(matchVersion, tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ',', ' ', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'tokenizer', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ')', ';', '\n', '        ', 'TokenStream', ' ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'matchVersion', ',', ' ', 'tokenizer', ')', ';', '\n', '        ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'matchVersion', ',', ' ', 'tokenStream', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'tokenizer', ',', ' ', 'tokenStream', ')', ';', '\n', '    ', '}', '\n']"
master,d8ca349b53da56cf18f869e265d4995996e8f34b,VietnameseTokenizer.java,tokenize,"    private void tokenize(Reader input) throws IOException {
        if (sentenceDetector == null) {
            tokenizer.tokenize(input);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/d8ca349b53da56cf18f869e265d4995996e8f34b,"    private void tokenize(Reader input) throws IOException {
        if (sentenceDetector == null) {
            tokenizer.tokenize(input);
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', 'Reader', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'sentenceDetector', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'tokenizer', '.', 'tokenize', '(', 'input', ')', ';', '\n']"
master,d8ca349b53da56cf18f869e265d4995996e8f34b,VietnameseAnalysisBinderProcessor.java,processAnalyzers,"    public void processAnalyzers(AnalyzersBindings analyzersBindings) {
        analyzersBindings.processAnalyzer(""vietnamese"", VietnameseAnalyzerProvider.class);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/d8ca349b53da56cf18f869e265d4995996e8f34b,"    public void processAnalyzers(AnalyzersBindings analyzersBindings) {
        analyzersBindings.processAnalyzer(""vietnamese"", VietnameseAnalyzerProvider.class);
    }
","['    ', 'public', ' ', 'void', ' ', 'processAnalyzers', '(', 'AnalyzersBindings', ' ', 'analyzersBindings', ')', ' ', '{', '\n', '        ', 'analyzersBindings', '.', 'processAnalyzer', '(', '""', 'vietnamese', '""', ',', ' ', 'VietnameseAnalyzerProvider', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,d8ca349b53da56cf18f869e265d4995996e8f34b,VietnameseTokenizerFactory.java,create,"    public Tokenizer create(Reader reader) {
        return new VietnameseTokenizer(reader, useSentenceDetector, useAmbiguitiesResolved);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/d8ca349b53da56cf18f869e265d4995996e8f34b,"    public Tokenizer create(Reader reader) {
        return new VietnameseTokenizer(reader, useSentenceDetector, useAmbiguitiesResolved);
    }
","['    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ',', ' ', 'useSentenceDetector', ',', ' ', 'useAmbiguitiesResolved', ')', ';', '\n', '    ', '}', '\n']"
master,d8ca349b53da56cf18f869e265d4995996e8f34b,VietnameseAnalysisTests.java,testDefaultsVietnameseAnalysis,"    public void testDefaultsVietnameseAnalysis() throws IOException {
        AnalysisService analysisService = createAnalysisService();

        TokenizerFactory tokenizerFactory = analysisService.tokenizer(""vi_tokenizer"");
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysisService.analyzer(""my_analyzer"");
        assertThat(analyzer.analyzer(), instanceOf(CustomAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/d8ca349b53da56cf18f869e265d4995996e8f34b,"    public void testDefaultsVietnameseAnalysis() throws IOException {
        AnalysisService analysisService = createAnalysisService();

        TokenizerFactory tokenizerFactory = analysisService.tokenizer(""vi_tokenizer"");
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysisService.analyzer(""my_analyzer"");
        assertThat(analyzer.analyzer(), instanceOf(CustomAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
    }
","['    ', 'public', ' ', 'void', ' ', 'testDefaultsVietnameseAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'AnalysisService', ' ', 'analysisService', ' ', '=', ' ', 'createAnalysisService', '(', ')', ';', '\n', '\n', '        ', 'TokenizerFactory', ' ', 'tokenizerFactory', ' ', '=', ' ', 'analysisService', '.', 'tokenizer', '(', '""', 'vi_tokenizer', '""', ')', ';', '\n', '        ', 'assertThat', '(', 'tokenizerFactory', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizerFactory', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysisService', '.', 'analyzer', '(', '""', 'my_analyzer', '""', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'CustomAnalyzer', '.', 'class', ')', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', '.', 'tokenStream', '(', 'null', ',', ' ', 'new', ' ', 'StringReader', '(', '""', '""', ')', ')', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizer', '.', 'class', ')', ')', ';', '\n', '    ', '}', '\n']"
master,666bf9039db588219120537cae6a0487af7b363f,VietnameseAnalysisIntegrationTest.java,nodeSettings,"    protected Settings nodeSettings(int nodeOrdinal) {
        return ImmutableSettings.builder()
                .put(super.nodeSettings(nodeOrdinal))",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/666bf9039db588219120537cae6a0487af7b363f,"    protected Settings nodeSettings(int nodeOrdinal) {
        return ImmutableSettings.builder()
                .put(super.nodeSettings(nodeOrdinal))
","['    ', 'protected', ' ', 'Settings', ' ', 'nodeSettings', '(', 'int', ' ', 'nodeOrdinal', ')', ' ', '{', '\n', '        ', 'return', ' ', 'ImmutableSettings', '.', 'builder', '(', ')', '\n', '                ', '.', 'put', '(', 'super', '.', 'nodeSettings', '(', 'nodeOrdinal', ')', ')', '\n']"
master,fd3f1f1372d21d8da37506abd730a1661ee9d93c,VietnameseAnalysisTests.java,assertSimpleTokenStreamOutput,"    public static void assertSimpleTokenStreamOutput(TokenStream stream,
                                                     String[] expected) throws IOException {
        stream.reset();
        CharTermAttribute termAttr = stream.getAttribute(CharTermAttribute.class);
        assertThat(termAttr, notNullValue());
        int i = 0;
        while (stream.incrementToken()) {
            assertThat(expected.length, greaterThan(i));
            assertThat(""expected different term at index "" + i, expected[i++], equalTo(termAttr.toString()));
        }
        assertThat(""not all tokens produced"", i, equalTo(expected.length));
        stream.end();
        stream.close();
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/fd3f1f1372d21d8da37506abd730a1661ee9d93c,"    public static void assertSimpleTokenStreamOutput(TokenStream stream,
                                                     String[] expected) throws IOException {
        stream.reset();
        CharTermAttribute termAttr = stream.getAttribute(CharTermAttribute.class);
        assertThat(termAttr, notNullValue());
        int i = 0;
        while (stream.incrementToken()) {
            assertThat(expected.length, greaterThan(i));
            assertThat(""expected different term at index "" + i, expected[i++], equalTo(termAttr.toString()));
        }
        assertThat(""not all tokens produced"", i, equalTo(expected.length));
        stream.end();
        stream.close();
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'assertSimpleTokenStreamOutput', '(', 'TokenStream', ' ', 'stream', ',', '\n', '                                                     ', 'String', '[', ']', ' ', 'expected', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'stream', '.', 'reset', '(', ')', ';', '\n', '        ', 'CharTermAttribute', ' ', 'termAttr', ' ', '=', ' ', 'stream', '.', 'getAttribute', '(', 'CharTermAttribute', '.', 'class', ')', ';', '\n', '        ', 'assertThat', '(', 'termAttr', ',', ' ', 'notNullValue', '(', ')', ')', ';', '\n', '        ', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', '\n', '        ', 'while', ' ', '(', 'stream', '.', 'incrementToken', '(', ')', ')', ' ', '{', '\n', '            ', 'assertThat', '(', 'expected', '.', 'length', ',', ' ', 'greaterThan', '(', 'i', ')', ')', ';', '\n', '            ', 'assertThat', '(', '""', 'expected different term at index ', '""', ' ', '+', ' ', 'i', ',', ' ', 'expected', '[', 'i', '+', '+', ']', ',', ' ', 'equalTo', '(', 'termAttr', '.', 'toString', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'assertThat', '(', '""', 'not all tokens produced', '""', ',', ' ', 'i', ',', ' ', 'equalTo', '(', 'expected', '.', 'length', ')', ')', ';', '\n', '        ', 'stream', '.', 'end', '(', ')', ';', '\n', '        ', 'stream', '.', 'close', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b8d69477dadfb306ae43940312bb04972442130a,VietnameseTokenizerFactory.java,create,"    public Tokenizer create(Reader reader) {
        return new VietnameseTokenizer(reader, sentenceDetectorEnabled, ambiguitiesResolved);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/b8d69477dadfb306ae43940312bb04972442130a,"    public Tokenizer create(Reader reader) {
        return new VietnameseTokenizer(reader, sentenceDetectorEnabled, ambiguitiesResolved);
    }
","['    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ',', ' ', 'sentenceDetectorEnabled', ',', ' ', 'ambiguitiesResolved', ')', ';', '\n', '    ', '}', '\n']"
master,8482753334d96bca0b78c4fe010b99d747f83a46,VietnameseTokenizer.java,tokenize,"    private void tokenize(Reader input) throws IOException {
        if (isSentenceDetectorEnabled()) {
            final List<TaggedWord> words = new ArrayList<TaggedWord>();",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8482753334d96bca0b78c4fe010b99d747f83a46,"    private void tokenize(Reader input) throws IOException {
        if (isSentenceDetectorEnabled()) {
            final List<TaggedWord> words = new ArrayList<TaggedWord>();
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', 'Reader', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'isSentenceDetectorEnabled', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'List', '<', 'TaggedWord', '>', ' ', 'words', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'TaggedWord', '>', '(', ')', ';', '\n']"
master,8482753334d96bca0b78c4fe010b99d747f83a46,VietnameseTokenizer.java,isSentenceDetectorEnabled,"    public boolean isSentenceDetectorEnabled() {
        return sentenceDetectorEnabled;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8482753334d96bca0b78c4fe010b99d747f83a46,"    public boolean isSentenceDetectorEnabled() {
        return sentenceDetectorEnabled;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isSentenceDetectorEnabled', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'sentenceDetectorEnabled', ';', '\n', '    ', '}', '\n']"
master,8482753334d96bca0b78c4fe010b99d747f83a46,VietnameseTokenizer.java,isAmbiguitiesResolved,"    public boolean isAmbiguitiesResolved() {
        return ambiguitiesResolved;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8482753334d96bca0b78c4fe010b99d747f83a46,"    public boolean isAmbiguitiesResolved() {
        return ambiguitiesResolved;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isAmbiguitiesResolved', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'ambiguitiesResolved', ';', '\n', '    ', '}', '\n']"
master,b81111cd1fd2e72bd2565ef26a560033b1977d3e,AnalysisVietnamesePlugin.java,modules,"    public Collection<Class<? extends Module>> modules() {
        return ImmutableList.<Class<? extends Module>>of(VietnameseIndicesAnalysisModule.class);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/b81111cd1fd2e72bd2565ef26a560033b1977d3e,"    public Collection<Class<? extends Module>> modules() {
        return ImmutableList.<Class<? extends Module>>of(VietnameseIndicesAnalysisModule.class);
    }
","['    ', 'public', ' ', 'Collection', '<', 'Class', '<', '?', ' ', 'extends', ' ', 'Module', '>', '>', ' ', 'modules', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'ImmutableList', '.', '<', 'Class', '<', '?', ' ', 'extends', ' ', 'Module', '>', '>', 'of', '(', 'VietnameseIndicesAnalysisModule', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,b81111cd1fd2e72bd2565ef26a560033b1977d3e,AnalysisVietnamesePlugin.java,onModule,"    public void onModule(AnalysisModule module) {
        module.addProcessor(new VietnameseAnalysisBinderProcessor());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/b81111cd1fd2e72bd2565ef26a560033b1977d3e,"    public void onModule(AnalysisModule module) {
        module.addProcessor(new VietnameseAnalysisBinderProcessor());
    }
","['    ', 'public', ' ', 'void', ' ', 'onModule', '(', 'AnalysisModule', ' ', 'module', ')', ' ', '{', '\n', '        ', 'module', '.', 'addProcessor', '(', 'new', ' ', 'VietnameseAnalysisBinderProcessor', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,4c64983d831f46ee41f26b83bcdb2c04c0ccfab1,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int length = word.getText().length();
            final int currentOffset = offset;
            offset += length;
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                termAtt.copyBuffer(word.getText().trim().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(currentOffset), finalOffset = correctOffset(offset));
                typeAtt.setType(word.getRule().getName());
                return true;
            } else {
                // When we skip non-word characters, we still increment the position increment
                skippedPositions++;
            }
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/4c64983d831f46ee41f26b83bcdb2c04c0ccfab1,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            final int length = word.getText().length();
            final int currentOffset = offset;
            offset += length;
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                termAtt.copyBuffer(word.getText().trim().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(currentOffset), finalOffset = correctOffset(offset));
                typeAtt.setType(word.getRule().getName());
                return true;
            } else {
                
                skippedPositions++;
            }
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'currentOffset', ' ', '=', ' ', 'offset', ';', '\n', '            ', 'offset', ' ', '+', '=', ' ', 'length', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'skippedPositions', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'trim', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'currentOffset', ')', ',', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ')', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', '\n', '                ', 'skippedPositions', '+', '+', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,e5c0e0430de7d5285ea36605b87fefb6b582783e,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer tokenizer = new VietnameseTokenizer(reader);
        TokenStream tokenStream = new LowerCaseFilter(tokenizer);
        tokenStream = new StopFilter(tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e5c0e0430de7d5285ea36605b87fefb6b582783e,"    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
        final Tokenizer tokenizer = new VietnameseTokenizer(reader);
        TokenStream tokenStream = new LowerCaseFilter(tokenizer);
        tokenStream = new StopFilter(tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ',', ' ', 'Reader', ' ', 'reader', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'tokenizer', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'reader', ')', ';', '\n', '        ', 'TokenStream', ' ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'tokenizer', ')', ';', '\n', '        ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'tokenStream', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'tokenizer', ',', ' ', 'tokenStream', ')', ';', '\n', '    ', '}', '\n']"
master,27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer tokenizer = new VietnameseTokenizer();
        TokenStream tokenStream = new LowerCaseFilter(tokenizer);
        tokenStream = new StopFilter(tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer tokenizer = new VietnameseTokenizer();
        TokenStream tokenStream = new LowerCaseFilter(tokenizer);
        tokenStream = new StopFilter(tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'tokenizer', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', ')', ';', '\n', '        ', 'TokenStream', ' ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'tokenizer', ')', ';', '\n', '        ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'tokenStream', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'tokenizer', ',', ' ', 'tokenStream', ')', ';', '\n', '    ', '}', '\n']"
master,27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,VietnameseTokenizerFactory.java,create,"    public Tokenizer create() {
        return new VietnameseTokenizer(sentenceDetectorEnabled, ambiguitiesResolved);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,"    public Tokenizer create() {
        return new VietnameseTokenizer(sentenceDetectorEnabled, ambiguitiesResolved);
    }
","['    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'sentenceDetectorEnabled', ',', ' ', 'ambiguitiesResolved', ')', ';', '\n', '    ', '}', '\n']"
master,27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,VietnameseIndicesAnalysis.java,create,"                    public Tokenizer create() {
                        return new VietnameseTokenizer();
                    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,"                    public Tokenizer create() {
                        return new VietnameseTokenizer();
                    }
","['                    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', ')', ' ', '{', '\n', '                        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', ')', ';', '\n', '                    ', '}', '\n']"
master,27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,AnalysisVietnamesePlugin.java,name,"    public String name() {
        return ""elasticsearch-analysis-vietnamese"";
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,"    public String name() {
        return ""elasticsearch-analysis-vietnamese"";
    }
","['    ', 'public', ' ', 'String', ' ', 'name', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'elasticsearch-analysis-vietnamese', '""', ';', '\n', '    ', '}', '\n']"
master,27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,AnalysisVietnamesePlugin.java,description,"    public String description() {
        return ""Elasticsearch Vietnamese Analysis Plugin"";
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,"    public String description() {
        return ""Elasticsearch Vietnamese Analysis Plugin"";
    }
","['    ', 'public', ' ', 'String', ' ', 'description', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'Elasticsearch Vietnamese Analysis Plugin', '""', ';', '\n', '    ', '}', '\n']"
master,27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,AnalysisVietnamesePlugin.java,nodeModules,"    public Collection<Module> nodeModules() {
        return Collections.<Module>singletonList(new VietnameseIndicesAnalysisModule());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/27bb7a0a66f2c9d3633942bbe35f7d8a2148da8d,"    public Collection<Module> nodeModules() {
        return Collections.<Module>singletonList(new VietnameseIndicesAnalysisModule());
    }
","['    ', 'public', ' ', 'Collection', '<', 'Module', '>', ' ', 'nodeModules', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Collections', '.', '<', 'Module', '>', 'singletonList', '(', 'new', ' ', 'VietnameseIndicesAnalysisModule', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,024e9af740c3c2d1e7c23bf1dc688de3e213d5d9,VietnameseTokenizer.java,run,"            public vn.hus.nlp.tokenizer.Tokenizer run() {
                return TokenizerProvider.getInstance().getTokenizer();
            }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/024e9af740c3c2d1e7c23bf1dc688de3e213d5d9,"            public vn.hus.nlp.tokenizer.Tokenizer run() {
                return TokenizerProvider.getInstance().getTokenizer();
            }
","['            ', 'public', ' ', 'vn', '.', 'hus', '.', 'nlp', '.', 'tokenizer', '.', 'Tokenizer', ' ', 'run', '(', ')', ' ', '{', '\n', '                ', 'return', ' ', 'TokenizerProvider', '.', 'getInstance', '(', ')', '.', 'getTokenizer', '(', ')', ';', '\n', '            ', '}', '\n']"
master,0f2228287c03e1b03bf401cef6fa2fbe109a0d89,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                final int length = word.getText().length();
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                termAtt.copyBuffer(word.getText().trim().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + length));
                typeAtt.setType(word.getRule().getName());
                return true;
            }
            ++skippedPositions;

        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/0f2228287c03e1b03bf401cef6fa2fbe109a0d89,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                final int length = word.getText().length();
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                termAtt.copyBuffer(word.getText().trim().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + length));
                typeAtt.setType(word.getRule().getName());
                return true;
            }
            ++skippedPositions;

        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'skippedPositions', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'trim', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'offset', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ' ', '+', ' ', 'length', ')', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '            ', '+', '+', 'skippedPositions', ';', '\n', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,0f2228287c03e1b03bf401cef6fa2fbe109a0d89,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        // set final offset
        offsetAtt.setOffset(offset, offset);
        // adjust any skipped tokens
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/0f2228287c03e1b03bf401cef6fa2fbe109a0d89,"    public final void end() throws IOException {
        super.end();
        
        offsetAtt.setOffset(offset, offset);
        
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'offset', ',', ' ', 'offset', ')', ';', '\n', '        ', '\n', '        ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'posIncrAtt', '.', 'getPositionIncrement', '(', ')', ' ', '+', ' ', 'skippedPositions', ')', ';', '\n', '    ', '}', '\n']"
master,0f2228287c03e1b03bf401cef6fa2fbe109a0d89,VietnameseTokenizer.java,reset,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        skippedPositions = 0;
        tokenize(input);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/0f2228287c03e1b03bf401cef6fa2fbe109a0d89,"    public void reset() throws IOException {
        super.reset();
        offset = 0;
        skippedPositions = 0;
        tokenize(input);
    }
","['    ', 'public', ' ', 'void', ' ', 'reset', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'reset', '(', ')', ';', '\n', '        ', 'offset', ' ', '=', ' ', '0', ';', '\n', '        ', 'skippedPositions', ' ', '=', ' ', '0', ';', '\n', '        ', 'tokenize', '(', 'input', ')', ';', '\n', '    ', '}', '\n']"
master,187a75bfa682caa27d808055bc8d34460ed7b9c4,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                final char[] chars = word.getText().trim().toCharArray();
                termAtt.copyBuffer(chars, 0, chars.length);
                typeAtt.setType(word.getRule().getName());
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + termAtt.length()));
                offset++;
                return true;
            }
            ++skippedPositions;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/187a75bfa682caa27d808055bc8d34460ed7b9c4,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                final char[] chars = word.getText().trim().toCharArray();
                termAtt.copyBuffer(chars, 0, chars.length);
                typeAtt.setType(word.getRule().getName());
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + termAtt.length()));
                offset++;
                return true;
            }
            ++skippedPositions;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'final', ' ', 'char', '[', ']', ' ', 'chars', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'trim', '(', ')', '.', 'toCharArray', '(', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'chars', ',', ' ', '0', ',', ' ', 'chars', '.', 'length', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'skippedPositions', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'offset', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ' ', '+', ' ', 'termAtt', '.', 'length', '(', ')', ')', ')', ';', '\n', '                ', 'offset', '+', '+', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '            ', '+', '+', 'skippedPositions', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,187a75bfa682caa27d808055bc8d34460ed7b9c4,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(offset, offset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/187a75bfa682caa27d808055bc8d34460ed7b9c4,"    public final void end() throws IOException {
        super.end();
        offsetAtt.setOffset(offset, offset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'offset', ',', ' ', 'offset', ')', ';', '\n', '        ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'posIncrAtt', '.', 'getPositionIncrement', '(', ')', ' ', '+', ' ', 'skippedPositions', ')', ';', '\n', '    ', '}', '\n']"
master,0a2cd6f9dc0f121d241564ca2d8c77c8704996fa,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                typeAtt.setType(word.getRule().getName());
                final int length = word.getText().length();
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + length));
                offset++;
                return true;
            }
            skippedPositions++;

        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/0a2cd6f9dc0f121d241564ca2d8c77c8704996fa,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                typeAtt.setType(word.getRule().getName());
                final int length = word.getText().length();
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + length));
                offset++;
                return true;
            }
            skippedPositions++;

        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'skippedPositions', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '                ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'offset', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ' ', '+', ' ', 'length', ')', ')', ';', '\n', '                ', 'offset', '+', '+', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '            ', 'skippedPositions', '+', '+', ';', '\n', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,0a2cd6f9dc0f121d241564ca2d8c77c8704996fa,VietnameseTokenizer.java,end,"    public final void end() throws IOException {
        super.end();
        final int finalOffset = correctOffset(offset);
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/0a2cd6f9dc0f121d241564ca2d8c77c8704996fa,"    public final void end() throws IOException {
        super.end();
        final int finalOffset = correctOffset(offset);
        offsetAtt.setOffset(finalOffset, finalOffset);
        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);
    }
","['    ', 'public', ' ', 'final', ' ', 'void', ' ', 'end', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'end', '(', ')', ';', '\n', '        ', 'final', ' ', 'int', ' ', 'finalOffset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ')', ';', '\n', '        ', 'offsetAtt', '.', 'setOffset', '(', 'finalOffset', ',', ' ', 'finalOffset', ')', ';', '\n', '        ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'posIncrAtt', '.', 'getPositionIncrement', '(', ')', ' ', '+', ' ', 'skippedPositions', ')', ';', '\n', '    ', '}', '\n']"
master,4dfffa9d83588b636588978b6a09b842d18f271a,VietnameseAnalysisTest.java,testSimpleVietnameseAnalysis,"    public void testSimpleVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis();
        assertNotNull(analysis);

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(CustomAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/4dfffa9d83588b636588978b6a09b842d18f271a,"    public void testSimpleVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis();
        assertNotNull(analysis);

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(CustomAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
","['    ', 'public', ' ', 'void', ' ', 'testSimpleVietnameseAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TestAnalysis', ' ', 'analysis', ' ', '=', ' ', 'createTestAnalysis', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analysis', ')', ';', '\n', '\n', '        ', 'TokenizerFactory', ' ', 'tokenizerFactory', ' ', '=', ' ', 'analysis', '.', 'tokenizer', '.', 'get', '(', '""', 'vi_tokenizer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'tokenizerFactory', ')', ';', '\n', '        ', 'assertThat', '(', 'tokenizerFactory', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizerFactory', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'vi_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'VietnameseAnalyzer', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'my_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'CustomAnalyzer', '.', 'class', ')', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', '.', 'tokenStream', '(', 'null', ',', ' ', 'new', ' ', 'StringReader', '(', '""', '""', ')', ')', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizer', '.', 'class', ')', ')', ';', '\n']"
master,4dfffa9d83588b636588978b6a09b842d18f271a,VietnameseAnalysisTest.java,createTestAnalysis,"    public TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTest.class.getResourceAsStream(json))
                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/4dfffa9d83588b636588978b6a09b842d18f271a,"    public TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTest.class.getResourceAsStream(json))
                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }
","['    ', 'public', ' ', 'TestAnalysis', ' ', 'createTestAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'String', ' ', 'json', ' ', '=', ' ', '""', '/org/elasticsearch/index/analysis/vi_analysis.json', '""', ';', '\n', '        ', 'Settings', ' ', 'settings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '\n', '                ', '.', 'loadFromStream', '(', 'json', ',', ' ', 'VietnameseAnalysisTest', '.', 'class', '.', 'getResourceAsStream', '(', 'json', ')', ')', '\n', '                ', '.', 'put', '(', 'IndexMetaData', '.', 'SETTING_VERSION_CREATED', ',', ' ', 'Version', '.', 'CURRENT', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '        ', 'Settings', ' ', 'nodeSettings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '.', 'put', '(', 'Environment', '.', 'PATH_HOME_SETTING', '.', 'getKey', '(', ')', ',', ' ', 'createTempDir', '(', ')', ')', '.', 'build', '(', ')', ';', '\n', '        ', 'return', ' ', 'createTestAnalysis', '(', 'new', ' ', 'Index', '(', '""', 'test', '""', ',', ' ', '""', '_na_', '""', ')', ',', ' ', 'nodeSettings', ',', ' ', 'settings', ',', ' ', 'new', ' ', 'AnalysisVietnamesePlugin', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,42b81f7b1900334a29044efefb9ab14e8e45571f,VietnameseTokenizer.java,run,"            public vn.hus.nlp.tokenizer.Tokenizer run() {
                vn.hus.nlp.tokenizer.Tokenizer vnTokenizer = TokenizerProvider.getInstance().getTokenizer();
                vnTokenizer.setAmbiguitiesResolved(ambiguitiesResolved);
                return vnTokenizer;
            }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/42b81f7b1900334a29044efefb9ab14e8e45571f,"            public vn.hus.nlp.tokenizer.Tokenizer run() {
                vn.hus.nlp.tokenizer.Tokenizer vnTokenizer = TokenizerProvider.getInstance().getTokenizer();
                vnTokenizer.setAmbiguitiesResolved(ambiguitiesResolved);
                return vnTokenizer;
            }
","['            ', 'public', ' ', 'vn', '.', 'hus', '.', 'nlp', '.', 'tokenizer', '.', 'Tokenizer', ' ', 'run', '(', ')', ' ', '{', '\n', '                ', 'vn', '.', 'hus', '.', 'nlp', '.', 'tokenizer', '.', 'Tokenizer', ' ', 'vnTokenizer', ' ', '=', ' ', 'TokenizerProvider', '.', 'getInstance', '(', ')', '.', 'getTokenizer', '(', ')', ';', '\n', '                ', 'vnTokenizer', '.', 'setAmbiguitiesResolved', '(', 'ambiguitiesResolved', ')', ';', '\n', '                ', 'return', ' ', 'vnTokenizer', ';', '\n', '            ', '}', '\n']"
master,42b81f7b1900334a29044efefb9ab14e8e45571f,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                typeAtt.setType(word.getRule().getName());
                final int length = word.getText().length();
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + length));
                offset++;
                return true;
            }
            skippedPositions++;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/42b81f7b1900334a29044efefb9ab14e8e45571f,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(skippedPositions + 1);
                typeAtt.setType(word.getRule().getName());
                final int length = word.getText().length();
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                offsetAtt.setOffset(correctOffset(offset), offset = correctOffset(offset + length));
                offset++;
                return true;
            }
            skippedPositions++;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', 'skippedPositions', ' ', '+', ' ', '1', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '                ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'offset', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'offset', ' ', '+', ' ', 'length', ')', ')', ';', '\n', '                ', 'offset', '+', '+', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '            ', 'skippedPositions', '+', '+', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,42b81f7b1900334a29044efefb9ab14e8e45571f,VietnameseAnalysisIntegrationTest.java,nodePlugins,"    protected Collection<Class<? extends Plugin>> nodePlugins() {
        return Collections.singleton(AnalysisVietnamesePlugin.class);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/42b81f7b1900334a29044efefb9ab14e8e45571f,"    protected Collection<Class<? extends Plugin>> nodePlugins() {
        return Collections.singleton(AnalysisVietnamesePlugin.class);
    }
","['    ', 'protected', ' ', 'Collection', '<', 'Class', '<', '?', ' ', 'extends', ' ', 'Plugin', '>', '>', ' ', 'nodePlugins', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Collections', '.', 'singleton', '(', 'AnalysisVietnamesePlugin', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,c5248261f0c6aa9a05c019c4f802ba96d46b1788,VietnameseTokenizer.java,tokenize,"    private void tokenize(Reader input) throws IOException {
        this.inputText = IOUtils.toString(input);
        tokenizer.tokenize(new StringReader(this.inputText));
        taggedWords = tokenizer.getResult().iterator();
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c5248261f0c6aa9a05c019c4f802ba96d46b1788,"    private void tokenize(Reader input) throws IOException {
        this.inputText = IOUtils.toString(input);
        tokenizer.tokenize(new StringReader(this.inputText));
        taggedWords = tokenizer.getResult().iterator();
    }
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', 'Reader', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'this', '.', 'inputText', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'input', ')', ';', '\n', '        ', 'tokenizer', '.', 'tokenize', '(', 'new', ' ', 'StringReader', '(', 'this', '.', 'inputText', ')', ')', ';', '\n', '        ', 'taggedWords', ' ', '=', ' ', 'tokenizer', '.', 'getResult', '(', ')', '.', 'iterator', '(', ')', ';', '\n', '    ', '}', '\n']"
master,c5248261f0c6aa9a05c019c4f802ba96d46b1788,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(1);
                final int length = word.getText().length();
                typeAtt.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                final int start = inputText.indexOf(word.getText(), offset);
                offsetAtt.setOffset(correctOffset(start), correctOffset(start + length));
                offset = offsetAtt.endOffset();
                return true;
            }
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c5248261f0c6aa9a05c019c4f802ba96d46b1788,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        while (taggedWords.hasNext()) {
            final TaggedWord word = taggedWords.next();
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(1);
                final int length = word.getText().length();
                typeAtt.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                final int start = inputText.indexOf(word.getText(), offset);
                offsetAtt.setOffset(correctOffset(start), correctOffset(start + length));
                offset = offsetAtt.endOffset();
                return true;
            }
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'taggedWords', '.', 'hasNext', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'taggedWords', '.', 'next', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', '1', ')', ';', '\n', '                ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', '.', 'toUpperCase', '(', ')', ')', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '                ', 'final', ' ', 'int', ' ', 'start', ' ', '=', ' ', 'inputText', '.', 'indexOf', '(', 'word', '.', 'getText', '(', ')', ',', ' ', 'offset', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'start', ')', ',', ' ', 'correctOffset', '(', 'start', ' ', '+', ' ', 'length', ')', ')', ';', '\n', '                ', 'offset', ' ', '=', ' ', 'offsetAtt', '.', 'endOffset', '(', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,c5248261f0c6aa9a05c019c4f802ba96d46b1788,VietnameseTokenizer.java,accept,"    private final boolean accept(TaggedWord word) {
        final String type = word.getRule().getName().toLowerCase();
        if (""punctuation"".equals(type) || ""special"".equals(type)) {
            return false;
        }
        return true;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c5248261f0c6aa9a05c019c4f802ba96d46b1788,"    private final boolean accept(TaggedWord word) {
        final String type = word.getRule().getName().toLowerCase();
        if (""punctuation"".equals(type) || ""special"".equals(type)) {
            return false;
        }
        return true;
    }
","['    ', 'private', ' ', 'final', ' ', 'boolean', ' ', 'accept', '(', 'TaggedWord', ' ', 'word', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'type', ' ', '=', ' ', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', '.', 'toLowerCase', '(', ')', ';', '\n', '        ', 'if', ' ', '(', '""', 'punctuation', '""', '.', 'equals', '(', 'type', ')', ' ', '|', '|', ' ', '""', 'special', '""', '.', 'equals', '(', 'type', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,c5248261f0c6aa9a05c019c4f802ba96d46b1788,VietnameseTokenizerFactory.java,create,"    public Tokenizer create() {
        return new VietnameseTokenizer();
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/c5248261f0c6aa9a05c019c4f802ba96d46b1788,"    public Tokenizer create() {
        return new VietnameseTokenizer();
    }
","['    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', ')', ';', '\n', '    ', '}', '\n']"
master,3c847ecd7bb232aab8f7a30aa2499ae764a82c11,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer tokenizer = new VietnameseTokenizer(this.tokenizer);
        TokenStream tokenStream = new LowerCaseFilter(tokenizer);
        tokenStream = new StopFilter(tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/3c847ecd7bb232aab8f7a30aa2499ae764a82c11,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer tokenizer = new VietnameseTokenizer(this.tokenizer);
        TokenStream tokenStream = new LowerCaseFilter(tokenizer);
        tokenStream = new StopFilter(tokenStream, stopwords);
        return new TokenStreamComponents(tokenizer, tokenStream);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'tokenizer', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'this', '.', 'tokenizer', ')', ';', '\n', '        ', 'TokenStream', ' ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'tokenizer', ')', ';', '\n', '        ', 'tokenStream', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'tokenStream', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'tokenizer', ',', ' ', 'tokenStream', ')', ';', '\n', '    ', '}', '\n']"
master,3c847ecd7bb232aab8f7a30aa2499ae764a82c11,VietnameseTokenizer.java,tokenize,"    private void tokenize() throws IOException {
        inputText = IOUtils.toString(input);
        final List<TaggedWord> result = tokenizer.tokenize(new StringReader(inputText));
        if (result != null) {
            pending.addAll(result);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/3c847ecd7bb232aab8f7a30aa2499ae764a82c11,"    private void tokenize() throws IOException {
        inputText = IOUtils.toString(input);
        final List<TaggedWord> result = tokenizer.tokenize(new StringReader(inputText));
        if (result != null) {
            pending.addAll(result);
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'inputText', ' ', '=', ' ', 'IOUtils', '.', 'toString', '(', 'input', ')', ';', '\n', '        ', 'final', ' ', 'List', '<', 'TaggedWord', '>', ' ', 'result', ' ', '=', ' ', 'tokenizer', '.', 'tokenize', '(', 'new', ' ', 'StringReader', '(', 'inputText', ')', ')', ';', '\n', '        ', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'pending', '.', 'addAll', '(', 'result', ')', ';', '\n']"
master,3c847ecd7bb232aab8f7a30aa2499ae764a82c11,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();

        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final TaggedWord word = pending.get(i);
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(1);
                final int length = word.getText().length();
                typeAtt.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                final int start = inputText.indexOf(word.getText(), i);
                offsetAtt.setOffset(correctOffset(start), offset = correctOffset(start + length));
                return true;
            }
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/3c847ecd7bb232aab8f7a30aa2499ae764a82c11,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();

        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final TaggedWord word = pending.get(i);
            if (accept(word)) {
                posIncrAtt.setPositionIncrement(1);
                final int length = word.getText().length();
                typeAtt.setType(String.format(""<%s>"", word.getRule().getName().toUpperCase()));
                termAtt.copyBuffer(word.getText().toCharArray(), 0, length);
                final int start = inputText.indexOf(word.getText(), i);
                offsetAtt.setOffset(correctOffset(start), offset = correctOffset(start + length));
                return true;
            }
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'while', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'tokenize', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'false', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', 'pos', ';', ' ', 'i', ' ', '<', ' ', 'pending', '.', 'size', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'pos', '+', '+', ';', '\n', '            ', 'final', ' ', 'TaggedWord', ' ', 'word', ' ', '=', ' ', 'pending', '.', 'get', '(', 'i', ')', ';', '\n', '            ', 'if', ' ', '(', 'accept', '(', 'word', ')', ')', ' ', '{', '\n', '                ', 'posIncrAtt', '.', 'setPositionIncrement', '(', '1', ')', ';', '\n', '                ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'word', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '                ', 'typeAtt', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'word', '.', 'getRule', '(', ')', '.', 'getName', '(', ')', '.', 'toUpperCase', '(', ')', ')', ')', ';', '\n', '                ', 'termAtt', '.', 'copyBuffer', '(', 'word', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '                ', 'final', ' ', 'int', ' ', 'start', ' ', '=', ' ', 'inputText', '.', 'indexOf', '(', 'word', '.', 'getText', '(', ')', ',', ' ', 'i', ')', ';', '\n', '                ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'start', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'start', ' ', '+', ' ', 'length', ')', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,3c847ecd7bb232aab8f7a30aa2499ae764a82c11,VietnameseTokenizer.java,reset,"    public void reset() throws IOException {
        super.reset();
        pos = 0;
        offset = 0;
        pending.clear();
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/3c847ecd7bb232aab8f7a30aa2499ae764a82c11,"    public void reset() throws IOException {
        super.reset();
        pos = 0;
        offset = 0;
        pending.clear();
    }
","['    ', 'public', ' ', 'void', ' ', 'reset', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'reset', '(', ')', ';', '\n', '        ', 'pos', ' ', '=', ' ', '0', ';', '\n', '        ', 'offset', ' ', '=', ' ', '0', ';', '\n', '        ', 'pending', '.', 'clear', '(', ')', ';', '\n', '    ', '}', '\n']"
master,3c847ecd7bb232aab8f7a30aa2499ae764a82c11,VietnameseTokenizerFactory.java,create,"    public Tokenizer create() {
        return new VietnameseTokenizer(tokenizer);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/3c847ecd7bb232aab8f7a30aa2499ae764a82c11,"    public Tokenizer create() {
        return new VietnameseTokenizer(tokenizer);
    }
","['    ', 'public', ' ', 'Tokenizer', ' ', 'create', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'tokenizer', ')', ';', '\n', '    ', '}', '\n']"
master,150e4c75d6717fee92ae8f4db0e9c3c3e16ec71a,VietnameseAnalysisTest.java,createTestAnalysis,"    public TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTest.class.getResourceAsStream(json), true)
                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/150e4c75d6717fee92ae8f4db0e9c3c3e16ec71a,"    public TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTest.class.getResourceAsStream(json), true)
                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }
","['    ', 'public', ' ', 'TestAnalysis', ' ', 'createTestAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'String', ' ', 'json', ' ', '=', ' ', '""', '/org/elasticsearch/index/analysis/vi_analysis.json', '""', ';', '\n', '        ', 'Settings', ' ', 'settings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '\n', '                ', '.', 'loadFromStream', '(', 'json', ',', ' ', 'VietnameseAnalysisTest', '.', 'class', '.', 'getResourceAsStream', '(', 'json', ')', ',', ' ', 'true', ')', '\n', '                ', '.', 'put', '(', 'IndexMetaData', '.', 'SETTING_VERSION_CREATED', ',', ' ', 'Version', '.', 'CURRENT', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '        ', 'Settings', ' ', 'nodeSettings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '.', 'put', '(', 'Environment', '.', 'PATH_HOME_SETTING', '.', 'getKey', '(', ')', ',', ' ', 'createTempDir', '(', ')', ')', '.', 'build', '(', ')', ';', '\n', '        ', 'return', ' ', 'createTestAnalysis', '(', 'new', ' ', 'Index', '(', '""', 'test', '""', ',', ' ', '""', '_na_', '""', ')', ',', ' ', 'nodeSettings', ',', ' ', 'settings', ',', ' ', 'new', ' ', 'AnalysisVietnamesePlugin', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,248ee37eafd5ef7e3ade1eaa46d8a98099fac06c,VietnameseStopTokenFilterFactory.java,create,"    @Override public TokenStream create(TokenStream tokenStream) {
        return new StopFilter(tokenStream, VietnameseAnalyzer.getDefaultStopSet());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/248ee37eafd5ef7e3ade1eaa46d8a98099fac06c,"    @Override public TokenStream create(TokenStream tokenStream) {
        return new StopFilter(tokenStream, VietnameseAnalyzer.getDefaultStopSet());
    }
","['    ', '@Override', ' ', 'public', ' ', 'TokenStream', ' ', 'create', '(', 'TokenStream', ' ', 'tokenStream', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'StopFilter', '(', 'tokenStream', ',', ' ', 'VietnameseAnalyzer', '.', 'getDefaultStopSet', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,76bed29a8c663f78546f75956ae2304e5211c5bd,VietnameseAnalysisTest.java,createTestAnalysis,"    public static TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTest.class.getResourceAsStream(json), true)
                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/76bed29a8c663f78546f75956ae2304e5211c5bd,"    public static TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTest.class.getResourceAsStream(json), true)
                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }
","['    ', 'public', ' ', 'static', ' ', 'TestAnalysis', ' ', 'createTestAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'String', ' ', 'json', ' ', '=', ' ', '""', '/org/elasticsearch/index/analysis/vi_analysis.json', '""', ';', '\n', '        ', 'Settings', ' ', 'settings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '\n', '                ', '.', 'loadFromStream', '(', 'json', ',', ' ', 'VietnameseAnalysisTest', '.', 'class', '.', 'getResourceAsStream', '(', 'json', ')', ',', ' ', 'true', ')', '\n', '                ', '.', 'put', '(', 'IndexMetaData', '.', 'SETTING_VERSION_CREATED', ',', ' ', 'Version', '.', 'CURRENT', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '        ', 'Settings', ' ', 'nodeSettings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '.', 'put', '(', 'Environment', '.', 'PATH_HOME_SETTING', '.', 'getKey', '(', ')', ',', ' ', 'createTempDir', '(', ')', ')', '.', 'build', '(', ')', ';', '\n', '        ', 'return', ' ', 'createTestAnalysis', '(', 'new', ' ', 'Index', '(', '""', 'test', '""', ',', ' ', '""', '_na_', '""', ')', ',', ' ', 'nodeSettings', ',', ' ', 'settings', ',', ' ', 'new', ' ', 'AnalysisVietnamesePlugin', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,76bed29a8c663f78546f75956ae2304e5211c5bd,VietnameseAnalysisTokenTest.java,inputToken,"    private void inputToken(String inputText, String[] expectArray) throws IOException {
        TestAnalysis analysis = VietnameseAnalysisTest.createTestAnalysis();
        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);

        TokenStream ts = analyzer.analyzer().tokenStream(""test"", inputText);
        CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);
        ts.reset();
        for (String expected : expectArray) {
            assertThat(ts.incrementToken(), equalTo(true));
            assertThat(term.toString(), equalTo(expected));
        }
        assertThat(ts.incrementToken(), equalTo(false));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/76bed29a8c663f78546f75956ae2304e5211c5bd,"    private void inputToken(String inputText, String[] expectArray) throws IOException {
        TestAnalysis analysis = VietnameseAnalysisTest.createTestAnalysis();
        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);

        TokenStream ts = analyzer.analyzer().tokenStream(""test"", inputText);
        CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);
        ts.reset();
        for (String expected : expectArray) {
            assertThat(ts.incrementToken(), equalTo(true));
            assertThat(term.toString(), equalTo(expected));
        }
        assertThat(ts.incrementToken(), equalTo(false));
    }
","['    ', 'private', ' ', 'void', ' ', 'inputToken', '(', 'String', ' ', 'inputText', ',', ' ', 'String', '[', ']', ' ', 'expectArray', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TestAnalysis', ' ', 'analysis', ' ', '=', ' ', 'VietnameseAnalysisTest', '.', 'createTestAnalysis', '(', ')', ';', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'vi_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '\n', '        ', 'TokenStream', ' ', 'ts', ' ', '=', ' ', 'analyzer', '.', 'analyzer', '(', ')', '.', 'tokenStream', '(', '""', 'test', '""', ',', ' ', 'inputText', ')', ';', '\n', '        ', 'CharTermAttribute', ' ', 'term', ' ', '=', ' ', 'ts', '.', 'addAttribute', '(', 'CharTermAttribute', '.', 'class', ')', ';', '\n', '        ', 'ts', '.', 'reset', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'expected', ' ', ':', ' ', 'expectArray', ')', ' ', '{', '\n', '            ', 'assertThat', '(', 'ts', '.', 'incrementToken', '(', ')', ',', ' ', 'equalTo', '(', 'true', ')', ')', ';', '\n', '            ', 'assertThat', '(', 'term', '.', 'toString', '(', ')', ',', ' ', 'equalTo', '(', 'expected', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'assertThat', '(', 'ts', '.', 'incrementToken', '(', ')', ',', ' ', 'equalTo', '(', 'false', ')', ')', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,fromInt,"		public static Type fromInt(int i) {
			if (Type.values == null) {
				Type.values = Type.values();
			}
			return Type.values[i];
		}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"		public static Type fromInt(int i) {
			if (Type.values == null) {
				Type.values = Type.values();
			}
			return Type.values[i];
		}
","['\t\t', 'public', ' ', 'static', ' ', 'Type', ' ', 'fromInt', '(', 'int', ' ', 'i', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'Type', '.', 'values', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'Type', '.', 'values', ' ', '=', ' ', 'Type', '.', 'values', '(', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'return', ' ', 'Type', '.', 'values', '[', 'i', ']', ';', '\n', '\t\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,fromInt,"		public static SegType fromInt(int i) {
			if (SegType.values == null) {
				SegType.values = SegType.values();
			}
			return SegType.values[i];
		}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"		public static SegType fromInt(int i) {
			if (SegType.values == null) {
				SegType.values = SegType.values();
			}
			return SegType.values[i];
		}
","['\t\t', 'public', ' ', 'static', ' ', 'SegType', ' ', 'fromInt', '(', 'int', ' ', 'i', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'SegType', '.', 'values', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'SegType', '.', 'values', ' ', '=', ' ', 'SegType', '.', 'values', '(', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'return', ' ', 'SegType', '.', 'values', '[', 'i', ']', ';', '\n', '\t\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,cloneWithNewText,"	public Token cloneWithNewText(String newText, int newEnd) {
		return new Token(newText, type, segType, splittedByDot, startPos, endPos);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public Token cloneWithNewText(String newText, int newEnd) {
		return new Token(newText, type, segType, splittedByDot, startPos, endPos);
	}
","['\t', 'public', ' ', 'Token', ' ', 'cloneWithNewText', '(', 'String', ' ', 'newText', ',', ' ', 'int', ' ', 'newEnd', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'new', ' ', 'Token', '(', 'newText', ',', ' ', 'type', ',', ' ', 'segType', ',', ' ', 'splittedByDot', ',', ' ', 'startPos', ',', ' ', 'endPos', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,toStringList,"	public static ArrayList<String> toStringList(List<Token> tokenList) {
		ArrayList<String> temp = new ArrayList<>();
		for (Token token : tokenList) {
			temp.add(token.getText());
		}
		return temp;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static ArrayList<String> toStringList(List<Token> tokenList) {
		ArrayList<String> temp = new ArrayList<>();
		for (Token token : tokenList) {
			temp.add(token.getText());
		}
		return temp;
	}
","['\t', 'public', ' ', 'static', ' ', 'ArrayList', '<', 'String', '>', ' ', 'toStringList', '(', 'List', '<', 'Token', '>', ' ', 'tokenList', ')', ' ', '{', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'temp', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Token', ' ', 'token', ' ', ':', ' ', 'tokenList', ')', ' ', '{', '\n', '\t\t\t', 'temp', '.', 'add', '(', 'token', '.', 'getText', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'temp', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,toString,"	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(type).append("" `"").append(text).append('`');
		if (segType == SegType.END_SEG_TYPE) {
			sb.append("" END"");
		} else if (segType == SegType.URL_SEG_TYPE) {
			sb.append("" URL"");
		} else if (segType == SegType.SKIP_SEG_TYPE) {
			sb.append("" SKIP"");
		} else if (segType == SegType.END_URL_TYPE) {
			sb.append("" END_URL"");
		} else {
			sb.append("" OTHER"");
		}
		sb.append(' ').append(startPos).append('-').append(endPos);
		return sb.toString();
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(type).append("" `"").append(text).append('`');
		if (segType == SegType.END_SEG_TYPE) {
			sb.append("" END"");
		} else if (segType == SegType.URL_SEG_TYPE) {
			sb.append("" URL"");
		} else if (segType == SegType.SKIP_SEG_TYPE) {
			sb.append("" SKIP"");
		} else if (segType == SegType.END_URL_TYPE) {
			sb.append("" END_URL"");
		} else {
			sb.append("" OTHER"");
		}
		sb.append(' ').append(startPos).append('-').append(endPos);
		return sb.toString();
	}
","['\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\t\t', 'sb', '.', 'append', '(', 'type', ')', '.', 'append', '(', '""', ' `', '""', ')', '.', 'append', '(', 'text', ')', '.', 'append', '(', ""'`'"", ')', ';', '\n', '\t\t', 'if', ' ', '(', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'END_SEG_TYPE', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', '""', ' END', '""', ')', ';', '\n', '\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'URL_SEG_TYPE', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', '""', ' URL', '""', ')', ';', '\n', '\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'SKIP_SEG_TYPE', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', '""', ' SKIP', '""', ')', ';', '\n', '\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'END_URL_TYPE', ')', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', '""', ' END_URL', '""', ')', ';', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sb', '.', 'append', '(', '""', ' OTHER', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'sb', '.', 'append', '(', ""' '"", ')', '.', 'append', '(', 'startPos', ')', '.', 'append', '(', ""'-'"", ')', '.', 'append', '(', 'endPos', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,clone,"	public Token clone() {
		return new Token(text, type, segType, startPos, endPos);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public Token clone() {
		return new Token(text, type, segType, startPos, endPos);
	}
","['\t', 'public', ' ', 'Token', ' ', 'clone', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'new', ' ', 'Token', '(', 'text', ',', ' ', 'type', ',', ' ', 'segType', ',', ' ', 'startPos', ',', ' ', 'endPos', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,hashCode,"	public int hashCode() {
		return text.hashCode() ^ type.hashCode();
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public int hashCode() {
		return text.hashCode() ^ type.hashCode();
	}
","['\t', 'public', ' ', 'int', ' ', 'hashCode', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'text', '.', 'hashCode', '(', ')', ' ', '^', ' ', 'type', '.', 'hashCode', '(', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isPunct,"	public boolean isPunct() {
		return type == Type.PUNCT;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isPunct() {
		return type == Type.PUNCT;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isPunct', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'type', ' ', '=', '=', ' ', 'Type', '.', 'PUNCT', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isNumber,"	public boolean isNumber() {
		return type == Type.NUMBER;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isNumber() {
		return type == Type.NUMBER;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isNumber', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'type', ' ', '=', '=', ' ', 'Type', '.', 'NUMBER', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isWholeUrl,"	public boolean isWholeUrl() {
		return type == Type.WHOLE_URL;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isWholeUrl() {
		return type == Type.WHOLE_URL;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isWholeUrl', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'type', ' ', '=', '=', ' ', 'Type', '.', 'WHOLE_URL', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isSiteUrl,"	public boolean isSiteUrl() {
		return type == Type.SITE_URL;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isSiteUrl() {
		return type == Type.SITE_URL;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isSiteUrl', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'type', ' ', '=', '=', ' ', 'Type', '.', 'SITE_URL', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isSpace,"	public boolean isSpace() {
		return type == Type.SPACE;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isSpace() {
		return type == Type.SPACE;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isSpace', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'type', ' ', '=', '=', ' ', 'Type', '.', 'SPACE', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isEndSeg,"	public boolean isEndSeg() {
		return segType == SegType.END_SEG_TYPE;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isEndSeg() {
		return segType == SegType.END_SEG_TYPE;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isEndSeg', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'END_SEG_TYPE', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isSplittedByDot,"	public boolean isSplittedByDot() {
		return splittedByDot;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isSplittedByDot() {
		return splittedByDot;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isSplittedByDot', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'splittedByDot', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isUrlSeg,"	public boolean isUrlSeg() {
		return segType == SegType.URL_SEG_TYPE;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isUrlSeg() {
		return segType == SegType.URL_SEG_TYPE;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isUrlSeg', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'URL_SEG_TYPE', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isEndUrlSeg,"	public boolean isEndUrlSeg() {
		return segType == SegType.END_URL_TYPE;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isEndUrlSeg() {
		return segType == SegType.END_URL_TYPE;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isEndUrlSeg', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'END_URL_TYPE', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isSkipSeg,"	public boolean isSkipSeg() {
		return segType == SegType.SKIP_SEG_TYPE;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isSkipSeg() {
		return segType == SegType.SKIP_SEG_TYPE;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isSkipSeg', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'SKIP_SEG_TYPE', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isOtherSeg,"	public boolean isOtherSeg() {
		return segType == SegType.OTHER_SEG_TYPE;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isOtherSeg() {
		return segType == SegType.OTHER_SEG_TYPE;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isOtherSeg', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'segType', ' ', '=', '=', ' ', 'SegType', '.', 'OTHER_SEG_TYPE', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Token.java,isWordOrNumber,"	public boolean isWordOrNumber() {
		return isWord() || isNumber() || isSiteUrl();
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public boolean isWordOrNumber() {
		return isWord() || isNumber() || isSiteUrl();
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isWordOrNumber', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'isWord', '(', ')', ' ', '|', '|', ' ', 'isNumber', '(', ')', ' ', '|', '|', ' ', 'isSiteUrl', '(', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,value,"        public int value() {
            return value;
        }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"        public int value() {
            return value;
        }
","['        ', 'public', ' ', 'int', ' ', 'value', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'value', ';', '\n', '        ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,initializeTokenizer,"    private void initializeTokenizer(String dictPath) {

        int status = AccessController.doPrivileged((PrivilegedAction<Integer>) () -> initialize(dictPath));
        if (0 > status) {
            throw new RuntimeException(""Cannot initialize Tokenizer"");",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    private void initializeTokenizer(String dictPath) {

        int status = AccessController.doPrivileged((PrivilegedAction<Integer>) () -> initialize(dictPath));
        if (0 > status) {
            throw new RuntimeException(""Cannot initialize Tokenizer"");
","['    ', 'private', ' ', 'void', ' ', 'initializeTokenizer', '(', 'String', ' ', 'dictPath', ')', ' ', '{', '\n', '\n', '        ', 'int', ' ', 'status', ' ', '=', ' ', 'AccessController', '.', 'doPrivileged', '(', '(', 'PrivilegedAction', '<', 'Integer', '>', ')', ' ', '(', ')', ' ', '-', '>', ' ', 'initialize', '(', 'dictPath', ')', ')', ';', '\n', '        ', 'if', ' ', '(', '0', ' ', '>', ' ', 'status', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'Cannot initialize Tokenizer', '""', ')', ';', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,tokenize,"    public List<Token> tokenize(String text) {
        return tokenize(text, TokenizeOption.NORMAL);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public List<Token> tokenize(String text) {
        return tokenize(text, TokenizeOption.NORMAL);
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'String', ' ', 'text', ')', ' ', '{', '\n', '        ', 'return', ' ', 'tokenize', '(', 'text', ',', ' ', 'TokenizeOption', '.', 'NORMAL', ')', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,tokenize,"    public List<Token> tokenize(String text, TokenizeOption option) {
        return tokenize(text, option, this.keepPunctuation);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public List<Token> tokenize(String text, TokenizeOption option) {
        return tokenize(text, option, this.keepPunctuation);
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'String', ' ', 'text', ',', ' ', 'TokenizeOption', ' ', 'option', ')', ' ', '{', '\n', '        ', 'return', ' ', 'tokenize', '(', 'text', ',', ' ', 'option', ',', ' ', 'this', '.', 'keepPunctuation', ')', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,tokenize,"    public List<Token> tokenize(String text, TokenizeOption option, boolean keepPunctuation) {
        return tokenize(text, option, keepPunctuation, false);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public List<Token> tokenize(String text, TokenizeOption option, boolean keepPunctuation) {
        return tokenize(text, option, keepPunctuation, false);
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'String', ' ', 'text', ',', ' ', 'TokenizeOption', ' ', 'option', ',', ' ', 'boolean', ' ', 'keepPunctuation', ')', ' ', '{', '\n', '        ', 'return', ' ', 'tokenize', '(', 'text', ',', ' ', 'option', ',', ' ', 'keepPunctuation', ',', ' ', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,tokenize,"    public List<Token> tokenize(String text, TokenizeOption option, boolean keepPunctuation, boolean forTransforming) {
        return AccessController.doPrivileged((PrivilegedAction<List<Token>>) () -> segment(text, forTransforming, option.value(), keepPunctuation));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public List<Token> tokenize(String text, TokenizeOption option, boolean keepPunctuation, boolean forTransforming) {
        return AccessController.doPrivileged((PrivilegedAction<List<Token>>) () -> segment(text, forTransforming, option.value(), keepPunctuation));
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'String', ' ', 'text', ',', ' ', 'TokenizeOption', ' ', 'option', ',', ' ', 'boolean', ' ', 'keepPunctuation', ',', ' ', 'boolean', ' ', 'forTransforming', ')', ' ', '{', '\n', '        ', 'return', ' ', 'AccessController', '.', 'doPrivileged', '(', '(', 'PrivilegedAction', '<', 'List', '<', 'Token', '>', '>', ')', ' ', '(', ')', ' ', '-', '>', ' ', 'segment', '(', 'text', ',', ' ', 'forTransforming', ',', ' ', 'option', '.', 'value', '(', ')', ',', ' ', 'keepPunctuation', ')', ')', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,segmentPointer,"    public native long segmentPointer(String text, boolean forTransforming, int tokenizeOption, boolean keepPunctuation);

    //Calls CocCoc lib's freeMemory function
    private native void freeMemory(long resPointer);

    //Calls CocCoc lib's initialize function
    private native int initialize(String dictPath);

}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public native long segmentPointer(String text, boolean forTransforming, int tokenizeOption, boolean keepPunctuation);

    
    private native void freeMemory(long resPointer);

    
    private native int initialize(String dictPath);

}
","['    ', 'public', ' ', 'native', ' ', 'long', ' ', 'segmentPointer', '(', 'String', ' ', 'text', ',', ' ', 'boolean', ' ', 'forTransforming', ',', ' ', 'int', ' ', 'tokenizeOption', ',', ' ', 'boolean', ' ', 'keepPunctuation', ')', ';', '\n', '\n', '    ', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'freeMemory', '(', 'long', ' ', 'resPointer', ')', ';', '\n', '\n', '    ', '\n', '    ', 'private', ' ', 'native', ' ', 'int', ' ', 'initialize', '(', 'String', ' ', 'dictPath', ')', ';', '\n', '\n', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Tokenizer.java,freeMemory,"    private native void freeMemory(long resPointer);

    //Calls CocCoc lib's initialize function
    private native int initialize(String dictPath);

}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    private native void freeMemory(long resPointer);

    
    private native int initialize(String dictPath);

}
","['    ', 'private', ' ', 'native', ' ', 'void', ' ', 'freeMemory', '(', 'long', ' ', 'resPointer', ')', ';', '\n', '\n', '    ', '\n', '    ', 'private', ' ', 'native', ' ', 'int', ' ', 'initialize', '(', 'String', ' ', 'dictPath', ')', ';', '\n', '\n', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,saveUnsafeMemory,"	public static void saveUnsafeMemory(OutputStream os, long memory, long size) throws IOException {
		for (long i = memory; i < memory + size; i++) {
			os.write(UNSAFE.getByte(i));",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void saveUnsafeMemory(OutputStream os, long memory, long size) throws IOException {
		for (long i = memory; i < memory + size; i++) {
			os.write(UNSAFE.getByte(i));
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'saveUnsafeMemory', '(', 'OutputStream', ' ', 'os', ',', ' ', 'long', ' ', 'memory', ',', ' ', 'long', ' ', 'size', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '\t\t', 'for', ' ', '(', 'long', ' ', 'i', ' ', '=', ' ', 'memory', ';', ' ', 'i', ' ', '<', ' ', 'memory', ' ', '+', ' ', 'size', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\t\t\t', 'os', '.', 'write', '(', 'UNSAFE', '.', 'getByte', '(', 'i', ')', ')', ';', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,readToUnsafeMemory,"	public static long readToUnsafeMemory(File file) throws IOException {
		long len = file.length();
		long memory = UNSAFE.allocateMemory(len);
		try (BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE)) {
			for (long i = 0; i < len; i++) {
				UNSAFE.putByte(memory + i, (byte) fis.read());
			}
		}
		return memory;
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static long readToUnsafeMemory(File file) throws IOException {
		long len = file.length();
		long memory = UNSAFE.allocateMemory(len);
		try (BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE)) {
			for (long i = 0; i < len; i++) {
				UNSAFE.putByte(memory + i, (byte) fis.read());
			}
		}
		return memory;
	}
","['\t', 'public', ' ', 'static', ' ', 'long', ' ', 'readToUnsafeMemory', '(', 'File', ' ', 'file', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '\t\t', 'long', ' ', 'len', ' ', '=', ' ', 'file', '.', 'length', '(', ')', ';', '\n', '\t\t', 'long', ' ', 'memory', ' ', '=', ' ', 'UNSAFE', '.', 'allocateMemory', '(', 'len', ')', ';', '\n', '\t\t', 'try', ' ', '(', 'BufferedInputStream', ' ', 'fis', ' ', '=', ' ', 'new', ' ', 'BufferedInputStream', '(', 'new', ' ', 'FileInputStream', '(', 'file', ')', ',', ' ', 'BUFFER_SIZE', ')', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'long', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'len', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '\t\t\t\t', 'UNSAFE', '.', 'putByte', '(', 'memory', ' ', '+', ' ', 'i', ',', ' ', '(', 'byte', ')', ' ', 'fis', '.', 'read', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'memory', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,writeString,"	public static void writeString(String str, OutputStream os, long unsafeBuffer)
			throws IOException {
		byte[] bytes = str.getBytes(CHARSET);
		writeInt(bytes.length, os, unsafeBuffer);
		os.write(bytes);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void writeString(String str, OutputStream os, long unsafeBuffer)
			throws IOException {
		byte[] bytes = str.getBytes(CHARSET);
		writeInt(bytes.length, os, unsafeBuffer);
		os.write(bytes);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'writeString', '(', 'String', ' ', 'str', ',', ' ', 'OutputStream', ' ', 'os', ',', ' ', 'long', ' ', 'unsafeBuffer', ')', '\n', '\t\t\t', 'throws', ' ', 'IOException', ' ', '{', '\n', '\t\t', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'str', '.', 'getBytes', '(', 'CHARSET', ')', ';', '\n', '\t\t', 'writeInt', '(', 'bytes', '.', 'length', ',', ' ', 'os', ',', ' ', 'unsafeBuffer', ')', ';', '\n', '\t\t', 'os', '.', 'write', '(', 'bytes', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,writeInt,"	public static void writeInt(int value, OutputStream os, long unsafeBuffer) throws IOException {
		Unsafe.UNSAFE.putInt(unsafeBuffer, value);
		Unsafe.saveUnsafeMemory(os, unsafeBuffer, 4);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void writeInt(int value, OutputStream os, long unsafeBuffer) throws IOException {
		Unsafe.UNSAFE.putInt(unsafeBuffer, value);
		Unsafe.saveUnsafeMemory(os, unsafeBuffer, 4);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'writeInt', '(', 'int', ' ', 'value', ',', ' ', 'OutputStream', ' ', 'os', ',', ' ', 'long', ' ', 'unsafeBuffer', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '\t\t', 'Unsafe', '.', 'UNSAFE', '.', 'putInt', '(', 'unsafeBuffer', ',', ' ', 'value', ')', ';', '\n', '\t\t', 'Unsafe', '.', 'saveUnsafeMemory', '(', 'os', ',', ' ', 'unsafeBuffer', ',', ' ', '4', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,readString,"	public static String readString(InputStream is) throws IOException {
		int length = readInt(is);
		byte[] bytes = new byte[length];
		is.read(bytes);
		return new String(bytes, CHARSET);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static String readString(InputStream is) throws IOException {
		int length = readInt(is);
		byte[] bytes = new byte[length];
		is.read(bytes);
		return new String(bytes, CHARSET);
	}
","['\t', 'public', ' ', 'static', ' ', 'String', ' ', 'readString', '(', 'InputStream', ' ', 'is', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '\t\t', 'int', ' ', 'length', ' ', '=', ' ', 'readInt', '(', 'is', ')', ';', '\n', '\t\t', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'new', ' ', 'byte', '[', 'length', ']', ';', '\n', '\t\t', 'is', '.', 'read', '(', 'bytes', ')', ';', '\n', '\t\t', 'return', ' ', 'new', ' ', 'String', '(', 'bytes', ',', ' ', 'CHARSET', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,readInt,"	public static int readInt(InputStream is) throws IOException {
		byte[] bytes = new byte[4];
		is.read(bytes);
		return Unsafe.getInt(bytes, 0);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static int readInt(InputStream is) throws IOException {
		byte[] bytes = new byte[4];
		is.read(bytes);
		return Unsafe.getInt(bytes, 0);
	}
","['\t', 'public', ' ', 'static', ' ', 'int', ' ', 'readInt', '(', 'InputStream', ' ', 'is', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '\t\t', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'new', ' ', 'byte', '[', '4', ']', ';', '\n', '\t\t', 'is', '.', 'read', '(', 'bytes', ')', ';', '\n', '\t\t', 'return', ' ', 'Unsafe', '.', 'getInt', '(', 'bytes', ',', ' ', '0', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,copy,"	public static void copy(byte[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET, null, pointer, length);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void copy(byte[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET, null, pointer, length);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'copy', '(', 'byte', '[', ']', ' ', 'values', ',', ' ', 'int', ' ', 'length', ',', ' ', 'long', ' ', 'pointer', ')', ' ', '{', '\n', '\t\t', 'UNSAFE', '.', 'copyMemory', '(', 'values', ',', ' ', 'sun', '.', 'misc', '.', 'Unsafe', '.', 'ARRAY_BYTE_BASE_OFFSET', ',', ' ', 'null', ',', ' ', 'pointer', ',', ' ', 'length', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,copy,"	public static void copy(byte[] values, int off, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET + off, null, pointer, length);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void copy(byte[] values, int off, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET + off, null, pointer, length);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'copy', '(', 'byte', '[', ']', ' ', 'values', ',', ' ', 'int', ' ', 'off', ',', ' ', 'int', ' ', 'length', ',', ' ', 'long', ' ', 'pointer', ')', ' ', '{', '\n', '\t\t', 'UNSAFE', '.', 'copyMemory', '(', 'values', ',', ' ', 'sun', '.', 'misc', '.', 'Unsafe', '.', 'ARRAY_BYTE_BASE_OFFSET', ' ', '+', ' ', 'off', ',', ' ', 'null', ',', ' ', 'pointer', ',', ' ', 'length', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,copy,"	public static void copy(short[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_SHORT_BASE_OFFSET, null, pointer, length * Short.BYTES);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void copy(short[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_SHORT_BASE_OFFSET, null, pointer, length * Short.BYTES);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'copy', '(', 'short', '[', ']', ' ', 'values', ',', ' ', 'int', ' ', 'length', ',', ' ', 'long', ' ', 'pointer', ')', ' ', '{', '\n', '\t\t', 'UNSAFE', '.', 'copyMemory', '(', 'values', ',', ' ', 'sun', '.', 'misc', '.', 'Unsafe', '.', 'ARRAY_SHORT_BASE_OFFSET', ',', ' ', 'null', ',', ' ', 'pointer', ',', ' ', 'length', ' ', '*', ' ', 'Short', '.', 'BYTES', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,copy,"	public static void copy(int[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_INT_BASE_OFFSET, null, pointer, length * Integer.BYTES);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void copy(int[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_INT_BASE_OFFSET, null, pointer, length * Integer.BYTES);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'copy', '(', 'int', '[', ']', ' ', 'values', ',', ' ', 'int', ' ', 'length', ',', ' ', 'long', ' ', 'pointer', ')', ' ', '{', '\n', '\t\t', 'UNSAFE', '.', 'copyMemory', '(', 'values', ',', ' ', 'sun', '.', 'misc', '.', 'Unsafe', '.', 'ARRAY_INT_BASE_OFFSET', ',', ' ', 'null', ',', ' ', 'pointer', ',', ' ', 'length', ' ', '*', ' ', 'Integer', '.', 'BYTES', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,Unsafe.java,copy,"	public static void copy(long[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_LONG_BASE_OFFSET, null, pointer, length * Long.BYTES);
	}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"	public static void copy(long[] values, int length, long pointer) {
		UNSAFE.copyMemory(values, sun.misc.Unsafe.ARRAY_LONG_BASE_OFFSET, null, pointer, length * Long.BYTES);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'copy', '(', 'long', '[', ']', ' ', 'values', ',', ' ', 'int', ' ', 'length', ',', ' ', 'long', ' ', 'pointer', ')', ' ', '{', '\n', '\t\t', 'UNSAFE', '.', 'copyMemory', '(', 'values', ',', ' ', 'sun', '.', 'misc', '.', 'Unsafe', '.', 'ARRAY_LONG_BASE_OFFSET', ',', ' ', 'null', ',', ' ', 'pointer', ',', ' ', 'length', ' ', '*', ' ', 'Long', '.', 'BYTES', ')', ';', '\n', '\t', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer t = new VietnameseTokenizer(tokenizer);
        return new TokenStreamComponents(t, new StopFilter(new LowerCaseFilter(t), stopwords));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer t = new VietnameseTokenizer(tokenizer);
        return new TokenStreamComponents(t, new StopFilter(new LowerCaseFilter(t), stopwords));
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 't', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'tokenizer', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 't', ',', ' ', 'new', ' ', 'StopFilter', '(', 'new', ' ', 'LowerCaseFilter', '(', 't', ')', ',', ' ', 'stopwords', ')', ')', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,VietnameseTokenizer.java,tokenize,"    private void tokenize() throws IOException {
        final String text = CharStreams.toString(input);
        final List<Token> tokens = tokenizer.tokenize(text);
        if (tokens != null) {
            pending.addAll(tokens);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    private void tokenize() throws IOException {
        final String text = CharStreams.toString(input);
        final List<Token> tokens = tokenizer.tokenize(text);
        if (tokens != null) {
            pending.addAll(tokens);
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'text', ' ', '=', ' ', 'CharStreams', '.', 'toString', '(', 'input', ')', ';', '\n', '        ', 'final', ' ', 'List', '<', 'Token', '>', ' ', 'tokens', ' ', '=', ' ', 'tokenizer', '.', 'tokenize', '(', 'text', ')', ';', '\n', '        ', 'if', ' ', '(', 'tokens', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'pending', '.', 'addAll', '(', 'tokens', ')', ';', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();
        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final Token token = pending.get(i);
            posIncrAtt.setPositionIncrement(1);
            final int length = token.getText().length();
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, length);
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();
        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final Token token = pending.get(i);
            posIncrAtt.setPositionIncrement(1);
            final int length = token.getText().length();
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, length);
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'while', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'tokenize', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'false', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', 'pos', ';', ' ', 'i', ' ', '<', ' ', 'pending', '.', 'size', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'pos', '+', '+', ';', '\n', '            ', 'final', ' ', 'Token', ' ', 'token', ' ', '=', ' ', 'pending', '.', 'get', '(', 'i', ')', ';', '\n', '            ', 'posIncrAtt', '.', 'setPositionIncrement', '(', '1', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'token', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'typeAtt', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'token', '.', 'getType', '(', ')', ')', ')', ';', '\n', '            ', 'termAtt', '.', 'copyBuffer', '(', 'token', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '            ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'token', '.', 'getPos', '(', ')', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'token', '.', 'getEndPos', '(', ')', ')', ')', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,VietnameseTokenizerFactory.java,create,"    public org.apache.lucene.analysis.Tokenizer create() {
        return new VietnameseTokenizer(tokenizer);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public org.apache.lucene.analysis.Tokenizer create() {
        return new VietnameseTokenizer(tokenizer);
    }
","['    ', 'public', ' ', 'org', '.', 'apache', '.', 'lucene', '.', 'analysis', '.', 'Tokenizer', ' ', 'create', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'tokenizer', ')', ';', '\n', '    ', '}', '\n']"
master,49a3ebb7ec757120865960a2fa6c8bfa3146d14a,VietnameseAnalysisTests.java,createTestAnalysis,"    public TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTests.class.getResourceAsStream(json), true)
                .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/49a3ebb7ec757120865960a2fa6c8bfa3146d14a,"    public TestAnalysis createTestAnalysis() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTests.class.getResourceAsStream(json), true)
                .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT)
                .build();
        Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build();
        return createTestAnalysis(new Index(""test"", ""_na_""), nodeSettings, settings, new AnalysisVietnamesePlugin());
    }
","['    ', 'public', ' ', 'TestAnalysis', ' ', 'createTestAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'String', ' ', 'json', ' ', '=', ' ', '""', '/org/elasticsearch/index/analysis/vi_analysis.json', '""', ';', '\n', '        ', 'Settings', ' ', 'settings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '\n', '                ', '.', 'loadFromStream', '(', 'json', ',', ' ', 'VietnameseAnalysisTests', '.', 'class', '.', 'getResourceAsStream', '(', 'json', ')', ',', ' ', 'true', ')', '\n', '                ', '.', 'put', '(', 'IndexMetadata', '.', 'SETTING_VERSION_CREATED', ',', ' ', 'Version', '.', 'CURRENT', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '        ', 'Settings', ' ', 'nodeSettings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '.', 'put', '(', 'Environment', '.', 'PATH_HOME_SETTING', '.', 'getKey', '(', ')', ',', ' ', 'createTempDir', '(', ')', ')', '.', 'build', '(', ')', ';', '\n', '        ', 'return', ' ', 'createTestAnalysis', '(', 'new', ' ', 'Index', '(', '""', 'test', '""', ',', ' ', '""', '_na_', '""', ')', ',', ' ', 'nodeSettings', ',', ' ', 'settings', ',', ' ', 'new', ' ', 'AnalysisVietnamesePlugin', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,36efc6c986eb4fb27a71215723d08ff19e6a2f74,VietnameseAnalysisTests.java,testSimpleVietnameseAnalysis,"    public void testSimpleVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis();
        assertNotNull(analysis);

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/36efc6c986eb4fb27a71215723d08ff19e6a2f74,"    public void testSimpleVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis();
        assertNotNull(analysis);

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
","['    ', 'public', ' ', 'void', ' ', 'testSimpleVietnameseAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TestAnalysis', ' ', 'analysis', ' ', '=', ' ', 'createTestAnalysis', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analysis', ')', ';', '\n', '\n', '        ', 'TokenizerFactory', ' ', 'tokenizerFactory', ' ', '=', ' ', 'analysis', '.', 'tokenizer', '.', 'get', '(', '""', 'vi_tokenizer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'tokenizerFactory', ')', ';', '\n', '        ', 'assertThat', '(', 'tokenizerFactory', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizerFactory', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'vi_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'VietnameseAnalyzer', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'my_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'VietnameseAnalyzer', '.', 'class', ')', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', '.', 'tokenStream', '(', 'null', ',', ' ', 'new', ' ', 'StringReader', '(', '""', '""', ')', ')', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizer', '.', 'class', ')', ')', ';', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,Tokenizer.java,segment,"    public List<Token> segment(String text, TokenizeOption option, boolean keepPunctuation) {
        return segment(text, option, keepPunctuation, false);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    public List<Token> segment(String text, TokenizeOption option, boolean keepPunctuation) {
        return segment(text, option, keepPunctuation, false);
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'segment', '(', 'String', ' ', 'text', ',', ' ', 'TokenizeOption', ' ', 'option', ',', ' ', 'boolean', ' ', 'keepPunctuation', ')', ' ', '{', '\n', '        ', 'return', ' ', 'segment', '(', 'text', ',', ' ', 'option', ',', ' ', 'keepPunctuation', ',', ' ', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,Tokenizer.java,segment,"    public List<Token> segment(String text, TokenizeOption option, boolean keepPunctuation, boolean forTransforming) {
        return segment(text, forTransforming, option.value(), keepPunctuation);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    public List<Token> segment(String text, TokenizeOption option, boolean keepPunctuation, boolean forTransforming) {
        return segment(text, forTransforming, option.value(), keepPunctuation);
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'segment', '(', 'String', ' ', 'text', ',', ' ', 'TokenizeOption', ' ', 'option', ',', ' ', 'boolean', ' ', 'keepPunctuation', ',', ' ', 'boolean', ' ', 'forTransforming', ')', ' ', '{', '\n', '        ', 'return', ' ', 'segment', '(', 'text', ',', ' ', 'forTransforming', ',', ' ', 'option', '.', 'value', '(', ')', ',', ' ', 'keepPunctuation', ')', ';', '\n', '    ', '}', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer t = new VietnameseTokenizer(config);
        final LowerCaseFilter lowerCaseFilter = new LowerCaseFilter(t);
        final StopFilter stopFilter = new StopFilter(lowerCaseFilter, stopwords);
        return new TokenStreamComponents(t, stopFilter);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer t = new VietnameseTokenizer(config);
        final LowerCaseFilter lowerCaseFilter = new LowerCaseFilter(t);
        final StopFilter stopFilter = new StopFilter(lowerCaseFilter, stopwords);
        return new TokenStreamComponents(t, stopFilter);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 't', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'config', ')', ';', '\n', '        ', 'final', ' ', 'LowerCaseFilter', ' ', 'lowerCaseFilter', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 't', ')', ';', '\n', '        ', 'final', ' ', 'StopFilter', ' ', 'stopFilter', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'lowerCaseFilter', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 't', ',', ' ', 'stopFilter', ')', ';', '\n', '    ', '}', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();

        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final Token token = pending.get(i);
            posIncrAtt.setPositionIncrement(1);
            final int length = token.getText().length();
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, length);
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();

        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final Token token = pending.get(i);
            posIncrAtt.setPositionIncrement(1);
            final int length = token.getText().length();
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, length);
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'while', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'tokenize', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'false', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', 'pos', ';', ' ', 'i', ' ', '<', ' ', 'pending', '.', 'size', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'pos', '+', '+', ';', '\n', '            ', 'final', ' ', 'Token', ' ', 'token', ' ', '=', ' ', 'pending', '.', 'get', '(', 'i', ')', ';', '\n', '            ', 'posIncrAtt', '.', 'setPositionIncrement', '(', '1', ')', ';', '\n', '            ', 'final', ' ', 'int', ' ', 'length', ' ', '=', ' ', 'token', '.', 'getText', '(', ')', '.', 'length', '(', ')', ';', '\n', '            ', 'typeAtt', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'token', '.', 'getType', '(', ')', ')', ')', ';', '\n', '            ', 'termAtt', '.', 'copyBuffer', '(', 'token', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'length', ')', ';', '\n', '            ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'token', '.', 'getPos', '(', ')', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'token', '.', 'getEndPos', '(', ')', ')', ')', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,VietnameseTokenizer.java,tokenize,"    private void tokenize() throws IOException {
        final List<Token> tokens = tokenizer.tokenize(input);
        if (tokens != null) {
            pending.addAll(tokens);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    private void tokenize() throws IOException {
        final List<Token> tokens = tokenizer.tokenize(input);
        if (tokens != null) {
            pending.addAll(tokens);
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'List', '<', 'Token', '>', ' ', 'tokens', ' ', '=', ' ', 'tokenizer', '.', 'tokenize', '(', 'input', ')', ';', '\n', '        ', 'if', ' ', '(', 'tokens', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'pending', '.', 'addAll', '(', 'tokens', ')', ';', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,VietnameseTokenizerImpl.java,tokenize,"    public List<Token> tokenize(Reader input) throws IOException {
        return tokenize(CharStreams.toString(input));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    public List<Token> tokenize(Reader input) throws IOException {
        return tokenize(CharStreams.toString(input));
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'Reader', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'return', ' ', 'tokenize', '(', 'CharStreams', '.', 'toString', '(', 'input', ')', ')', ';', '\n', '    ', '}', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,VietnameseTokenizerImpl.java,tokenize,"    public List<Token> tokenize(String input) throws IOException {
        return AccessController.doPrivileged(
                (PrivilegedAction<List<Token>>) () -> tokenizer.segment(input, option, config.keepPunctuation)",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    public List<Token> tokenize(String input) throws IOException {
        return AccessController.doPrivileged(
                (PrivilegedAction<List<Token>>) () -> tokenizer.segment(input, option, config.keepPunctuation)
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'String', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'return', ' ', 'AccessController', '.', 'doPrivileged', '(', '\n', '                ', '(', 'PrivilegedAction', '<', 'List', '<', 'Token', '>', '>', ')', ' ', '(', ')', ' ', '-', '>', ' ', 'tokenizer', '.', 'segment', '(', 'input', ',', ' ', 'option', ',', ' ', 'config', '.', 'keepPunctuation', ')', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,VietnameseTokenizerFactory.java,create,"    public org.apache.lucene.analysis.Tokenizer create() {
        return new VietnameseTokenizer(config);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    public org.apache.lucene.analysis.Tokenizer create() {
        return new VietnameseTokenizer(config);
    }
","['    ', 'public', ' ', 'org', '.', 'apache', '.', 'lucene', '.', 'analysis', '.', 'Tokenizer', ' ', 'create', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'config', ')', ';', '\n', '    ', '}', '\n']"
master,64ff993e580dc93de5af57e113af14008ef18a3d,VietnameseAnalysisTests.java,testSimpleVietnameseAnalysis,"    public void testSimpleVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis();
        assertNotNull(analysis);

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/64ff993e580dc93de5af57e113af14008ef18a3d,"    public void testSimpleVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis();
        assertNotNull(analysis);

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));
    }
","['    ', 'public', ' ', 'void', ' ', 'testSimpleVietnameseAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TestAnalysis', ' ', 'analysis', ' ', '=', ' ', 'createTestAnalysis', '(', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analysis', ')', ';', '\n', '\n', '        ', 'TokenizerFactory', ' ', 'tokenizerFactory', ' ', '=', ' ', 'analysis', '.', 'tokenizer', '.', 'get', '(', '""', 'vi_tokenizer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'tokenizerFactory', ')', ';', '\n', '        ', 'assertThat', '(', 'tokenizerFactory', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizerFactory', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'vi_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'VietnameseAnalyzer', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'my_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'VietnameseAnalyzer', '.', 'class', ')', ')', ';', '\n', '    ', '}', '\n']"
master,8617939c5b33ca2551d01ded30a7cab325b7036a,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();
        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final Token token = pending.get(i);
            posIncrAtt.setPositionIncrement(1);
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, token.getText().length());
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/8617939c5b33ca2551d01ded30a7cab325b7036a,"    public final boolean incrementToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return false;
            }
        }
        clearAttributes();
        for (int i = pos; i < pending.size(); i++) {
            pos++;
            final Token token = pending.get(i);
            posIncrAtt.setPositionIncrement(1);
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, token.getText().length());
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'while', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'tokenize', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'false', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', 'pos', ';', ' ', 'i', ' ', '<', ' ', 'pending', '.', 'size', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'pos', '+', '+', ';', '\n', '            ', 'final', ' ', 'Token', ' ', 'token', ' ', '=', ' ', 'pending', '.', 'get', '(', 'i', ')', ';', '\n', '            ', 'posIncrAtt', '.', 'setPositionIncrement', '(', '1', ')', ';', '\n', '            ', 'typeAtt', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'token', '.', 'getType', '(', ')', ')', ')', ';', '\n', '            ', 'termAtt', '.', 'copyBuffer', '(', 'token', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'token', '.', 'getText', '(', ')', '.', 'length', '(', ')', ')', ';', '\n', '            ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'token', '.', 'getPos', '(', ')', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'token', '.', 'getEndPos', '(', ')', ')', ')', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,Tokenizer.java,segmentPointer,"    public native long segmentPointer(String text, boolean forTransforming, int tokenizeOption, boolean keepPunctuation);

    //Calls CocCoc lib's freeMemory function
    private native void freeMemory(long resPointer);

    //Calls CocCoc lib's initialize function
    private native int initialize(String dictPath);
}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public native long segmentPointer(String text, boolean forTransforming, int tokenizeOption, boolean keepPunctuation);

    
    private native void freeMemory(long resPointer);

    
    private native int initialize(String dictPath);
}
","['    ', 'public', ' ', 'native', ' ', 'long', ' ', 'segmentPointer', '(', 'String', ' ', 'text', ',', ' ', 'boolean', ' ', 'forTransforming', ',', ' ', 'int', ' ', 'tokenizeOption', ',', ' ', 'boolean', ' ', 'keepPunctuation', ')', ';', '\n', '\n', '    ', '\n', '    ', 'private', ' ', 'native', ' ', 'void', ' ', 'freeMemory', '(', 'long', ' ', 'resPointer', ')', ';', '\n', '\n', '    ', '\n', '    ', 'private', ' ', 'native', ' ', 'int', ' ', 'initialize', '(', 'String', ' ', 'dictPath', ')', ';', '\n', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,Tokenizer.java,freeMemory,"    private native void freeMemory(long resPointer);

    //Calls CocCoc lib's initialize function
    private native int initialize(String dictPath);
}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    private native void freeMemory(long resPointer);

    
    private native int initialize(String dictPath);
}
","['    ', 'private', ' ', 'native', ' ', 'void', ' ', 'freeMemory', '(', 'long', ' ', 'resPointer', ')', ';', '\n', '\n', '    ', '\n', '    ', 'private', ' ', 'native', ' ', 'int', ' ', 'initialize', '(', 'String', ' ', 'dictPath', ')', ';', '\n', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer source = new VietnameseTokenizer(config);
        TokenStream result = new StopFilter(source, stopwords);
        return new TokenStreamComponents(source, result);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer source = new VietnameseTokenizer(config);
        TokenStream result = new StopFilter(source, stopwords);
        return new TokenStreamComponents(source, result);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'source', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'config', ')', ';', '\n', '        ', 'TokenStream', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'source', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'source', ',', ' ', 'result', ')', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseTokenizer.java,incrementToken,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        final Token token = tokenizer.getNextToken();
        if (token != null) {
            posIncrAtt.setPositionIncrement(1);
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, token.getText().length());
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public final boolean incrementToken() throws IOException {
        clearAttributes();
        final Token token = tokenizer.getNextToken();
        if (token != null) {
            posIncrAtt.setPositionIncrement(1);
            typeAtt.setType(String.format(""<%s>"", token.getType()));
            termAtt.copyBuffer(token.getText().toCharArray(), 0, token.getText().length());
            offsetAtt.setOffset(correctOffset(token.getPos()), offset = correctOffset(token.getEndPos()));
            return true;
        }
        return false;
    }
","['    ', 'public', ' ', 'final', ' ', 'boolean', ' ', 'incrementToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'clearAttributes', '(', ')', ';', '\n', '        ', 'final', ' ', 'Token', ' ', 'token', ' ', '=', ' ', 'tokenizer', '.', 'getNextToken', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'token', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'posIncrAtt', '.', 'setPositionIncrement', '(', '1', ')', ';', '\n', '            ', 'typeAtt', '.', 'setType', '(', 'String', '.', 'format', '(', '""', '<%s>', '""', ',', ' ', 'token', '.', 'getType', '(', ')', ')', ')', ';', '\n', '            ', 'termAtt', '.', 'copyBuffer', '(', 'token', '.', 'getText', '(', ')', '.', 'toCharArray', '(', ')', ',', ' ', '0', ',', ' ', 'token', '.', 'getText', '(', ')', '.', 'length', '(', ')', ')', ';', '\n', '            ', 'offsetAtt', '.', 'setOffset', '(', 'correctOffset', '(', 'token', '.', 'getPos', '(', ')', ')', ',', ' ', 'offset', ' ', '=', ' ', 'correctOffset', '(', 'token', '.', 'getEndPos', '(', ')', ')', ')', ';', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseTokenizer.java,reset,"    public void reset() throws IOException {
        super.reset();
        tokenizer.reset(input);
        offset = 0;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public void reset() throws IOException {
        super.reset();
        tokenizer.reset(input);
        offset = 0;
    }
","['    ', 'public', ' ', 'void', ' ', 'reset', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'super', '.', 'reset', '(', ')', ';', '\n', '        ', 'tokenizer', '.', 'reset', '(', 'input', ')', ';', '\n', '        ', 'offset', ' ', '=', ' ', '0', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseTokenizerImpl.java,getNextToken,"    public Token getNextToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return null;
            }
        }
        pos++;
        return pos < pending.size() ? pending.get(pos) : null;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public Token getNextToken() throws IOException {
        while (pending.size() == 0) {
            tokenize();
            if (pending.size() == 0) {
                return null;
            }
        }
        pos++;
        return pos < pending.size() ? pending.get(pos) : null;
    }
","['    ', 'public', ' ', 'Token', ' ', 'getNextToken', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'while', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'tokenize', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'pending', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '                ', 'return', ' ', 'null', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'pos', '+', '+', ';', '\n', '        ', 'return', ' ', 'pos', ' ', '<', ' ', 'pending', '.', 'size', '(', ')', ' ', '?', ' ', 'pending', '.', 'get', '(', 'pos', ')', ' ', ':', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseTokenizerImpl.java,reset,"    public void reset(Reader input) {
        this.input = input;
        pending.clear();
        pos = -1;
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public void reset(Reader input) {
        this.input = input;
        pending.clear();
        pos = -1;
    }
","['    ', 'public', ' ', 'void', ' ', 'reset', '(', 'Reader', ' ', 'input', ')', ' ', '{', '\n', '        ', 'this', '.', 'input', ' ', '=', ' ', 'input', ';', '\n', '        ', 'pending', '.', 'clear', '(', ')', ';', '\n', '        ', 'pos', ' ', '=', ' ', '-', '1', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseTokenizerImpl.java,tokenize,"    private void tokenize() throws IOException {
        final List<Token> tokens = tokenize(input);
        if (tokens != null) {
            pending.addAll(tokens);",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    private void tokenize() throws IOException {
        final List<Token> tokens = tokenize(input);
        if (tokens != null) {
            pending.addAll(tokens);
","['    ', 'private', ' ', 'void', ' ', 'tokenize', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'List', '<', 'Token', '>', ' ', 'tokens', ' ', '=', ' ', 'tokenize', '(', 'input', ')', ';', '\n', '        ', 'if', ' ', '(', 'tokens', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'pending', '.', 'addAll', '(', 'tokens', ')', ';', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseTokenizerImpl.java,tokenize,"    private List<Token> tokenize(Reader input) throws IOException {
        return tokenize(CharStreams.toString(input));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    private List<Token> tokenize(Reader input) throws IOException {
        return tokenize(CharStreams.toString(input));
    }
","['    ', 'private', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'Reader', ' ', 'input', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'return', ' ', 'tokenize', '(', 'CharStreams', '.', 'toString', '(', 'input', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseTokenizerImpl.java,tokenize,"    private List<Token> tokenize(String input) {
        return AccessController.doPrivileged(
                (PrivilegedAction<List<Token>>) () -> tokenizer.segment(input, option, config.keepPunctuation)",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    private List<Token> tokenize(String input) {
        return AccessController.doPrivileged(
                (PrivilegedAction<List<Token>>) () -> tokenizer.segment(input, option, config.keepPunctuation)
","['    ', 'private', ' ', 'List', '<', 'Token', '>', ' ', 'tokenize', '(', 'String', ' ', 'input', ')', ' ', '{', '\n', '        ', 'return', ' ', 'AccessController', '.', 'doPrivileged', '(', '\n', '                ', '(', 'PrivilegedAction', '<', 'List', '<', 'Token', '>', '>', ')', ' ', '(', ')', ' ', '-', '>', ' ', 'tokenizer', '.', 'segment', '(', 'input', ',', ' ', 'option', ',', ' ', 'config', '.', 'keepPunctuation', ')', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseStopTokenFilterFactory.java,create,"    public TokenStream create(TokenStream tokenStream) {
        return new StopFilter(tokenStream, stopWords);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public TokenStream create(TokenStream tokenStream) {
        return new StopFilter(tokenStream, stopWords);
    }
","['    ', 'public', ' ', 'TokenStream', ' ', 'create', '(', 'TokenStream', ' ', 'tokenStream', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'StopFilter', '(', 'tokenStream', ',', ' ', 'stopWords', ')', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseAnalysisTests.java,testVietnameseAnalysis,"    public void testVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis(Settings.EMPTY);
        assertNotNull(analysis);

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));
",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public void testVietnameseAnalysis() throws IOException {
        TestAnalysis analysis = createTestAnalysis(Settings.EMPTY);
        assertNotNull(analysis);

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""vi_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(VietnameseAnalyzer.class));

        TokenizerFactory tokenizerFactory = analysis.tokenizer.get(""vi_tokenizer"");
        assertNotNull(tokenizerFactory);
        assertThat(tokenizerFactory, instanceOf(VietnameseTokenizerFactory.class));
","['    ', 'public', ' ', 'void', ' ', 'testVietnameseAnalysis', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'TestAnalysis', ' ', 'analysis', ' ', '=', ' ', 'createTestAnalysis', '(', 'Settings', '.', 'EMPTY', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analysis', ')', ';', '\n', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'vi_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'VietnameseAnalyzer', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'TokenizerFactory', ' ', 'tokenizerFactory', ' ', '=', ' ', 'analysis', '.', 'tokenizer', '.', 'get', '(', '""', 'vi_tokenizer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'tokenizerFactory', ')', ';', '\n', '        ', 'assertThat', '(', 'tokenizerFactory', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizerFactory', '.', 'class', ')', ')', ';', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseAnalysisTests.java,testCustomVietnameseAnalyzer,"    public void testCustomVietnameseAnalyzer() throws IOException {
        Settings settings = Settings.builder()
                .put(""index.analysis.analyzer.my_analyzer.tokenizer"", ""vi_tokenizer"")
                .build();
        TestAnalysis analysis = createTestAnalysis(settings);

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(CustomAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public void testCustomVietnameseAnalyzer() throws IOException {
        Settings settings = Settings.builder()
                .put(""index.analysis.analyzer.my_analyzer.tokenizer"", ""vi_tokenizer"")
                .build();
        TestAnalysis analysis = createTestAnalysis(settings);

        NamedAnalyzer analyzer = analysis.indexAnalyzers.get(""my_analyzer"");
        assertNotNull(analyzer);
        assertThat(analyzer.analyzer(), instanceOf(CustomAnalyzer.class));
        assertThat(analyzer.analyzer().tokenStream(null, new StringReader("""")), instanceOf(VietnameseTokenizer.class));
    }
","['    ', 'public', ' ', 'void', ' ', 'testCustomVietnameseAnalyzer', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Settings', ' ', 'settings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '\n', '                ', '.', 'put', '(', '""', 'index.analysis.analyzer.my_analyzer.tokenizer', '""', ',', ' ', '""', 'vi_tokenizer', '""', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '        ', 'TestAnalysis', ' ', 'analysis', ' ', '=', ' ', 'createTestAnalysis', '(', 'settings', ')', ';', '\n', '\n', '        ', 'NamedAnalyzer', ' ', 'analyzer', ' ', '=', ' ', 'analysis', '.', 'indexAnalyzers', '.', 'get', '(', '""', 'my_analyzer', '""', ')', ';', '\n', '        ', 'assertNotNull', '(', 'analyzer', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', ',', ' ', 'instanceOf', '(', 'CustomAnalyzer', '.', 'class', ')', ')', ';', '\n', '        ', 'assertThat', '(', 'analyzer', '.', 'analyzer', '(', ')', '.', 'tokenStream', '(', 'null', ',', ' ', 'new', ' ', 'StringReader', '(', '""', '""', ')', ')', ',', ' ', 'instanceOf', '(', 'VietnameseTokenizer', '.', 'class', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseAnalysisTests.java,createTestAnalysisFromFile,"    public TestAnalysis createTestAnalysisFromFile() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTests.class.getResourceAsStream(json), true)
                .build();
        return createTestAnalysis(settings);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public TestAnalysis createTestAnalysisFromFile() throws IOException {
        String json = ""/org/elasticsearch/index/analysis/vi_analysis.json"";
        Settings settings = Settings.builder()
                .loadFromStream(json, VietnameseAnalysisTests.class.getResourceAsStream(json), true)
                .build();
        return createTestAnalysis(settings);
    }
","['    ', 'public', ' ', 'TestAnalysis', ' ', 'createTestAnalysisFromFile', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'String', ' ', 'json', ' ', '=', ' ', '""', '/org/elasticsearch/index/analysis/vi_analysis.json', '""', ';', '\n', '        ', 'Settings', ' ', 'settings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '\n', '                ', '.', 'loadFromStream', '(', 'json', ',', ' ', 'VietnameseAnalysisTests', '.', 'class', '.', 'getResourceAsStream', '(', 'json', ')', ',', ' ', 'true', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '        ', 'return', ' ', 'createTestAnalysis', '(', 'settings', ')', ';', '\n', '    ', '}', '\n']"
master,e7ea57885e86bdafe08595c39abb7142a7e35b1a,VietnameseAnalysisTests.java,createTestAnalysis,"    public TestAnalysis createTestAnalysis(Settings analysisSettings) throws IOException {
        Settings settings = Settings.builder()
                .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT)
                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir())
                .put(analysisSettings)
                .build();
        return AnalysisTestsHelper.createTestAnalysisFromSettings(settings, new AnalysisVietnamesePlugin());
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/e7ea57885e86bdafe08595c39abb7142a7e35b1a,"    public TestAnalysis createTestAnalysis(Settings analysisSettings) throws IOException {
        Settings settings = Settings.builder()
                .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT)
                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir())
                .put(analysisSettings)
                .build();
        return AnalysisTestsHelper.createTestAnalysisFromSettings(settings, new AnalysisVietnamesePlugin());
    }
","['    ', 'public', ' ', 'TestAnalysis', ' ', 'createTestAnalysis', '(', 'Settings', ' ', 'analysisSettings', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Settings', ' ', 'settings', ' ', '=', ' ', 'Settings', '.', 'builder', '(', ')', '\n', '                ', '.', 'put', '(', 'IndexMetadata', '.', 'SETTING_VERSION_CREATED', ',', ' ', 'Version', '.', 'CURRENT', ')', '\n', '                ', '.', 'put', '(', 'Environment', '.', 'PATH_HOME_SETTING', '.', 'getKey', '(', ')', ',', ' ', 'createTempDir', '(', ')', ')', '\n', '                ', '.', 'put', '(', 'analysisSettings', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '        ', 'return', ' ', 'AnalysisTestsHelper', '.', 'createTestAnalysisFromSettings', '(', 'settings', ',', ' ', 'new', ' ', 'AnalysisVietnamesePlugin', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,572ec07024b06aa880db4f5f615f1e3711f69797,Tokenizer.java,load,"        private static Tokenizer load() {
            return new Tokenizer(dictPath);
        }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/572ec07024b06aa880db4f5f615f1e3711f69797,"        private static Tokenizer load() {
            return new Tokenizer(dictPath);
        }
","['        ', 'private', ' ', 'static', ' ', 'Tokenizer', ' ', 'load', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'Tokenizer', '(', 'dictPath', ')', ';', '\n', '        ', '}', '\n']"
master,d8fe4cf13272b6b0d6a06e64b22beabd18721060,Tokenizer.java,get,"        private static Tokenizer get() {
            return new Tokenizer(dictPath);
        }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/d8fe4cf13272b6b0d6a06e64b22beabd18721060,"        private static Tokenizer get() {
            return new Tokenizer(dictPath);
        }
","['        ', 'private', ' ', 'static', ' ', 'Tokenizer', ' ', 'get', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'Tokenizer', '(', 'dictPath', ')', ';', '\n', '        ', '}', '\n']"
master,2818390c5bcd3f898fc3bd179400f7ffa5f229d6,Tokenizer.java,segment,"    public List<Token> segment(String text, TokenizeOption option, boolean keepPunctuation) {
        return segment(text, false, option.value(), keepPunctuation);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/2818390c5bcd3f898fc3bd179400f7ffa5f229d6,"    public List<Token> segment(String text, TokenizeOption option, boolean keepPunctuation) {
        return segment(text, false, option.value(), keepPunctuation);
    }
","['    ', 'public', ' ', 'List', '<', 'Token', '>', ' ', 'segment', '(', 'String', ' ', 'text', ',', ' ', 'TokenizeOption', ' ', 'option', ',', ' ', 'boolean', ' ', 'keepPunctuation', ')', ' ', '{', '\n', '        ', 'return', ' ', 'segment', '(', 'text', ',', ' ', 'false', ',', ' ', 'option', '.', 'value', '(', ')', ',', ' ', 'keepPunctuation', ')', ';', '\n', '    ', '}', '\n']"
master,03b285c682d8499a7c13f5e7496a7d0421381b6a,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer source = new VietnameseTokenizer(config);
        TokenStream result = new StopFilter(source, stopwords);
        result = new LowerCaseFilter(result);
        return new TokenStreamComponents(source, result);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/03b285c682d8499a7c13f5e7496a7d0421381b6a,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer source = new VietnameseTokenizer(config);
        TokenStream result = new StopFilter(source, stopwords);
        result = new LowerCaseFilter(result);
        return new TokenStreamComponents(source, result);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'source', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'config', ')', ';', '\n', '        ', 'TokenStream', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'source', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'result', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'result', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'source', ',', ' ', 'result', ')', ';', '\n', '    ', '}', '\n']"
master,3899314355198aec0268335154ee6c8d3b7d6343,VietnameseAnalyzer.java,createComponents,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer source = new VietnameseTokenizer(config);
        TokenStream result = new LowerCaseFilter(source);
        result = new StopFilter(result, stopwords);
        return new TokenStreamComponents(source, result);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/3899314355198aec0268335154ee6c8d3b7d6343,"    protected TokenStreamComponents createComponents(String fieldName) {
        final Tokenizer source = new VietnameseTokenizer(config);
        TokenStream result = new LowerCaseFilter(source);
        result = new StopFilter(result, stopwords);
        return new TokenStreamComponents(source, result);
    }
","['    ', 'protected', ' ', 'TokenStreamComponents', ' ', 'createComponents', '(', 'String', ' ', 'fieldName', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Tokenizer', ' ', 'source', ' ', '=', ' ', 'new', ' ', 'VietnameseTokenizer', '(', 'config', ')', ';', '\n', '        ', 'TokenStream', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'LowerCaseFilter', '(', 'source', ')', ';', '\n', '        ', 'result', ' ', '=', ' ', 'new', ' ', 'StopFilter', '(', 'result', ',', ' ', 'stopwords', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'TokenStreamComponents', '(', 'source', ',', ' ', 'result', ')', ';', '\n', '    ', '}', '\n']"
master,f445b562190ee985051ec44106c2b04c46609ad5,Tokenizer.java,get,"    private static Tokenizer get() {
      return new Tokenizer(dictPath);
    }",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f445b562190ee985051ec44106c2b04c46609ad5,"    private static Tokenizer get() {
      return new Tokenizer(dictPath);
    }
","['    ', 'private', ' ', 'static', ' ', 'Tokenizer', ' ', 'get', '(', ')', ' ', '{', '\n', '      ', 'return', ' ', 'new', ' ', 'Tokenizer', '(', 'dictPath', ')', ';', '\n', '    ', '}', '\n']"
master,f445b562190ee985051ec44106c2b04c46609ad5,Tokenizer.java,segmentPointer,"  public native long segmentPointer(String text, boolean forTransforming, int tokenizeOption, boolean keepPunctuation);

  //Calls CocCoc lib's freeMemory function
  private native void freeMemory(long resPointer);

  //Calls CocCoc lib's initialize function
  private native int initialize(String dictPath);
}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f445b562190ee985051ec44106c2b04c46609ad5,"  public native long segmentPointer(String text, boolean forTransforming, int tokenizeOption, boolean keepPunctuation);

  
  private native void freeMemory(long resPointer);

  
  private native int initialize(String dictPath);
}
","['  ', 'public', ' ', 'native', ' ', 'long', ' ', 'segmentPointer', '(', 'String', ' ', 'text', ',', ' ', 'boolean', ' ', 'forTransforming', ',', ' ', 'int', ' ', 'tokenizeOption', ',', ' ', 'boolean', ' ', 'keepPunctuation', ')', ';', '\n', '\n', '  ', '\n', '  ', 'private', ' ', 'native', ' ', 'void', ' ', 'freeMemory', '(', 'long', ' ', 'resPointer', ')', ';', '\n', '\n', '  ', '\n', '  ', 'private', ' ', 'native', ' ', 'int', ' ', 'initialize', '(', 'String', ' ', 'dictPath', ')', ';', '\n', '}', '\n']"
master,f445b562190ee985051ec44106c2b04c46609ad5,Tokenizer.java,freeMemory,"  private native void freeMemory(long resPointer);

  //Calls CocCoc lib's initialize function
  private native int initialize(String dictPath);
}",https://www.github.com/duydo/elasticsearch-analysis-vietnamese/commit/f445b562190ee985051ec44106c2b04c46609ad5,"  private native void freeMemory(long resPointer);

  
  private native int initialize(String dictPath);
}
","['  ', 'private', ' ', 'native', ' ', 'void', ' ', 'freeMemory', '(', 'long', ' ', 'resPointer', ')', ';', '\n', '\n', '  ', '\n', '  ', 'private', ' ', 'native', ' ', 'int', ' ', 'initialize', '(', 'String', ' ', 'dictPath', ')', ';', '\n', '}', '\n']"
