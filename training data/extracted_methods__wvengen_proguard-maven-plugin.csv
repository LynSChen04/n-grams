Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,ArtifactFilter.java,match,"	public boolean match(Artifact artifact) {
			return (artifact.getArtifactId().equals(this.artifactId) && artifact.getGroupId().equals(this.groupId)
					&& (((this.classifier == null) && (artifact.getClassifier() == null)) || ",https://www.github.com/wvengen/proguard-maven-plugin/commit/0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,"	public boolean match(Artifact artifact) {
			return (artifact.getArtifactId().equals(this.artifactId) && artifact.getGroupId().equals(this.groupId)
					&& (((this.classifier == null) && (artifact.getClassifier() == null)) || 
","['\t', 'public', ' ', 'boolean', ' ', 'match', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', '(', 'artifact', '.', 'getArtifactId', '(', ')', '.', 'equals', '(', 'this', '.', 'artifactId', ')', ' ', '&', '&', ' ', 'artifact', '.', 'getGroupId', '(', ')', '.', 'equals', '(', 'this', '.', 'groupId', ')', '\n', '\t\t\t\t\t', '&', '&', ' ', '(', '(', '(', 'this', '.', 'classifier', ' ', '=', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'artifact', '.', 'getClassifier', '(', ')', ' ', '=', '=', ' ', 'null', ')', ')', ' ', '|', '|', ' ', '\n', '<END>']"
master,0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,ProGuardMojo.java,useArtifactClassifier,"	private boolean useArtifactClassifier() {
		return appendClassifier && ((attachArtifactClassifier != null) && (attachArtifactClassifier.length() > 0));
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,"	private boolean useArtifactClassifier() {
		return appendClassifier && ((attachArtifactClassifier != null) && (attachArtifactClassifier.length() > 0));
	}
","['\t', 'private', ' ', 'boolean', ' ', 'useArtifactClassifier', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'appendClassifier', ' ', '&', '&', ' ', '(', '(', 'attachArtifactClassifier', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'attachArtifactClassifier', '.', 'length', '(', ')', ' ', '>', ' ', '0', ')', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,ProGuardMojo.java,proguardMain,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();
		
		DefaultLogger antLogger = new DefaultLogger();
        antLogger.setOutputPrintStream( System.out );
        antLogger.setErrorPrintStream( System.err );
        antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO );

        antProject.addBuildListener( antLogger );
        antProject.setBaseDir( mojo.mavenProject.getBasedir() );
		
		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		//java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();
		
		DefaultLogger antLogger = new DefaultLogger();
        antLogger.setOutputPrintStream( System.out );
        antLogger.setErrorPrintStream( System.err );
        antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO );

        antProject.addBuildListener( antLogger );
        antProject.setBaseDir( mojo.mavenProject.getBasedir() );
		
		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		
		java.setClassname(proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'proguardMain', '(', 'File', ' ', 'proguardJar', ',', ' ', 'ArrayList', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\t\t', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '        ', 'antLogger', '.', 'setOutputPrintStream', '(', ' ', 'System', '.', 'out', ' ', ')', ';', '\n', '        ', 'antLogger', '.', 'setErrorPrintStream', '(', ' ', 'System', '.', 'err', ' ', ')', ';', '\n', '        ', 'antLogger', '.', 'setMessageOutputLevel', '(', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ' ', ')', ';', '\n', '\n', '        ', 'antProject', '.', 'addBuildListener', '(', ' ', 'antLogger', ' ', ')', ';', '\n', '        ', 'antProject', '.', 'setBaseDir', '(', ' ', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ' ', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJar', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'setLocation', '(', 'proguardJar', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'i', ' ', '=', ' ', 'argsList', '.', 'iterator', '(', ')', ';', ' ', 'i', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'i', '.', 'next', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,ProGuardMojo.java,nameNoType,"	private static String nameNoType(String artifactname) {
		return artifactname.substring(0, artifactname.lastIndexOf('.'));
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,"	private static String nameNoType(String artifactname) {
		return artifactname.substring(0, artifactname.lastIndexOf('.'));
	}
","['\t', 'private', ' ', 'static', ' ', 'String', ' ', 'nameNoType', '(', 'String', ' ', 'artifactname', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'artifactname', '.', 'substring', '(', '0', ',', ' ', 'artifactname', '.', 'lastIndexOf', '(', ""'.'"", ')', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,ProGuardMojo.java,getDependancy,"	private static Artifact getDependancy(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		List dependancy = mavenProject.getCompileArtifacts();
		for (Iterator i = dependancy.iterator(); i.hasNext();) {
			Artifact artifact = (Artifact) i.next();
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,"	private static Artifact getDependancy(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		List dependancy = mavenProject.getCompileArtifacts();
		for (Iterator i = dependancy.iterator(); i.hasNext();) {
			Artifact artifact = (Artifact) i.next();
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}
","['\t', 'private', ' ', 'static', ' ', 'Artifact', ' ', 'getDependancy', '(', 'Inclusion', ' ', 'inc', ',', ' ', 'MavenProject', ' ', 'mavenProject', ')', ' ', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', 'List', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'i', ' ', '=', ' ', 'dependancy', '.', 'iterator', '(', ')', ';', ' ', 'i', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', '(', 'Artifact', ')', ' ', 'i', '.', 'next', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inc', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'return', ' ', 'artifact', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'artifactId Not found ', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,ProGuardMojo.java,isExclusion,"	private boolean isExclusion(Artifact artifact) {
		if (exclusions == null) {
			return false;	
		}
		for (Iterator iter = exclusions.iterator(); iter.hasNext();) {
			Exclusion excl = (Exclusion) iter.next();
			if (excl.match(artifact)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,"	private boolean isExclusion(Artifact artifact) {
		if (exclusions == null) {
			return false;	
		}
		for (Iterator iter = exclusions.iterator(); iter.hasNext();) {
			Exclusion excl = (Exclusion) iter.next();
			if (excl.match(artifact)) {
				return true;
			}
		}
		return false;
	}
","['\t', 'private', ' ', 'boolean', ' ', 'isExclusion', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'exclusions', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'false', ';', '\t', '\n', '\t\t', '}', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'iter', ' ', '=', ' ', 'exclusions', '.', 'iterator', '(', ')', ';', ' ', 'iter', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'Exclusion', ' ', 'excl', ' ', '=', ' ', '(', 'Exclusion', ')', ' ', 'iter', '.', 'next', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'excl', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'return', ' ', 'true', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'false', ';', '\n', '\t', '}', '\n', '<END>']"
master,0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,ProGuardMojo.java,getClasspathElement,"	private static File getClasspathElement(Artifact artifact, MavenProject mavenProject) throws MojoExecutionException {
		String refId = artifact.getGroupId() + "":"" + artifact.getArtifactId();
        MavenProject project = (MavenProject) mavenProject.getProjectReferences().get( refId );
        if (project != null) {
			return new File(project.getBuild().getOutputDirectory());",https://www.github.com/wvengen/proguard-maven-plugin/commit/0f99fc71df8fdaa40f4652cc4c00e9755aa0eae7,"	private static File getClasspathElement(Artifact artifact, MavenProject mavenProject) throws MojoExecutionException {
		String refId = artifact.getGroupId() + "":"" + artifact.getArtifactId();
        MavenProject project = (MavenProject) mavenProject.getProjectReferences().get( refId );
        if (project != null) {
			return new File(project.getBuild().getOutputDirectory());
","['\t', 'private', ' ', 'static', ' ', 'File', ' ', 'getClasspathElement', '(', 'Artifact', ' ', 'artifact', ',', ' ', 'MavenProject', ' ', 'mavenProject', ')', ' ', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', 'String', ' ', 'refId', ' ', '=', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ';', '\n', '        ', 'MavenProject', ' ', 'project', ' ', '=', ' ', '(', 'MavenProject', ')', ' ', 'mavenProject', '.', 'getProjectReferences', '(', ')', '.', 'get', '(', ' ', 'refId', ' ', ')', ';', '\n', '        ', 'if', ' ', '(', 'project', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'new', ' ', 'File', '(', 'project', '.', 'getBuild', '(', ')', '.', 'getOutputDirectory', '(', ')', ')', ';', '\n', '<END>']"
master,74a50f4bd2a05fa27dbc054c708a08c18ad3715b,ProGuardMojo.java,getDependancy,"	private static Artifact getDependancy(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		Set dependancy = mavenProject.getArtifacts();
		for (Iterator i = dependancy.iterator(); i.hasNext();) {
			Artifact artifact = (Artifact) i.next();
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/74a50f4bd2a05fa27dbc054c708a08c18ad3715b,"	private static Artifact getDependancy(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		Set dependancy = mavenProject.getArtifacts();
		for (Iterator i = dependancy.iterator(); i.hasNext();) {
			Artifact artifact = (Artifact) i.next();
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}
","['\t', 'private', ' ', 'static', ' ', 'Artifact', ' ', 'getDependancy', '(', 'Inclusion', ' ', 'inc', ',', ' ', 'MavenProject', ' ', 'mavenProject', ')', ' ', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', 'Set', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'i', ' ', '=', ' ', 'dependancy', '.', 'iterator', '(', ')', ';', ' ', 'i', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', '(', 'Artifact', ')', ' ', 'i', '.', 'next', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inc', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'return', ' ', 'artifact', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'artifactId Not found ', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,fcee9022bcff7fa8592746b646698ed4b92b0aea,ProGuardMojo.java,proguardMain,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		//java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/fcee9022bcff7fa8592746b646698ed4b92b0aea,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		
		java.setClassname(proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'proguardMain', '(', 'File', ' ', 'proguardJar', ',', ' ', 'ArrayList', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJar', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'setLocation', '(', 'proguardJar', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'i', ' ', '=', ' ', 'argsList', '.', 'iterator', '(', ')', ';', ' ', 'i', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'i', '.', 'next', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,fcee9022bcff7fa8592746b646698ed4b92b0aea,ProGuardMojo.java,isExclusion,"	private boolean isExclusion(Artifact artifact) {
		if (exclusions == null) {
			return false;
		}
		for (Iterator iter = exclusions.iterator(); iter.hasNext();) {
			Exclusion excl = (Exclusion) iter.next();
			if (excl.match(artifact)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/fcee9022bcff7fa8592746b646698ed4b92b0aea,"	private boolean isExclusion(Artifact artifact) {
		if (exclusions == null) {
			return false;
		}
		for (Iterator iter = exclusions.iterator(); iter.hasNext();) {
			Exclusion excl = (Exclusion) iter.next();
			if (excl.match(artifact)) {
				return true;
			}
		}
		return false;
	}
","['\t', 'private', ' ', 'boolean', ' ', 'isExclusion', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'exclusions', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'false', ';', '\n', '\t\t', '}', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'iter', ' ', '=', ' ', 'exclusions', '.', 'iterator', '(', ')', ';', ' ', 'iter', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'Exclusion', ' ', 'excl', ' ', '=', ' ', '(', 'Exclusion', ')', ' ', 'iter', '.', 'next', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'excl', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'return', ' ', 'true', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'false', ';', '\n', '\t', '}', '\n', '<END>']"
master,7132f19dcef3c6977bdecbcfe6516eddc49eca08,ProGuardMojo.java,proguardMain,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/7132f19dcef3c6977bdecbcfe6516eddc49eca08,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		
		java.setClassname(proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'proguardMain', '(', 'File', ' ', 'proguardJar', ',', ' ', 'ArrayList', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJar', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'setLocation', '(', 'proguardJar', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'i', ' ', '=', ' ', 'argsList', '.', 'iterator', '(', ')', ';', ' ', 'i', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'i', '.', 'next', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,1041eb6cbc8181d3bc52c162d0ac9b477785764e,ArtifactFilter.java,match,"	public boolean match(Artifact artifact) {
		return (artifact.getArtifactId().equals(this.artifactId) && artifact.getGroupId().equals(this.groupId) && (((this.classifier == null) && (artifact
				.getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact",https://www.github.com/wvengen/proguard-maven-plugin/commit/1041eb6cbc8181d3bc52c162d0ac9b477785764e,"	public boolean match(Artifact artifact) {
		return (artifact.getArtifactId().equals(this.artifactId) && artifact.getGroupId().equals(this.groupId) && (((this.classifier == null) && (artifact
				.getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact
","['\t', 'public', ' ', 'boolean', ' ', 'match', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '\t\t', 'return', ' ', '(', 'artifact', '.', 'getArtifactId', '(', ')', '.', 'equals', '(', 'this', '.', 'artifactId', ')', ' ', '&', '&', ' ', 'artifact', '.', 'getGroupId', '(', ')', '.', 'equals', '(', 'this', '.', 'groupId', ')', ' ', '&', '&', ' ', '(', '(', '(', 'this', '.', 'classifier', ' ', '=', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'artifact', '\n', '\t\t\t\t', '.', 'getClassifier', '(', ')', ' ', '=', '=', ' ', 'null', ')', ')', ' ', '|', '|', ' ', '(', '(', 'this', '.', 'classifier', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', 'this', '.', 'classifier', '.', 'equals', '(', 'artifact', '\n', '<END>']"
master,663e01936788ccb3d93e0ec55ceaf68ddddc2222,ProGuardMojo.java,proguardMain,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/663e01936788ccb3d93e0ec55ceaf68ddddc2222,"	private static void proguardMain(File proguardJar, ArrayList argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (Iterator i = argsList.iterator(); i.hasNext();) {
			java.createArg().setValue(i.next().toString());
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'proguardMain', '(', 'File', ' ', 'proguardJar', ',', ' ', 'ArrayList', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJar', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'setLocation', '(', 'proguardJar', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'mojo', '.', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'Iterator', ' ', 'i', ' ', '=', ' ', 'argsList', '.', 'iterator', '(', ')', ';', ' ', 'i', '.', 'hasNext', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'i', '.', 'next', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,20c64bafdd2e9798819e04dd54598bda66b85938,ProGuardMojo.java,nameNoType,"	private static String nameNoType(String fileName) {
	    int extStart = fileName.lastIndexOf('.');
	    if (extStart == -1) {
	        return fileName;
	    }
		return fileName.substring(0, extStart);
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/20c64bafdd2e9798819e04dd54598bda66b85938,"	private static String nameNoType(String fileName) {
	    int extStart = fileName.lastIndexOf('.');
	    if (extStart == -1) {
	        return fileName;
	    }
		return fileName.substring(0, extStart);
	}
","['\t', 'private', ' ', 'static', ' ', 'String', ' ', 'nameNoType', '(', 'String', ' ', 'fileName', ')', ' ', '{', '\n', '\t    ', 'int', ' ', 'extStart', ' ', '=', ' ', 'fileName', '.', 'lastIndexOf', '(', ""'.'"", ')', ';', '\n', '\t    ', 'if', ' ', '(', 'extStart', ' ', '=', '=', ' ', '-', '1', ')', ' ', '{', '\n', '\t        ', 'return', ' ', 'fileName', ';', '\n', '\t    ', '}', '\n', '\t\t', 'return', ' ', 'fileName', '.', 'substring', '(', '0', ',', ' ', 'extStart', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,20c64bafdd2e9798819e04dd54598bda66b85938,ProGuardMojo.java,deleteFileOrDirectory,"	private static boolean deleteFileOrDirectory(File path) throws MojoFailureException {
        if (path.isDirectory()) {
            File[] files = path.listFiles();",https://www.github.com/wvengen/proguard-maven-plugin/commit/20c64bafdd2e9798819e04dd54598bda66b85938,"	private static boolean deleteFileOrDirectory(File path) throws MojoFailureException {
        if (path.isDirectory()) {
            File[] files = path.listFiles();
","['\t', 'private', ' ', 'static', ' ', 'boolean', ' ', 'deleteFileOrDirectory', '(', 'File', ' ', 'path', ')', ' ', 'throws', ' ', 'MojoFailureException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'path', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '            ', 'File', '[', ']', ' ', 'files', ' ', '=', ' ', 'path', '.', 'listFiles', '(', ')', ';', '\n', '<END>']"
master,c804f7c8d7dd5b7cf2b624d4dfbd9b35063bf7d6,ArtifactFilter.java,match,"    public boolean match(Artifact artifact) {
        boolean artifactMatch = WILDCARD.equals(artifactId) || artifact.getArtifactId().equals(this.artifactId);
        boolean groupMatch = artifact.getGroupId().equals(this.groupId);
        boolean classifierMatch = ((this.classifier == null) && (artifact
                .getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact
                .getClassifier()));
        return artifactMatch && groupMatch && classifierMatch;
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/c804f7c8d7dd5b7cf2b624d4dfbd9b35063bf7d6,"    public boolean match(Artifact artifact) {
        boolean artifactMatch = WILDCARD.equals(artifactId) || artifact.getArtifactId().equals(this.artifactId);
        boolean groupMatch = artifact.getGroupId().equals(this.groupId);
        boolean classifierMatch = ((this.classifier == null) && (artifact
                .getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact
                .getClassifier()));
        return artifactMatch && groupMatch && classifierMatch;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'match', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '        ', 'boolean', ' ', 'artifactMatch', ' ', '=', ' ', 'WILDCARD', '.', 'equals', '(', 'artifactId', ')', ' ', '|', '|', ' ', 'artifact', '.', 'getArtifactId', '(', ')', '.', 'equals', '(', 'this', '.', 'artifactId', ')', ';', '\n', '        ', 'boolean', ' ', 'groupMatch', ' ', '=', ' ', 'artifact', '.', 'getGroupId', '(', ')', '.', 'equals', '(', 'this', '.', 'groupId', ')', ';', '\n', '        ', 'boolean', ' ', 'classifierMatch', ' ', '=', ' ', '(', '(', 'this', '.', 'classifier', ' ', '=', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'artifact', '\n', '                ', '.', 'getClassifier', '(', ')', ' ', '=', '=', ' ', 'null', ')', ')', ' ', '|', '|', ' ', '(', '(', 'this', '.', 'classifier', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', 'this', '.', 'classifier', '.', 'equals', '(', 'artifact', '\n', '                ', '.', 'getClassifier', '(', ')', ')', ')', ';', '\n', '        ', 'return', ' ', 'artifactMatch', ' ', '&', '&', ' ', 'groupMatch', ' ', '&', '&', ' ', 'classifierMatch', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilter.java,match,"    public boolean match(Artifact artifact) {
        boolean artifactMatch = WILDCARD.equals(artifactId) || artifact.getArtifactId().equals(this.artifactId) ||
                (artifactId != null && getMatcher(artifact).matches());
        boolean groupMatch = artifact.getGroupId().equals(this.groupId);
        boolean classifierMatch = ((this.classifier == null) && (artifact.getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact.getClassifier()));
        return artifactMatch && groupMatch && classifierMatch;
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public boolean match(Artifact artifact) {
        boolean artifactMatch = WILDCARD.equals(artifactId) || artifact.getArtifactId().equals(this.artifactId) ||
                (artifactId != null && getMatcher(artifact).matches());
        boolean groupMatch = artifact.getGroupId().equals(this.groupId);
        boolean classifierMatch = ((this.classifier == null) && (artifact.getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact.getClassifier()));
        return artifactMatch && groupMatch && classifierMatch;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'match', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '        ', 'boolean', ' ', 'artifactMatch', ' ', '=', ' ', 'WILDCARD', '.', 'equals', '(', 'artifactId', ')', ' ', '|', '|', ' ', 'artifact', '.', 'getArtifactId', '(', ')', '.', 'equals', '(', 'this', '.', 'artifactId', ')', ' ', '|', '|', '\n', '                ', '(', 'artifactId', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'getMatcher', '(', 'artifact', ')', '.', 'matches', '(', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'groupMatch', ' ', '=', ' ', 'artifact', '.', 'getGroupId', '(', ')', '.', 'equals', '(', 'this', '.', 'groupId', ')', ';', '\n', '        ', 'boolean', ' ', 'classifierMatch', ' ', '=', ' ', '(', '(', 'this', '.', 'classifier', ' ', '=', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'artifact', '.', 'getClassifier', '(', ')', ' ', '=', '=', ' ', 'null', ')', ')', ' ', '|', '|', ' ', '(', '(', 'this', '.', 'classifier', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', 'this', '.', 'classifier', '.', 'equals', '(', 'artifact', '.', 'getClassifier', '(', ')', ')', ')', ';', '\n', '        ', 'return', ' ', 'artifactMatch', ' ', '&', '&', ' ', 'groupMatch', ' ', '&', '&', ' ', 'classifierMatch', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilter.java,toString,"    public String toString() {
        return ""groupId:"" + groupId + "", artifactId:"" + artifactId + "", classifier:"" + classifier;
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public String toString() {
        return ""groupId:"" + groupId + "", artifactId:"" + artifactId + "", classifier:"" + classifier;
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'groupId:', '""', ' ', '+', ' ', 'groupId', ' ', '+', ' ', '""', ', artifactId:', '""', ' ', '+', ' ', 'artifactId', ' ', '+', ' ', '""', ', classifier:', '""', ' ', '+', ' ', 'classifier', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilterTest.java,wildcardMatch,"    public void wildcardMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public void wildcardMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'wildcardMatch', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', '*', '""', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilterTest.java,noMatch,"    public void noMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""libB"";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public void noMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""libB"";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'noMatch', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'libB', '""', ';', '\n', '        ', 'Assert', '.', 'assertFalse', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilterTest.java,noMatchWithRegexTokens,"    public void noMatchWithRegexTokens() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""libB-utils"";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public void noMatchWithRegexTokens() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""libB-utils"";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'noMatchWithRegexTokens', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'libB-utils', '""', ';', '\n', '        ', 'Assert', '.', 'assertFalse', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilterTest.java,regexMatch,"    public void regexMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""lib.*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public void regexMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""lib.*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'regexMatch', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'lib.*', '""', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilterTest.java,regexNoMatch,"    public void regexNoMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""foo.+"";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public void regexNoMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""foo.+"";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'regexNoMatch', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'foo.+', '""', ';', '\n', '        ', 'Assert', '.', 'assertFalse', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilterTest.java,emptyArtifactDoesNotMatch,"    public void emptyArtifactDoesNotMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = """";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public void emptyArtifactDoesNotMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = """";
        Assert.assertFalse(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'emptyArtifactDoesNotMatch', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', '""', ';', '\n', '        ', 'Assert', '.', 'assertFalse', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9b97843a68e17b6a7fcc99892f63557e000c5960,ArtifactFilterTest.java,invalidRegex,"    public void invalidRegex() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""+"";
        artifactFilter.match(getArtifact());
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/9b97843a68e17b6a7fcc99892f63557e000c5960,"    public void invalidRegex() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""+"";
        artifactFilter.match(getArtifact());
    }
","['    ', 'public', ' ', 'void', ' ', 'invalidRegex', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', '+', '""', ';', '\n', '        ', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,555a00fae85533057775c5c2a2a632e91292657d,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					args.add(""-libraryjars"");
					args.add(fileToString(file));
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					args.add(""-libraryjars"");

				}
				args.add(fileToString(file));
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				args.add(""-libraryjars"");
				args.add(fileNameToString(lib));
			}
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			if (useArtifactClassifier()) {",https://www.github.com/wvengen/proguard-maven-plugin/commit/555a00fae85533057775c5c2a2a632e91292657d,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					args.add(""-libraryjars"");
					args.add(fileToString(file));
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					args.add(""-libraryjars"");

				}
				args.add(fileToString(file));
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				args.add(""-libraryjars"");
				args.add(fileNameToString(lib));
			}
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			if (useArtifactClassifier()) {
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ' ', '&', '&', ' ', '!', 'sameArtifact', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '<END>']"
master,555a00fae85533057775c5c2a2a632e91292657d,ProGuardMojo.java,proguardMain,"	private static void proguardMain(File proguardJar, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/555a00fae85533057775c5c2a2a632e91292657d,"	private static void proguardMain(File proguardJar, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'proguardMain', '(', 'File', ' ', 'proguardJar', ',', ' ', 'List', '<', 'String', '>', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJar', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'setLocation', '(', 'proguardJar', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'mojo', '.', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'arg', ' ', ':', ' ', 'argsList', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'arg', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,555a00fae85533057775c5c2a2a632e91292657d,ProGuardMojo.java,nameNoType,"	private static String nameNoType(String fileName) {
		int extStart = fileName.lastIndexOf('.');
		if (extStart == -1) {
			return fileName;
		}
		return fileName.substring(0, extStart);
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/555a00fae85533057775c5c2a2a632e91292657d,"	private static String nameNoType(String fileName) {
		int extStart = fileName.lastIndexOf('.');
		if (extStart == -1) {
			return fileName;
		}
		return fileName.substring(0, extStart);
	}
","['\t', 'private', ' ', 'static', ' ', 'String', ' ', 'nameNoType', '(', 'String', ' ', 'fileName', ')', ' ', '{', '\n', '\t\t', 'int', ' ', 'extStart', ' ', '=', ' ', 'fileName', '.', 'lastIndexOf', '(', ""'.'"", ')', ';', '\n', '\t\t', 'if', ' ', '(', 'extStart', ' ', '=', '=', ' ', '-', '1', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'fileName', ';', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'fileName', '.', 'substring', '(', '0', ',', ' ', 'extStart', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,555a00fae85533057775c5c2a2a632e91292657d,ProGuardMojo.java,getDependency,"	private static Artifact getDependency(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependency = mavenProject.getArtifacts();
		for (Artifact artifact : dependency) {
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/555a00fae85533057775c5c2a2a632e91292657d,"	private static Artifact getDependency(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependency = mavenProject.getArtifacts();
		for (Artifact artifact : dependency) {
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}
","['\t', 'private', ' ', 'static', ' ', 'Artifact', ' ', 'getDependency', '(', 'Inclusion', ' ', 'inc', ',', ' ', 'MavenProject', ' ', 'mavenProject', ')', ' ', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t', 'Set', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'inc', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'return', ' ', 'artifact', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'artifactId Not found ', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,555a00fae85533057775c5c2a2a632e91292657d,ProGuardMojo.java,isExclusion,"	private boolean isExclusion(Artifact artifact) {
		if (exclusions == null) {
			return false;
		}
		for (Exclusion excl : exclusions) {
			if (excl.match(artifact)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/555a00fae85533057775c5c2a2a632e91292657d,"	private boolean isExclusion(Artifact artifact) {
		if (exclusions == null) {
			return false;
		}
		for (Exclusion excl : exclusions) {
			if (excl.match(artifact)) {
				return true;
			}
		}
		return false;
	}
","['\t', 'private', ' ', 'boolean', ' ', 'isExclusion', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'exclusions', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'false', ';', '\n', '\t\t', '}', '\n', '\t\t', 'for', ' ', '(', 'Exclusion', ' ', 'excl', ' ', ':', ' ', 'exclusions', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'excl', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'return', ' ', 'true', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'false', ';', '\n', '\t', '}', '\n', '<END>']"
master,57d2f0b6f4d2ffa5f3fa61e89cc6c3107f86a445,ProGuardMojo.java,deleteFileOrDirectory,"	private static boolean deleteFileOrDirectory(File path) throws MojoFailureException {
		if (path.isDirectory()) {
			File[] files = path.listFiles();",https://www.github.com/wvengen/proguard-maven-plugin/commit/57d2f0b6f4d2ffa5f3fa61e89cc6c3107f86a445,"	private static boolean deleteFileOrDirectory(File path) throws MojoFailureException {
		if (path.isDirectory()) {
			File[] files = path.listFiles();
","['\t', 'private', ' ', 'static', ' ', 'boolean', ' ', 'deleteFileOrDirectory', '(', 'File', ' ', 'path', ')', ' ', 'throws', ' ', 'MojoFailureException', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'path', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'File', '[', ']', ' ', 'files', ' ', '=', ' ', 'path', '.', 'listFiles', '(', ')', ';', '\n', '<END>']"
master,7007317642765f6b57122b5bd8241ab75c439cd9,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib.toString()));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib.toString()));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (!tempLibraryjarsDir.mkdir()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;",https://www.github.com/wvengen/proguard-maven-plugin/commit/7007317642765f6b57122b5bd8241ab75c439cd9,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib.toString()));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib.toString()));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (!tempLibraryjarsDir.mkdir()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', '.', 'toString', '(', ')', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ' ', '&', '&', ' ', '!', 'sameArtifact', ')', ' ', '{', '\n', '\t\t\t', 'final', ' ', 'String', ' ', 'classifier', ';', '\n', '<END>']"
master,d1fbc1efb1c88ba6041eab2fda2f5950ce8ecbee,ProGuardMojo.java,attachTextFile,"	private void attachTextFile(File theFile, String mainClassifier, String suffix) {
		final String classifier = (null == mainClassifier ? """" : mainClassifier+""-"") + suffix;
		log.info(""Attempting to attach ""+suffix+"" artifact"");
		if (theFile.exists()) {
			if (theFile.isFile()) {",https://www.github.com/wvengen/proguard-maven-plugin/commit/d1fbc1efb1c88ba6041eab2fda2f5950ce8ecbee,"	private void attachTextFile(File theFile, String mainClassifier, String suffix) {
		final String classifier = (null == mainClassifier ? """" : mainClassifier+""-"") + suffix;
		log.info(""Attempting to attach ""+suffix+"" artifact"");
		if (theFile.exists()) {
			if (theFile.isFile()) {
","['\t', 'private', ' ', 'void', ' ', 'attachTextFile', '(', 'File', ' ', 'theFile', ',', ' ', 'String', ' ', 'mainClassifier', ',', ' ', 'String', ' ', 'suffix', ')', ' ', '{', '\n', '\t\t', 'final', ' ', 'String', ' ', 'classifier', ' ', '=', ' ', '(', 'null', ' ', '=', '=', ' ', 'mainClassifier', ' ', '?', ' ', '""', '""', ' ', ':', ' ', 'mainClassifier', '+', '""', '-', '""', ')', ' ', '+', ' ', 'suffix', ';', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'Attempting to attach ', '""', '+', 'suffix', '+', '""', ' artifact', '""', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'theFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'theFile', '.', 'isFile', '(', ')', ')', ' ', '{', '\n', '<END>']"
master,5dc04cc9e5d42ccb8b42cdfb01e5124d29fefe25,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (!tempLibraryjarsDir.mkdir()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;",https://www.github.com/wvengen/proguard-maven-plugin/commit/5dc04cc9e5d42ccb8b42cdfb01e5124d29fefe25,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (!tempLibraryjarsDir.mkdir()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ' ', '&', '&', ' ', '!', 'sameArtifact', ')', ' ', '{', '\n', '\t\t\t', 'final', ' ', 'String', ' ', 'classifier', ';', '\n', '<END>']"
master,f75205dff601bbe46aa941cfadd54acd2bd6fcbf,Main.java,main,"    public static void main(String[] args) {
        System.out.printf(""Example := %s%n"", new Example1().aMethod());
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/f75205dff601bbe46aa941cfadd54acd2bd6fcbf,"    public static void main(String[] args) {
        System.out.printf(""Example := %s%n"", new Example1().aMethod());
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'printf', '(', '""', 'Example := %s%n', '""', ',', ' ', 'new', ' ', 'Example1', '(', ')', '.', 'aMethod', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,16ba5d3a74013d05a2e13063df8ca4df9ae91b84,ProGuardMojo.java,proguardMain,"	private void proguardMain(File proguardJar, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/16ba5d3a74013d05a2e13063df8ca4df9ae91b84,"	private void proguardMain(File proguardJar, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'void', ' ', 'proguardMain', '(', 'File', ' ', 'proguardJar', ',', ' ', 'List', '<', 'String', '>', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'int', ' ', 'logLevel', ' ', '=', ' ', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'silent', ' ', '?', ' ', 'Project', '.', 'MSG_ERR', ' ', ':', ' ', 'logLevel', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJar', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'setLocation', '(', 'proguardJar', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'mojo', '.', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'arg', ' ', ':', ' ', 'argsList', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'arg', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,2bbdd4e3b961d0b78860f5d10b8a853e761f8596,ProGuardMojo.java,proguardMain,"	private void proguardMain(File proguardJar, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/2bbdd4e3b961d0b78860f5d10b8a853e761f8596,"	private void proguardMain(File proguardJar, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		antLogger.setMessageOutputLevel(mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJar);

		java.createClasspath().setLocation(proguardJar);
		
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'void', ' ', 'proguardMain', '(', 'File', ' ', 'proguardJar', ',', ' ', 'List', '<', 'String', '>', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJar', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'setLocation', '(', 'proguardJar', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'mojo', '.', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'arg', ' ', ':', ' ', 'argsList', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'arg', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,2bbdd4e3b961d0b78860f5d10b8a853e761f8596,ProGuardMojo.java,nameNoType,"	private String nameNoType(String fileName) {
		int extStart = fileName.lastIndexOf('.');
		if (extStart == -1) {
			return fileName;
		}
		return fileName.substring(0, extStart);
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/2bbdd4e3b961d0b78860f5d10b8a853e761f8596,"	private String nameNoType(String fileName) {
		int extStart = fileName.lastIndexOf('.');
		if (extStart == -1) {
			return fileName;
		}
		return fileName.substring(0, extStart);
	}
","['\t', 'private', ' ', 'String', ' ', 'nameNoType', '(', 'String', ' ', 'fileName', ')', ' ', '{', '\n', '\t\t', 'int', ' ', 'extStart', ' ', '=', ' ', 'fileName', '.', 'lastIndexOf', '(', ""'.'"", ')', ';', '\n', '\t\t', 'if', ' ', '(', 'extStart', ' ', '=', '=', ' ', '-', '1', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'fileName', ';', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'fileName', '.', 'substring', '(', '0', ',', ' ', 'extStart', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,2bbdd4e3b961d0b78860f5d10b8a853e761f8596,ProGuardMojo.java,deleteFileOrDirectory,"	private boolean deleteFileOrDirectory(File path) throws MojoFailureException {
		if (path.isDirectory()) {
			File[] files = path.listFiles();",https://www.github.com/wvengen/proguard-maven-plugin/commit/2bbdd4e3b961d0b78860f5d10b8a853e761f8596,"	private boolean deleteFileOrDirectory(File path) throws MojoFailureException {
		if (path.isDirectory()) {
			File[] files = path.listFiles();
","['\t', 'private', ' ', 'boolean', ' ', 'deleteFileOrDirectory', '(', 'File', ' ', 'path', ')', ' ', 'throws', ' ', 'MojoFailureException', ' ', '{', '\n', '\t\t', 'if', ' ', '(', 'path', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'File', '[', ']', ' ', 'files', ' ', '=', ' ', 'path', '.', 'listFiles', '(', ')', ';', '\n', '<END>']"
master,2bbdd4e3b961d0b78860f5d10b8a853e761f8596,ProGuardMojo.java,getDependency,"	private Artifact getDependency(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependency = mavenProject.getArtifacts();
		for (Artifact artifact : dependency) {
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/2bbdd4e3b961d0b78860f5d10b8a853e761f8596,"	private Artifact getDependency(Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependency = mavenProject.getArtifacts();
		for (Artifact artifact : dependency) {
			if (inc.match(artifact)) {
				return artifact;
			}
		}
		throw new MojoExecutionException(""artifactId Not found "" + inc.artifactId);
	}
","['\t', 'private', ' ', 'Artifact', ' ', 'getDependency', '(', 'Inclusion', ' ', 'inc', ',', ' ', 'MavenProject', ' ', 'mavenProject', ')', ' ', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t', 'Set', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'inc', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'return', ' ', 'artifact', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'artifactId Not found ', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,9df7725b1141475bc21e32291d9ced8e42b3c76a,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
            tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;",https://www.github.com/wvengen/proguard-maven-plugin/commit/9df7725b1141475bc21e32291d9ced8e42b3c76a,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
            tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '            ', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ' ', '&', '&', ' ', '!', 'sameArtifact', ')', ' ', '{', '\n', '\t\t\t', 'final', ' ', 'String', ' ', 'classifier', ';', '\n', '<END>']"
master,a578e2d793a2d3510872c42ef22883e70ab6765f,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
				FileUtils.deleteDirectory(tempLibraryjarsDir);
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;",https://www.github.com/wvengen/proguard-maven-plugin/commit/a578e2d793a2d3510872c42ef22883e70ab6765f,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
				FileUtils.deleteDirectory(tempLibraryjarsDir);
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'FileUtils', '.', 'deleteDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ' ', '&', '&', ' ', '!', 'sameArtifact', ')', ' ', '{', '\n', '\t\t\t', 'final', ' ', 'String', ' ', 'classifier', ';', '\n', '<END>']"
master,6ca60a36e4453ad1c022e915e4f9ddad9ddf6b80,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								// NO-OP
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;",https://www.github.com/wvengen/proguard-maven-plugin/commit/6ca60a36e4453ad1c022e915e4f9ddad9ddf6b80,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach && !sameArtifact) {
			final String classifier;
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'try', '{', '\n', '\t\t\t\t\t\t\t\t', 'FileUtils', '.', 'deleteDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t\t\t\t', '}', ' ', 'catch', '(', 'IOException', ' ', 'ignored', ')', '{', '\n', '\t\t\t\t\t\t\t\t', '\n', '\t\t\t\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ' ', '&', '&', ' ', '!', 'sameArtifact', ')', ' ', '{', '\n', '\t\t\t', 'final', ' ', 'String', ' ', 'classifier', ';', '\n', '<END>']"
master,8b03993b1cfe0b0da3f4ae22b5101a727328dd57,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								// NO-OP
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach) {
			if (!sameArtifact) {",https://www.github.com/wvengen/proguard-maven-plugin/commit/8b03993b1cfe0b0da3f4ae22b5101a727328dd57,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach) {
			if (!sameArtifact) {
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'try', '{', '\n', '\t\t\t\t\t\t\t\t', 'FileUtils', '.', 'deleteDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t\t\t\t', '}', ' ', 'catch', '(', 'IOException', ' ', 'ignored', ')', '{', '\n', '\t\t\t\t\t\t\t\t', '\n', '\t\t\t\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'sameArtifact', ')', ' ', '{', '\n', '<END>']"
master,e2c89dbcdb1b5d4e1407c56a7952c1e37f55c2db,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			for (Inclusion inc : assembly.inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								// NO-OP
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				for (Inclusion inc : assembly.inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach) {
			if (!sameArtifact) {",https://www.github.com/wvengen/proguard-maven-plugin/commit/e2c89dbcdb1b5d4e1407c56a7952c1e37f55c2db,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			for (Inclusion inc : assembly.inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				for (Inclusion inc : assembly.inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach) {
			if (!sameArtifact) {
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'assembly', '.', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'try', '{', '\n', '\t\t\t\t\t\t\t\t', 'FileUtils', '.', 'deleteDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t\t\t\t', '}', ' ', 'catch', '(', 'IOException', ' ', 'ignored', ')', '{', '\n', '\t\t\t\t\t\t\t\t', '\n', '\t\t\t\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'assembly', '.', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'sameArtifact', ')', ' ', '{', '\n', '<END>']"
master,87efbd38bf54c9c5b48a561aa5744d3ec0defa73,ArtifactFilterTest.java,wildcardMatch_allArtifact,"    public void wildcardMatch_allArtifact() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/87efbd38bf54c9c5b48a561aa5744d3ec0defa73,"    public void wildcardMatch_allArtifact() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'wildcardMatch_allArtifact', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', '*', '""', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,87efbd38bf54c9c5b48a561aa5744d3ec0defa73,ArtifactFilterTest.java,wildcardMatch_partOfArtifact,"    public void wildcardMatch_partOfArtifact() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""lib*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/87efbd38bf54c9c5b48a561aa5744d3ec0defa73,"    public void wildcardMatch_partOfArtifact() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""lib*"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'wildcardMatch_partOfArtifact', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'lib*', '""', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,87efbd38bf54c9c5b48a561aa5744d3ec0defa73,ArtifactFilterTest.java,wildcardMatch_escapeArtifactDots,"    public void wildcardMatch_escapeArtifactDots() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""li.*"";
        Artifact artifact = getArtifact();
        artifact.setArtifactId(""li.b"");
        Assert.assertTrue(artifactFilter.match(artifact));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/87efbd38bf54c9c5b48a561aa5744d3ec0defa73,"    public void wildcardMatch_escapeArtifactDots() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""li.*"";
        Artifact artifact = getArtifact();
        artifact.setArtifactId(""li.b"");
        Assert.assertTrue(artifactFilter.match(artifact));
    }
","['    ', 'public', ' ', 'void', ' ', 'wildcardMatch_escapeArtifactDots', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'li.*', '""', ';', '\n', '        ', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getArtifact', '(', ')', ';', '\n', '        ', 'artifact', '.', 'setArtifactId', '(', '""', 'li.b', '""', ')', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'artifact', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c39118e822f6a41fab60231c5e94ed9b161a53c1,ArtifactFilterTest.java,wildcardNoMatch_escapeArtifactDots,"    public void wildcardNoMatch_escapeArtifactDots() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""li.b"";
        Assert.assertFalse(artifactFilter.match(getArtifact(""com.mahifx"", ""liTb"")));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/c39118e822f6a41fab60231c5e94ed9b161a53c1,"    public void wildcardNoMatch_escapeArtifactDots() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""li.b"";
        Assert.assertFalse(artifactFilter.match(getArtifact(""com.mahifx"", ""liTb"")));
    }
","['    ', 'public', ' ', 'void', ' ', 'wildcardNoMatch_escapeArtifactDots', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'li.b', '""', ';', '\n', '        ', 'Assert', '.', 'assertFalse', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', '""', 'com.mahifx', '""', ',', ' ', '""', 'liTb', '""', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c39118e822f6a41fab60231c5e94ed9b161a53c1,ArtifactFilterTest.java,wildcardMatch_partOfGroupId,"    public void wildcardMatch_partOfGroupId() {
        artifactFilter.groupId = ""com.ma*"";
        artifactFilter.artifactId = ""libA"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/c39118e822f6a41fab60231c5e94ed9b161a53c1,"    public void wildcardMatch_partOfGroupId() {
        artifactFilter.groupId = ""com.ma*"";
        artifactFilter.artifactId = ""libA"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'wildcardMatch_partOfGroupId', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.ma*', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'libA', '""', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c39118e822f6a41fab60231c5e94ed9b161a53c1,ArtifactFilterTest.java,simpleMatch,"    public void simpleMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""libA"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/c39118e822f6a41fab60231c5e94ed9b161a53c1,"    public void simpleMatch() {
        artifactFilter.groupId = ""com.mahifx"";
        artifactFilter.artifactId = ""libA"";
        Assert.assertTrue(artifactFilter.match(getArtifact()));
    }
","['    ', 'public', ' ', 'void', ' ', 'simpleMatch', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'libA', '""', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c39118e822f6a41fab60231c5e94ed9b161a53c1,ArtifactFilterTest.java,wildcardMatch_subGroup,"    public void wildcardMatch_subGroup() {
        artifactFilter.groupId = ""com.mahifx.*"";
        artifactFilter.artifactId = ""libA"";
        Assert.assertTrue(artifactFilter.match(getArtifact(""com.mahifx.subgroup"", ""libA"")));
        Assert.assertTrue(artifactFilter.match(getArtifact(""com.mahifx.subgroup.subsubgroup"", ""libA"")));
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/c39118e822f6a41fab60231c5e94ed9b161a53c1,"    public void wildcardMatch_subGroup() {
        artifactFilter.groupId = ""com.mahifx.*"";
        artifactFilter.artifactId = ""libA"";
        Assert.assertTrue(artifactFilter.match(getArtifact(""com.mahifx.subgroup"", ""libA"")));
        Assert.assertTrue(artifactFilter.match(getArtifact(""com.mahifx.subgroup.subsubgroup"", ""libA"")));
    }
","['    ', 'public', ' ', 'void', ' ', 'wildcardMatch_subGroup', '(', ')', ' ', '{', '\n', '        ', 'artifactFilter', '.', 'groupId', ' ', '=', ' ', '""', 'com.mahifx.*', '""', ';', '\n', '        ', 'artifactFilter', '.', 'artifactId', ' ', '=', ' ', '""', 'libA', '""', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', '""', 'com.mahifx.subgroup', '""', ',', ' ', '""', 'libA', '""', ')', ')', ')', ';', '\n', '        ', 'Assert', '.', 'assertTrue', '(', 'artifactFilter', '.', 'match', '(', 'getArtifact', '(', '""', 'com.mahifx.subgroup.subsubgroup', '""', ',', ' ', '""', 'libA', '""', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,091db9aeaf9a903c55a840e616b2e951675a9b41,ArtifactFilter.java,match,"    public boolean match(Artifact artifact) {
        boolean artifactMatch = WILDCARD.equals(this.artifactId) || artifact.getArtifactId().equals(this.artifactId) ||
                (artifactId != null && getArtifactIdMatcher(artifact).matches());
        boolean groupMatch = artifact.getGroupId().equals(this.groupId) ||
                (groupId != null && getGroupIdMatcher(artifact).matches());
        boolean classifierMatch = ((this.classifier == null) && (artifact.getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact.getClassifier()));
        return artifactMatch && groupMatch && classifierMatch;
    }",https://www.github.com/wvengen/proguard-maven-plugin/commit/091db9aeaf9a903c55a840e616b2e951675a9b41,"    public boolean match(Artifact artifact) {
        boolean artifactMatch = WILDCARD.equals(this.artifactId) || artifact.getArtifactId().equals(this.artifactId) ||
                (artifactId != null && getArtifactIdMatcher(artifact).matches());
        boolean groupMatch = artifact.getGroupId().equals(this.groupId) ||
                (groupId != null && getGroupIdMatcher(artifact).matches());
        boolean classifierMatch = ((this.classifier == null) && (artifact.getClassifier() == null)) || ((this.classifier != null) && this.classifier.equals(artifact.getClassifier()));
        return artifactMatch && groupMatch && classifierMatch;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'match', '(', 'Artifact', ' ', 'artifact', ')', ' ', '{', '\n', '        ', 'boolean', ' ', 'artifactMatch', ' ', '=', ' ', 'WILDCARD', '.', 'equals', '(', 'this', '.', 'artifactId', ')', ' ', '|', '|', ' ', 'artifact', '.', 'getArtifactId', '(', ')', '.', 'equals', '(', 'this', '.', 'artifactId', ')', ' ', '|', '|', '\n', '                ', '(', 'artifactId', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'getArtifactIdMatcher', '(', 'artifact', ')', '.', 'matches', '(', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'groupMatch', ' ', '=', ' ', 'artifact', '.', 'getGroupId', '(', ')', '.', 'equals', '(', 'this', '.', 'groupId', ')', ' ', '|', '|', '\n', '                ', '(', 'groupId', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'getGroupIdMatcher', '(', 'artifact', ')', '.', 'matches', '(', ')', ')', ';', '\n', '        ', 'boolean', ' ', 'classifierMatch', ' ', '=', ' ', '(', '(', 'this', '.', 'classifier', ' ', '=', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'artifact', '.', 'getClassifier', '(', ')', ' ', '=', '=', ' ', 'null', ')', ')', ' ', '|', '|', ' ', '(', '(', 'this', '.', 'classifier', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', 'this', '.', 'classifier', '.', 'equals', '(', 'artifact', '.', 'getClassifier', '(', ')', ')', ')', ';', '\n', '        ', 'return', ' ', 'artifactMatch', ' ', '&', '&', ' ', 'groupMatch', ' ', '&', '&', ' ', 'classifierMatch', ';', '\n', '    ', '}', '\n', '<END>']"
master,1e01e3fea0cfd39f61214c648c19e6a16d7cc103,ProGuardMojo.java,getDependencies,"	private Set<Artifact> getDependencies(final Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependencies = mavenProject.getArtifacts();
		Set<Artifact> result = new HashSet<Artifact>();
		for (Artifact artifact : dependencies) {
			if (inc.match(artifact)) {
				result.add(artifact);
			}
		}
		if (result.isEmpty()) {
			log.warn(String.format(""No artifact found : %s:%s"", inc.artifactId, inc.groupId));
		}
		return result;
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/1e01e3fea0cfd39f61214c648c19e6a16d7cc103,"	private Set<Artifact> getDependencies(final Inclusion inc, MavenProject mavenProject) throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependencies = mavenProject.getArtifacts();
		Set<Artifact> result = new HashSet<Artifact>();
		for (Artifact artifact : dependencies) {
			if (inc.match(artifact)) {
				result.add(artifact);
			}
		}
		if (result.isEmpty()) {
			log.warn(String.format(""No artifact found : %s:%s"", inc.artifactId, inc.groupId));
		}
		return result;
	}
","['\t', 'private', ' ', 'Set', '<', 'Artifact', '>', ' ', 'getDependencies', '(', 'final', ' ', 'Inclusion', ' ', 'inc', ',', ' ', 'MavenProject', ' ', 'mavenProject', ')', ' ', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t', 'Set', '<', 'Artifact', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t', 'Set', '<', 'Artifact', '>', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'Artifact', '>', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'inc', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'result', '.', 'add', '(', 'artifact', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'result', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'warn', '(', 'String', '.', 'format', '(', '""', 'No artifact found : %s:%s', '""', ',', ' ', 'inc', '.', 'artifactId', ',', ' ', 'inc', '.', 'groupId', ')', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'result', ';', '\n', '\t', '}', '\n', '<END>']"
master,06d5d40b239f57cd09a4239a40140826c0737b92,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								// NO-OP
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (applyMappingFile != null) {
			args.add(""-applymapping"");
			args.add(fileToString(applyMappingFile.getAbsoluteFile()));
		}

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach) {
			if (!sameArtifact) {",https://www.github.com/wvengen/proguard-maven-plugin/commit/06d5d40b239f57cd09a4239a40140826c0737b92,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		args.add(""-printmapping"");
		args.add(fileToString((new File(outputDirectory, mappingFileName).getAbsoluteFile())));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (applyMappingFile != null) {
			args.add(""-applymapping"");
			args.add(fileToString(applyMappingFile.getAbsoluteFile()));
		}

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (attach) {
			if (!sameArtifact) {
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'try', '{', '\n', '\t\t\t\t\t\t\t\t', 'FileUtils', '.', 'deleteDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t\t\t\t', '}', ' ', 'catch', '(', 'IOException', ' ', 'ignored', ')', '{', '\n', '\t\t\t\t\t\t\t\t', '\n', '\t\t\t\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'applyMappingFile', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-applymapping', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'applyMappingFile', '.', 'getAbsoluteFile', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'sameArtifact', ')', ' ', '{', '\n', '<END>']"
master,06af46adb278389a5ef6e0cc00a57f3e4916abfb,ProGuardMojo.java,execute,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					// This may not be CompileArtifacts, maven 2.0.6 bug
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				// dependency filter
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								// NO-OP
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		File mappingFile = new File(outputDirectory, mappingFileName);
		args.add(""-printmapping"");
		args.add(fileToString(mappingFile.getAbsoluteFile()));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (incremental && applyMappingFile == null) {
			throw new MojoFailureException(""applyMappingFile is required if incremental is true"");
		}

		if (applyMappingFile != null && (!incremental || applyMappingFile.exists())) {
			args.add(""-applymapping"");
			args.add(fileToString(applyMappingFile.getAbsoluteFile()));
		}

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (incremental) {
			log.info(""Merging mapping file into "" + applyMappingFile);

			try {
				FileInputStream mappingFileIn = new FileInputStream(mappingFile);
				try {
					applyMappingFile.getParentFile().mkdirs();
					FileOutputStream mappingFileOut = new FileOutputStream(applyMappingFile, true);
					try {
						IOUtil.copy(mappingFileIn, mappingFileOut);
					} finally {
						mappingFileOut.close();
					}
				} finally {
					mappingFileIn.close();
				}
			} catch (IOException e) {
				throw new MojoExecutionException(""Unable to merge mapping file"", e);
			}
		}

		if (attach) {
			if (!sameArtifact) {",https://www.github.com/wvengen/proguard-maven-plugin/commit/06af46adb278389a5ef6e0cc00a57f3e4916abfb,"	public void execute() throws MojoExecutionException, MojoFailureException {

		log = getLog();

		if (skip) {
			log.info(""Bypass ProGuard processing because \""proguard.skip=true\"""");
			return;
		}

		boolean mainIsJar = mavenProject.getPackaging().equals(""jar"");

		File inJarFile = new File(outputDirectory, injar);
		if (!inJarFile.exists()) {
			if (injarNotExistsSkip) {
				log.info(""Bypass ProGuard processing because \""injar\"" dos not exist"");
				return;
			} else if (mainIsJar) {
				throw new MojoFailureException(""Can't find file "" + inJarFile);
			}
		}

		if (!outputDirectory.exists()) {
			if (!outputDirectory.mkdirs()) {
				throw new MojoFailureException(""Can't create "" + outputDirectory);
			}
		}

		File outJarFile;
		boolean sameArtifact;

		if (attach) {
			outjar = nameNoType(injar);
			if (useArtifactClassifier()) {
				outjar += ""-"" + attachArtifactClassifier;
			}
			outjar += ""."" + attachArtifactType;
		}

		if ((outjar != null) && (!outjar.equals(injar))) {
			sameArtifact = false;
			outJarFile = (new File(outputDirectory, outjar)).getAbsoluteFile();
			if (outJarFile.exists()) {
				if (!deleteFileOrDirectory(outJarFile)) {
					throw new MojoFailureException(""Can't delete "" + outJarFile);
				}
			}
		} else {
			sameArtifact = true;
			outJarFile = inJarFile.getAbsoluteFile();
			File baseFile;
			if (inJarFile.isDirectory()) {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base"");
			} else {
				baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_base.jar"");
			}
			if (baseFile.exists()) {
				if (!deleteFileOrDirectory(baseFile)) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			if (inJarFile.exists()) {
				if (!inJarFile.renameTo(baseFile)) {
					throw new MojoFailureException(""Can't rename "" + inJarFile);
				}
			}
			inJarFile = baseFile;
		}

		ArrayList<String> args = new ArrayList<String>();
		ArrayList<File> libraryJars = new ArrayList<File>();

		if (log.isDebugEnabled()) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependancy = mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependancy) {
				log.debug(""--- compile artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}

			@SuppressWarnings(""unchecked"")
			final Set<Artifact> artifacts = mavenProject.getArtifacts();
			for (Artifact artifact : artifacts) {
				log.debug(""--- artifact "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
			@SuppressWarnings(""unchecked"")
			final List<Dependency> dependencies = mavenProject.getDependencies();
			for (Dependency artifact : dependencies) {
				log.debug(""--- dependency "" + artifact.getGroupId() + "":"" + artifact.getArtifactId() + "":""
						+ artifact.getType() + "":"" + artifact.getClassifier() + "" Scope:"" + artifact.getScope());
			}
		}

		Set<String> inPath = new HashSet<String>();
		boolean hasInclusionLibrary = false;
		if (assembly != null && assembly.inclusions != null) {
			@SuppressWarnings(""unchecked"")
			final List<Inclusion> inclusions = assembly.inclusions;
			for (Inclusion inc : inclusions) {
				if (!inc.library) {
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					log.debug(""--- ADD injars:"" + inc.artifactId);
					StringBuilder filter = new StringBuilder(fileToString(file));
					filter.append(""(!META-INF/MANIFEST.MF"");
					if (!addMavenDescriptor) {
						filter.append("","");
						filter.append(""!META-INF/maven/**"");
					}
					if (inc.filter != null) {
						filter.append("","").append(inc.filter);
					}
					filter.append("")"");
					args.add(""-injars"");
					args.add(filter.toString());
				} else {
					hasInclusionLibrary = true;
					log.debug(""--- ADD libraryjars:"" + inc.artifactId);
					
					File file = getClasspathElement(getDependency(inc, mavenProject), mavenProject);
					inPath.add(file.toString());
					if(putLibraryJarsInTempDir){
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (inJarFile.exists()) {
			args.add(""-injars"");
			StringBuilder filter = new StringBuilder(fileToString(inJarFile));
			if ((inFilter != null) || (!addMavenDescriptor)) {
				filter.append(""("");
				boolean coma = false;

				if (!addMavenDescriptor) {
					coma = true;
					filter.append(""!META-INF/maven/**"");
				}

				if (inFilter != null) {
					if (coma) {
						filter.append("","");
					}
					filter.append(inFilter);
				}

				filter.append("")"");
			}
			args.add(filter.toString());
		}


		if (includeDependency) {
			@SuppressWarnings(""unchecked"")
			List<Artifact> dependency = this.mavenProject.getCompileArtifacts();
			for (Artifact artifact : dependency) {
				
				if (isExclusion(artifact)) {
					continue;
				}
				File file = getClasspathElement(artifact, mavenProject);

				if (inPath.contains(file.toString())) {
					log.debug(""--- ignore library since one in injar:"" + artifact.getArtifactId());
					continue;
				}
				if (includeDependencyInjar) {
					log.debug(""--- ADD library as injars:"" + artifact.getArtifactId());
					args.add(""-injars"");
					args.add(fileToString(file));
				} else {
					log.debug(""--- ADD libraryjars:"" + artifact.getArtifactId());
					if (putLibraryJarsInTempDir) {
						libraryJars.add(file);
					} else {
						args.add(""-libraryjars"");
						args.add(fileToString(file));
					}
				}
			}
		}

		if (args.contains(""-injars"")) {
			args.add(""-outjars"");
			StringBuilder filter = new StringBuilder(fileToString(outJarFile));
			if (outFilter != null) {
				filter.append(""("").append(outFilter).append("")"");
			}
			args.add(filter.toString());
		}

		if (!obfuscate) {
			args.add(""-dontobfuscate"");
		}

		if (proguardInclude != null) {
			if (proguardInclude.exists()) {
				args.add(""-include"");
				args.add(fileToString(proguardInclude));
				log.debug(""proguardInclude "" + proguardInclude);
			} else {
				log.debug(""proguardInclude config does not exists "" + proguardInclude);
			}
		}

		if (libs != null) {
			for (String lib : libs) {
				if (putLibraryJarsInTempDir) {
					libraryJars.add(new File(lib));
				} else {
					args.add(""-libraryjars"");
					args.add(fileNameToString(lib));
				}
			}
		}

		if (!libraryJars.isEmpty()) {
			log.debug(""Copy libraryJars to temporary directory"");
			log.debug(""Temporary directory: "" + tempLibraryjarsDir);
			if (tempLibraryjarsDir.exists()) {
							try{
								FileUtils.deleteDirectory(tempLibraryjarsDir);
							} catch(IOException ignored){
								
							}
			}
			tempLibraryjarsDir.mkdir();
			if (!tempLibraryjarsDir.exists()) {
				throw new MojoFailureException(""Can't create temporary libraryJars directory: "" + tempLibraryjarsDir.getAbsolutePath());
			}
			for (File libraryJar : libraryJars) {
				try {
					FileUtils.copyFileToDirectory(libraryJar, tempLibraryjarsDir);
				} catch (IOException e) {
					throw new MojoFailureException(""Can't copy to temporary libraryJars directory"", e);
				}
			}
			args.add(""-libraryjars"");
			args.add(fileToString(tempLibraryjarsDir));
		}

		File mappingFile = new File(outputDirectory, mappingFileName);
		args.add(""-printmapping"");
		args.add(fileToString(mappingFile.getAbsoluteFile()));

		args.add(""-printseeds"");
		args.add(fileToString((new File(outputDirectory,seedFileName).getAbsoluteFile())));

		if (incremental && applyMappingFile == null) {
			throw new MojoFailureException(""applyMappingFile is required if incremental is true"");
		}

		if (applyMappingFile != null && (!incremental || applyMappingFile.exists())) {
			args.add(""-applymapping"");
			args.add(fileToString(applyMappingFile.getAbsoluteFile()));
		}

		if (log.isDebugEnabled()) {
			args.add(""-verbose"");
		}

		if (options != null) {
			Collections.addAll(args, options);
		}

		log.info(""execute ProGuard "" + args.toString());
		proguardMain(getProguardJar(this), args, this);


		if (!libraryJars.isEmpty()) {
			deleteFileOrDirectory(tempLibraryjarsDir);
		}

		if ((assembly != null) && (hasInclusionLibrary)) {

			log.info(""creating assembly"");

			File baseFile = new File(outputDirectory, nameNoType(injar) + ""_proguard_result.jar"");
			if (baseFile.exists()) {
				if (!baseFile.delete()) {
					throw new MojoFailureException(""Can't delete "" + baseFile);
				}
			}
			File archiverFile = outJarFile.getAbsoluteFile();
			if (!outJarFile.renameTo(baseFile)) {
				throw new MojoFailureException(""Can't rename "" + outJarFile);
			}

			MavenArchiver archiver = new MavenArchiver();
			archiver.setArchiver(jarArchiver);
			archiver.setOutputFile(archiverFile);
			archive.setAddMavenDescriptor(addMavenDescriptor);

			try {
				jarArchiver.addArchivedFileSet(baseFile);
				@SuppressWarnings(""unchecked"")
				final List<Inclusion> inclusions = assembly.inclusions;
				for (Inclusion inc : inclusions) {
					if (inc.library) {
						File file;
						Artifact artifact = getDependency(inc, mavenProject);
						file = getClasspathElement(artifact, mavenProject);
						if (file.isDirectory()) {
							getLog().info(""merge project: "" + artifact.getArtifactId() + "" "" + file);
							jarArchiver.addDirectory(file);
						} else {
							getLog().info(""merge artifact: "" + artifact.getArtifactId());
							jarArchiver.addArchivedFileSet(file);
						}
					}
				}

				archiver.createArchive(mavenProject, archive);

			} catch (Exception e) {
				throw new MojoExecutionException(""Unable to create jar"", e);
			}

		}

		if (incremental) {
			log.info(""Merging mapping file into "" + applyMappingFile);

			try {
				FileInputStream mappingFileIn = new FileInputStream(mappingFile);
				try {
					applyMappingFile.getParentFile().mkdirs();
					FileOutputStream mappingFileOut = new FileOutputStream(applyMappingFile, true);
					try {
						IOUtil.copy(mappingFileIn, mappingFileOut);
					} finally {
						mappingFileOut.close();
					}
				} finally {
					mappingFileIn.close();
				}
			} catch (IOException e) {
				throw new MojoExecutionException(""Unable to merge mapping file"", e);
			}
		}

		if (attach) {
			if (!sameArtifact) {
","['\t', 'public', ' ', 'void', ' ', 'execute', '(', ')', ' ', 'throws', ' ', 'MojoExecutionException', ',', ' ', 'MojoFailureException', ' ', '{', '\n', '\n', '\t\t', 'log', ' ', '=', ' ', 'getLog', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'skip', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'proguard.skip=true', '\\""', '""', ')', ';', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'boolean', ' ', 'mainIsJar', ' ', '=', ' ', 'mavenProject', '.', 'getPackaging', '(', ')', '.', 'equals', '(', '""', 'jar', '""', ')', ';', '\n', '\n', '\t\t', 'File', ' ', 'inJarFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'injar', ')', ';', '\n', '\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'injarNotExistsSkip', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'info', '(', '""', 'Bypass ProGuard processing because ', '\\""', 'injar', '\\""', ' dos not exist', '""', ')', ';', '\n', '\t\t\t\t', 'return', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', 'if', ' ', '(', 'mainIsJar', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't find file "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outputDirectory', '.', 'mkdirs', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create "", '""', ' ', '+', ' ', 'outputDirectory', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'outJarFile', ';', '\n', '\t\t', 'boolean', ' ', 'sameArtifact', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'outjar', ' ', '=', ' ', 'nameNoType', '(', 'injar', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'useArtifactClassifier', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '-', '""', ' ', '+', ' ', 'attachArtifactClassifier', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'outjar', ' ', '+', '=', ' ', '""', '.', '""', ' ', '+', ' ', 'attachArtifactType', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'outjar', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', '!', 'outjar', '.', 'equals', '(', 'injar', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'false', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'outjar', ')', ')', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'outJarFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'sameArtifact', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t', 'outJarFile', ' ', '=', ' ', 'inJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'File', ' ', 'baseFile', ';', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base', '""', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_base.jar', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'deleteFileOrDirectory', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'inJarFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'inJarFile', ' ', '=', ' ', 'baseFile', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'ArrayList', '<', 'String', '>', ' ', 'args', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'ArrayList', '<', 'File', '>', ' ', 'libraryJars', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', 'File', '>', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependancy', ' ', '=', ' ', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependancy', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- compile artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'Set', '<', 'Artifact', '>', ' ', 'artifacts', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'artifacts', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- artifact ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Dependency', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getDependencies', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Dependency', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- dependency ', '""', ' ', '+', ' ', 'artifact', '.', 'getGroupId', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ':', '""', '\n', '\t\t\t\t\t\t', '+', ' ', 'artifact', '.', 'getType', '(', ')', ' ', '+', ' ', '""', ':', '""', ' ', '+', ' ', 'artifact', '.', 'getClassifier', '(', ')', ' ', '+', ' ', '""', ' Scope:', '""', ' ', '+', ' ', 'artifact', '.', 'getScope', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Set', '<', 'String', '>', ' ', 'inPath', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'String', '>', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'hasInclusionLibrary', ' ', '=', ' ', 'false', ';', '\n', '\t\t', 'if', ' ', '(', 'assembly', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'assembly', '.', 'inclusions', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD injars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '(!META-INF/MANIFEST.MF', '""', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'filter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', '.', 'append', '(', 'inc', '.', 'filter', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'hasInclusionLibrary', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'inc', '.', 'artifactId', ')', ';', '\n', '\t\t\t\t\t', '\n', '\t\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t', 'inPath', '.', 'add', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', '(', 'putLibraryJarsInTempDir', ')', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'inJarFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'inJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '|', '|', ' ', '(', '!', 'addMavenDescriptor', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', ';', '\n', '\t\t\t\t', 'boolean', ' ', 'coma', ' ', '=', ' ', 'false', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'addMavenDescriptor', ')', ' ', '{', '\n', '\t\t\t\t\t', 'coma', ' ', '=', ' ', 'true', ';', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', '""', '!META-INF/maven/**', '""', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'coma', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'filter', '.', 'append', '(', '""', ',', '""', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', 'filter', '.', 'append', '(', 'inFilter', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', 'includeDependency', ')', ' ', '{', '\n', '\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t', 'List', '<', 'Artifact', '>', ' ', 'dependency', ' ', '=', ' ', 'this', '.', 'mavenProject', '.', 'getCompileArtifacts', '(', ')', ';', '\n', '\t\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependency', ')', ' ', '{', '\n', '\t\t\t\t', '\n', '\t\t\t\t', 'if', ' ', '(', 'isExclusion', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'File', ' ', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'inPath', '.', 'contains', '(', 'file', '.', 'toString', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ignore library since one in injar:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'continue', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t\t', 'if', ' ', '(', 'includeDependencyInjar', ')', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD library as injars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-injars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'log', '.', 'debug', '(', '""', '--- ADD libraryjars:', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'file', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'file', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'args', '.', 'contains', '(', '""', '-injars', '""', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-outjars', '""', ')', ';', '\n', '\t\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileToString', '(', 'outJarFile', ')', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'outFilter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'outFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', 'filter', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'obfuscate', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-dontobfuscate', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'proguardInclude', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'proguardInclude', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'args', '.', 'add', '(', '""', '-include', '""', ')', ';', '\n', '\t\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'proguardInclude', ')', ')', ';', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t', 'log', '.', 'debug', '(', '""', 'proguardInclude config does not exists ', '""', ' ', '+', ' ', 'proguardInclude', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'libs', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'String', ' ', 'lib', ' ', ':', ' ', 'libs', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', 'putLibraryJarsInTempDir', ')', ' ', '{', '\n', '\t\t\t\t\t', 'libraryJars', '.', 'add', '(', 'new', ' ', 'File', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t\t\t', 'args', '.', 'add', '(', 'fileNameToString', '(', 'lib', ')', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Copy libraryJars to temporary directory', '""', ')', ';', '\n', '\t\t\t', 'log', '.', 'debug', '(', '""', 'Temporary directory: ', '""', ' ', '+', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'try', '{', '\n', '\t\t\t\t\t\t\t\t', 'FileUtils', '.', 'deleteDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t\t\t\t', '}', ' ', 'catch', '(', 'IOException', ' ', 'ignored', ')', '{', '\n', '\t\t\t\t\t\t\t\t', '\n', '\t\t\t\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'tempLibraryjarsDir', '.', 'mkdir', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'tempLibraryjarsDir', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't create temporary libraryJars directory: "", '""', ' ', '+', ' ', 'tempLibraryjarsDir', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'for', ' ', '(', 'File', ' ', 'libraryJar', ' ', ':', ' ', 'libraryJars', ')', ' ', '{', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'FileUtils', '.', 'copyFileToDirectory', '(', 'libraryJar', ',', ' ', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't copy to temporary libraryJars directory"", '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-libraryjars', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'tempLibraryjarsDir', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'File', ' ', 'mappingFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'mappingFileName', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printmapping', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'mappingFile', '.', 'getAbsoluteFile', '(', ')', ')', ')', ';', '\n', '\n', '\t\t', 'args', '.', 'add', '(', '""', '-printseeds', '""', ')', ';', '\n', '\t\t', 'args', '.', 'add', '(', 'fileToString', '(', '(', 'new', ' ', 'File', '(', 'outputDirectory', ',', 'seedFileName', ')', '.', 'getAbsoluteFile', '(', ')', ')', ')', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'incremental', ' ', '&', '&', ' ', 'applyMappingFile', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', 'applyMappingFile is required if incremental is true', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'applyMappingFile', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '(', '!', 'incremental', ' ', '|', '|', ' ', 'applyMappingFile', '.', 'exists', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-applymapping', '""', ')', ';', '\n', '\t\t\t', 'args', '.', 'add', '(', 'fileToString', '(', 'applyMappingFile', '.', 'getAbsoluteFile', '(', ')', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'log', '.', 'isDebugEnabled', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'args', '.', 'add', '(', '""', '-verbose', '""', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'options', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'Collections', '.', 'addAll', '(', 'args', ',', ' ', 'options', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'execute ProGuard ', '""', ' ', '+', ' ', 'args', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', 'proguardMain', '(', 'getProguardJar', '(', 'this', ')', ',', ' ', 'args', ',', ' ', 'this', ')', ';', '\n', '\n', '\n', '\t\t', 'if', ' ', '(', '!', 'libraryJars', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'deleteFileOrDirectory', '(', 'tempLibraryjarsDir', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', '(', 'assembly', ' ', '!', '=', ' ', 'null', ')', ' ', '&', '&', ' ', '(', 'hasInclusionLibrary', ')', ')', ' ', '{', '\n', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'creating assembly', '""', ')', ';', '\n', '\n', '\t\t\t', 'File', ' ', 'baseFile', ' ', '=', ' ', 'new', ' ', 'File', '(', 'outputDirectory', ',', ' ', 'nameNoType', '(', 'injar', ')', ' ', '+', ' ', '""', '_proguard_result.jar', '""', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', 'baseFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'if', ' ', '(', '!', 'baseFile', '.', 'delete', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't delete "", '""', ' ', '+', ' ', 'baseFile', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', '\n', '\t\t\t', 'File', ' ', 'archiverFile', ' ', '=', ' ', 'outJarFile', '.', 'getAbsoluteFile', '(', ')', ';', '\n', '\t\t\t', 'if', ' ', '(', '!', 'outJarFile', '.', 'renameTo', '(', 'baseFile', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoFailureException', '(', '""', ""Can't rename "", '""', ' ', '+', ' ', 'outJarFile', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t\t', 'MavenArchiver', ' ', 'archiver', ' ', '=', ' ', 'new', ' ', 'MavenArchiver', '(', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setArchiver', '(', 'jarArchiver', ')', ';', '\n', '\t\t\t', 'archiver', '.', 'setOutputFile', '(', 'archiverFile', ')', ';', '\n', '\t\t\t', 'archive', '.', 'setAddMavenDescriptor', '(', 'addMavenDescriptor', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'baseFile', ')', ';', '\n', '\t\t\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t\t\t', 'final', ' ', 'List', '<', 'Inclusion', '>', ' ', 'inclusions', ' ', '=', ' ', 'assembly', '.', 'inclusions', ';', '\n', '\t\t\t\t', 'for', ' ', '(', 'Inclusion', ' ', 'inc', ' ', ':', ' ', 'inclusions', ')', ' ', '{', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'inc', '.', 'library', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'File', ' ', 'file', ';', '\n', '\t\t\t\t\t\t', 'Artifact', ' ', 'artifact', ' ', '=', ' ', 'getDependency', '(', 'inc', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'file', ' ', '=', ' ', 'getClasspathElement', '(', 'artifact', ',', ' ', 'mavenProject', ')', ';', '\n', '\t\t\t\t\t\t', 'if', ' ', '(', 'file', '.', 'isDirectory', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge project: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'file', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addDirectory', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t\t', 'getLog', '(', ')', '.', 'info', '(', '""', 'merge artifact: ', '""', ' ', '+', ' ', 'artifact', '.', 'getArtifactId', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t\t', 'jarArchiver', '.', 'addArchivedFileSet', '(', 'file', ')', ';', '\n', '\t\t\t\t\t\t', '}', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t\t', 'archiver', '.', 'createArchive', '(', 'mavenProject', ',', ' ', 'archive', ')', ';', '\n', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to create jar', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'incremental', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'info', '(', '""', 'Merging mapping file into ', '""', ' ', '+', ' ', 'applyMappingFile', ')', ';', '\n', '\n', '\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t', 'FileInputStream', ' ', 'mappingFileIn', ' ', '=', ' ', 'new', ' ', 'FileInputStream', '(', 'mappingFile', ')', ';', '\n', '\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t', 'applyMappingFile', '.', 'getParentFile', '(', ')', '.', 'mkdirs', '(', ')', ';', '\n', '\t\t\t\t\t', 'FileOutputStream', ' ', 'mappingFileOut', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', 'applyMappingFile', ',', ' ', 'true', ')', ';', '\n', '\t\t\t\t\t', 'try', ' ', '{', '\n', '\t\t\t\t\t\t', 'IOUtil', '.', 'copy', '(', 'mappingFileIn', ',', ' ', 'mappingFileOut', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'finally', ' ', '{', '\n', '\t\t\t\t\t\t', 'mappingFileOut', '.', 'close', '(', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\t\t\t\t', '}', ' ', 'finally', ' ', '{', '\n', '\t\t\t\t\t', 'mappingFileIn', '.', 'close', '(', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\t\t\t', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '\t\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Unable to merge mapping file', '""', ',', ' ', 'e', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'if', ' ', '(', 'attach', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'sameArtifact', ')', ' ', '{', '\n', '<END>']"
master,699f0b78431ba090af023a67c3933dd4bc4d8cb6,ProGuardMojo.java,libFileToStringWithInLibsFilter,"	private String libFileToStringWithInLibsFilter(File file) {
		return libFileToStringWithInLibsFilter(file.toString());
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/699f0b78431ba090af023a67c3933dd4bc4d8cb6,"	private String libFileToStringWithInLibsFilter(File file) {
		return libFileToStringWithInLibsFilter(file.toString());
	}
","['\t', 'private', ' ', 'String', ' ', 'libFileToStringWithInLibsFilter', '(', 'File', ' ', 'file', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'libFileToStringWithInLibsFilter', '(', 'file', '.', 'toString', '(', ')', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,699f0b78431ba090af023a67c3933dd4bc4d8cb6,ProGuardMojo.java,libFileToStringWithInLibsFilter,"	private String libFileToStringWithInLibsFilter(String file) {
		StringBuilder filter = new StringBuilder(fileNameToString(file));
		if ((inLibsFilter != null)) {
			filter.append(""("").append(inLibsFilter).append("")"");
		}
		return filter.toString();
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/699f0b78431ba090af023a67c3933dd4bc4d8cb6,"	private String libFileToStringWithInLibsFilter(String file) {
		StringBuilder filter = new StringBuilder(fileNameToString(file));
		if ((inLibsFilter != null)) {
			filter.append(""("").append(inLibsFilter).append("")"");
		}
		return filter.toString();
	}
","['\t', 'private', ' ', 'String', ' ', 'libFileToStringWithInLibsFilter', '(', 'String', ' ', 'file', ')', ' ', '{', '\n', '\t\t', 'StringBuilder', ' ', 'filter', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', 'fileNameToString', '(', 'file', ')', ')', ';', '\n', '\t\t', 'if', ' ', '(', '(', 'inLibsFilter', ' ', '!', '=', ' ', 'null', ')', ')', ' ', '{', '\n', '\t\t\t', 'filter', '.', 'append', '(', '""', '(', '""', ')', '.', 'append', '(', 'inLibsFilter', ')', '.', 'append', '(', '""', ')', '""', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'filter', '.', 'toString', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,dc185a8bfec0291244240dbb2bb27d8e6f6072e5,ProGuardMojo.java,attachTextFile,"	private void attachTextFile(File theFile, String mainClassifier, String suffix) {
		final String classifier = (null == mainClassifier ? """" : mainClassifier + ""-"") + suffix;
		log.info(""Attempting to attach "" + suffix + "" artifact"");
		if (theFile.exists()) {
			if (theFile.isFile()) {",https://www.github.com/wvengen/proguard-maven-plugin/commit/dc185a8bfec0291244240dbb2bb27d8e6f6072e5,"	private void attachTextFile(File theFile, String mainClassifier, String suffix) {
		final String classifier = (null == mainClassifier ? """" : mainClassifier + ""-"") + suffix;
		log.info(""Attempting to attach "" + suffix + "" artifact"");
		if (theFile.exists()) {
			if (theFile.isFile()) {
","['\t', 'private', ' ', 'void', ' ', 'attachTextFile', '(', 'File', ' ', 'theFile', ',', ' ', 'String', ' ', 'mainClassifier', ',', ' ', 'String', ' ', 'suffix', ')', ' ', '{', '\n', '\t\t', 'final', ' ', 'String', ' ', 'classifier', ' ', '=', ' ', '(', 'null', ' ', '=', '=', ' ', 'mainClassifier', ' ', '?', ' ', '""', '""', ' ', ':', ' ', 'mainClassifier', ' ', '+', ' ', '""', '-', '""', ')', ' ', '+', ' ', 'suffix', ';', '\n', '\t\t', 'log', '.', 'info', '(', '""', 'Attempting to attach ', '""', ' ', '+', ' ', 'suffix', ' ', '+', ' ', '""', ' artifact', '""', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'theFile', '.', 'exists', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'theFile', '.', 'isFile', '(', ')', ')', ' ', '{', '\n', '<END>']"
master,dc185a8bfec0291244240dbb2bb27d8e6f6072e5,ProGuardMojo.java,proguardMain,"	private void proguardMain(Collection<File> proguardJars, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJars);

		for (File p : proguardJars)
			java.createClasspath().createPathElement().setLocation(p);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/dc185a8bfec0291244240dbb2bb27d8e6f6072e5,"	private void proguardMain(Collection<File> proguardJars, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJars);

		for (File p : proguardJars)
			java.createClasspath().createPathElement().setLocation(p);
		
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'void', ' ', 'proguardMain', '(', 'Collection', '<', 'File', '>', ' ', 'proguardJars', ',', ' ', 'List', '<', 'String', '>', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'int', ' ', 'logLevel', ' ', '=', ' ', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'silent', ' ', '?', ' ', 'Project', '.', 'MSG_ERR', ' ', ':', ' ', 'logLevel', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJars', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'File', ' ', 'p', ' ', ':', ' ', 'proguardJars', ')', '\n', '\t\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'createPathElement', '(', ')', '.', 'setLocation', '(', 'p', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'mojo', '.', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'arg', ' ', ':', ' ', 'argsList', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'arg', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,dc185a8bfec0291244240dbb2bb27d8e6f6072e5,ProGuardMojo.java,getDependencies,"	private Set<Artifact> getDependencies(final Inclusion inc, MavenProject mavenProject)
			throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependencies = mavenProject.getArtifacts();
		Set<Artifact> result = new HashSet<Artifact>();
		for (Artifact artifact : dependencies) {
			if (inc.match(artifact)) {
				result.add(artifact);
			}
		}
		if (result.isEmpty()) {
			log.warn(String.format(""No artifact found : %s:%s"", inc.artifactId, inc.groupId));
		}
		return result;
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/dc185a8bfec0291244240dbb2bb27d8e6f6072e5,"	private Set<Artifact> getDependencies(final Inclusion inc, MavenProject mavenProject)
			throws MojoExecutionException {
		@SuppressWarnings(""unchecked"")
		Set<Artifact> dependencies = mavenProject.getArtifacts();
		Set<Artifact> result = new HashSet<Artifact>();
		for (Artifact artifact : dependencies) {
			if (inc.match(artifact)) {
				result.add(artifact);
			}
		}
		if (result.isEmpty()) {
			log.warn(String.format(""No artifact found : %s:%s"", inc.artifactId, inc.groupId));
		}
		return result;
	}
","['\t', 'private', ' ', 'Set', '<', 'Artifact', '>', ' ', 'getDependencies', '(', 'final', ' ', 'Inclusion', ' ', 'inc', ',', ' ', 'MavenProject', ' ', 'mavenProject', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '\t\t', 'Set', '<', 'Artifact', '>', ' ', 'dependencies', ' ', '=', ' ', 'mavenProject', '.', 'getArtifacts', '(', ')', ';', '\n', '\t\t', 'Set', '<', 'Artifact', '>', ' ', 'result', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', 'Artifact', '>', '(', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'dependencies', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', 'inc', '.', 'match', '(', 'artifact', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'result', '.', 'add', '(', 'artifact', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\t\t', 'if', ' ', '(', 'result', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t\t\t', 'log', '.', 'warn', '(', 'String', '.', 'format', '(', '""', 'No artifact found : %s:%s', '""', ',', ' ', 'inc', '.', 'artifactId', ',', ' ', 'inc', '.', 'groupId', ')', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'return', ' ', 'result', ';', '\n', '\t', '}', '\n', '<END>']"
master,e6fca6ce0f14dd8eb120d14789bdb985cbbb194a,ProGuardMojo.java,getAllPluginArtifactDependencies,"	private Set<File> getAllPluginArtifactDependencies(ProGuardMojo mojo) throws MojoExecutionException {
		Set<File> files = new HashSet<>(getProguardJars(mojo));
		for (Artifact artifact : mojo.pluginArtifacts) {
			files.add(artifact.getFile().getAbsoluteFile());
			files.addAll(getChildArtifacts(artifact));
		}
		
		return files;
	}",https://www.github.com/wvengen/proguard-maven-plugin/commit/e6fca6ce0f14dd8eb120d14789bdb985cbbb194a,"	private Set<File> getAllPluginArtifactDependencies(ProGuardMojo mojo) throws MojoExecutionException {
		Set<File> files = new HashSet<>(getProguardJars(mojo));
		for (Artifact artifact : mojo.pluginArtifacts) {
			files.add(artifact.getFile().getAbsoluteFile());
			files.addAll(getChildArtifacts(artifact));
		}
		
		return files;
	}
","['\t', 'private', ' ', 'Set', '<', 'File', '>', ' ', 'getAllPluginArtifactDependencies', '(', 'ProGuardMojo', ' ', 'mojo', ')', ' ', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\t\t', 'Set', '<', 'File', '>', ' ', 'files', ' ', '=', ' ', 'new', ' ', 'HashSet', '<', '>', '(', 'getProguardJars', '(', 'mojo', ')', ')', ';', '\n', '\t\t', 'for', ' ', '(', 'Artifact', ' ', 'artifact', ' ', ':', ' ', 'mojo', '.', 'pluginArtifacts', ')', ' ', '{', '\n', '\t\t\t', 'files', '.', 'add', '(', 'artifact', '.', 'getFile', '(', ')', '.', 'getAbsoluteFile', '(', ')', ')', ';', '\n', '\t\t\t', 'files', '.', 'addAll', '(', 'getChildArtifacts', '(', 'artifact', ')', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'files', ';', '\n', '\t', '}', '\n', '<END>']"
master,e6fca6ce0f14dd8eb120d14789bdb985cbbb194a,ProGuardMojo.java,proguardMain,"	private void proguardMain(Collection<File> proguardJars, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJars);
		
		Set<File> allDependencyFiles = getAllPluginArtifactDependencies(mojo);

		for (File p : allDependencyFiles)
			java.createClasspath().createPathElement().setLocation(p);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/e6fca6ce0f14dd8eb120d14789bdb985cbbb194a,"	private void proguardMain(Collection<File> proguardJars, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger = new DefaultLogger();
		antLogger.setOutputPrintStream(System.out);
		antLogger.setErrorPrintStream(System.err);
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJars);
		
		Set<File> allDependencyFiles = getAllPluginArtifactDependencies(mojo);

		for (File p : allDependencyFiles)
			java.createClasspath().createPathElement().setLocation(p);
		
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'void', ' ', 'proguardMain', '(', 'Collection', '<', 'File', '>', ' ', 'proguardJars', ',', ' ', 'List', '<', 'String', '>', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', 'int', ' ', 'logLevel', ' ', '=', ' ', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'silent', ' ', '?', ' ', 'Project', '.', 'MSG_ERR', ' ', ':', ' ', 'logLevel', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJars', ')', ';', '\n', '\t\t', '\n', '\t\t', 'Set', '<', 'File', '>', ' ', 'allDependencyFiles', ' ', '=', ' ', 'getAllPluginArtifactDependencies', '(', 'mojo', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'File', ' ', 'p', ' ', ':', ' ', 'allDependencyFiles', ')', '\n', '\t\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'createPathElement', '(', ')', '.', 'setLocation', '(', 'p', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'mojo', '.', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'arg', ' ', ':', ' ', 'argsList', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'arg', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
master,a061f744f1944e9f682d5274c5d205fc5eb5a3d0,MavenloggingBinder.java,printMessage,"    protected void printMessage(String message, PrintStream stream, int priority) {
        switch (priority) {
            case Project.MSG_ERR: {",https://www.github.com/wvengen/proguard-maven-plugin/commit/a061f744f1944e9f682d5274c5d205fc5eb5a3d0,"    protected void printMessage(String message, PrintStream stream, int priority) {
        switch (priority) {
            case Project.MSG_ERR: {
","['    ', 'protected', ' ', 'void', ' ', 'printMessage', '(', 'String', ' ', 'message', ',', ' ', 'PrintStream', ' ', 'stream', ',', ' ', 'int', ' ', 'priority', ')', ' ', '{', '\n', '        ', 'switch', ' ', '(', 'priority', ')', ' ', '{', '\n', '            ', 'case', ' ', 'Project', '.', 'MSG_ERR', ':', ' ', '{', '\n', '<END>']"
master,a061f744f1944e9f682d5274c5d205fc5eb5a3d0,ProGuardMojo.java,proguardMain,"	private void proguardMain(Collection<File> proguardJars, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger;
		if (bindToMavenLogging) {
			antLogger = new MavenloggingBinder(mojo.log);
		} else {
			antLogger = new DefaultLogger();
			antLogger.setOutputPrintStream(System.out);
			antLogger.setErrorPrintStream(System.err);
		}
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJars);
		
		Set<File> allDependencyFiles = getAllPluginArtifactDependencies(mojo);

		for (File p : allDependencyFiles)
			java.createClasspath().createPathElement().setLocation(p);
		// java.createClasspath().setPath(System.getProperty(""java.class.path""));
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		// get the maxMemory setting
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");",https://www.github.com/wvengen/proguard-maven-plugin/commit/a061f744f1944e9f682d5274c5d205fc5eb5a3d0,"	private void proguardMain(Collection<File> proguardJars, List<String> argsList, ProGuardMojo mojo)
			throws MojoExecutionException {

		Java java = new Java();

		Project antProject = new Project();
		antProject.setName(mojo.mavenProject.getName());
		antProject.init();

		DefaultLogger antLogger;
		if (bindToMavenLogging) {
			antLogger = new MavenloggingBinder(mojo.log);
		} else {
			antLogger = new DefaultLogger();
			antLogger.setOutputPrintStream(System.out);
			antLogger.setErrorPrintStream(System.err);
		}
		int logLevel = mojo.log.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO;
		antLogger.setMessageOutputLevel(silent ? Project.MSG_ERR : logLevel);

		antProject.addBuildListener(antLogger);
		antProject.setBaseDir(mojo.mavenProject.getBasedir());

		java.setProject(antProject);
		java.setTaskName(""proguard"");

		mojo.getLog().info(""proguard jar: "" + proguardJars);
		
		Set<File> allDependencyFiles = getAllPluginArtifactDependencies(mojo);

		for (File p : allDependencyFiles)
			java.createClasspath().createPathElement().setLocation(p);
		
		java.setClassname(mojo.proguardMainClass);

		java.setFailonerror(true);

		java.setFork(true);

		
		if (mojo.maxMemory != null) {
			java.setMaxmemory(mojo.maxMemory);
		}

		for (String arg : argsList) {
			java.createArg().setValue(arg);
		}

		int result = java.executeJava();
		if (result != 0) {
			throw new MojoExecutionException(""Obfuscation failed (result="" + result + "")"");
","['\t', 'private', ' ', 'void', ' ', 'proguardMain', '(', 'Collection', '<', 'File', '>', ' ', 'proguardJars', ',', ' ', 'List', '<', 'String', '>', ' ', 'argsList', ',', ' ', 'ProGuardMojo', ' ', 'mojo', ')', '\n', '\t\t\t', 'throws', ' ', 'MojoExecutionException', ' ', '{', '\n', '\n', '\t\t', 'Java', ' ', 'java', ' ', '=', ' ', 'new', ' ', 'Java', '(', ')', ';', '\n', '\n', '\t\t', 'Project', ' ', 'antProject', ' ', '=', ' ', 'new', ' ', 'Project', '(', ')', ';', '\n', '\t\t', 'antProject', '.', 'setName', '(', 'mojo', '.', 'mavenProject', '.', 'getName', '(', ')', ')', ';', '\n', '\t\t', 'antProject', '.', 'init', '(', ')', ';', '\n', '\n', '\t\t', 'DefaultLogger', ' ', 'antLogger', ';', '\n', '\t\t', 'if', ' ', '(', 'bindToMavenLogging', ')', ' ', '{', '\n', '\t\t\t', 'antLogger', ' ', '=', ' ', 'new', ' ', 'MavenloggingBinder', '(', 'mojo', '.', 'log', ')', ';', '\n', '\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t', 'antLogger', ' ', '=', ' ', 'new', ' ', 'DefaultLogger', '(', ')', ';', '\n', '\t\t\t', 'antLogger', '.', 'setOutputPrintStream', '(', 'System', '.', 'out', ')', ';', '\n', '\t\t\t', 'antLogger', '.', 'setErrorPrintStream', '(', 'System', '.', 'err', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'int', ' ', 'logLevel', ' ', '=', ' ', 'mojo', '.', 'log', '.', 'isDebugEnabled', '(', ')', ' ', '?', ' ', 'Project', '.', 'MSG_DEBUG', ' ', ':', ' ', 'Project', '.', 'MSG_INFO', ';', '\n', '\t\t', 'antLogger', '.', 'setMessageOutputLevel', '(', 'silent', ' ', '?', ' ', 'Project', '.', 'MSG_ERR', ' ', ':', ' ', 'logLevel', ')', ';', '\n', '\n', '\t\t', 'antProject', '.', 'addBuildListener', '(', 'antLogger', ')', ';', '\n', '\t\t', 'antProject', '.', 'setBaseDir', '(', 'mojo', '.', 'mavenProject', '.', 'getBasedir', '(', ')', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setProject', '(', 'antProject', ')', ';', '\n', '\t\t', 'java', '.', 'setTaskName', '(', '""', 'proguard', '""', ')', ';', '\n', '\n', '\t\t', 'mojo', '.', 'getLog', '(', ')', '.', 'info', '(', '""', 'proguard jar: ', '""', ' ', '+', ' ', 'proguardJars', ')', ';', '\n', '\t\t', '\n', '\t\t', 'Set', '<', 'File', '>', ' ', 'allDependencyFiles', ' ', '=', ' ', 'getAllPluginArtifactDependencies', '(', 'mojo', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'File', ' ', 'p', ' ', ':', ' ', 'allDependencyFiles', ')', '\n', '\t\t\t', 'java', '.', 'createClasspath', '(', ')', '.', 'createPathElement', '(', ')', '.', 'setLocation', '(', 'p', ')', ';', '\n', '\t\t', '\n', '\t\t', 'java', '.', 'setClassname', '(', 'mojo', '.', 'proguardMainClass', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFailonerror', '(', 'true', ')', ';', '\n', '\n', '\t\t', 'java', '.', 'setFork', '(', 'true', ')', ';', '\n', '\n', '\t\t', '\n', '\t\t', 'if', ' ', '(', 'mojo', '.', 'maxMemory', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'setMaxmemory', '(', 'mojo', '.', 'maxMemory', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'arg', ' ', ':', ' ', 'argsList', ')', ' ', '{', '\n', '\t\t\t', 'java', '.', 'createArg', '(', ')', '.', 'setValue', '(', 'arg', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'int', ' ', 'result', ' ', '=', ' ', 'java', '.', 'executeJava', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'result', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'MojoExecutionException', '(', '""', 'Obfuscation failed (result=', '""', ' ', '+', ' ', 'result', ' ', '+', ' ', '""', ')', '""', ')', ';', '\n', '<END>']"
