Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,4930f594e040e7c3f1ceefe77dabbd9647331d89,TelegramAlertModule.java,configure,"    protected void configure() {
        addAlarmCallback(TelegramAlertNotification.class);
    }",https://www.github.com/irgendwr/telegramalert/commit/4930f594e040e7c3f1ceefe77dabbd9647331d89,"    protected void configure() {
        addAlarmCallback(TelegramAlertNotification.class);
    }
","['    ', 'protected', ' ', 'void', ' ', 'configure', '(', ')', ' ', '{', '\n', '        ', 'addAlarmCallback', '(', 'TelegramAlertNotification', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,4930f594e040e7c3f1ceefe77dabbd9647331d89,TelegramAlertNotification.java,initialize,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        log = Logger.getLogger(""TelegramAlert"");
        String logPath = cfg.getString(LOG_FILE);
        
        if (!logPath.isEmpty()) {
	        try {
	        	FileHandler handler = new FileHandler(logPath, true);
	            log.addHandler(handler);
	            handler.setFormatter(new SimpleFormatter());
	        } catch (IOException | SecurityException ex) {
	            ex.printStackTrace();
	        }
        }
        
        log.info(""Alert was initialized successfully"");
    }",https://www.github.com/irgendwr/telegramalert/commit/4930f594e040e7c3f1ceefe77dabbd9647331d89,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        log = Logger.getLogger(""TelegramAlert"");
        String logPath = cfg.getString(LOG_FILE);
        
        if (!logPath.isEmpty()) {
	        try {
	        	FileHandler handler = new FileHandler(logPath, true);
	            log.addHandler(handler);
	            handler.setFormatter(new SimpleFormatter());
	        } catch (IOException | SecurityException ex) {
	            ex.printStackTrace();
	        }
        }
        
        log.info(""Alert was initialized successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'cfg', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'this', '.', 'cfg', ' ', '=', ' ', 'cfg', ';', '\n', '        ', 'log', ' ', '=', ' ', 'Logger', '.', 'getLogger', '(', '""', 'TelegramAlert', '""', ')', ';', '\n', '        ', 'String', ' ', 'logPath', ' ', '=', ' ', 'cfg', '.', 'getString', '(', 'LOG_FILE', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', '!', 'logPath', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t        ', 'try', ' ', '{', '\n', '\t        \t', 'FileHandler', ' ', 'handler', ' ', '=', ' ', 'new', ' ', 'FileHandler', '(', 'logPath', ',', ' ', 'true', ')', ';', '\n', '\t            ', 'log', '.', 'addHandler', '(', 'handler', ')', ';', '\n', '\t            ', 'handler', '.', 'setFormatter', '(', 'new', ' ', 'SimpleFormatter', '(', ')', ')', ';', '\n', '\t        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', '|', ' ', 'SecurityException', ' ', 'ex', ')', ' ', '{', '\n', '\t            ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '\t        ', '}', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'log', '.', 'info', '(', '""', 'Alert was initialized successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,4930f594e040e7c3f1ceefe77dabbd9647331d89,TelegramAlertNotification.java,createRequestMsg,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
        String description = checkResult.getResultDescription();
        String title = stream.getTitle();
        if (title != null) {
            description = description.replace(""Stream"", title);
		}
		description = description.replace(""\"""", ""'"");
		List<String> backlog = getAlarmBacklog(checkResult);
		StringBuilder sb = new StringBuilder(""\"""");
		sb.append(description);
		sb.append("":\\n"");
        for (String message : backlog) {
			String msg = message.replace(""\"""", ""'"");
            sb.append(msg);
            sb.append(""\\n"");
        }
		sb.append(""\"""");
		return sb.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/4930f594e040e7c3f1ceefe77dabbd9647331d89,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
        String description = checkResult.getResultDescription();
        String title = stream.getTitle();
        if (title != null) {
            description = description.replace(""Stream"", title);
		}
		description = description.replace(""\"""", ""'"");
		List<String> backlog = getAlarmBacklog(checkResult);
		StringBuilder sb = new StringBuilder(""\"""");
		sb.append(description);
		sb.append("":\\n"");
        for (String message : backlog) {
			String msg = message.replace(""\"""", ""'"");
            sb.append(msg);
            sb.append(""\\n"");
        }
		sb.append(""\"""");
		return sb.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'createRequestMsg', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'checkResult', ')', ' ', '{', '\n', '        ', 'String', ' ', 'description', ' ', '=', ' ', 'checkResult', '.', 'getResultDescription', '(', ')', ';', '\n', '        ', 'String', ' ', 'title', ' ', '=', ' ', 'stream', '.', 'getTitle', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'title', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'description', ' ', '=', ' ', 'description', '.', 'replace', '(', '""', 'Stream', '""', ',', ' ', 'title', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'description', ' ', '=', ' ', 'description', '.', 'replace', '(', '""', '\\""', '""', ',', ' ', '""', ""'"", '""', ')', ';', '\n', '\t\t', 'List', '<', 'String', '>', ' ', 'backlog', ' ', '=', ' ', 'getAlarmBacklog', '(', 'checkResult', ')', ';', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', '""', '\\""', '""', ')', ';', '\n', '\t\t', 'sb', '.', 'append', '(', 'description', ')', ';', '\n', '\t\t', 'sb', '.', 'append', '(', '""', ':', '\\\\', 'n', '""', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'message', ' ', ':', ' ', 'backlog', ')', ' ', '{', '\n', '\t\t\t', 'String', ' ', 'msg', ' ', '=', ' ', 'message', '.', 'replace', '(', '""', '\\""', '""', ',', ' ', '""', ""'"", '""', ')', ';', '\n', '            ', 'sb', '.', 'append', '(', 'msg', ')', ';', '\n', '            ', 'sb', '.', 'append', '(', '""', '\\\\', 'n', '""', ')', ';', '\n', '        ', '}', '\n', '\t\t', 'sb', '.', 'append', '(', '""', '\\""', '""', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,4930f594e040e7c3f1ceefe77dabbd9647331d89,TelegramAlertNotification.java,checkConfiguration,"    public void checkConfiguration() throws ConfigurationException {
        if (!cfg.stringIsSet(TOKEN)) {
            throw new ConfigurationException(""Token is not set."");
        }

        if (!cfg.stringIsSet(CHAT)) {
            throw new ConfigurationException(""Chat ID is not set."");",https://www.github.com/irgendwr/telegramalert/commit/4930f594e040e7c3f1ceefe77dabbd9647331d89,"    public void checkConfiguration() throws ConfigurationException {
        if (!cfg.stringIsSet(TOKEN)) {
            throw new ConfigurationException(""Token is not set."");
        }

        if (!cfg.stringIsSet(CHAT)) {
            throw new ConfigurationException(""Chat ID is not set."");
","['    ', 'public', ' ', 'void', ' ', 'checkConfiguration', '(', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'if', ' ', '(', '!', 'cfg', '.', 'stringIsSet', '(', 'TOKEN', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'ConfigurationException', '(', '""', 'Token is not set.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'cfg', '.', 'stringIsSet', '(', 'CHAT', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'ConfigurationException', '(', '""', 'Chat ID is not set.', '""', ')', ';', '\n']"
master,4930f594e040e7c3f1ceefe77dabbd9647331d89,TelegramAlertPlugin.java,metadata,"    public PluginMetaData metadata() {
        return new TelegramAlertMetaData();
    }",https://www.github.com/irgendwr/telegramalert/commit/4930f594e040e7c3f1ceefe77dabbd9647331d89,"    public PluginMetaData metadata() {
        return new TelegramAlertMetaData();
    }
","['    ', 'public', ' ', 'PluginMetaData', ' ', 'metadata', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'TelegramAlertMetaData', '(', ')', ';', '\n', '    ', '}', '\n']"
master,4930f594e040e7c3f1ceefe77dabbd9647331d89,TelegramAlertPlugin.java,modules,"    public Collection<PluginModule> modules () {
        return Collections.<PluginModule>singletonList(new TelegramAlertModule());
    }",https://www.github.com/irgendwr/telegramalert/commit/4930f594e040e7c3f1ceefe77dabbd9647331d89,"    public Collection<PluginModule> modules () {
        return Collections.<PluginModule>singletonList(new TelegramAlertModule());
    }
","['    ', 'public', ' ', 'Collection', '<', 'PluginModule', '>', ' ', 'modules', ' ', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Collections', '.', '<', 'PluginModule', '>', 'singletonList', '(', 'new', ' ', 'TelegramAlertModule', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,ad1dedf922a496d796a4f0924f6f7d73172d82df,Emoji.java,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();

        if (this.firstChar != null) {
            sb.append(this.firstChar);
        }
        if (this.secondChar != null) {
            sb.append(this.secondChar);
        }

        return sb.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/ad1dedf922a496d796a4f0924f6f7d73172d82df,"    public String toString() {
        StringBuilder sb = new StringBuilder();

        if (this.firstChar != null) {
            sb.append(this.firstChar);
        }
        if (this.secondChar != null) {
            sb.append(this.secondChar);
        }

        return sb.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'this', '.', 'firstChar', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'sb', '.', 'append', '(', 'this', '.', 'firstChar', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'this', '.', 'secondChar', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'sb', '.', 'append', '(', 'this', '.', 'secondChar', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,ad1dedf922a496d796a4f0924f6f7d73172d82df,TelegramAlertNotification.java,initialize,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        logger = Logger.getLogger(""TelegramAlert"");
        String logPath = cfg.getString(LOG_FILE);
        
        if (!logPath.isEmpty()) {
	        try {
	        	FileHandler handler = new FileHandler(logPath, true);
	            logger.addHandler(handler);
	            handler.setFormatter(new SimpleFormatter());
	        } catch (IOException | SecurityException ex) {
	            ex.printStackTrace();
	        }
        }
        
        ApiContextInitializer.init();
        
        TelegramBotsApi botApi = new TelegramBotsApi();
        chatId = cfg.getInt(CHAT);
    	bot = new TelegramAlertBot(cfg.getString(USERNAME), cfg.getString(TOKEN));
        
        try {
        	botApi.registerBot(bot);
  
        	bot.execute(new SendMessage()
        			.setChatId(chatId)
                    .setText(""Bot loaded successfully! "" + Emoji.SMILING_FACE_WITH_SMILING_EYES
            ));
        } catch (TelegramApiException e) {
            logger.warning(e.getMessage());
        }
        
        logger.info(""Alert was initialized successfully"");
    }",https://www.github.com/irgendwr/telegramalert/commit/ad1dedf922a496d796a4f0924f6f7d73172d82df,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        logger = Logger.getLogger(""TelegramAlert"");
        String logPath = cfg.getString(LOG_FILE);
        
        if (!logPath.isEmpty()) {
	        try {
	        	FileHandler handler = new FileHandler(logPath, true);
	            logger.addHandler(handler);
	            handler.setFormatter(new SimpleFormatter());
	        } catch (IOException | SecurityException ex) {
	            ex.printStackTrace();
	        }
        }
        
        ApiContextInitializer.init();
        
        TelegramBotsApi botApi = new TelegramBotsApi();
        chatId = cfg.getInt(CHAT);
    	bot = new TelegramAlertBot(cfg.getString(USERNAME), cfg.getString(TOKEN));
        
        try {
        	botApi.registerBot(bot);
  
        	bot.execute(new SendMessage()
        			.setChatId(chatId)
                    .setText(""Bot loaded successfully! "" + Emoji.SMILING_FACE_WITH_SMILING_EYES
            ));
        } catch (TelegramApiException e) {
            logger.warning(e.getMessage());
        }
        
        logger.info(""Alert was initialized successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'cfg', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'this', '.', 'cfg', ' ', '=', ' ', 'cfg', ';', '\n', '        ', 'logger', ' ', '=', ' ', 'Logger', '.', 'getLogger', '(', '""', 'TelegramAlert', '""', ')', ';', '\n', '        ', 'String', ' ', 'logPath', ' ', '=', ' ', 'cfg', '.', 'getString', '(', 'LOG_FILE', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', '!', 'logPath', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t        ', 'try', ' ', '{', '\n', '\t        \t', 'FileHandler', ' ', 'handler', ' ', '=', ' ', 'new', ' ', 'FileHandler', '(', 'logPath', ',', ' ', 'true', ')', ';', '\n', '\t            ', 'logger', '.', 'addHandler', '(', 'handler', ')', ';', '\n', '\t            ', 'handler', '.', 'setFormatter', '(', 'new', ' ', 'SimpleFormatter', '(', ')', ')', ';', '\n', '\t        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', '|', ' ', 'SecurityException', ' ', 'ex', ')', ' ', '{', '\n', '\t            ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '\t        ', '}', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'ApiContextInitializer', '.', 'init', '(', ')', ';', '\n', '        ', '\n', '        ', 'TelegramBotsApi', ' ', 'botApi', ' ', '=', ' ', 'new', ' ', 'TelegramBotsApi', '(', ')', ';', '\n', '        ', 'chatId', ' ', '=', ' ', 'cfg', '.', 'getInt', '(', 'CHAT', ')', ';', '\n', '    \t', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramAlertBot', '(', 'cfg', '.', 'getString', '(', 'USERNAME', ')', ',', ' ', 'cfg', '.', 'getString', '(', 'TOKEN', ')', ')', ';', '\n', '        ', '\n', '        ', 'try', ' ', '{', '\n', '        \t', 'botApi', '.', 'registerBot', '(', 'bot', ')', ';', '\n', '  ', '\n', '        \t', 'bot', '.', 'execute', '(', 'new', ' ', 'SendMessage', '(', ')', '\n', '        \t\t\t', '.', 'setChatId', '(', 'chatId', ')', '\n', '                    ', '.', 'setText', '(', '""', 'Bot loaded successfully! ', '""', ' ', '+', ' ', 'Emoji', '.', 'SMILING_FACE_WITH_SMILING_EYES', '\n', '            ', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'TelegramApiException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'warning', '(', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Alert was initialized successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,ad1dedf922a496d796a4f0924f6f7d73172d82df,TelegramAlertNotification.java,call,"    public void call(Stream stream, AlertCondition.CheckResult checkResult) throws AlarmCallbackException {
    	try {
        	bot.execute(new SendMessage()",https://www.github.com/irgendwr/telegramalert/commit/ad1dedf922a496d796a4f0924f6f7d73172d82df,"    public void call(Stream stream, AlertCondition.CheckResult checkResult) throws AlarmCallbackException {
    	try {
        	bot.execute(new SendMessage()
","['    ', 'public', ' ', 'void', ' ', 'call', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'checkResult', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '    \t', 'try', ' ', '{', '\n', '        \t', 'bot', '.', 'execute', '(', 'new', ' ', 'SendMessage', '(', ')', '\n']"
master,ad1dedf922a496d796a4f0924f6f7d73172d82df,TelegramAlertNotification.java,createRequestMsg,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
        String title = stream.getTitle();
		List<String> backlog = getAlarmBacklog(checkResult);
		StringBuilder sb = new StringBuilder("""");
		sb.append(title);
		sb.append("":\n```"");
		
		for (String msg : backlog) {
            sb.append(msg);
            sb.append(""\n"");
        }
		sb.append(""```"");
		return sb.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/ad1dedf922a496d796a4f0924f6f7d73172d82df,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
        String title = stream.getTitle();
		List<String> backlog = getAlarmBacklog(checkResult);
		StringBuilder sb = new StringBuilder("""");
		sb.append(title);
		sb.append("":\n```"");
		
		for (String msg : backlog) {
            sb.append(msg);
            sb.append(""\n"");
        }
		sb.append(""```"");
		return sb.toString();
    }
","['    ', 'private', ' ', 'String', ' ', 'createRequestMsg', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'checkResult', ')', ' ', '{', '\n', '        ', 'String', ' ', 'title', ' ', '=', ' ', 'stream', '.', 'getTitle', '(', ')', ';', '\n', '\t\t', 'List', '<', 'String', '>', ' ', 'backlog', ' ', '=', ' ', 'getAlarmBacklog', '(', 'checkResult', ')', ';', '\n', '\t\t', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', '""', '""', ')', ';', '\n', '\t\t', 'sb', '.', 'append', '(', 'title', ')', ';', '\n', '\t\t', 'sb', '.', 'append', '(', '""', ':', '\\', 'n```', '""', ')', ';', '\n', '\t\t', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'msg', ' ', ':', ' ', 'backlog', ')', ' ', '{', '\n', '            ', 'sb', '.', 'append', '(', 'msg', ')', ';', '\n', '            ', 'sb', '.', 'append', '(', '""', '\\', 'n', '""', ')', ';', '\n', '        ', '}', '\n', '\t\t', 'sb', '.', 'append', '(', '""', '```', '""', ')', ';', '\n', '\t\t', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,ad1dedf922a496d796a4f0924f6f7d73172d82df,TelegramAlertNotification.java,checkConfiguration,"    public void checkConfiguration() throws ConfigurationException {
        if (!cfg.stringIsSet(TOKEN)) {
            throw new ConfigurationException(""Token is not set."");
        }
        if (!cfg.stringIsSet(USERNAME)) {
            throw new ConfigurationException(""Token is not set."");
        }

        if (!cfg.intIsSet(CHAT)) {
            throw new ConfigurationException(""Chat ID is not set."");",https://www.github.com/irgendwr/telegramalert/commit/ad1dedf922a496d796a4f0924f6f7d73172d82df,"    public void checkConfiguration() throws ConfigurationException {
        if (!cfg.stringIsSet(TOKEN)) {
            throw new ConfigurationException(""Token is not set."");
        }
        if (!cfg.stringIsSet(USERNAME)) {
            throw new ConfigurationException(""Token is not set."");
        }

        if (!cfg.intIsSet(CHAT)) {
            throw new ConfigurationException(""Chat ID is not set."");
","['    ', 'public', ' ', 'void', ' ', 'checkConfiguration', '(', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'if', ' ', '(', '!', 'cfg', '.', 'stringIsSet', '(', 'TOKEN', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'ConfigurationException', '(', '""', 'Token is not set.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', '!', 'cfg', '.', 'stringIsSet', '(', 'USERNAME', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'ConfigurationException', '(', '""', 'Token is not set.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'cfg', '.', 'intIsSet', '(', 'CHAT', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'ConfigurationException', '(', '""', 'Chat ID is not set.', '""', ')', ';', '\n']"
master,49419bdc66f4ae5588b3b8792f786cd725bc7e20,TelegramAlertNotification.java,initialize,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        logger = Logger.getLogger(""TelegramAlert"");
        String logPath = cfg.getString(LOG_FILE);
        
        if (!logPath.isEmpty()) {
	        try {
	        	FileHandler handler = new FileHandler(logPath, true);
	            logger.addHandler(handler);
	            handler.setFormatter(new SimpleFormatter());
	        } catch (IOException | SecurityException ex) {
	            ex.printStackTrace();
	        }
        }
        
        ApiContextInitializer.init();
        
        TelegramBotsApi botApi = new TelegramBotsApi();
    	bot = new TelegramAlertBot(cfg.getString(TOKEN));
        chatId = Long.parseLong(cfg.getString(CHAT));
        msgTemplate = cfg.getString(MESSAGE);
        webinterfaceUrl = cfg.getString(WEBINTERFACE_URL);
        
        if (!webinterfaceUrl.endsWith(""/"")) {
        	webinterfaceUrl = webinterfaceUrl + ""/"";
        }
        
        try {
        	botApi.registerBot(bot);
        } catch (TelegramApiException e) {
            logger.warning(e.getMessage());
        }
        
        logger.info(""Alert was initialized successfully"");
    }",https://www.github.com/irgendwr/telegramalert/commit/49419bdc66f4ae5588b3b8792f786cd725bc7e20,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        logger = Logger.getLogger(""TelegramAlert"");
        String logPath = cfg.getString(LOG_FILE);
        
        if (!logPath.isEmpty()) {
	        try {
	        	FileHandler handler = new FileHandler(logPath, true);
	            logger.addHandler(handler);
	            handler.setFormatter(new SimpleFormatter());
	        } catch (IOException | SecurityException ex) {
	            ex.printStackTrace();
	        }
        }
        
        ApiContextInitializer.init();
        
        TelegramBotsApi botApi = new TelegramBotsApi();
    	bot = new TelegramAlertBot(cfg.getString(TOKEN));
        chatId = Long.parseLong(cfg.getString(CHAT));
        msgTemplate = cfg.getString(MESSAGE);
        webinterfaceUrl = cfg.getString(WEBINTERFACE_URL);
        
        if (!webinterfaceUrl.endsWith(""/"")) {
        	webinterfaceUrl = webinterfaceUrl + ""/"";
        }
        
        try {
        	botApi.registerBot(bot);
        } catch (TelegramApiException e) {
            logger.warning(e.getMessage());
        }
        
        logger.info(""Alert was initialized successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'cfg', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'this', '.', 'cfg', ' ', '=', ' ', 'cfg', ';', '\n', '        ', 'logger', ' ', '=', ' ', 'Logger', '.', 'getLogger', '(', '""', 'TelegramAlert', '""', ')', ';', '\n', '        ', 'String', ' ', 'logPath', ' ', '=', ' ', 'cfg', '.', 'getString', '(', 'LOG_FILE', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', '!', 'logPath', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '\t        ', 'try', ' ', '{', '\n', '\t        \t', 'FileHandler', ' ', 'handler', ' ', '=', ' ', 'new', ' ', 'FileHandler', '(', 'logPath', ',', ' ', 'true', ')', ';', '\n', '\t            ', 'logger', '.', 'addHandler', '(', 'handler', ')', ';', '\n', '\t            ', 'handler', '.', 'setFormatter', '(', 'new', ' ', 'SimpleFormatter', '(', ')', ')', ';', '\n', '\t        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', '|', ' ', 'SecurityException', ' ', 'ex', ')', ' ', '{', '\n', '\t            ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '\t        ', '}', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'ApiContextInitializer', '.', 'init', '(', ')', ';', '\n', '        ', '\n', '        ', 'TelegramBotsApi', ' ', 'botApi', ' ', '=', ' ', 'new', ' ', 'TelegramBotsApi', '(', ')', ';', '\n', '    \t', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramAlertBot', '(', 'cfg', '.', 'getString', '(', 'TOKEN', ')', ')', ';', '\n', '        ', 'chatId', ' ', '=', ' ', 'Long', '.', 'parseLong', '(', 'cfg', '.', 'getString', '(', 'CHAT', ')', ')', ';', '\n', '        ', 'msgTemplate', ' ', '=', ' ', 'cfg', '.', 'getString', '(', 'MESSAGE', ')', ';', '\n', '        ', 'webinterfaceUrl', ' ', '=', ' ', 'cfg', '.', 'getString', '(', 'WEBINTERFACE_URL', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', '!', 'webinterfaceUrl', '.', 'endsWith', '(', '""', '/', '""', ')', ')', ' ', '{', '\n', '        \t', 'webinterfaceUrl', ' ', '=', ' ', 'webinterfaceUrl', ' ', '+', ' ', '""', '/', '""', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'try', ' ', '{', '\n', '        \t', 'botApi', '.', 'registerBot', '(', 'bot', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'TelegramApiException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'warning', '(', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Alert was initialized successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,49419bdc66f4ae5588b3b8792f786cd725bc7e20,TelegramAlertNotification.java,createRequestMsg,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
		String msg = msgTemplate;

		msg = msg.replaceAll(""(?i)%streamTitle%"", stream.getTitle());
		msg = msg.replaceAll(""(?i)%streamDescription%"", stream.getDescription());
		msg = msg.replaceAll(""(?i)%streamUrl%"", buildStreamLink(stream));
		msg = msg.replaceAll(""(?i)%alertDescription%"", checkResult.getTriggeredCondition().getDescription());
		
		StringBuilder backlog = new StringBuilder(""```\n"");
		getAlarmBacklog(checkResult).forEach(item -> {
			backlog.append(item);
			backlog.append(""\n"");
		});
		backlog.append(""```"");
		msg = msg.replaceAll(""(?i)%backlog%"", backlog.toString());
		
		return msg;
    }",https://www.github.com/irgendwr/telegramalert/commit/49419bdc66f4ae5588b3b8792f786cd725bc7e20,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
		String msg = msgTemplate;

		msg = msg.replaceAll(""(?i)%streamTitle%"", stream.getTitle());
		msg = msg.replaceAll(""(?i)%streamDescription%"", stream.getDescription());
		msg = msg.replaceAll(""(?i)%streamUrl%"", buildStreamLink(stream));
		msg = msg.replaceAll(""(?i)%alertDescription%"", checkResult.getTriggeredCondition().getDescription());
		
		StringBuilder backlog = new StringBuilder(""```\n"");
		getAlarmBacklog(checkResult).forEach(item -> {
			backlog.append(item);
			backlog.append(""\n"");
		});
		backlog.append(""```"");
		msg = msg.replaceAll(""(?i)%backlog%"", backlog.toString());
		
		return msg;
    }
","['    ', 'private', ' ', 'String', ' ', 'createRequestMsg', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'checkResult', ')', ' ', '{', '\n', '\t\t', 'String', ' ', 'msg', ' ', '=', ' ', 'msgTemplate', ';', '\n', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%streamTitle%', '""', ',', ' ', 'stream', '.', 'getTitle', '(', ')', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%streamDescription%', '""', ',', ' ', 'stream', '.', 'getDescription', '(', ')', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%streamUrl%', '""', ',', ' ', 'buildStreamLink', '(', 'stream', ')', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%alertDescription%', '""', ',', ' ', 'checkResult', '.', 'getTriggeredCondition', '(', ')', '.', 'getDescription', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'StringBuilder', ' ', 'backlog', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', '""', '```', '\\', 'n', '""', ')', ';', '\n', '\t\t', 'getAlarmBacklog', '(', 'checkResult', ')', '.', 'forEach', '(', 'item', ' ', '-', '>', ' ', '{', '\n', '\t\t\t', 'backlog', '.', 'append', '(', 'item', ')', ';', '\n', '\t\t\t', 'backlog', '.', 'append', '(', '""', '\\', 'n', '""', ')', ';', '\n', '\t\t', '}', ')', ';', '\n', '\t\t', 'backlog', '.', 'append', '(', '""', '```', '""', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%backlog%', '""', ',', ' ', 'backlog', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'msg', ';', '\n', '    ', '}', '\n']"
master,49419bdc66f4ae5588b3b8792f786cd725bc7e20,TelegramAlertNotification.java,buildStreamLink,"    protected String buildStreamLink(Stream stream) {
        return webinterfaceUrl + ""streams/"" + stream.getId() + ""/messages?q=%2A&rangetype=relative&relative=3600"";
    }",https://www.github.com/irgendwr/telegramalert/commit/49419bdc66f4ae5588b3b8792f786cd725bc7e20,"    protected String buildStreamLink(Stream stream) {
        return webinterfaceUrl + ""streams/"" + stream.getId() + ""/messages?q=%2A&rangetype=relative&relative=3600"";
    }
","['    ', 'protected', ' ', 'String', ' ', 'buildStreamLink', '(', 'Stream', ' ', 'stream', ')', ' ', '{', '\n', '        ', 'return', ' ', 'webinterfaceUrl', ' ', '+', ' ', '""', 'streams/', '""', ' ', '+', ' ', 'stream', '.', 'getId', '(', ')', ' ', '+', ' ', '""', '/messages?q=%2A&rangetype=relative&relative=3600', '""', ';', '\n', '    ', '}', '\n']"
master,49419bdc66f4ae5588b3b8792f786cd725bc7e20,TelegramAlertNotification.java,buildMessageLink,"    protected String buildMessageLink(String index, String id) {
        return webinterfaceUrl + ""messages/"" + index + ""/"" + id;
    }",https://www.github.com/irgendwr/telegramalert/commit/49419bdc66f4ae5588b3b8792f786cd725bc7e20,"    protected String buildMessageLink(String index, String id) {
        return webinterfaceUrl + ""messages/"" + index + ""/"" + id;
    }
","['    ', 'protected', ' ', 'String', ' ', 'buildMessageLink', '(', 'String', ' ', 'index', ',', ' ', 'String', ' ', 'id', ')', ' ', '{', '\n', '        ', 'return', ' ', 'webinterfaceUrl', ' ', '+', ' ', '""', 'messages/', '""', ' ', '+', ' ', 'index', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'id', ';', '\n', '    ', '}', '\n']"
master,dd7bdb79ce51de16ac787ad597f38a73efa3428c,TelegramAlertNotification.java,initialize,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        
        logger = Logger.getLogger(""TelegramAlert"");
        bot = new TelegramBot(cfg.getString(TOKEN), cfg.getString(CHAT), logger);
        
        msgTemplate = cfg.getString(MESSAGE);
        webinterfaceUrl = cfg.getString(WEBINTERFACE_URL);
        
        if (!webinterfaceUrl.endsWith(""/"")) {
        	webinterfaceUrl = webinterfaceUrl + ""/"";
        }
        
        logger.info(""TelegramAlert was initialized successfully"");
    }",https://www.github.com/irgendwr/telegramalert/commit/dd7bdb79ce51de16ac787ad597f38a73efa3428c,"    public void initialize(Configuration cfg) throws AlarmCallbackConfigurationException {
        this.cfg = cfg;
        
        logger = Logger.getLogger(""TelegramAlert"");
        bot = new TelegramBot(cfg.getString(TOKEN), cfg.getString(CHAT), logger);
        
        msgTemplate = cfg.getString(MESSAGE);
        webinterfaceUrl = cfg.getString(WEBINTERFACE_URL);
        
        if (!webinterfaceUrl.endsWith(""/"")) {
        	webinterfaceUrl = webinterfaceUrl + ""/"";
        }
        
        logger.info(""TelegramAlert was initialized successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'cfg', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'this', '.', 'cfg', ' ', '=', ' ', 'cfg', ';', '\n', '        ', '\n', '        ', 'logger', ' ', '=', ' ', 'Logger', '.', 'getLogger', '(', '""', 'TelegramAlert', '""', ')', ';', '\n', '        ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramBot', '(', 'cfg', '.', 'getString', '(', 'TOKEN', ')', ',', ' ', 'cfg', '.', 'getString', '(', 'CHAT', ')', ',', ' ', 'logger', ')', ';', '\n', '        ', '\n', '        ', 'msgTemplate', ' ', '=', ' ', 'cfg', '.', 'getString', '(', 'MESSAGE', ')', ';', '\n', '        ', 'webinterfaceUrl', ' ', '=', ' ', 'cfg', '.', 'getString', '(', 'WEBINTERFACE_URL', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', '!', 'webinterfaceUrl', '.', 'endsWith', '(', '""', '/', '""', ')', ')', ' ', '{', '\n', '        \t', 'webinterfaceUrl', ' ', '=', ' ', 'webinterfaceUrl', ' ', '+', ' ', '""', '/', '""', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'logger', '.', 'info', '(', '""', 'TelegramAlert was initialized successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,dd7bdb79ce51de16ac787ad597f38a73efa3428c,TelegramAlertNotification.java,call,"    public void call(Stream stream, AlertCondition.CheckResult checkResult) throws AlarmCallbackException {
    	bot.sendMessage(createRequestMsg(stream, checkResult));
    }",https://www.github.com/irgendwr/telegramalert/commit/dd7bdb79ce51de16ac787ad597f38a73efa3428c,"    public void call(Stream stream, AlertCondition.CheckResult checkResult) throws AlarmCallbackException {
    	bot.sendMessage(createRequestMsg(stream, checkResult));
    }
","['    ', 'public', ' ', 'void', ' ', 'call', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'checkResult', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '    \t', 'bot', '.', 'sendMessage', '(', 'createRequestMsg', '(', 'stream', ',', ' ', 'checkResult', ')', ')', ';', '\n', '    ', '}', '\n']"
master,dd7bdb79ce51de16ac787ad597f38a73efa3428c,TelegramBot.java,sendMessage,"	public void sendMessage(String msg) {
		try {
			HttpClient client = HttpClients.createDefault();",https://www.github.com/irgendwr/telegramalert/commit/dd7bdb79ce51de16ac787ad597f38a73efa3428c,"	public void sendMessage(String msg) {
		try {
			HttpClient client = HttpClients.createDefault();
","['\t', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'HttpClient', ' ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramAlarmCallback.java,initialize,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
    	this.config = config;
    	
    	try {
    		checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }
        
        logger = Logger.getLogger(""TelegramAlert"");
        bot = new TelegramBot(config.getString(Config.TOKEN), config.getString(Config.CHAT), logger);
        
        logger.info(""Initialized successfully"");
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
    	this.config = config;
    	
    	try {
    		checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }
        
        logger = Logger.getLogger(""TelegramAlert"");
        bot = new TelegramBot(config.getString(Config.TOKEN), config.getString(Config.CHAT), logger);
        
        logger.info(""Initialized successfully"");
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '    \t', 'this', '.', 'config', ' ', '=', ' ', 'config', ';', '\n', '    \t', '\n', '    \t', 'try', ' ', '{', '\n', '    \t\t', 'checkConfiguration', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'ConfigurationException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'AlarmCallbackConfigurationException', '(', '""', 'Configuration error: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'logger', ' ', '=', ' ', 'Logger', '.', 'getLogger', '(', '""', 'TelegramAlert', '""', ')', ';', '\n', '        ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramBot', '(', 'config', '.', 'getString', '(', 'Config', '.', 'TOKEN', ')', ',', ' ', 'config', '.', 'getString', '(', 'Config', '.', 'CHAT', ')', ',', ' ', 'logger', ')', ';', '\n', '        ', '\n', '        ', 'logger', '.', 'info', '(', '""', 'Initialized successfully', '""', ')', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramAlarmCallback.java,createRequestMsg,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
		String msg = config.getString(Config.MESSAGE);

		msg = msg.replaceAll(""(?i)%streamTitle%"", stream.getTitle());
		msg = msg.replaceAll(""(?i)%streamDescription%"", stream.getDescription());
		msg = msg.replaceAll(""(?i)%streamUrl%"", buildStreamLink(stream));
		msg = msg.replaceAll(""(?i)%alertDescription%"", checkResult.getTriggeredCondition().getDescription());
		
		StringBuilder backlog = new StringBuilder(""```\n"");
		getAlarmBacklog(checkResult).forEach(item -> {
			backlog.append(item);
			backlog.append(""\n"");
		});
		backlog.append(""```"");
		msg = msg.replaceAll(""(?i)%backlog%"", backlog.toString());
		
		return msg;
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    private String createRequestMsg(Stream stream, AlertCondition.CheckResult checkResult) {
		String msg = config.getString(Config.MESSAGE);

		msg = msg.replaceAll(""(?i)%streamTitle%"", stream.getTitle());
		msg = msg.replaceAll(""(?i)%streamDescription%"", stream.getDescription());
		msg = msg.replaceAll(""(?i)%streamUrl%"", buildStreamLink(stream));
		msg = msg.replaceAll(""(?i)%alertDescription%"", checkResult.getTriggeredCondition().getDescription());
		
		StringBuilder backlog = new StringBuilder(""```\n"");
		getAlarmBacklog(checkResult).forEach(item -> {
			backlog.append(item);
			backlog.append(""\n"");
		});
		backlog.append(""```"");
		msg = msg.replaceAll(""(?i)%backlog%"", backlog.toString());
		
		return msg;
    }
","['    ', 'private', ' ', 'String', ' ', 'createRequestMsg', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'checkResult', ')', ' ', '{', '\n', '\t\t', 'String', ' ', 'msg', ' ', '=', ' ', 'config', '.', 'getString', '(', 'Config', '.', 'MESSAGE', ')', ';', '\n', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%streamTitle%', '""', ',', ' ', 'stream', '.', 'getTitle', '(', ')', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%streamDescription%', '""', ',', ' ', 'stream', '.', 'getDescription', '(', ')', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%streamUrl%', '""', ',', ' ', 'buildStreamLink', '(', 'stream', ')', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%alertDescription%', '""', ',', ' ', 'checkResult', '.', 'getTriggeredCondition', '(', ')', '.', 'getDescription', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'StringBuilder', ' ', 'backlog', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', '""', '```', '\\', 'n', '""', ')', ';', '\n', '\t\t', 'getAlarmBacklog', '(', 'checkResult', ')', '.', 'forEach', '(', 'item', ' ', '-', '>', ' ', '{', '\n', '\t\t\t', 'backlog', '.', 'append', '(', 'item', ')', ';', '\n', '\t\t\t', 'backlog', '.', 'append', '(', '""', '\\', 'n', '""', ')', ';', '\n', '\t\t', '}', ')', ';', '\n', '\t\t', 'backlog', '.', 'append', '(', '""', '```', '""', ')', ';', '\n', '\t\t', 'msg', ' ', '=', ' ', 'msg', '.', 'replaceAll', '(', '""', '(?i)%backlog%', '""', ',', ' ', 'backlog', '.', 'toString', '(', ')', ')', ';', '\n', '\t\t', '\n', '\t\t', 'return', ' ', 'msg', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramAlarmCallback.java,buildStreamLink,"    protected String buildStreamLink(Stream stream) {
        return getGraylogURL() + ""streams/"" + stream.getId() + ""/messages?q=%2A&rangetype=relative&relative=3600"";
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    protected String buildStreamLink(Stream stream) {
        return getGraylogURL() + ""streams/"" + stream.getId() + ""/messages?q=%2A&rangetype=relative&relative=3600"";
    }
","['    ', 'protected', ' ', 'String', ' ', 'buildStreamLink', '(', 'Stream', ' ', 'stream', ')', ' ', '{', '\n', '        ', 'return', ' ', 'getGraylogURL', '(', ')', ' ', '+', ' ', '""', 'streams/', '""', ' ', '+', ' ', 'stream', '.', 'getId', '(', ')', ' ', '+', ' ', '""', '/messages?q=%2A&rangetype=relative&relative=3600', '""', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramAlarmCallback.java,buildMessageLink,"    protected String buildMessageLink(String index, String id) {
        return getGraylogURL() + ""messages/"" + index + ""/"" + id;
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    protected String buildMessageLink(String index, String id) {
        return getGraylogURL() + ""messages/"" + index + ""/"" + id;
    }
","['    ', 'protected', ' ', 'String', ' ', 'buildMessageLink', '(', 'String', ' ', 'index', ',', ' ', 'String', ' ', 'id', ')', ' ', '{', '\n', '        ', 'return', ' ', 'getGraylogURL', '(', ')', ' ', '+', ' ', '""', 'messages/', '""', ' ', '+', ' ', 'index', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'id', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramAlarmCallback.java,checkConfiguration,"    public void checkConfiguration() throws ConfigurationException {
    	TelegramAlarmCallbackConfig.check(config);
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    public void checkConfiguration() throws ConfigurationException {
    	TelegramAlarmCallbackConfig.check(config);
    }
","['    ', 'public', ' ', 'void', ' ', 'checkConfiguration', '(', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '    \t', 'TelegramAlarmCallbackConfig', '.', 'check', '(', 'config', ')', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramModule.java,configure,"    protected void configure() {
        addAlarmCallback(TelegramAlarmCallback.class);
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    protected void configure() {
        addAlarmCallback(TelegramAlarmCallback.class);
    }
","['    ', 'protected', ' ', 'void', ' ', 'configure', '(', ')', ' ', '{', '\n', '        ', 'addAlarmCallback', '(', 'TelegramAlarmCallback', '.', 'class', ')', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramPlugin.java,metadata,"    public PluginMetaData metadata() {
        return new TelegramPluginMetadata();
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    public PluginMetaData metadata() {
        return new TelegramPluginMetadata();
    }
","['    ', 'public', ' ', 'PluginMetaData', ' ', 'metadata', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'TelegramPluginMetadata', '(', ')', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramPlugin.java,modules,"    public Collection<PluginModule> modules () {
        return Collections.<PluginModule>singletonList(new TelegramModule());
    }",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"    public Collection<PluginModule> modules () {
        return Collections.<PluginModule>singletonList(new TelegramModule());
    }
","['    ', 'public', ' ', 'Collection', '<', 'PluginModule', '>', ' ', 'modules', ' ', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Collections', '.', '<', 'PluginModule', '>', 'singletonList', '(', 'new', ' ', 'TelegramModule', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramAlarmCallbackConfig.java,createRequest,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();
        // TODO: update to template engine
        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[%streamTitle%](%streamUrl%):\n%backlog%"",
        		""Message that will be sent, Placeholders: %streamTitle%, %streamDescription%, %streamUrl%, %alertDescription%, %backlog%"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));
        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """",
        		""ID of the chat that messages should be sent to"",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token you get from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );
        return configurationRequest;
	}",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();
        
        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[%streamTitle%](%streamUrl%):\n%backlog%"",
        		""Message that will be sent, Placeholders: %streamTitle%, %streamDescription%, %streamUrl%, %alertDescription%, %backlog%"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));
        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """",
        		""ID of the chat that messages should be sent to"",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token you get from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );
        return configurationRequest;
	}
","['\t', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '        ', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '        \t\t', '""', '[%streamTitle%](%streamUrl%):', '\\', 'n%backlog%', '""', ',', '\n', '        \t\t', '""', 'Message that will be sent, Placeholders: %streamTitle%, %streamDescription%, %streamUrl%, %alertDescription%, %backlog%', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', '""', 'ID of the chat that messages should be sent to', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', '""', 'HTTP API Token you get from @BotFather', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', '\n', '        ', ')', ';', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '\t', '}', '\n']"
master,dcfe46cf5beb1f2b533f35cd1736e770803554c0,TelegramAlarmCallbackConfig.java,check,"	public static void check(Configuration config) throws ConfigurationException {
		String[] mandetoryFields = {
			Config.MESSAGE,
			Config.CHAT,
			Config.TOKEN,
			Config.GRAYLOG_URL
		};
		
		for (String field : mandetoryFields) {
			if (!config.stringIsSet(field)) {",https://www.github.com/irgendwr/telegramalert/commit/dcfe46cf5beb1f2b533f35cd1736e770803554c0,"	public static void check(Configuration config) throws ConfigurationException {
		String[] mandetoryFields = {
			Config.MESSAGE,
			Config.CHAT,
			Config.TOKEN,
			Config.GRAYLOG_URL
		};
		
		for (String field : mandetoryFields) {
			if (!config.stringIsSet(field)) {
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'check', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '\t\t', 'String', '[', ']', ' ', 'mandetoryFields', ' ', '=', ' ', '{', '\n', '\t\t\t', 'Config', '.', 'MESSAGE', ',', '\n', '\t\t\t', 'Config', '.', 'CHAT', ',', '\n', '\t\t\t', 'Config', '.', 'TOKEN', ',', '\n', '\t\t\t', 'Config', '.', 'GRAYLOG_URL', '\n', '\t\t', '}', ';', '\n', '\t\t', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'field', ' ', ':', ' ', 'mandetoryFields', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'config', '.', 'stringIsSet', '(', 'field', ')', ')', ' ', '{', '\n']"
master,b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,TelegramAlarmCallback.java,initialize,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
    	this.config = config;
    	
    	try {
    		checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }
        
        bot = new TelegramBot(config);
    }",https://www.github.com/irgendwr/telegramalert/commit/b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
    	this.config = config;
    	
    	try {
    		checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }
        
        bot = new TelegramBot(config);
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '    \t', 'this', '.', 'config', ' ', '=', ' ', 'config', ';', '\n', '    \t', '\n', '    \t', 'try', ' ', '{', '\n', '    \t\t', 'checkConfiguration', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'ConfigurationException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'AlarmCallbackConfigurationException', '(', '""', 'Configuration error: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramBot', '(', 'config', ')', ';', '\n', '    ', '}', '\n']"
master,b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,TelegramAlarmCallback.java,call,"    public void call(Stream stream, AlertCondition.CheckResult result) throws AlarmCallbackException {
    	bot.sendMessage(buildMessage(stream, result));
    }",https://www.github.com/irgendwr/telegramalert/commit/b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,"    public void call(Stream stream, AlertCondition.CheckResult result) throws AlarmCallbackException {
    	bot.sendMessage(buildMessage(stream, result));
    }
","['    ', 'public', ' ', 'void', ' ', 'call', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'result', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '    \t', 'bot', '.', 'sendMessage', '(', 'buildMessage', '(', 'stream', ',', ' ', 'result', ')', ')', ';', '\n', '    ', '}', '\n']"
master,b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,TelegramAlarmCallback.java,buildMessage,"    private String buildMessage(Stream stream, AlertCondition.CheckResult result) {
        List<Message> backlog = getAlarmBacklog(result);
        Map<String, Object> model = getModel(stream, result, backlog);
        try {
            return templateEngine.transform(config.getString(Config.MESSAGE), model);",https://www.github.com/irgendwr/telegramalert/commit/b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,"    private String buildMessage(Stream stream, AlertCondition.CheckResult result) {
        List<Message> backlog = getAlarmBacklog(result);
        Map<String, Object> model = getModel(stream, result, backlog);
        try {
            return templateEngine.transform(config.getString(Config.MESSAGE), model);
","['    ', 'private', ' ', 'String', ' ', 'buildMessage', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'result', ')', ' ', '{', '\n', '        ', 'List', '<', 'Message', '>', ' ', 'backlog', ' ', '=', ' ', 'getAlarmBacklog', '(', 'result', ')', ';', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'model', ' ', '=', ' ', 'getModel', '(', 'stream', ',', ' ', 'result', ',', ' ', 'backlog', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'templateEngine', '.', 'transform', '(', 'config', '.', 'getString', '(', 'Config', '.', 'MESSAGE', ')', ',', ' ', 'model', ')', ';', '\n']"
master,b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,TelegramAlarmCallbackConfig.java,createRequest,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();
        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
        		""```\n"" +
                ""${foreach backlog message}\n"" +
        		""${message}\n"" +
                ""${end}\n"" +
                ""```"",
        		""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));
        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """", """",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );
        return configurationRequest;
	}",https://www.github.com/irgendwr/telegramalert/commit/b2de2398eccb0a5d1a29d8da76d47e310be4fa9b,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();
        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
        		""```\n"" +
                ""${foreach backlog message}\n"" +
        		""${message}\n"" +
                ""${end}\n"" +
                ""```"",
        		""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));
        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """", """",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );
        return configurationRequest;
	}
","['\t', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '        \t\t', '""', '[${stream.title}](${stream_url}): ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '        \t\t', '""', '```', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '        \t\t', '""', '${message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '""', ',', '\n', '        \t\t', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', '\n', '        ', ')', ';', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '\t', '}', '\n']"
master,ed347a80e8e11f03d35df4473c859fdea27589fe,TelegramAlarmCallbackConfig.java,createRequest,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();
        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
        		""```\n"" +
                ""${foreach backlog message}\n"" +
        		""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
        		""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));
        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """", """",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );
        return configurationRequest;
	}",https://www.github.com/irgendwr/telegramalert/commit/ed347a80e8e11f03d35df4473c859fdea27589fe,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();
        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
        		""```\n"" +
                ""${foreach backlog message}\n"" +
        		""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
        		""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));
        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """", """",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );
        return configurationRequest;
	}
","['\t', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '        \t\t', '""', '[${stream.title}](${stream_url}): ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '        \t\t', '""', '```', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '        \t\t', '""', '${message.message}', '\\', 'n', '\\\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '""', ',', '\n', '        \t\t', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', '\n', '        ', ')', ';', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '\t', '}', '\n']"
master,295740da1a3c328c444af69aeeadc50c80ecc966,TelegramAlarmCallback.java,buildStreamLink,"    private String buildStreamLink(Stream stream) {
        return getGraylogURL() + ""streams/"" + stream.getId() + ""/messages?q=%2A&rangetype=relative&relative=3600"";
    }",https://www.github.com/irgendwr/telegramalert/commit/295740da1a3c328c444af69aeeadc50c80ecc966,"    private String buildStreamLink(Stream stream) {
        return getGraylogURL() + ""streams/"" + stream.getId() + ""/messages?q=%2A&rangetype=relative&relative=3600"";
    }
","['    ', 'private', ' ', 'String', ' ', 'buildStreamLink', '(', 'Stream', ' ', 'stream', ')', ' ', '{', '\n', '        ', 'return', ' ', 'getGraylogURL', '(', ')', ' ', '+', ' ', '""', 'streams/', '""', ' ', '+', ' ', 'stream', '.', 'getId', '(', ')', ' ', '+', ' ', '""', '/messages?q=%2A&rangetype=relative&relative=3600', '""', ';', '\n', '    ', '}', '\n']"
master,295740da1a3c328c444af69aeeadc50c80ecc966,TelegramAlarmCallback.java,buildMessageLink,"    private String buildMessageLink(String index, String id) {
        return getGraylogURL() + ""messages/"" + index + ""/"" + id;
    }",https://www.github.com/irgendwr/telegramalert/commit/295740da1a3c328c444af69aeeadc50c80ecc966,"    private String buildMessageLink(String index, String id) {
        return getGraylogURL() + ""messages/"" + index + ""/"" + id;
    }
","['    ', 'private', ' ', 'String', ' ', 'buildMessageLink', '(', 'String', ' ', 'index', ',', ' ', 'String', ' ', 'id', ')', ' ', '{', '\n', '        ', 'return', ' ', 'getGraylogURL', '(', ')', ' ', '+', ' ', '""', 'messages/', '""', ' ', '+', ' ', 'index', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'id', ';', '\n', '    ', '}', '\n']"
master,295740da1a3c328c444af69aeeadc50c80ecc966,TelegramBot.java,sendMessage,"	public void sendMessage(String msg) throws AlarmCallbackException {
		try {
			HttpClient client = HttpClients.createDefault();",https://www.github.com/irgendwr/telegramalert/commit/295740da1a3c328c444af69aeeadc50c80ecc966,"	public void sendMessage(String msg) throws AlarmCallbackException {
		try {
			HttpClient client = HttpClients.createDefault();
","['\t', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'HttpClient', ' ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n']"
master,295740da1a3c328c444af69aeeadc50c80ecc966,TelegramPlugin.java,modules,"    public Collection<PluginModule> modules () {
        return Collections.singletonList(new TelegramModule());
    }",https://www.github.com/irgendwr/telegramalert/commit/295740da1a3c328c444af69aeeadc50c80ecc966,"    public Collection<PluginModule> modules () {
        return Collections.singletonList(new TelegramModule());
    }
","['    ', 'public', ' ', 'Collection', '<', 'PluginModule', '>', ' ', 'modules', ' ', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Collections', '.', 'singletonList', '(', 'new', ' ', 'TelegramModule', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,295740da1a3c328c444af69aeeadc50c80ecc966,TelegramAlarmCallbackConfig.java,check,"	public static void check(Configuration config) throws ConfigurationException {
		String[] mandatoryFields = {
			Config.MESSAGE,
			Config.CHAT,
			Config.TOKEN,
			Config.GRAYLOG_URL
		};
		
		for (String field : mandatoryFields) {
			if (!config.stringIsSet(field)) {",https://www.github.com/irgendwr/telegramalert/commit/295740da1a3c328c444af69aeeadc50c80ecc966,"	public static void check(Configuration config) throws ConfigurationException {
		String[] mandatoryFields = {
			Config.MESSAGE,
			Config.CHAT,
			Config.TOKEN,
			Config.GRAYLOG_URL
		};
		
		for (String field : mandatoryFields) {
			if (!config.stringIsSet(field)) {
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'check', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '\t\t', 'String', '[', ']', ' ', 'mandatoryFields', ' ', '=', ' ', '{', '\n', '\t\t\t', 'Config', '.', 'MESSAGE', ',', '\n', '\t\t\t', 'Config', '.', 'CHAT', ',', '\n', '\t\t\t', 'Config', '.', 'TOKEN', ',', '\n', '\t\t\t', 'Config', '.', 'GRAYLOG_URL', '\n', '\t\t', '}', ';', '\n', '\t\t', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'field', ' ', ':', ' ', 'mandatoryFields', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'config', '.', 'stringIsSet', '(', 'field', ')', ')', ' ', '{', '\n']"
master,d00bd020d9c7afc02487aa03a2c609bd2a2becbf,TelegramBot.java,sendMessage,"	void sendMessage(String msg) throws AlarmCallbackException {
		try {
			HttpClient client = HttpClients.createDefault();",https://www.github.com/irgendwr/telegramalert/commit/d00bd020d9c7afc02487aa03a2c609bd2a2becbf,"	void sendMessage(String msg) throws AlarmCallbackException {
		try {
			HttpClient client = HttpClients.createDefault();
","['\t', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'HttpClient', ' ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n']"
master,d00bd020d9c7afc02487aa03a2c609bd2a2becbf,TelegramAlarmCallbackConfig.java,createRequest,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
        		""```\n"" +
                ""${foreach backlog message}\n"" +
        		""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
        		""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """", """",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));

		Map<String, String> parseMode = new HashMap<>(3);
		parseMode.put("""", ""none"");
		parseMode.put(""Markdown"", ""Markdown"");
		parseMode.put(""HTML"", ""HTML"");
		configurationRequest.addField(new DropdownField(
				Config.PARSE_MODE, ""Chat ID"", """", parseMode,
				""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
				ConfigurationField.Optional.NOT_OPTIONAL));

        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );

        return configurationRequest;
	}",https://www.github.com/irgendwr/telegramalert/commit/d00bd020d9c7afc02487aa03a2c609bd2a2becbf,"	public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
        		Config.MESSAGE, ""Message"",
        		""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
        		""```\n"" +
                ""${foreach backlog message}\n"" +
        		""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
        		""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
        		Config.CHAT, ""Chat ID"", """", """",
        		ConfigurationField.Optional.NOT_OPTIONAL
        ));

		Map<String, String> parseMode = new HashMap<>(3);
		parseMode.put("""", ""none"");
		parseMode.put(""Markdown"", ""Markdown"");
		parseMode.put(""HTML"", ""HTML"");
		configurationRequest.addField(new DropdownField(
				Config.PARSE_MODE, ""Chat ID"", """", parseMode,
				""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
				ConfigurationField.Optional.NOT_OPTIONAL));

        configurationRequest.addField(new TextField(
        		Config.TOKEN, ""Bot Token"", """",
        		""HTTP API Token from @BotFather"",
        		ConfigurationField.Optional.NOT_OPTIONAL,
        		Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
        		Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );

        return configurationRequest;
	}
","['\t', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '        \t\t', '""', '[${stream.title}](${stream_url}): ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '        \t\t', '""', '```', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '        \t\t', '""', '${message.message}', '\\', 'n', '\\\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '""', ',', '\n', '        \t\t', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '\t\t', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'parseMode', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '3', ')', ';', '\n', '\t\t', 'parseMode', '.', 'put', '(', '""', '""', ',', ' ', '""', 'none', '""', ')', ';', '\n', '\t\t', 'parseMode', '.', 'put', '(', '""', 'Markdown', '""', ',', ' ', '""', 'Markdown', '""', ')', ';', '\n', '\t\t', 'parseMode', '.', 'put', '(', '""', 'HTML', '""', ',', ' ', '""', 'HTML', '""', ')', ';', '\n', '\t\t', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '\t\t\t\t', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', 'parseMode', ',', '\n', '\t\t\t\t', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '\t\t\t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '        \t\t', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '        \t\t', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '        \t\t', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '        \t\t', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', '\n', '        ', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '\t', '}', '\n']"
master,d00bd020d9c7afc02487aa03a2c609bd2a2becbf,TelegramAlarmCallbackConfig.java,check,"	public static void check(Configuration config) throws ConfigurationException {
		String[] mandatoryFields = {
			Config.MESSAGE,
			Config.CHAT,
            Config.PARSE_MODE,
			Config.TOKEN,
			Config.GRAYLOG_URL
		};
		
		for (String field : mandatoryFields) {
			if (!config.stringIsSet(field)) {",https://www.github.com/irgendwr/telegramalert/commit/d00bd020d9c7afc02487aa03a2c609bd2a2becbf,"	public static void check(Configuration config) throws ConfigurationException {
		String[] mandatoryFields = {
			Config.MESSAGE,
			Config.CHAT,
            Config.PARSE_MODE,
			Config.TOKEN,
			Config.GRAYLOG_URL
		};
		
		for (String field : mandatoryFields) {
			if (!config.stringIsSet(field)) {
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'check', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '\t\t', 'String', '[', ']', ' ', 'mandatoryFields', ' ', '=', ' ', '{', '\n', '\t\t\t', 'Config', '.', 'MESSAGE', ',', '\n', '\t\t\t', 'Config', '.', 'CHAT', ',', '\n', '            ', 'Config', '.', 'PARSE_MODE', ',', '\n', '\t\t\t', 'Config', '.', 'TOKEN', ',', '\n', '\t\t\t', 'Config', '.', 'GRAYLOG_URL', '\n', '\t\t', '}', ';', '\n', '\t\t', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'field', ' ', ':', ' ', 'mandatoryFields', ')', ' ', '{', '\n', '\t\t\t', 'if', ' ', '(', '!', 'config', '.', 'stringIsSet', '(', 'field', ')', ')', ' ', '{', '\n']"
master,c9418d5a8506bbad69f40780e6e0062184259025,TelegramAlarmCallback.java,initialize,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
        this.config = config;

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }
        
        bot = new TelegramBot(config);
    }",https://www.github.com/irgendwr/telegramalert/commit/c9418d5a8506bbad69f40780e6e0062184259025,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
        this.config = config;

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }
        
        bot = new TelegramBot(config);
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'this', '.', 'config', ' ', '=', ' ', 'config', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'checkConfiguration', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'ConfigurationException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'AlarmCallbackConfigurationException', '(', '""', 'Configuration error: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramBot', '(', 'config', ')', ';', '\n', '    ', '}', '\n']"
master,c9418d5a8506bbad69f40780e6e0062184259025,TelegramAlarmCallback.java,call,"    public void call(Stream stream, AlertCondition.CheckResult result) throws AlarmCallbackException {
        bot.sendMessage(buildMessage(stream, result));
    }",https://www.github.com/irgendwr/telegramalert/commit/c9418d5a8506bbad69f40780e6e0062184259025,"    public void call(Stream stream, AlertCondition.CheckResult result) throws AlarmCallbackException {
        bot.sendMessage(buildMessage(stream, result));
    }
","['    ', 'public', ' ', 'void', ' ', 'call', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'result', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'bot', '.', 'sendMessage', '(', 'buildMessage', '(', 'stream', ',', ' ', 'result', ')', ')', ';', '\n', '    ', '}', '\n']"
master,c9418d5a8506bbad69f40780e6e0062184259025,TelegramAlarmCallback.java,checkConfiguration,"    public void checkConfiguration() throws ConfigurationException {
        TelegramAlarmCallbackConfig.check(config);
    }",https://www.github.com/irgendwr/telegramalert/commit/c9418d5a8506bbad69f40780e6e0062184259025,"    public void checkConfiguration() throws ConfigurationException {
        TelegramAlarmCallbackConfig.check(config);
    }
","['    ', 'public', ' ', 'void', ' ', 'checkConfiguration', '(', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'TelegramAlarmCallbackConfig', '.', 'check', '(', 'config', ')', ';', '\n', '    ', '}', '\n']"
master,c9418d5a8506bbad69f40780e6e0062184259025,TelegramBot.java,sendMessage,"    void sendMessage(String msg) throws AlarmCallbackException {
        try {
            HttpClient client = HttpClients.createDefault();",https://www.github.com/irgendwr/telegramalert/commit/c9418d5a8506bbad69f40780e6e0062184259025,"    void sendMessage(String msg) throws AlarmCallbackException {
        try {
            HttpClient client = HttpClients.createDefault();
","['    ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'HttpClient', ' ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n']"
master,c9418d5a8506bbad69f40780e6e0062184259025,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        Map<String, String> parseMode = new HashMap<>(3);
        parseMode.put("""", ""none"");
        parseMode.put(""Markdown"", ""Markdown"");
        parseMode.put(""HTML"", ""HTML"");
        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Chat ID"", """", parseMode,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL));

        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/c9418d5a8506bbad69f40780e6e0062184259025,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        Map<String, String> parseMode = new HashMap<>(3);
        parseMode.put("""", ""none"");
        parseMode.put(""Markdown"", ""Markdown"");
        parseMode.put(""HTML"", ""HTML"");
        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Chat ID"", """", parseMode,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL));

        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '[${stream.title}](${stream_url}): ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message}', '\\', 'n', '\\\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'parseMode', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '3', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', '""', ',', ' ', '""', 'none', '""', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'Markdown', '""', ',', ' ', '""', 'Markdown', '""', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'HTML', '""', ',', ' ', '""', 'HTML', '""', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', 'parseMode', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', '\n', '        ', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,c9418d5a8506bbad69f40780e6e0062184259025,TelegramAlarmCallbackConfig.java,check,"    public static void check(Configuration config) throws ConfigurationException {
        String[] mandatoryFields = {
            Config.MESSAGE,
            Config.CHAT,
            Config.PARSE_MODE,
            Config.TOKEN,
            Config.GRAYLOG_URL
        };

        for (String field : mandatoryFields) {
            if (!config.stringIsSet(field)) {",https://www.github.com/irgendwr/telegramalert/commit/c9418d5a8506bbad69f40780e6e0062184259025,"    public static void check(Configuration config) throws ConfigurationException {
        String[] mandatoryFields = {
            Config.MESSAGE,
            Config.CHAT,
            Config.PARSE_MODE,
            Config.TOKEN,
            Config.GRAYLOG_URL
        };

        for (String field : mandatoryFields) {
            if (!config.stringIsSet(field)) {
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'check', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'String', '[', ']', ' ', 'mandatoryFields', ' ', '=', ' ', '{', '\n', '            ', 'Config', '.', 'MESSAGE', ',', '\n', '            ', 'Config', '.', 'CHAT', ',', '\n', '            ', 'Config', '.', 'PARSE_MODE', ',', '\n', '            ', 'Config', '.', 'TOKEN', ',', '\n', '            ', 'Config', '.', 'GRAYLOG_URL', '\n', '        ', '}', ';', '\n', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'field', ' ', ':', ' ', 'mandatoryFields', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', '!', 'config', '.', 'stringIsSet', '(', 'field', ')', ')', ' ', '{', '\n']"
master,43e510f4611b855357c546c95e6537b4cc7676a0,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        Map<String, String> parseMode = new HashMap<>(3);
        parseMode.put(""text"", ""Text"");
        parseMode.put(""Markdown"", ""Markdown"");
        parseMode.put(""HTML"", ""HTML"");
        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ""Markdown"", parseMode,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL));

        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/43e510f4611b855357c546c95e6537b4cc7676a0,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        Map<String, String> parseMode = new HashMap<>(3);
        parseMode.put(""text"", ""Text"");
        parseMode.put(""Markdown"", ""Markdown"");
        parseMode.put(""HTML"", ""HTML"");
        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ""Markdown"", parseMode,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL));

        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL)
        );

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '[${stream.title}](${stream_url}): ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message}', '\\', 'n', '\\\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'parseMode', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '3', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'text', '""', ',', ' ', '""', 'Text', '""', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'Markdown', '""', ',', ' ', '""', 'Markdown', '""', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'HTML', '""', ',', ' ', '""', 'HTML', '""', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Parse Mode', '""', ',', ' ', '""', 'Markdown', '""', ',', ' ', 'parseMode', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ')', '\n', '        ', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,483b03e7ff83648bda351cd815c1ad05d5f377a5,TelegramBot.java,sendMessage,"    void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (!proxy.isEmpty()) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            client = HttpClients.createDefault();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        List<NameValuePair> params = new ArrayList<>(4);
        params.add(new BasicNameValuePair(""chat_id"", chat));
        params.add(new BasicNameValuePair(""text"", msg));
        params.add(new BasicNameValuePair(""disable_web_page_preview"", ""true""));
        if (!parseMode.equals(""text"")) {
            params.add(new BasicNameValuePair(""parse_mode"", parseMode));
        }

        try {
            request.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));",https://www.github.com/irgendwr/telegramalert/commit/483b03e7ff83648bda351cd815c1ad05d5f377a5,"    void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (!proxy.isEmpty()) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            client = HttpClients.createDefault();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        List<NameValuePair> params = new ArrayList<>(4);
        params.add(new BasicNameValuePair(""chat_id"", chat));
        params.add(new BasicNameValuePair(""text"", msg));
        params.add(new BasicNameValuePair(""disable_web_page_preview"", ""true""));
        if (!parseMode.equals(""text"")) {
            params.add(new BasicNameValuePair(""parse_mode"", parseMode));
        }

        try {
            request.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));
","['    ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', '!', 'proxy', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxy', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '\n', '                    ', '.', 'setRoutePlanner', '(', 'routePlanner', ')', '\n', '                    ', '.', 'build', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'List', '<', 'NameValuePair', '>', ' ', 'params', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', '4', ')', ';', '\n', '        ', 'params', '.', 'add', '(', 'new', ' ', 'BasicNameValuePair', '(', '""', 'chat_id', '""', ',', ' ', 'chat', ')', ')', ';', '\n', '        ', 'params', '.', 'add', '(', 'new', ' ', 'BasicNameValuePair', '(', '""', 'text', '""', ',', ' ', 'msg', ')', ')', ';', '\n', '        ', 'params', '.', 'add', '(', 'new', ' ', 'BasicNameValuePair', '(', '""', 'disable_web_page_preview', '""', ',', ' ', '""', 'true', '""', ')', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'parseMode', '.', 'equals', '(', '""', 'text', '""', ')', ')', ' ', '{', '\n', '            ', 'params', '.', 'add', '(', 'new', ' ', 'BasicNameValuePair', '(', '""', 'parse_mode', '""', ',', ' ', 'parseMode', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'request', '.', 'setEntity', '(', 'new', ' ', 'UrlEncodedFormEntity', '(', 'params', ',', ' ', '""', 'UTF-8', '""', ')', ')', ';', '\n']"
master,483b03e7ff83648bda351cd815c1ad05d5f377a5,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        Map<String, String> parseMode = new HashMap<>(3);
        parseMode.put(""text"", ""Text"");
        parseMode.put(""Markdown"", ""Markdown"");
        parseMode.put(""HTML"", ""HTML"");
        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ""Markdown"", parseMode,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", null,
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/483b03e7ff83648bda351cd815c1ad05d5f377a5,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        Map<String, String> parseMode = new HashMap<>(3);
        parseMode.put(""text"", ""Text"");
        parseMode.put(""Markdown"", ""Markdown"");
        parseMode.put(""HTML"", ""HTML"");
        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ""Markdown"", parseMode,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", null,
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '[${stream.title}](${stream_url}): ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message}', '\\', 'n', '\\\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'parseMode', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '3', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'text', '""', ',', ' ', '""', 'Text', '""', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'Markdown', '""', ',', ' ', '""', 'Markdown', '""', ')', ';', '\n', '        ', 'parseMode', '.', 'put', '(', '""', 'HTML', '""', ',', ' ', '""', 'HTML', '""', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Parse Mode', '""', ',', ' ', '""', 'Markdown', '""', ',', ' ', 'parseMode', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY', ',', ' ', '""', 'Proxy', '""', ',', ' ', 'null', ',', '\n', '                ', '""', 'Proxy address in the following format: <ProxyAddress>:<Port>', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,483b03e7ff83648bda351cd815c1ad05d5f377a5,TelegramAlarmCallbackConfig.java,check,"    public static void check(Configuration config) throws ConfigurationException {
        String[] mandatoryFields = {
            Config.MESSAGE,
            Config.CHAT,
            Config.PARSE_MODE,
            Config.TOKEN,
            Config.GRAYLOG_URL
        };

        for (String field : mandatoryFields) {
            if (!config.stringIsSet(field)) {
                throw new ConfigurationException(String.format(ERROR_NOT_SET, field));
            }
        }

        if (config.stringIsSet(Config.PROXY)) {
            String proxy = config.getString(Config.PROXY);",https://www.github.com/irgendwr/telegramalert/commit/483b03e7ff83648bda351cd815c1ad05d5f377a5,"    public static void check(Configuration config) throws ConfigurationException {
        String[] mandatoryFields = {
            Config.MESSAGE,
            Config.CHAT,
            Config.PARSE_MODE,
            Config.TOKEN,
            Config.GRAYLOG_URL
        };

        for (String field : mandatoryFields) {
            if (!config.stringIsSet(field)) {
                throw new ConfigurationException(String.format(ERROR_NOT_SET, field));
            }
        }

        if (config.stringIsSet(Config.PROXY)) {
            String proxy = config.getString(Config.PROXY);
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'check', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'String', '[', ']', ' ', 'mandatoryFields', ' ', '=', ' ', '{', '\n', '            ', 'Config', '.', 'MESSAGE', ',', '\n', '            ', 'Config', '.', 'CHAT', ',', '\n', '            ', 'Config', '.', 'PARSE_MODE', ',', '\n', '            ', 'Config', '.', 'TOKEN', ',', '\n', '            ', 'Config', '.', 'GRAYLOG_URL', '\n', '        ', '}', ';', '\n', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'field', ' ', ':', ' ', 'mandatoryFields', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', '!', 'config', '.', 'stringIsSet', '(', 'field', ')', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'ConfigurationException', '(', 'String', '.', 'format', '(', 'ERROR_NOT_SET', ',', ' ', 'field', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'config', '.', 'stringIsSet', '(', 'Config', '.', 'PROXY', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'proxy', ' ', '=', ' ', 'config', '.', 'getString', '(', 'Config', '.', 'PROXY', ')', ';', '\n']"
master,2619463f207ac137f473a7387586321cffd7589f,TelegramBot.java,sendMessage,"    void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (!proxy.isEmpty()) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            client = HttpClients.createDefault();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJsonStringEntity(msg));",https://www.github.com/irgendwr/telegramalert/commit/2619463f207ac137f473a7387586321cffd7589f,"    void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (!proxy.isEmpty()) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            client = HttpClients.createDefault();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJsonStringEntity(msg));
","['    ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', '!', 'proxy', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxy', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '\n', '                    ', '.', 'setRoutePlanner', '(', 'routePlanner', ')', '\n', '                    ', '.', 'build', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'request', '.', 'setEntity', '(', 'createJsonStringEntity', '(', 'msg', ')', ')', ';', '\n']"
master,2619463f207ac137f473a7387586321cffd7589f,TelegramBot.java,createJsonStringEntity,"    private HttpEntity createJsonStringEntity(String msg) {
        JSONObject params = new JSONObject();
        params.put(""chat_id"", chat);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", ""true"");
        if (!parseMode.equals(""text"")) {
            params.put(""parse_mode"", parseMode);
        }
        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }",https://www.github.com/irgendwr/telegramalert/commit/2619463f207ac137f473a7387586321cffd7589f,"    private HttpEntity createJsonStringEntity(String msg) {
        JSONObject params = new JSONObject();
        params.put(""chat_id"", chat);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", ""true"");
        if (!parseMode.equals(""text"")) {
            params.put(""parse_mode"", parseMode);
        }
        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }
","['    ', 'private', ' ', 'HttpEntity', ' ', 'createJsonStringEntity', '(', 'String', ' ', 'msg', ')', ' ', '{', '\n', '        ', 'JSONObject', ' ', 'params', ' ', '=', ' ', 'new', ' ', 'JSONObject', '(', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'chat_id', '""', ',', ' ', 'chat', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'text', '""', ',', ' ', 'msg', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'disable_web_page_preview', '""', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'parseMode', '.', 'equals', '(', '""', 'text', '""', ')', ')', ' ', '{', '\n', '            ', 'params', '.', 'put', '(', '""', 'parse_mode', '""', ',', ' ', 'parseMode', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'new', ' ', 'StringEntity', '(', 'params', '.', 'toString', '(', ')', ',', ' ', 'ContentType', '.', 'APPLICATION_JSON', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,TelegramAlarmCallback.java,initialize,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
        this.config = config;

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }

        ParseMode parseMode = ParseMode.fromString(config.getString(Config.PARSE_MODE));
        switch (parseMode.value()) {
            case ParseMode.MARKDOWN:
                templateEngine.setEncoder(new TelegramMarkdownEncoder());
                break;
            case ParseMode.HTML:
                templateEngine.setEncoder(new TelegramHTMLEncoder());
                break;
            default:
                templateEngine.setEncoder(null);
        }
        
        bot = new TelegramBot(config.getString(Config.TOKEN));
        bot.setProxy(config.getString(Config.PROXY));
        bot.setChat(config.getString(Config.CHAT));
        bot.setParseMode(parseMode);
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public void initialize(Configuration config) throws AlarmCallbackConfigurationException {
        this.config = config;

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }

        ParseMode parseMode = ParseMode.fromString(config.getString(Config.PARSE_MODE));
        switch (parseMode.value()) {
            case ParseMode.MARKDOWN:
                templateEngine.setEncoder(new TelegramMarkdownEncoder());
                break;
            case ParseMode.HTML:
                templateEngine.setEncoder(new TelegramHTMLEncoder());
                break;
            default:
                templateEngine.setEncoder(null);
        }
        
        bot = new TelegramBot(config.getString(Config.TOKEN));
        bot.setProxy(config.getString(Config.PROXY));
        bot.setChat(config.getString(Config.CHAT));
        bot.setParseMode(parseMode);
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'this', '.', 'config', ' ', '=', ' ', 'config', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'checkConfiguration', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'ConfigurationException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'AlarmCallbackConfigurationException', '(', '""', 'Configuration error: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'ParseMode', ' ', 'parseMode', ' ', '=', ' ', 'ParseMode', '.', 'fromString', '(', 'config', '.', 'getString', '(', 'Config', '.', 'PARSE_MODE', ')', ')', ';', '\n', '        ', 'switch', ' ', '(', 'parseMode', '.', 'value', '(', ')', ')', ' ', '{', '\n', '            ', 'case', ' ', 'ParseMode', '.', 'MARKDOWN', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'new', ' ', 'TelegramMarkdownEncoder', '(', ')', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'ParseMode', '.', 'HTML', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'new', ' ', 'TelegramHTMLEncoder', '(', ')', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'default', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'null', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramBot', '(', 'config', '.', 'getString', '(', 'Config', '.', 'TOKEN', ')', ')', ';', '\n', '        ', 'bot', '.', 'setProxy', '(', 'config', '.', 'getString', '(', 'Config', '.', 'PROXY', ')', ')', ';', '\n', '        ', 'bot', '.', 'setChat', '(', 'config', '.', 'getString', '(', 'Config', '.', 'CHAT', ')', ')', ';', '\n', '        ', 'bot', '.', 'setParseMode', '(', 'parseMode', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,ParseMode.java,text,"    public static ParseMode text() {
        return new ParseMode(TEXT);
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public static ParseMode text() {
        return new ParseMode(TEXT);
    }
","['    ', 'public', ' ', 'static', ' ', 'ParseMode', ' ', 'text', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'ParseMode', '(', 'TEXT', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,ParseMode.java,markdown,"    public static ParseMode markdown() {
        return new ParseMode(MARKDOWN);
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public static ParseMode markdown() {
        return new ParseMode(MARKDOWN);
    }
","['    ', 'public', ' ', 'static', ' ', 'ParseMode', ' ', 'markdown', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'ParseMode', '(', 'MARKDOWN', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,ParseMode.java,html,"    public static ParseMode html() {
        return new ParseMode(HTML);
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public static ParseMode html() {
        return new ParseMode(HTML);
    }
","['    ', 'public', ' ', 'static', ' ', 'ParseMode', ' ', 'html', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'ParseMode', '(', 'HTML', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,ParseMode.java,fromString,"    public static ParseMode fromString(String str) {
        for (String mode : VALUES) {
            if (mode.toLowerCase().equals(str.toLowerCase())) {
                return new ParseMode(mode);
            }
        }
        return text();
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public static ParseMode fromString(String str) {
        for (String mode : VALUES) {
            if (mode.toLowerCase().equals(str.toLowerCase())) {
                return new ParseMode(mode);
            }
        }
        return text();
    }
","['    ', 'public', ' ', 'static', ' ', 'ParseMode', ' ', 'fromString', '(', 'String', ' ', 'str', ')', ' ', '{', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'mode', ' ', ':', ' ', 'VALUES', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'mode', '.', 'toLowerCase', '(', ')', '.', 'equals', '(', 'str', '.', 'toLowerCase', '(', ')', ')', ')', ' ', '{', '\n', '                ', 'return', ' ', 'new', ' ', 'ParseMode', '(', 'mode', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'text', '(', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,ParseMode.java,equals,"    public boolean equals(Object obj) {
        if (obj instanceof ParseMode) {
            return equals((ParseMode) obj);",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public boolean equals(Object obj) {
        if (obj instanceof ParseMode) {
            return equals((ParseMode) obj);
","['    ', 'public', ' ', 'boolean', ' ', 'equals', '(', 'Object', ' ', 'obj', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'obj', ' ', 'instanceof', ' ', 'ParseMode', ')', ' ', '{', '\n', '            ', 'return', ' ', 'equals', '(', '(', 'ParseMode', ')', ' ', 'obj', ')', ';', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,ParseMode.java,equals,"    public boolean equals(ParseMode pm) {
        return pm.mode.equals(mode);
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public boolean equals(ParseMode pm) {
        return pm.mode.equals(mode);
    }
","['    ', 'public', ' ', 'boolean', ' ', 'equals', '(', 'ParseMode', ' ', 'pm', ')', ' ', '{', '\n', '        ', 'return', ' ', 'pm', '.', 'mode', '.', 'equals', '(', 'mode', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,TelegramBot.java,sendMessage,"    public void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (proxy == null || proxy.isEmpty()) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJSONEntity(msg));",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public void sendMessage(String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (proxy == null || proxy.isEmpty()) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJSONEntity(msg));
","['    ', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', 'proxy', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'proxy', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxy', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '\n', '                    ', '.', 'setRoutePlanner', '(', 'routePlanner', ')', '\n', '                    ', '.', 'build', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'request', '.', 'setEntity', '(', 'createJSONEntity', '(', 'msg', ')', ')', ';', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,TelegramBot.java,createJSONEntity,"    private HttpEntity createJSONEntity(String msg) {
        JSONObject params = new JSONObject();
        params.put(""chat_id"", chat);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", ""true"");
        if (!parseMode.equals(ParseMode.text())) {
            params.put(""parse_mode"", parseMode.value());
        }
        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    private HttpEntity createJSONEntity(String msg) {
        JSONObject params = new JSONObject();
        params.put(""chat_id"", chat);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", ""true"");
        if (!parseMode.equals(ParseMode.text())) {
            params.put(""parse_mode"", parseMode.value());
        }
        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }
","['    ', 'private', ' ', 'HttpEntity', ' ', 'createJSONEntity', '(', 'String', ' ', 'msg', ')', ' ', '{', '\n', '        ', 'JSONObject', ' ', 'params', ' ', '=', ' ', 'new', ' ', 'JSONObject', '(', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'chat_id', '""', ',', ' ', 'chat', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'text', '""', ',', ' ', 'msg', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'disable_web_page_preview', '""', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'parseMode', '.', 'equals', '(', 'ParseMode', '.', 'text', '(', ')', ')', ')', ' ', '{', '\n', '            ', 'params', '.', 'put', '(', '""', 'parse_mode', '""', ',', ' ', 'parseMode', '.', 'value', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'new', ' ', 'StringEntity', '(', 'params', '.', 'toString', '(', ')', ',', ' ', 'ContentType', '.', 'APPLICATION_JSON', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message;raw}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.MARKDOWN, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""[${stream.title}](${stream_url}): ${alert_condition.title}\n"" +
                ""```\n"" +
                ""${foreach backlog message}\n"" +
                ""${message.message;raw}\n\\n"" +
                ""${end}\n"" +
                ""```"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.MARKDOWN, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '[${stream.title}](${stream_url}): ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message;raw}', '\\', 'n', '\\\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '```', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Parse Mode', '""', ',', ' ', 'ParseMode', '.', 'MARKDOWN', ',', ' ', 'ParseMode', '.', 'OPTIONS', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY', ',', ' ', '""', 'Proxy', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Proxy address in the following format: <ProxyAddress>:<Port>', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,RawNoopRenderer.java,render,"    public String render(Object obj, String format, Locale locale) {
        return obj.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public String render(Object obj, String format, Locale locale) {
        return obj.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'render', '(', 'Object', ' ', 'obj', ',', ' ', 'String', ' ', 'format', ',', ' ', 'Locale', ' ', 'locale', ')', ' ', '{', '\n', '        ', 'return', ' ', 'obj', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,TelegramHTMLEncoder.java,encode,"    public String encode(String string) {
        StringBuilder sb = new StringBuilder((int) (string.length() * 1.2));
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);
            switch (c) {
                case '&':
                    sb.append(""&amp;"");
                    break;
                case '""':
                    sb.append(""&quot;"");
                    break;
                case '<':
                    sb.append(""&lt;"");
                    break;
                case '>':
                    sb.append(""&gt;"");
                    break;
                default:
                    sb.append(c);
            }
        }
        return sb.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public String encode(String string) {
        StringBuilder sb = new StringBuilder((int) (string.length() * 1.2));
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);
            switch (c) {
                case '&':
                    sb.append(""&amp;"");
                    break;
                case '""':
                    sb.append(""&quot;"");
                    break;
                case '<':
                    sb.append(""&lt;"");
                    break;
                case '>':
                    sb.append(""&gt;"");
                    break;
                default:
                    sb.append(c);
            }
        }
        return sb.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'encode', '(', 'String', ' ', 'string', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', '(', 'int', ')', ' ', '(', 'string', '.', 'length', '(', ')', ' ', '*', ' ', '1.2', ')', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'string', '.', 'length', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'char', ' ', 'c', ' ', '=', ' ', 'string', '.', 'charAt', '(', 'i', ')', ';', '\n', '            ', 'switch', ' ', '(', 'c', ')', ' ', '{', '\n', '                ', 'case', ' ', ""'&'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '&amp;', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', '\'""\'', ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '&quot;', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'<'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '&lt;', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'>'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '&gt;', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'default', ':', '\n', '                    ', 'sb', '.', 'append', '(', 'c', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,cd60e8b7a1517d01dcd871dc88b625b1658d7d33,TelegramMarkdownEncoder.java,encode,"    public String encode(String string) {
        StringBuilder sb = new StringBuilder((int) (string.length() * 1.2));
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);

            //TODO: test if this is reliable
            switch (c) {
                case '_':
                    sb.append(""\\_"");
                    break;
                case '*':
                    sb.append(""\\*"");
                    break;
                case '[':
                    sb.append(""\\["");
                    break;
                case '`':
                    sb.append(""\\`"");
                    break;
                default:
                    sb.append(c);
            }
        }
        return sb.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/cd60e8b7a1517d01dcd871dc88b625b1658d7d33,"    public String encode(String string) {
        StringBuilder sb = new StringBuilder((int) (string.length() * 1.2));
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);

            
            switch (c) {
                case '_':
                    sb.append(""\\_"");
                    break;
                case '*':
                    sb.append(""\\*"");
                    break;
                case '[':
                    sb.append(""\\["");
                    break;
                case '`':
                    sb.append(""\\`"");
                    break;
                default:
                    sb.append(c);
            }
        }
        return sb.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'encode', '(', 'String', ' ', 'string', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', '(', 'int', ')', ' ', '(', 'string', '.', 'length', '(', ')', ' ', '*', ' ', '1.2', ')', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'string', '.', 'length', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'char', ' ', 'c', ' ', '=', ' ', 'string', '.', 'charAt', '(', 'i', ')', ';', '\n', '\n', '            ', '\n', '            ', 'switch', ' ', '(', 'c', ')', ' ', '{', '\n', '                ', 'case', ' ', ""'_'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '_', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'*'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '*', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'['"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '[', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'`'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '`', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'default', ':', '\n', '                    ', 'sb', '.', 'append', '(', 'c', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat ID"", """", """",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '<a href=', '\\""', '${stream_url}', '\\""', '>${stream.title}</a>: ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '<code>${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}</code>', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat ID', '""', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Parse Mode', '""', ',', ' ', 'ParseMode', '.', 'HTML', ',', ' ', 'ParseMode', '.', 'OPTIONS', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY', ',', ' ', '""', 'Proxy', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Proxy address in the following format: <ProxyAddress>:<Port>', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,RawBracketsRenderer.java,render,"    public String render(Object obj, String format, Locale locale) {
        return render(obj, format, locale, null);
    }",https://www.github.com/irgendwr/telegramalert/commit/6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,"    public String render(Object obj, String format, Locale locale) {
        return render(obj, format, locale, null);
    }
","['    ', 'public', ' ', 'String', ' ', 'render', '(', 'Object', ' ', 'obj', ',', ' ', 'String', ' ', 'format', ',', ' ', 'Locale', ' ', 'locale', ')', ' ', '{', '\n', '        ', 'return', ' ', 'render', '(', 'obj', ',', ' ', 'format', ',', ' ', 'locale', ',', ' ', 'null', ')', ';', '\n', '    ', '}', '\n']"
master,6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,RawNoopRenderer.java,render,"    public String render(Object obj, String format, Locale locale, Map<String, Object> model) {
        return obj.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,"    public String render(Object obj, String format, Locale locale, Map<String, Object> model) {
        return obj.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'render', '(', 'Object', ' ', 'obj', ',', ' ', 'String', ' ', 'format', ',', ' ', 'Locale', ' ', 'locale', ',', ' ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'model', ')', ' ', '{', '\n', '        ', 'return', ' ', 'obj', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,TelegramMarkdownEncoder.java,encode,"    public String encode(String string) {
        StringBuilder sb = new StringBuilder((int) (string.length() * 1.2));
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);

            switch (c) {
                case '_':
                    sb.append(""\\_"");
                    break;
                case '*':
                    sb.append(""\\*"");
                    break;
                case '[':
                    sb.append(""\\["");
                    break;
                case '`':
                    sb.append(""\\`"");
                    break;
                default:
                    sb.append(c);
            }
        }
        return sb.toString();
    }",https://www.github.com/irgendwr/telegramalert/commit/6f3c430d7c5335e9790b952bcffcc64fc8a32a3e,"    public String encode(String string) {
        StringBuilder sb = new StringBuilder((int) (string.length() * 1.2));
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);

            switch (c) {
                case '_':
                    sb.append(""\\_"");
                    break;
                case '*':
                    sb.append(""\\*"");
                    break;
                case '[':
                    sb.append(""\\["");
                    break;
                case '`':
                    sb.append(""\\`"");
                    break;
                default:
                    sb.append(c);
            }
        }
        return sb.toString();
    }
","['    ', 'public', ' ', 'String', ' ', 'encode', '(', 'String', ' ', 'string', ')', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'sb', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', '(', 'int', ')', ' ', '(', 'string', '.', 'length', '(', ')', ' ', '*', ' ', '1.2', ')', ')', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'string', '.', 'length', '(', ')', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'char', ' ', 'c', ' ', '=', ' ', 'string', '.', 'charAt', '(', 'i', ')', ';', '\n', '\n', '            ', 'switch', ' ', '(', 'c', ')', ' ', '{', '\n', '                ', 'case', ' ', ""'_'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '_', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'*'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '*', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'['"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '[', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'case', ' ', ""'`'"", ':', '\n', '                    ', 'sb', '.', 'append', '(', '""', '\\\\', '`', '""', ')', ';', '\n', '                    ', 'break', ';', '\n', '                ', 'default', ':', '\n', '                    ', 'sb', '.', 'append', '(', 'c', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'sb', '.', 'toString', '(', ')', ';', '\n', '    ', '}', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramAlarmCallback.java,initialize,"    public void initialize(Configuration c) throws AlarmCallbackConfigurationException {
        config = new TelegramAlarmCallbackConfigValues(c);

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }

        ParseMode parseMode = config.getParseMode();
        switch (parseMode.value()) {
            case ParseMode.MARKDOWN:
                templateEngine.setEncoder(new TelegramMarkdownEncoder());
                break;
            case ParseMode.HTML:
                templateEngine.setEncoder(new TelegramHTMLEncoder());
                break;
            default:
                templateEngine.setEncoder(null);
        }
        
        bot = new TelegramBot(config.getToken());
        bot.setProxy(config.getProxy());
        bot.setParseMode(parseMode);
    }",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    public void initialize(Configuration c) throws AlarmCallbackConfigurationException {
        config = new TelegramAlarmCallbackConfigValues(c);

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }

        ParseMode parseMode = config.getParseMode();
        switch (parseMode.value()) {
            case ParseMode.MARKDOWN:
                templateEngine.setEncoder(new TelegramMarkdownEncoder());
                break;
            case ParseMode.HTML:
                templateEngine.setEncoder(new TelegramHTMLEncoder());
                break;
            default:
                templateEngine.setEncoder(null);
        }
        
        bot = new TelegramBot(config.getToken());
        bot.setProxy(config.getProxy());
        bot.setParseMode(parseMode);
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'c', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'config', ' ', '=', ' ', 'new', ' ', 'TelegramAlarmCallbackConfigValues', '(', 'c', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'checkConfiguration', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'ConfigurationException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'AlarmCallbackConfigurationException', '(', '""', 'Configuration error: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'ParseMode', ' ', 'parseMode', ' ', '=', ' ', 'config', '.', 'getParseMode', '(', ')', ';', '\n', '        ', 'switch', ' ', '(', 'parseMode', '.', 'value', '(', ')', ')', ' ', '{', '\n', '            ', 'case', ' ', 'ParseMode', '.', 'MARKDOWN', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'new', ' ', 'TelegramMarkdownEncoder', '(', ')', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'ParseMode', '.', 'HTML', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'new', ' ', 'TelegramHTMLEncoder', '(', ')', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'default', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'null', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramBot', '(', 'config', '.', 'getToken', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'setProxy', '(', 'config', '.', 'getProxy', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'setParseMode', '(', 'parseMode', ')', ';', '\n', '    ', '}', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramAlarmCallback.java,buildMessage,"    private String buildMessage(Stream stream, AlertCondition.CheckResult result) {
        List<Message> backlog = getAlarmBacklog(result);
        Map<String, Object> model = getModel(stream, result, backlog);
        try {
            return templateEngine.transform(config.getMessage(), model);",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    private String buildMessage(Stream stream, AlertCondition.CheckResult result) {
        List<Message> backlog = getAlarmBacklog(result);
        Map<String, Object> model = getModel(stream, result, backlog);
        try {
            return templateEngine.transform(config.getMessage(), model);
","['    ', 'private', ' ', 'String', ' ', 'buildMessage', '(', 'Stream', ' ', 'stream', ',', ' ', 'AlertCondition', '.', 'CheckResult', ' ', 'result', ')', ' ', '{', '\n', '        ', 'List', '<', 'Message', '>', ' ', 'backlog', ' ', '=', ' ', 'getAlarmBacklog', '(', 'result', ')', ';', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'model', ' ', '=', ' ', 'getModel', '(', 'stream', ',', ' ', 'result', ',', ' ', 'backlog', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'templateEngine', '.', 'transform', '(', 'config', '.', 'getMessage', '(', ')', ',', ' ', 'model', ')', ';', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramAlarmCallback.java,checkConfiguration,"    public void checkConfiguration() throws ConfigurationException {
        config.check();
    }",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    public void checkConfiguration() throws ConfigurationException {
        config.check();
    }
","['    ', 'public', ' ', 'void', ' ', 'checkConfiguration', '(', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'config', '.', 'check', '(', ')', ';', '\n', '    ', '}', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramBot.java,sendMessage,"    public void sendMessage(String chatID, String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (proxy == null || proxy.isEmpty()) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJSONEntity(chatID, msg));",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    public void sendMessage(String chatID, String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (proxy == null || proxy.isEmpty()) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJSONEntity(chatID, msg));
","['    ', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'chatID', ',', ' ', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', 'proxy', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'proxy', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxy', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '\n', '                    ', '.', 'setRoutePlanner', '(', 'routePlanner', ')', '\n', '                    ', '.', 'build', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'request', '.', 'setEntity', '(', 'createJSONEntity', '(', 'chatID', ',', ' ', 'msg', ')', ')', ';', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramBot.java,createJSONEntity,"    private HttpEntity createJSONEntity(String chatID, String msg) {
        JSONObject params = new JSONObject();
        params.put(""chat_id"", chatID);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", ""true"");
        if (!parseMode.equals(ParseMode.text())) {
            params.put(""parse_mode"", parseMode.value());
        }
        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    private HttpEntity createJSONEntity(String chatID, String msg) {
        JSONObject params = new JSONObject();
        params.put(""chat_id"", chatID);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", ""true"");
        if (!parseMode.equals(ParseMode.text())) {
            params.put(""parse_mode"", parseMode.value());
        }
        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }
","['    ', 'private', ' ', 'HttpEntity', ' ', 'createJSONEntity', '(', 'String', ' ', 'chatID', ',', ' ', 'String', ' ', 'msg', ')', ' ', '{', '\n', '        ', 'JSONObject', ' ', 'params', ' ', '=', ' ', 'new', ' ', 'JSONObject', '(', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'chat_id', '""', ',', ' ', 'chatID', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'text', '""', ',', ' ', 'msg', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'disable_web_page_preview', '""', ',', ' ', '""', 'true', '""', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'parseMode', '.', 'equals', '(', 'ParseMode', '.', 'text', '(', ')', ')', ')', ' ', '{', '\n', '            ', 'params', '.', 'put', '(', '""', 'parse_mode', '""', ',', ' ', 'parseMode', '.', 'value', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'new', ' ', 'StringEntity', '(', 'params', '.', 'toString', '(', ')', ',', ' ', 'ContentType', '.', 'APPLICATION_JSON', ')', ';', '\n', '    ', '}', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat IDs"", """", ""You can enter multiple, comma-separated chat IDs."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat IDs"", """", ""You can enter multiple, comma-separated chat IDs."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '<a href=', '\\""', '${stream_url}', '\\""', '>${stream.title}</a>: ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '<code>${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}</code>', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat IDs', '""', ',', ' ', '""', '""', ',', ' ', '""', 'You can enter multiple, comma-separated chat IDs.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Parse Mode', '""', ',', ' ', 'ParseMode', '.', 'HTML', ',', ' ', 'ParseMode', '.', 'OPTIONS', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY', ',', ' ', '""', 'Proxy', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Proxy address in the following format: <ProxyAddress>:<Port>', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramAlarmCallbackConfig.java,check,"    static void check(Configuration config) throws ConfigurationException {
        String[] mandatoryFields = {
            Config.MESSAGE,
            Config.CHAT,
            Config.PARSE_MODE,
            Config.TOKEN,
            Config.GRAYLOG_URL
        };

        for (String field : mandatoryFields) {
            if (!config.stringIsSet(field)) {
                throw new ConfigurationException(String.format(ERROR_NOT_SET, field));
            }
        }

        if (config.stringIsSet(Config.PROXY)) {
            String proxy = config.getString(Config.PROXY);",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    static void check(Configuration config) throws ConfigurationException {
        String[] mandatoryFields = {
            Config.MESSAGE,
            Config.CHAT,
            Config.PARSE_MODE,
            Config.TOKEN,
            Config.GRAYLOG_URL
        };

        for (String field : mandatoryFields) {
            if (!config.stringIsSet(field)) {
                throw new ConfigurationException(String.format(ERROR_NOT_SET, field));
            }
        }

        if (config.stringIsSet(Config.PROXY)) {
            String proxy = config.getString(Config.PROXY);
","['    ', 'static', ' ', 'void', ' ', 'check', '(', 'Configuration', ' ', 'config', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'String', '[', ']', ' ', 'mandatoryFields', ' ', '=', ' ', '{', '\n', '            ', 'Config', '.', 'MESSAGE', ',', '\n', '            ', 'Config', '.', 'CHAT', ',', '\n', '            ', 'Config', '.', 'PARSE_MODE', ',', '\n', '            ', 'Config', '.', 'TOKEN', ',', '\n', '            ', 'Config', '.', 'GRAYLOG_URL', '\n', '        ', '}', ';', '\n', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'field', ' ', ':', ' ', 'mandatoryFields', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', '!', 'config', '.', 'stringIsSet', '(', 'field', ')', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'ConfigurationException', '(', 'String', '.', 'format', '(', 'ERROR_NOT_SET', ',', ' ', 'field', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'config', '.', 'stringIsSet', '(', 'Config', '.', 'PROXY', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'proxy', ' ', '=', ' ', 'config', '.', 'getString', '(', 'Config', '.', 'PROXY', ')', ';', '\n']"
master,60737dcf66487b0c2394b4893309e2dbd1fb7e9b,TelegramAlarmCallbackConfigValues.java,check,"    public void check() throws ConfigurationException {
        TelegramAlarmCallbackConfig.check(config);
    }",https://www.github.com/irgendwr/telegramalert/commit/60737dcf66487b0c2394b4893309e2dbd1fb7e9b,"    public void check() throws ConfigurationException {
        TelegramAlarmCallbackConfig.check(config);
    }
","['    ', 'public', ' ', 'void', ' ', 'check', '(', ')', ' ', 'throws', ' ', 'ConfigurationException', ' ', '{', '\n', '        ', 'TelegramAlarmCallbackConfig', '.', 'check', '(', 'config', ')', ';', '\n', '    ', '}', '\n']"
master,73f322ff5f5e048eddd627fb619a5a7c88848c1c,TelegramAlarmCallback.java,initialize,"    public void initialize(Configuration c) throws AlarmCallbackConfigurationException {
        config = new TelegramAlarmCallbackConfigValues(c);

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }

        ParseMode parseMode = config.getParseMode();
        switch (parseMode.value()) {
            case ParseMode.MARKDOWN:
                templateEngine.setEncoder(new TelegramMarkdownEncoder());
                break;
            case ParseMode.HTML:
                templateEngine.setEncoder(new TelegramHTMLEncoder());
                break;
            default:
                templateEngine.setEncoder(null);
        }
        
        bot = new TelegramBot(config.getToken());
        bot.setProxy(config.getProxy());
        bot.setProxyUser(config.getProxyUser());
        bot.setProxyPassword(config.getProxyPassword());
        bot.setParseMode(parseMode);
    }",https://www.github.com/irgendwr/telegramalert/commit/73f322ff5f5e048eddd627fb619a5a7c88848c1c,"    public void initialize(Configuration c) throws AlarmCallbackConfigurationException {
        config = new TelegramAlarmCallbackConfigValues(c);

        try {
            checkConfiguration();
        } catch (ConfigurationException e) {
            throw new AlarmCallbackConfigurationException(""Configuration error: "" + e.getMessage());
        }

        ParseMode parseMode = config.getParseMode();
        switch (parseMode.value()) {
            case ParseMode.MARKDOWN:
                templateEngine.setEncoder(new TelegramMarkdownEncoder());
                break;
            case ParseMode.HTML:
                templateEngine.setEncoder(new TelegramHTMLEncoder());
                break;
            default:
                templateEngine.setEncoder(null);
        }
        
        bot = new TelegramBot(config.getToken());
        bot.setProxy(config.getProxy());
        bot.setProxyUser(config.getProxyUser());
        bot.setProxyPassword(config.getProxyPassword());
        bot.setParseMode(parseMode);
    }
","['    ', 'public', ' ', 'void', ' ', 'initialize', '(', 'Configuration', ' ', 'c', ')', ' ', 'throws', ' ', 'AlarmCallbackConfigurationException', ' ', '{', '\n', '        ', 'config', ' ', '=', ' ', 'new', ' ', 'TelegramAlarmCallbackConfigValues', '(', 'c', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'checkConfiguration', '(', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'ConfigurationException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'AlarmCallbackConfigurationException', '(', '""', 'Configuration error: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'ParseMode', ' ', 'parseMode', ' ', '=', ' ', 'config', '.', 'getParseMode', '(', ')', ';', '\n', '        ', 'switch', ' ', '(', 'parseMode', '.', 'value', '(', ')', ')', ' ', '{', '\n', '            ', 'case', ' ', 'ParseMode', '.', 'MARKDOWN', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'new', ' ', 'TelegramMarkdownEncoder', '(', ')', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'ParseMode', '.', 'HTML', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'new', ' ', 'TelegramHTMLEncoder', '(', ')', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'default', ':', '\n', '                ', 'templateEngine', '.', 'setEncoder', '(', 'null', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramBot', '(', 'config', '.', 'getToken', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'setProxy', '(', 'config', '.', 'getProxy', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'setProxyUser', '(', 'config', '.', 'getProxyUser', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'setProxyPassword', '(', 'config', '.', 'getProxyPassword', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'setParseMode', '(', 'parseMode', ')', ';', '\n', '    ', '}', '\n']"
master,73f322ff5f5e048eddd627fb619a5a7c88848c1c,TelegramBot.java,sendMessage,"    public void sendMessage(String chatID, String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (proxy == null || proxy.isEmpty()) {
            client = HttpClients.createDefault();
        } else if ((proxy_user == null || proxy_user.isEmpty()) || (proxy_password == null || proxy_password.isEmpty())) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            CredentialsProvider credsProvider = new BasicCredentialsProvider();
            credsProvider.setCredentials(
                    new AuthScope(AuthScope.ANY),
                    new UsernamePasswordCredentials(proxy_user, proxy_password));
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .setDefaultCredentialsProvider(credsProvider)
                    .build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJSONEntity(chatID, msg));",https://www.github.com/irgendwr/telegramalert/commit/73f322ff5f5e048eddd627fb619a5a7c88848c1c,"    public void sendMessage(String chatID, String msg) throws AlarmCallbackException {
        final CloseableHttpClient client;

        if (proxy == null || proxy.isEmpty()) {
            client = HttpClients.createDefault();
        } else if ((proxy_user == null || proxy_user.isEmpty()) || (proxy_password == null || proxy_password.isEmpty())) {
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .build();
        } else {
            CredentialsProvider credsProvider = new BasicCredentialsProvider();
            credsProvider.setCredentials(
                    new AuthScope(AuthScope.ANY),
                    new UsernamePasswordCredentials(proxy_user, proxy_password));
            String[] proxyArr = proxy.split("":"");
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            client = HttpClients.custom()
                    .setRoutePlanner(routePlanner)
                    .setDefaultCredentialsProvider(credsProvider)
                    .build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        try {
            request.setEntity(createJSONEntity(chatID, msg));
","['    ', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'chatID', ',', ' ', 'String', ' ', 'msg', ')', ' ', 'throws', ' ', 'AlarmCallbackException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', 'proxy', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'proxy', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', '(', 'proxy_user', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'proxy_user', '.', 'isEmpty', '(', ')', ')', ' ', '|', '|', ' ', '(', 'proxy_password', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'proxy_password', '.', 'isEmpty', '(', ')', ')', ')', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxy', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '\n', '                    ', '.', 'setRoutePlanner', '(', 'routePlanner', ')', '\n', '                    ', '.', 'build', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'CredentialsProvider', ' ', 'credsProvider', ' ', '=', ' ', 'new', ' ', 'BasicCredentialsProvider', '(', ')', ';', '\n', '            ', 'credsProvider', '.', 'setCredentials', '(', '\n', '                    ', 'new', ' ', 'AuthScope', '(', 'AuthScope', '.', 'ANY', ')', ',', '\n', '                    ', 'new', ' ', 'UsernamePasswordCredentials', '(', 'proxy_user', ',', ' ', 'proxy_password', ')', ')', ';', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxy', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '\n', '                    ', '.', 'setRoutePlanner', '(', 'routePlanner', ')', '\n', '                    ', '.', 'setDefaultCredentialsProvider', '(', 'credsProvider', ')', '\n', '                    ', '.', 'build', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'request', '.', 'setEntity', '(', 'createJSONEntity', '(', 'chatID', ',', ' ', 'msg', ')', ')', ';', '\n']"
master,73f322ff5f5e048eddd627fb619a5a7c88848c1c,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat IDs"", """", ""You can enter multiple, comma-separated chat IDs."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Http proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_USER, ""Proxy user"", """",
                ""Proxy user"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_PASSWORD, ""Proxy password"", """",
                ""Proxy password"",
                ConfigurationField.Optional.OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/73f322ff5f5e048eddd627fb619a5a7c88848c1c,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat IDs"", """", ""You can enter multiple, comma-separated chat IDs."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""Http proxy address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_USER, ""Proxy user"", """",
                ""Proxy user"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_PASSWORD, ""Proxy password"", """",
                ""Proxy password"",
                ConfigurationField.Optional.OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '<a href=', '\\""', '${stream_url}', '\\""', '>${stream.title}</a>: ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '<code>${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}</code>', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat IDs', '""', ',', ' ', '""', '""', ',', ' ', '""', 'You can enter multiple, comma-separated chat IDs.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Parse Mode', '""', ',', ' ', 'ParseMode', '.', 'HTML', ',', ' ', 'ParseMode', '.', 'OPTIONS', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY', ',', ' ', '""', 'Proxy', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Http proxy address in the following format: <ProxyAddress>:<Port>', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY_USER', ',', ' ', '""', 'Proxy user', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Proxy user', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY_PASSWORD', ',', ' ', '""', 'Proxy password', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Proxy password', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,01994c77a4d4ed926a23ef49e9112f830c888c97,TelegramAlarmCallbackConfig.java,createRequest,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat IDs"", """", ""You can enter multiple, comma-separated chat IDs."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""HTTP Proxy Address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_USER, ""Proxy User"", """",
                ""Proxy User"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_PASSWORD, ""Proxy Password"", """",
                ""Proxy Password"",
                ConfigurationField.Optional.OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        return configurationRequest;
    }",https://www.github.com/irgendwr/telegramalert/commit/01994c77a4d4ed926a23ef49e9112f830c888c97,"    public static ConfigurationRequest createRequest() {
        final ConfigurationRequest configurationRequest = new ConfigurationRequest();

        configurationRequest.addField(new TextField(
                Config.MESSAGE, ""Message"",
                ""<a href=\""${stream_url}\"">${stream.title}</a>: ${alert_condition.title}\n"" +
                ""<code>${foreach backlog message}\n"" +
                ""${message.message}\n"" +
                ""${end}</code>"",
                ""See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details."",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.TEXTAREA
        ));

        configurationRequest.addField(new TextField(
                Config.CHAT, ""Chat IDs"", """", ""You can enter multiple, comma-separated chat IDs."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));

        configurationRequest.addField(new DropdownField(
                Config.PARSE_MODE, ""Parse Mode"", ParseMode.HTML, ParseMode.OPTIONS,
                ""See https://core.telegram.org/bots/api#formatting-options for more information on formatting."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.TOKEN, ""Bot Token"", """",
                ""HTTP API Token from @BotFather"",
                ConfigurationField.Optional.NOT_OPTIONAL,
                Attribute.IS_PASSWORD
        ));
        configurationRequest.addField(new TextField(
                Config.GRAYLOG_URL, ""Graylog URL"", """",
                ""URL to your Graylog web interface. Used to build links in alarm notification."",
                ConfigurationField.Optional.NOT_OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY, ""Proxy"", """",
                ""HTTP Proxy Address in the following format: <ProxyAddress>:<Port>"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_USER, ""Proxy User"", """",
                ""Proxy User"",
                ConfigurationField.Optional.OPTIONAL
        ));
        configurationRequest.addField(new TextField(
                Config.PROXY_PASSWORD, ""Proxy Password"", """",
                ""Proxy Password"",
                ConfigurationField.Optional.OPTIONAL,
                Attribute.IS_PASSWORD
        ));

        return configurationRequest;
    }
","['    ', 'public', ' ', 'static', ' ', 'ConfigurationRequest', ' ', 'createRequest', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ConfigurationRequest', ' ', 'configurationRequest', ' ', '=', ' ', 'new', ' ', 'ConfigurationRequest', '(', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'MESSAGE', ',', ' ', '""', 'Message', '""', ',', '\n', '                ', '""', '<a href=', '\\""', '${stream_url}', '\\""', '>${stream.title}</a>: ${alert_condition.title}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '<code>${foreach backlog message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${message.message}', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '${end}</code>', '""', ',', '\n', '                ', '""', 'See http://docs.graylog.org/en/latest/pages/streams/alerts.html#email-alert-notification for more details.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'TEXTAREA', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'CHAT', ',', ' ', '""', 'Chat IDs', '""', ',', ' ', '""', '""', ',', ' ', '""', 'You can enter multiple, comma-separated chat IDs.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'DropdownField', '(', '\n', '                ', 'Config', '.', 'PARSE_MODE', ',', ' ', '""', 'Parse Mode', '""', ',', ' ', 'ParseMode', '.', 'HTML', ',', ' ', 'ParseMode', '.', 'OPTIONS', ',', '\n', '                ', '""', 'See https://core.telegram.org/bots/api#formatting-options for more information on formatting.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'TOKEN', ',', ' ', '""', 'Bot Token', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP API Token from @BotFather', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'GRAYLOG_URL', ',', ' ', '""', 'Graylog URL', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'URL to your Graylog web interface. Used to build links in alarm notification.', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'NOT_OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY', ',', ' ', '""', 'Proxy', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'HTTP Proxy Address in the following format: <ProxyAddress>:<Port>', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY_USER', ',', ' ', '""', 'Proxy User', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Proxy User', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', '\n', '        ', ')', ')', ';', '\n', '        ', 'configurationRequest', '.', 'addField', '(', 'new', ' ', 'TextField', '(', '\n', '                ', 'Config', '.', 'PROXY_PASSWORD', ',', ' ', '""', 'Proxy Password', '""', ',', ' ', '""', '""', ',', '\n', '                ', '""', 'Proxy Password', '""', ',', '\n', '                ', 'ConfigurationField', '.', 'Optional', '.', 'OPTIONAL', ',', '\n', '                ', 'Attribute', '.', 'IS_PASSWORD', '\n', '        ', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'configurationRequest', ';', '\n', '    ', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,toJobTriggerData,"    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }
","['    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,builder,"    public static Builder builder() {
        return Builder.create();
    }",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public static Builder builder() {
        return Builder.create();
    }
","['    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,validate,"    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        /*if (graylogURL().isEmpty()) { // TODO: remove?
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }*/
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }
        /*if (parseMode().isEmpty()) { // TODO: remove?
            validation.addError(FIELD_PARSE_MODE, ""Telegram Notification Parse Mode cannot be empty."");
        }*/

        return validation;
    }",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }
        

        return validation;
    }
","['    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,create,"        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
","['        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,botToken,"        public abstract Builder botToken(String botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(String graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(String parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                //.graylogURL(ValueReference.of(graylogURL())) // TODO: remove?
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                //.parseMode(ValueReference.of(parseMode())) // TODO: remove?
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder botToken(String botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,chats,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(String parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                //.graylogURL(ValueReference.of(graylogURL())) // TODO: remove?
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                //.parseMode(ValueReference.of(parseMode())) // TODO: remove?
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,messageTemplate,"        public abstract Builder messageTemplate(String messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(String parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                //.graylogURL(ValueReference.of(graylogURL())) // TODO: remove?
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                //.parseMode(ValueReference.of(parseMode())) // TODO: remove?
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder messageTemplate(String messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,proxyAddress,"        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                //.graylogURL(ValueReference.of(graylogURL())) // TODO: remove?
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                //.parseMode(ValueReference.of(parseMode())) // TODO: remove?
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,proxyUser,"        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                //.graylogURL(ValueReference.of(graylogURL())) // TODO: remove?
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                //.parseMode(ValueReference.of(parseMode())) // TODO: remove?
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,proxyPassword,"        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                //.graylogURL(ValueReference.of(graylogURL())) // TODO: remove?
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                //.parseMode(ValueReference.of(parseMode())) // TODO: remove?
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,build,"        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                //.graylogURL(ValueReference.of(graylogURL())) // TODO: remove?
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                //.parseMode(ValueReference.of(parseMode())) // TODO: remove?
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfig.java,toContentPackEntity,"    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
","['    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramModule.java,configure,"    protected void configure() {
        addNotificationType(TelegramEventNotificationConfig.TYPE_NAME,
                TelegramEventNotificationConfig.class,",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    protected void configure() {
        addNotificationType(TelegramEventNotificationConfig.TYPE_NAME,
                TelegramEventNotificationConfig.class,
","['    ', 'protected', ' ', 'void', ' ', 'configure', '(', ')', ' ', '{', '\n', '        ', 'addNotificationType', '(', 'TelegramEventNotificationConfig', '.', 'TYPE_NAME', ',', '\n', '                ', 'TelegramEventNotificationConfig', '.', 'class', ',', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,botToken,"    public abstract ValueReference botToken();

    /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
    @NotBlank
    public abstract ValueReference graylogURL();*/

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
    @NotBlank
    public abstract ValueReference parseMode();*/

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public abstract ValueReference botToken();

    

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'botToken', '(', ')', ';', '\n', '\n', '    ', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Set', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,chats,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
    @NotBlank
    public abstract ValueReference parseMode();*/

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Set', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,messageTemplate,"    public abstract ValueReference messageTemplate();

    /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
    @NotBlank
    public abstract ValueReference parseMode();*/

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public abstract ValueReference messageTemplate();

    

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,proxyAddress,"    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,proxyUser,"    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,proxyPassword,"    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,toBuilder,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,create,"        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
","['        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,botToken,"        public abstract Builder botToken(ValueReference botToken);

        /*@JsonProperty(FIELD_GRAYLOG_URL) // TODO: remove?
        public abstract Builder graylogURL(ValueReference graylogURL);*/

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder botToken(ValueReference botToken);

        

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,chats,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,messageTemplate,"        public abstract Builder messageTemplate(ValueReference messageTemplate);

        /*@JsonProperty(FIELD_PARSE_MODE) // TODO: remove?
        public abstract Builder parseMode(ValueReference parseMode);*/

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder messageTemplate(ValueReference messageTemplate);

        

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,proxyAddress,"        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,proxyUser,"        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,proxyPassword,"        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,build,"        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                //.graylogURL(graylogURL().asString(parameters)) // TODO: remove?
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) // TODO: is there a reason for leaving out ""parameters"" here?
                //.parseMode(parseMode().asString(parameters)) // TODO: remove?
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                
                .chats(chats())
                .messageTemplate(messageTemplate().asString()) 
                
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', ')', ')', ' ', '\n', '                ', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16113974760cd641ccd50768ee388955791d8ece,TelegramEventNotificationConfigEntity.java,toNativeEntity,"    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))",https://www.github.com/irgendwr/telegramalert/commit/16113974760cd641ccd50768ee388955791d8ece,"    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
","['    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotification.java,execute,"    public void execute(EventNotificationContext ctx) throws TemporaryEventNotificationException, PermanentEventNotificationException {
        final TelegramEventNotificationConfig config = (TelegramEventNotificationConfig) ctx.notificationConfig();

        Set<String> chats = config.chats();
        if (chats.isEmpty()) {
            final Notification notification = notificationService.buildNow()
                    .addNode(nodeId.toString())
                    .addType(Notification.Type.GENERIC)
                    .addSeverity(Notification.Severity.NORMAL)
                    .addDetail(""title"", ""No recipients (chat IDs) have been defined!"")
                    .addDetail(""description"", ""To fix this, go to the notification configuration and add at least one recipient (chat ID)."");
            notificationService.publishIfFirst(notification);
            return;
        }

        ImmutableList<MessageSummary> backlog = notificationCallbackService.getBacklogForEvent(ctx);
        final Map<String, Object> model = getModel(ctx, backlog, config);

        String message = buildMessage(config.messageTemplate(), model);
        TelegramSender bot = new TelegramSender(config.botToken(), ""HTML"");
        bot.proxyAddress(config.proxyAddress());
        bot.proxyUser(config.proxyUser());
        bot.proxyPassword(config.proxyPassword());

        try {
            for (String chatID : chats) {
                bot.sendMessage(chatID, message);
            }
        } catch (TelegramSender.TelegramSenderException e) {
            errorNotification(e);

            if (e.isPermanent()) {
                throw new PermanentEventNotificationException(""Failed to send Telegram messages. "" + e.getMessage());
            } else {
                throw new TemporaryEventNotificationException(""Failed to send Telegram messages. "" + e.getMessage());
            }

        } catch (Exception e) {
            errorNotification(e);

            throw new PermanentEventNotificationException(""Failed to send Telegram messages. "" + e.getMessage());
        }

        LOG.debug(""Sending Telegram Messages to chats <{}> using notification <{}>"",
                Strings.join(config.chats(), ','),",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public void execute(EventNotificationContext ctx) throws TemporaryEventNotificationException, PermanentEventNotificationException {
        final TelegramEventNotificationConfig config = (TelegramEventNotificationConfig) ctx.notificationConfig();

        Set<String> chats = config.chats();
        if (chats.isEmpty()) {
            final Notification notification = notificationService.buildNow()
                    .addNode(nodeId.toString())
                    .addType(Notification.Type.GENERIC)
                    .addSeverity(Notification.Severity.NORMAL)
                    .addDetail(""title"", ""No recipients (chat IDs) have been defined!"")
                    .addDetail(""description"", ""To fix this, go to the notification configuration and add at least one recipient (chat ID)."");
            notificationService.publishIfFirst(notification);
            return;
        }

        ImmutableList<MessageSummary> backlog = notificationCallbackService.getBacklogForEvent(ctx);
        final Map<String, Object> model = getModel(ctx, backlog, config);

        String message = buildMessage(config.messageTemplate(), model);
        TelegramSender bot = new TelegramSender(config.botToken(), ""HTML"");
        bot.proxyAddress(config.proxyAddress());
        bot.proxyUser(config.proxyUser());
        bot.proxyPassword(config.proxyPassword());

        try {
            for (String chatID : chats) {
                bot.sendMessage(chatID, message);
            }
        } catch (TelegramSender.TelegramSenderException e) {
            errorNotification(e);

            if (e.isPermanent()) {
                throw new PermanentEventNotificationException(""Failed to send Telegram messages. "" + e.getMessage());
            } else {
                throw new TemporaryEventNotificationException(""Failed to send Telegram messages. "" + e.getMessage());
            }

        } catch (Exception e) {
            errorNotification(e);

            throw new PermanentEventNotificationException(""Failed to send Telegram messages. "" + e.getMessage());
        }

        LOG.debug(""Sending Telegram Messages to chats <{}> using notification <{}>"",
                Strings.join(config.chats(), ','),
","['    ', 'public', ' ', 'void', ' ', 'execute', '(', 'EventNotificationContext', ' ', 'ctx', ')', ' ', 'throws', ' ', 'TemporaryEventNotificationException', ',', ' ', 'PermanentEventNotificationException', ' ', '{', '\n', '        ', 'final', ' ', 'TelegramEventNotificationConfig', ' ', 'config', ' ', '=', ' ', '(', 'TelegramEventNotificationConfig', ')', ' ', 'ctx', '.', 'notificationConfig', '(', ')', ';', '\n', '\n', '        ', 'Set', '<', 'String', '>', ' ', 'chats', ' ', '=', ' ', 'config', '.', 'chats', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'chats', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'Notification', ' ', 'notification', ' ', '=', ' ', 'notificationService', '.', 'buildNow', '(', ')', '\n', '                    ', '.', 'addNode', '(', 'nodeId', '.', 'toString', '(', ')', ')', '\n', '                    ', '.', 'addType', '(', 'Notification', '.', 'Type', '.', 'GENERIC', ')', '\n', '                    ', '.', 'addSeverity', '(', 'Notification', '.', 'Severity', '.', 'NORMAL', ')', '\n', '                    ', '.', 'addDetail', '(', '""', 'title', '""', ',', ' ', '""', 'No recipients (chat IDs) have been defined!', '""', ')', '\n', '                    ', '.', 'addDetail', '(', '""', 'description', '""', ',', ' ', '""', 'To fix this, go to the notification configuration and add at least one recipient (chat ID).', '""', ')', ';', '\n', '            ', 'notificationService', '.', 'publishIfFirst', '(', 'notification', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', ' ', '=', ' ', 'notificationCallbackService', '.', 'getBacklogForEvent', '(', 'ctx', ')', ';', '\n', '        ', 'final', ' ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'model', ' ', '=', ' ', 'getModel', '(', 'ctx', ',', ' ', 'backlog', ',', ' ', 'config', ')', ';', '\n', '\n', '        ', 'String', ' ', 'message', ' ', '=', ' ', 'buildMessage', '(', 'config', '.', 'messageTemplate', '(', ')', ',', ' ', 'model', ')', ';', '\n', '        ', 'TelegramSender', ' ', 'bot', ' ', '=', ' ', 'new', ' ', 'TelegramSender', '(', 'config', '.', 'botToken', '(', ')', ',', ' ', '""', 'HTML', '""', ')', ';', '\n', '        ', 'bot', '.', 'proxyAddress', '(', 'config', '.', 'proxyAddress', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'proxyUser', '(', 'config', '.', 'proxyUser', '(', ')', ')', ';', '\n', '        ', 'bot', '.', 'proxyPassword', '(', 'config', '.', 'proxyPassword', '(', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'for', ' ', '(', 'String', ' ', 'chatID', ' ', ':', ' ', 'chats', ')', ' ', '{', '\n', '                ', 'bot', '.', 'sendMessage', '(', 'chatID', ',', ' ', 'message', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'TelegramSender', '.', 'TelegramSenderException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'errorNotification', '(', 'e', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'e', '.', 'isPermanent', '(', ')', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'PermanentEventNotificationException', '(', '""', 'Failed to send Telegram messages. ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'TemporaryEventNotificationException', '(', '""', 'Failed to send Telegram messages. ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'errorNotification', '(', 'e', ')', ';', '\n', '\n', '            ', 'throw', ' ', 'new', ' ', 'PermanentEventNotificationException', '(', '""', 'Failed to send Telegram messages. ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'LOG', '.', 'debug', '(', '""', 'Sending Telegram Messages to chats <{}> using notification <{}>', '""', ',', '\n', '                ', 'Strings', '.', 'join', '(', 'config', '.', 'chats', '(', ')', ',', ' ', ""','"", ')', ',', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotification.java,buildMessage,"    private String buildMessage(String template, Map<String, Object> model) {
        return this.templateEngine.transform(template, model);
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    private String buildMessage(String template, Map<String, Object> model) {
        return this.templateEngine.transform(template, model);
    }
","['    ', 'private', ' ', 'String', ' ', 'buildMessage', '(', 'String', ' ', 'template', ',', ' ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'model', ')', ' ', '{', '\n', '        ', 'return', ' ', 'this', '.', 'templateEngine', '.', 'transform', '(', 'template', ',', ' ', 'model', ')', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotification.java,buildStreamWithUrl,"    private StreamModelData buildStreamWithUrl(Stream stream, EventNotificationContext ctx, String graylogURL) {
        String streamUrl = null;
        if(StringUtils.isNotBlank(graylogURL)) {
            streamUrl = StringUtils.appendIfMissing(graylogURL, ""/"") + ""streams/"" + stream.getId() + ""/search"";

            if(ctx.eventDefinition().isPresent()) {
                EventDefinitionDto eventDefinitionDto = ctx.eventDefinition().get();
                if(eventDefinitionDto.config() instanceof AggregationEventProcessorConfig) {
                    String query = ((AggregationEventProcessorConfig) eventDefinitionDto.config()).query();
                    try {
                        streamUrl += ""?q="" + URLEncoder.encode(query, ""UTF-8"");
                    } catch (UnsupportedEncodingException e) {
                        // url without query as fallback
                    }
                }
            }
        }

        return StreamModelData.builder()
                .id(stream.getId())",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    private StreamModelData buildStreamWithUrl(Stream stream, EventNotificationContext ctx, String graylogURL) {
        String streamUrl = null;
        if(StringUtils.isNotBlank(graylogURL)) {
            streamUrl = StringUtils.appendIfMissing(graylogURL, ""/"") + ""streams/"" + stream.getId() + ""/search"";

            if(ctx.eventDefinition().isPresent()) {
                EventDefinitionDto eventDefinitionDto = ctx.eventDefinition().get();
                if(eventDefinitionDto.config() instanceof AggregationEventProcessorConfig) {
                    String query = ((AggregationEventProcessorConfig) eventDefinitionDto.config()).query();
                    try {
                        streamUrl += ""?q="" + URLEncoder.encode(query, ""UTF-8"");
                    } catch (UnsupportedEncodingException e) {
                        
                    }
                }
            }
        }

        return StreamModelData.builder()
                .id(stream.getId())
","['    ', 'private', ' ', 'StreamModelData', ' ', 'buildStreamWithUrl', '(', 'Stream', ' ', 'stream', ',', ' ', 'EventNotificationContext', ' ', 'ctx', ',', ' ', 'String', ' ', 'graylogURL', ')', ' ', '{', '\n', '        ', 'String', ' ', 'streamUrl', ' ', '=', ' ', 'null', ';', '\n', '        ', 'if', '(', 'StringUtils', '.', 'isNotBlank', '(', 'graylogURL', ')', ')', ' ', '{', '\n', '            ', 'streamUrl', ' ', '=', ' ', 'StringUtils', '.', 'appendIfMissing', '(', 'graylogURL', ',', ' ', '""', '/', '""', ')', ' ', '+', ' ', '""', 'streams/', '""', ' ', '+', ' ', 'stream', '.', 'getId', '(', ')', ' ', '+', ' ', '""', '/search', '""', ';', '\n', '\n', '            ', 'if', '(', 'ctx', '.', 'eventDefinition', '(', ')', '.', 'isPresent', '(', ')', ')', ' ', '{', '\n', '                ', 'EventDefinitionDto', ' ', 'eventDefinitionDto', ' ', '=', ' ', 'ctx', '.', 'eventDefinition', '(', ')', '.', 'get', '(', ')', ';', '\n', '                ', 'if', '(', 'eventDefinitionDto', '.', 'config', '(', ')', ' ', 'instanceof', ' ', 'AggregationEventProcessorConfig', ')', ' ', '{', '\n', '                    ', 'String', ' ', 'query', ' ', '=', ' ', '(', '(', 'AggregationEventProcessorConfig', ')', ' ', 'eventDefinitionDto', '.', 'config', '(', ')', ')', '.', 'query', '(', ')', ';', '\n', '                    ', 'try', ' ', '{', '\n', '                        ', 'streamUrl', ' ', '+', '=', ' ', '""', '?q=', '""', ' ', '+', ' ', 'URLEncoder', '.', 'encode', '(', 'query', ',', ' ', '""', 'UTF-8', '""', ')', ';', '\n', '                    ', '}', ' ', 'catch', ' ', '(', 'UnsupportedEncodingException', ' ', 'e', ')', ' ', '{', '\n', '                        ', '\n', '                    ', '}', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'StreamModelData', '.', 'builder', '(', ')', '\n', '                ', '.', 'id', '(', 'stream', '.', 'getId', '(', ')', ')', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,chats,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Set', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,messageTemplate,"    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,proxyAddress,"    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,proxyUser,"    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,proxyPassword,"    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String proxyPassword();

    @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,validate,"    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }
","['    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,botToken,"        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,graylogURL,"        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,chats,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,messageTemplate,"        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,proxyAddress,"        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,proxyUser,"        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,proxyPassword,"        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfig.java,build,"        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramNotificationModule.java,configure,"    protected void configure() {
        /*
         * Register your plugin types here.
         *
         * Examples:
         *
         * addMessageInput(Class<? extends MessageInput>);
         * addMessageFilter(Class<? extends MessageFilter>);
         * addMessageOutput(Class<? extends MessageOutput>);
         * addPeriodical(Class<? extends Periodical>);
         * addAlarmCallback(Class<? extends AlarmCallback>);
         * addInitializer(Class<? extends Service>);
         * addRestResource(Class<? extends PluginRestResource>);
         *
         *
         * Add all configuration beans returned by getConfigBeans():
         *
         * addConfigBeans();
         */
        addNotificationType(TelegramEventNotificationConfig.TYPE_NAME,
                TelegramEventNotificationConfig.class,",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    protected void configure() {
        
        addNotificationType(TelegramEventNotificationConfig.TYPE_NAME,
                TelegramEventNotificationConfig.class,
","['    ', 'protected', ' ', 'void', ' ', 'configure', '(', ')', ' ', '{', '\n', '        ', '\n', '        ', 'addNotificationType', '(', 'TelegramEventNotificationConfig', '.', 'TYPE_NAME', ',', '\n', '                ', 'TelegramEventNotificationConfig', '.', 'class', ',', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramNotificationPlugin.java,metadata,"    public PluginMetaData metadata() {
        return new TelegramNotificationMetaData();
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public PluginMetaData metadata() {
        return new TelegramNotificationMetaData();
    }
","['    ', 'public', ' ', 'PluginMetaData', ' ', 'metadata', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'TelegramNotificationMetaData', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramNotificationPlugin.java,modules,"    public Collection<PluginModule> modules () {
        return Collections.<PluginModule>singletonList(new TelegramNotificationModule());
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public Collection<PluginModule> modules () {
        return Collections.<PluginModule>singletonList(new TelegramNotificationModule());
    }
","['    ', 'public', ' ', 'Collection', '<', 'PluginModule', '>', ' ', 'modules', ' ', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Collections', '.', '<', 'PluginModule', '>', 'singletonList', '(', 'new', ' ', 'TelegramNotificationModule', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramSender.java,proxyAddress,"    public void proxyAddress(String address) {
        proxyAddress = address;
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public void proxyAddress(String address) {
        proxyAddress = address;
    }
","['    ', 'public', ' ', 'void', ' ', 'proxyAddress', '(', 'String', ' ', 'address', ')', ' ', '{', '\n', '        ', 'proxyAddress', ' ', '=', ' ', 'address', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramSender.java,proxyPassword,"    public void proxyPassword(String password) {
        proxyPassword = password;
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public void proxyPassword(String password) {
        proxyPassword = password;
    }
","['    ', 'public', ' ', 'void', ' ', 'proxyPassword', '(', 'String', ' ', 'password', ')', ' ', '{', '\n', '        ', 'proxyPassword', ' ', '=', ' ', 'password', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramSender.java,sendMessage,"    public void sendMessage(String chatID, String message) throws TelegramSenderException {
        final CloseableHttpClient client;

        if (StringUtils.isBlank(proxyAddress)) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxyAddress.split("":"");
            if (proxyArr.length != 2) {
                throw new TelegramSenderException(""Invalid proxy address format"", true);
            }
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            HttpClientBuilder clientBuilder = HttpClients.custom().setRoutePlanner(routePlanner);

            if (!StringUtils.isBlank(proxyUser) || !StringUtils.isBlank(proxyPassword)) {
                CredentialsProvider credsProvider = new BasicCredentialsProvider();
                credsProvider.setCredentials(
                        new AuthScope(AuthScope.ANY),
                        new UsernamePasswordCredentials(proxyUser, proxyPassword));
                clientBuilder.setDefaultCredentialsProvider(credsProvider);
            }

            client = clientBuilder.build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        request.setEntity(createJSONEntity(chatID, message));

        try {
            HttpResponse response = client.execute(request);",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public void sendMessage(String chatID, String message) throws TelegramSenderException {
        final CloseableHttpClient client;

        if (StringUtils.isBlank(proxyAddress)) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxyAddress.split("":"");
            if (proxyArr.length != 2) {
                throw new TelegramSenderException(""Invalid proxy address format"", true);
            }
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            HttpClientBuilder clientBuilder = HttpClients.custom().setRoutePlanner(routePlanner);

            if (!StringUtils.isBlank(proxyUser) || !StringUtils.isBlank(proxyPassword)) {
                CredentialsProvider credsProvider = new BasicCredentialsProvider();
                credsProvider.setCredentials(
                        new AuthScope(AuthScope.ANY),
                        new UsernamePasswordCredentials(proxyUser, proxyPassword));
                clientBuilder.setDefaultCredentialsProvider(credsProvider);
            }

            client = clientBuilder.build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        request.setEntity(createJSONEntity(chatID, message));

        try {
            HttpResponse response = client.execute(request);
","['    ', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'chatID', ',', ' ', 'String', ' ', 'message', ')', ' ', 'throws', ' ', 'TelegramSenderException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isBlank', '(', 'proxyAddress', ')', ')', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxyAddress', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'if', ' ', '(', 'proxyArr', '.', 'length', ' ', '!', '=', ' ', '2', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'TelegramSenderException', '(', '""', 'Invalid proxy address format', '""', ',', ' ', 'true', ')', ';', '\n', '            ', '}', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'HttpClientBuilder', ' ', 'clientBuilder', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '.', 'setRoutePlanner', '(', 'routePlanner', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', '!', 'StringUtils', '.', 'isBlank', '(', 'proxyUser', ')', ' ', '|', '|', ' ', '!', 'StringUtils', '.', 'isBlank', '(', 'proxyPassword', ')', ')', ' ', '{', '\n', '                ', 'CredentialsProvider', ' ', 'credsProvider', ' ', '=', ' ', 'new', ' ', 'BasicCredentialsProvider', '(', ')', ';', '\n', '                ', 'credsProvider', '.', 'setCredentials', '(', '\n', '                        ', 'new', ' ', 'AuthScope', '(', 'AuthScope', '.', 'ANY', ')', ',', '\n', '                        ', 'new', ' ', 'UsernamePasswordCredentials', '(', 'proxyUser', ',', ' ', 'proxyPassword', ')', ')', ';', '\n', '                ', 'clientBuilder', '.', 'setDefaultCredentialsProvider', '(', 'credsProvider', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'client', ' ', '=', ' ', 'clientBuilder', '.', 'build', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'request', '.', 'setEntity', '(', 'createJSONEntity', '(', 'chatID', ',', ' ', 'message', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'HttpResponse', ' ', 'response', ' ', '=', ' ', 'client', '.', 'execute', '(', 'request', ')', ';', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramSender.java,createJSONEntity,"    private HttpEntity createJSONEntity(String chatID, String msg) {
        ObjectNode params = JsonNodeFactory.instance.objectNode();
        params.put(""chat_id"", chatID);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", true);
        if (StringUtils.isNotEmpty(parseMode)) {
            params.put(""parse_mode"", parseMode);
        }

        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    private HttpEntity createJSONEntity(String chatID, String msg) {
        ObjectNode params = JsonNodeFactory.instance.objectNode();
        params.put(""chat_id"", chatID);
        params.put(""text"", msg);
        params.put(""disable_web_page_preview"", true);
        if (StringUtils.isNotEmpty(parseMode)) {
            params.put(""parse_mode"", parseMode);
        }

        return new StringEntity(params.toString(), ContentType.APPLICATION_JSON);
    }
","['    ', 'private', ' ', 'HttpEntity', ' ', 'createJSONEntity', '(', 'String', ' ', 'chatID', ',', ' ', 'String', ' ', 'msg', ')', ' ', '{', '\n', '        ', 'ObjectNode', ' ', 'params', ' ', '=', ' ', 'JsonNodeFactory', '.', 'instance', '.', 'objectNode', '(', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'chat_id', '""', ',', ' ', 'chatID', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'text', '""', ',', ' ', 'msg', ')', ';', '\n', '        ', 'params', '.', 'put', '(', '""', 'disable_web_page_preview', '""', ',', ' ', 'true', ')', ';', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isNotEmpty', '(', 'parseMode', ')', ')', ' ', '{', '\n', '            ', 'params', '.', 'put', '(', '""', 'parse_mode', '""', ',', ' ', 'parseMode', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'new', ' ', 'StringEntity', '(', 'params', '.', 'toString', '(', ')', ',', ' ', 'ContentType', '.', 'APPLICATION_JSON', ')', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramSender.java,isPermanent,"        public Boolean isPermanent() {
            return permanent;
        }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public Boolean isPermanent() {
            return permanent;
        }
","['        ', 'public', ' ', 'Boolean', ' ', 'isPermanent', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'permanent', ';', '\n', '        ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,botToken,"    public abstract ValueReference botToken();

    @JsonProperty(FIELD_GRAYLOG_URL)
    @NotBlank
    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract ValueReference botToken();

    @JsonProperty(FIELD_GRAYLOG_URL)
    @NotBlank
    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'botToken', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'graylogURL', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Set', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,graylogURL,"    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'graylogURL', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Set', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,chats,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Set', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,messageTemplate,"    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,proxyAddress,"    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,proxyUser,"    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,proxyPassword,"    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,toBuilder,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,botToken,"        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,graylogURL,"        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,chats,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,messageTemplate,"        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,proxyAddress,"        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,proxyUser,"        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,proxyPassword,"        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,TelegramEventNotificationConfigEntity.java,build,"        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinition,"    public abstract Optional<EventDefinitionDto> eventDefinition();

    @JsonProperty(""event_definition_id"")
    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract Optional<EventDefinitionDto> eventDefinition();

    @JsonProperty(""event_definition_id"")
    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinition', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_type', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionId,"    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_type', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionType,"    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionTitle,"    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionDescription,"    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,jobDefinitionId,"    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,jobTriggerId,"    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,event,"    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,backlog,"    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,backlogSize,"    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract int backlogSize();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,graylogUrl,"    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,streams,"    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,builder,"    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }
","['    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,toBuilder,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinition,"        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionId,"        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionType,"        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionTitle,"        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,eventDefinitionDescription,"        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,jobDefinitionId,"        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,jobTriggerId,"        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,event,"        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,backlog,"        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,backlogSize,"        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,graylogUrl,"        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,MessageModelData.java,streams,"        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,id,"    public abstract String id();

    @JsonProperty(""title"")
    public abstract String title();

    @JsonProperty(""description"")
    public abstract String description();

    @JsonProperty(""url"")
    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String id();

    @JsonProperty(""title"")
    public abstract String title();

    @JsonProperty(""description"")
    public abstract String description();

    @JsonProperty(""url"")
    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'id', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'title', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'description', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'url', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_StreamModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'id', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'title', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,title,"    public abstract String title();

    @JsonProperty(""description"")
    public abstract String description();

    @JsonProperty(""url"")
    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String title();

    @JsonProperty(""description"")
    public abstract String description();

    @JsonProperty(""url"")
    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'title', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'description', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'url', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_StreamModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'id', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'title', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,description,"    public abstract String description();

    @JsonProperty(""url"")
    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String description();

    @JsonProperty(""url"")
    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'description', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'url', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_StreamModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'id', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'title', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,url,"    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract String url();

    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'url', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_StreamModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'id', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'title', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,builder,"    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public static Builder builder() {
        return new AutoValue_StreamModelData.Builder();
    }
","['    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_StreamModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,toBuilder,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {

        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'id', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'title', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,id,"        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder id(String id);

        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'id', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'title', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,title,"        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder title(String title);

        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'title', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,description,"        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder description(String description);

        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'description', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,6b6e2220adee6b3f955238e2bd71b9d371dec672,StreamModelData.java,url,"        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/6b6e2220adee6b3f955238e2bd71b9d371dec672,"        public abstract Builder url(String url);

        public abstract StreamModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'url', '(', 'String', ' ', 'url', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'StreamModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,8e0ab1a1d189bdaf75cc7d32bcf6c9f572154d9f,TelegramEventNotification.java,errorNotification,"    private void errorNotification(String error) {
        LOG.warn(error);

        final Notification systemNotification = notificationService.buildNow()
                .addNode(nodeId.toString())
                .addType(Notification.Type.GENERIC)
                .addSeverity(Notification.Severity.NORMAL)
                .addDetail(""title"", ""Failed to send Telegram messages."")
                .addDetail(""description"", error)
                .addDetail(""exception"", error);
        notificationService.publishIfFirst(systemNotification);
    }",https://www.github.com/irgendwr/telegramalert/commit/8e0ab1a1d189bdaf75cc7d32bcf6c9f572154d9f,"    private void errorNotification(String error) {
        LOG.warn(error);

        final Notification systemNotification = notificationService.buildNow()
                .addNode(nodeId.toString())
                .addType(Notification.Type.GENERIC)
                .addSeverity(Notification.Severity.NORMAL)
                .addDetail(""title"", ""Failed to send Telegram messages."")
                .addDetail(""description"", error)
                .addDetail(""exception"", error);
        notificationService.publishIfFirst(systemNotification);
    }
","['    ', 'private', ' ', 'void', ' ', 'errorNotification', '(', 'String', ' ', 'error', ')', ' ', '{', '\n', '        ', 'LOG', '.', 'warn', '(', 'error', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Notification', ' ', 'systemNotification', ' ', '=', ' ', 'notificationService', '.', 'buildNow', '(', ')', '\n', '                ', '.', 'addNode', '(', 'nodeId', '.', 'toString', '(', ')', ')', '\n', '                ', '.', 'addType', '(', 'Notification', '.', 'Type', '.', 'GENERIC', ')', '\n', '                ', '.', 'addSeverity', '(', 'Notification', '.', 'Severity', '.', 'NORMAL', ')', '\n', '                ', '.', 'addDetail', '(', '""', 'title', '""', ',', ' ', '""', 'Failed to send Telegram messages.', '""', ')', '\n', '                ', '.', 'addDetail', '(', '""', 'description', '""', ',', ' ', 'error', ')', '\n', '                ', '.', 'addDetail', '(', '""', 'exception', '""', ',', ' ', 'error', ')', ';', '\n', '        ', 'notificationService', '.', 'publishIfFirst', '(', 'systemNotification', ')', ';', '\n', '    ', '}', '\n']"
master,71899a95e0bca77c5774d98317af9d16a9ec28e0,TelegramEventNotificationConfig.java,chats,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/71899a95e0bca77c5774d98317af9d16a9ec28e0,"    public abstract Set<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Set', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,71899a95e0bca77c5774d98317af9d16a9ec28e0,TelegramEventNotificationConfig.java,messageTemplate,"    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/71899a95e0bca77c5774d98317af9d16a9ec28e0,"    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,71899a95e0bca77c5774d98317af9d16a9ec28e0,TelegramEventNotificationConfig.java,proxyAddress,"    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/71899a95e0bca77c5774d98317af9d16a9ec28e0,"    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,71899a95e0bca77c5774d98317af9d16a9ec28e0,TelegramEventNotificationConfig.java,proxyUser,"    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/71899a95e0bca77c5774d98317af9d16a9ec28e0,"    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,71899a95e0bca77c5774d98317af9d16a9ec28e0,TelegramEventNotificationConfig.java,proxyPassword,"    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/71899a95e0bca77c5774d98317af9d16a9ec28e0,"    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,16cf4d4ab71f865cd486098e9d441233a41891cf,TelegramNotificationPlugin.java,metadata,"    public PluginMetaData metadata() {
        return new MetaData();
    }",https://www.github.com/irgendwr/telegramalert/commit/16cf4d4ab71f865cd486098e9d441233a41891cf,"    public PluginMetaData metadata() {
        return new MetaData();
    }
","['    ', 'public', ' ', 'PluginMetaData', ' ', 'metadata', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'MetaData', '(', ')', ';', '\n', '    ', '}', '\n']"
master,56030e487a7866c6df82cc461cff855051b5d571,TelegramSender.java,sendMessage,"    public void sendMessage(String chatID, String message) throws TelegramSenderException {
        final CloseableHttpClient client;

        // Check if message is too long.
        // This may not be accurate as this doesn't take Telegrams entity parsing into account.
        // https://github.com/irgendwr/TelegramAlert/issues/37#issuecomment-811818760
        if (message.length() > 4096) {
            throw new TelegramSenderException(""The message you are sending is too long. Telegram messages are limited to 4096 characters."", true);
        }

        if (StringUtils.isBlank(proxyAddress)) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxyAddress.split("":"");
            if (proxyArr.length != 2) {
                throw new TelegramSenderException(""Invalid proxy address format"", true);
            }
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            HttpClientBuilder clientBuilder = HttpClients.custom().setRoutePlanner(routePlanner);

            if (!StringUtils.isBlank(proxyUser) || !StringUtils.isBlank(proxyPassword)) {
                CredentialsProvider credsProvider = new BasicCredentialsProvider();
                credsProvider.setCredentials(
                        new AuthScope(AuthScope.ANY),
                        new UsernamePasswordCredentials(proxyUser, proxyPassword));
                clientBuilder.setDefaultCredentialsProvider(credsProvider);
            }

            client = clientBuilder.build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        request.setEntity(createJSONEntity(chatID, message));

        try {
            HttpResponse response = client.execute(request);",https://www.github.com/irgendwr/telegramalert/commit/56030e487a7866c6df82cc461cff855051b5d571,"    public void sendMessage(String chatID, String message) throws TelegramSenderException {
        final CloseableHttpClient client;

        
        
        
        if (message.length() > 4096) {
            throw new TelegramSenderException(""The message you are sending is too long. Telegram messages are limited to 4096 characters."", true);
        }

        if (StringUtils.isBlank(proxyAddress)) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxyAddress.split("":"");
            if (proxyArr.length != 2) {
                throw new TelegramSenderException(""Invalid proxy address format"", true);
            }
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            HttpClientBuilder clientBuilder = HttpClients.custom().setRoutePlanner(routePlanner);

            if (!StringUtils.isBlank(proxyUser) || !StringUtils.isBlank(proxyPassword)) {
                CredentialsProvider credsProvider = new BasicCredentialsProvider();
                credsProvider.setCredentials(
                        new AuthScope(AuthScope.ANY),
                        new UsernamePasswordCredentials(proxyUser, proxyPassword));
                clientBuilder.setDefaultCredentialsProvider(credsProvider);
            }

            client = clientBuilder.build();
        }

        HttpPost request = new HttpPost(String.format(API, token, ""sendMessage""));

        request.setEntity(createJSONEntity(chatID, message));

        try {
            HttpResponse response = client.execute(request);
","['    ', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'chatID', ',', ' ', 'String', ' ', 'message', ')', ' ', 'throws', ' ', 'TelegramSenderException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', '\n', '        ', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'message', '.', 'length', '(', ')', ' ', '>', ' ', '4096', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'TelegramSenderException', '(', '""', 'The message you are sending is too long. Telegram messages are limited to 4096 characters.', '""', ',', ' ', 'true', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isBlank', '(', 'proxyAddress', ')', ')', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxyAddress', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'if', ' ', '(', 'proxyArr', '.', 'length', ' ', '!', '=', ' ', '2', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'TelegramSenderException', '(', '""', 'Invalid proxy address format', '""', ',', ' ', 'true', ')', ';', '\n', '            ', '}', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'HttpClientBuilder', ' ', 'clientBuilder', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '.', 'setRoutePlanner', '(', 'routePlanner', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', '!', 'StringUtils', '.', 'isBlank', '(', 'proxyUser', ')', ' ', '|', '|', ' ', '!', 'StringUtils', '.', 'isBlank', '(', 'proxyPassword', ')', ')', ' ', '{', '\n', '                ', 'CredentialsProvider', ' ', 'credsProvider', ' ', '=', ' ', 'new', ' ', 'BasicCredentialsProvider', '(', ')', ';', '\n', '                ', 'credsProvider', '.', 'setCredentials', '(', '\n', '                        ', 'new', ' ', 'AuthScope', '(', 'AuthScope', '.', 'ANY', ')', ',', '\n', '                        ', 'new', ' ', 'UsernamePasswordCredentials', '(', 'proxyUser', ',', ' ', 'proxyPassword', ')', ')', ';', '\n', '                ', 'clientBuilder', '.', 'setDefaultCredentialsProvider', '(', 'credsProvider', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'client', ' ', '=', ' ', 'clientBuilder', '.', 'build', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'String', '.', 'format', '(', 'API', ',', ' ', 'token', ',', ' ', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'request', '.', 'setEntity', '(', 'createJSONEntity', '(', 'chatID', ',', ' ', 'message', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'HttpResponse', ' ', 'response', ' ', '=', ' ', 'client', '.', 'execute', '(', 'request', ')', ';', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinition,"    public abstract Optional<EventDefinitionDto> eventDefinition();

    @JsonProperty(""event_definition_id"")
    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract Optional<EventDefinitionDto> eventDefinition();

    @JsonProperty(""event_definition_id"")
    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinition', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_type', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionId,"    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_type', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionType,"    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionTitle,"    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionDescription,"    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,jobDefinitionId,"    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,jobTriggerId,"    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,event,"    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,backlog,"    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract List<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,backlogSize,"    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,messageTooLong,"    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,graylogUrl,"    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,streams,"    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract List<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'List', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,toBuilder,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinition,"        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionId,"        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionType,"        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionTitle,"        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,eventDefinitionDescription,"        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,jobDefinitionId,"        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,jobTriggerId,"        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,event,"        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,backlog,"        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,backlogSize,"        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,47be0b35a09bd38fe82d8dcf6757de50c6750ece,MessageModelData.java,messageTooLong,"        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/47be0b35a09bd38fe82d8dcf6757de50c6750ece,"        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,TelegramEventNotificationConfig.java,chats,"    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract String messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract String proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract String proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract String proxyPassword();

    @Override @JsonIgnore
    public JobTriggerData toJobTriggerData(EventDto dto) {
        return EventNotificationExecutionJob.Data.builder().eventDto(dto).build();
    }

    public static Builder builder() {
        return Builder.create();
    }

    @Override @JsonIgnore
    public ValidationResult validate() {
        final ValidationResult validation = new ValidationResult();

        if (botToken().isEmpty()) {
            validation.addError(FIELD_BOT_TOKEN, ""Telegram Notification Bot Token cannot be empty."");
        }
        if (graylogURL().isEmpty()) {
            validation.addError(FIELD_GRAYLOG_URL, ""Telegram Notification Graylog URL cannot be empty."");
        }
        if (chats().isEmpty()) {
            validation.addError(FIELD_CHATS, ""Telegram Notification must have at least one recipient (Chat ID)."");
        }
        if (messageTemplate().isEmpty()) {
            validation.addError(FIELD_MESSAGE_TEMPLATE, ""Telegram Notification message template cannot be empty."");
        }

        return validation;
    }

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfig.Builder<Builder> {
        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfig.Builder()
                    .type(TYPE_NAME)
                    .chats(ImmutableSet.of());
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(String botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(String graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(String messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(String proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(String proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(String proxyPassword);


        public abstract TelegramEventNotificationConfig build();
    }

    @Override
    public EventNotificationConfigEntity toContentPackEntity(EntityDescriptorIds entityDescriptorIds) {
        return TelegramEventNotificationConfigEntity.builder()
                .botToken(ValueReference.of(botToken()))
                .graylogURL(ValueReference.of(graylogURL()))
                .chats(chats())
                .messageTemplate(ValueReference.of(messageTemplate()))
                .proxyAddress(ValueReference.of(proxyAddress()))
                .proxyUser(ValueReference.of(proxyUser()))
                .proxyPassword(ValueReference.of(proxyPassword()))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ImmutableSet', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'JobTriggerData', ' ', 'toJobTriggerData', '(', 'EventDto', ' ', 'dto', ')', ' ', '{', '\n', '        ', 'return', ' ', 'EventNotificationExecutionJob', '.', 'Data', '.', 'builder', '(', ')', '.', 'eventDto', '(', 'dto', ')', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', ' ', '@JsonIgnore', '\n', '    ', 'public', ' ', 'ValidationResult', ' ', 'validate', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'ValidationResult', ' ', 'validation', ' ', '=', ' ', 'new', ' ', 'ValidationResult', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'botToken', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_BOT_TOKEN', ',', ' ', '""', 'Telegram Notification Bot Token cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'graylogURL', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_GRAYLOG_URL', ',', ' ', '""', 'Telegram Notification Graylog URL cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'chats', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_CHATS', ',', ' ', '""', 'Telegram Notification must have at least one recipient (Chat ID).', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'messageTemplate', '(', ')', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'validation', '.', 'addError', '(', 'FIELD_MESSAGE_TEMPLATE', ',', ' ', '""', 'Telegram Notification message template cannot be empty.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'validation', ';', '\n', '    ', '}', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfig', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfig', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', '\n', '                    ', '.', 'chats', '(', 'ImmutableSet', '.', 'of', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'String', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'String', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'String', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'String', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'String', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'String', ' ', 'proxyPassword', ')', ';', '\n', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfig', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfigEntity', ' ', 'toContentPackEntity', '(', 'EntityDescriptorIds', ' ', 'entityDescriptorIds', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfigEntity', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'ValueReference', '.', 'of', '(', 'botToken', '(', ')', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'ValueReference', '.', 'of', '(', 'graylogURL', '(', ')', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'ValueReference', '.', 'of', '(', 'messageTemplate', '(', ')', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'ValueReference', '.', 'of', '(', 'proxyAddress', '(', ')', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'ValueReference', '.', 'of', '(', 'proxyUser', '(', ')', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'ValueReference', '.', 'of', '(', 'proxyPassword', '(', ')', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,TelegramSender.java,apiURL,"    private String apiURL(String command) {
        return API + ""/bot"" + token + ""/"" + command;
    }",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    private String apiURL(String command) {
        return API + ""/bot"" + token + ""/"" + command;
    }
","['    ', 'private', ' ', 'String', ' ', 'apiURL', '(', 'String', ' ', 'command', ')', ' ', '{', '\n', '        ', 'return', ' ', 'API', ' ', '+', ' ', '""', '/bot', '""', ' ', '+', ' ', 'token', ' ', '+', ' ', '""', '/', '""', ' ', '+', ' ', 'command', ';', '\n', '    ', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,TelegramSender.java,sendMessage,"    public void sendMessage(String chatID, String message) throws TelegramSenderException {
        final CloseableHttpClient client;

        if (StringUtils.isBlank(proxyAddress)) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxyAddress.split("":"");
            if (proxyArr.length != 2) {
                throw new TelegramSenderException(""Invalid proxy address format"", true);
            }
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            HttpClientBuilder clientBuilder = HttpClients.custom().setRoutePlanner(routePlanner);

            if (!StringUtils.isBlank(proxyUser) || !StringUtils.isBlank(proxyPassword)) {
                CredentialsProvider credsProvider = new BasicCredentialsProvider();
                credsProvider.setCredentials(
                        new AuthScope(AuthScope.ANY),
                        new UsernamePasswordCredentials(proxyUser, proxyPassword));
                clientBuilder.setDefaultCredentialsProvider(credsProvider);
            }

            client = clientBuilder.build();
        }

        HttpPost request = new HttpPost(apiURL(""sendMessage""));

        request.setEntity(createJSONEntity(chatID, message));

        try {
            HttpResponse response = client.execute(request);",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public void sendMessage(String chatID, String message) throws TelegramSenderException {
        final CloseableHttpClient client;

        if (StringUtils.isBlank(proxyAddress)) {
            client = HttpClients.createDefault();
        } else {
            String[] proxyArr = proxyAddress.split("":"");
            if (proxyArr.length != 2) {
                throw new TelegramSenderException(""Invalid proxy address format"", true);
            }
            HttpHost proxy = new HttpHost(proxyArr[0], Integer.parseInt(proxyArr[1]));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
            HttpClientBuilder clientBuilder = HttpClients.custom().setRoutePlanner(routePlanner);

            if (!StringUtils.isBlank(proxyUser) || !StringUtils.isBlank(proxyPassword)) {
                CredentialsProvider credsProvider = new BasicCredentialsProvider();
                credsProvider.setCredentials(
                        new AuthScope(AuthScope.ANY),
                        new UsernamePasswordCredentials(proxyUser, proxyPassword));
                clientBuilder.setDefaultCredentialsProvider(credsProvider);
            }

            client = clientBuilder.build();
        }

        HttpPost request = new HttpPost(apiURL(""sendMessage""));

        request.setEntity(createJSONEntity(chatID, message));

        try {
            HttpResponse response = client.execute(request);
","['    ', 'public', ' ', 'void', ' ', 'sendMessage', '(', 'String', ' ', 'chatID', ',', ' ', 'String', ' ', 'message', ')', ' ', 'throws', ' ', 'TelegramSenderException', ' ', '{', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'client', ';', '\n', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isBlank', '(', 'proxyAddress', ')', ')', ' ', '{', '\n', '            ', 'client', ' ', '=', ' ', 'HttpClients', '.', 'createDefault', '(', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'String', '[', ']', ' ', 'proxyArr', ' ', '=', ' ', 'proxyAddress', '.', 'split', '(', '""', ':', '""', ')', ';', '\n', '            ', 'if', ' ', '(', 'proxyArr', '.', 'length', ' ', '!', '=', ' ', '2', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'TelegramSenderException', '(', '""', 'Invalid proxy address format', '""', ',', ' ', 'true', ')', ';', '\n', '            ', '}', '\n', '            ', 'HttpHost', ' ', 'proxy', ' ', '=', ' ', 'new', ' ', 'HttpHost', '(', 'proxyArr', '[', '0', ']', ',', ' ', 'Integer', '.', 'parseInt', '(', 'proxyArr', '[', '1', ']', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'proxy', ')', ';', '\n', '            ', 'HttpClientBuilder', ' ', 'clientBuilder', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', '.', 'setRoutePlanner', '(', 'routePlanner', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', '!', 'StringUtils', '.', 'isBlank', '(', 'proxyUser', ')', ' ', '|', '|', ' ', '!', 'StringUtils', '.', 'isBlank', '(', 'proxyPassword', ')', ')', ' ', '{', '\n', '                ', 'CredentialsProvider', ' ', 'credsProvider', ' ', '=', ' ', 'new', ' ', 'BasicCredentialsProvider', '(', ')', ';', '\n', '                ', 'credsProvider', '.', 'setCredentials', '(', '\n', '                        ', 'new', ' ', 'AuthScope', '(', 'AuthScope', '.', 'ANY', ')', ',', '\n', '                        ', 'new', ' ', 'UsernamePasswordCredentials', '(', 'proxyUser', ',', ' ', 'proxyPassword', ')', ')', ';', '\n', '                ', 'clientBuilder', '.', 'setDefaultCredentialsProvider', '(', 'credsProvider', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'client', ' ', '=', ' ', 'clientBuilder', '.', 'build', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'HttpPost', ' ', 'request', ' ', '=', ' ', 'new', ' ', 'HttpPost', '(', 'apiURL', '(', '""', 'sendMessage', '""', ')', ')', ';', '\n', '\n', '        ', 'request', '.', 'setEntity', '(', 'createJSONEntity', '(', 'chatID', ',', ' ', 'message', ')', ')', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'HttpResponse', ' ', 'response', ' ', '=', ' ', 'client', '.', 'execute', '(', 'request', ')', ';', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,TelegramEventNotificationConfigEntity.java,botToken,"    public abstract ValueReference botToken();

    @JsonProperty(FIELD_GRAYLOG_URL)
    @NotBlank
    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract ValueReference botToken();

    @JsonProperty(FIELD_GRAYLOG_URL)
    @NotBlank
    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'botToken', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'graylogURL', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableSet', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,TelegramEventNotificationConfigEntity.java,graylogURL,"    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract ValueReference graylogURL();

    @JsonProperty(FIELD_CHATS)
    @NotBlank
    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'graylogURL', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableSet', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,TelegramEventNotificationConfigEntity.java,chats,"    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract ImmutableSet<String> chats();

    @JsonProperty(FIELD_MESSAGE_TEMPLATE)
    @NotBlank
    public abstract ValueReference messageTemplate();

    @JsonProperty(FIELD_PROXY_ADDRESS)
    public abstract ValueReference proxyAddress();

    @JsonProperty(FIELD_PROXY_USER)
    public abstract ValueReference proxyUser();

    @JsonProperty(FIELD_PROXY_PASSWORD)
    public abstract ValueReference proxyPassword();

    public static Builder builder() {
        return Builder.create();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder implements EventNotificationConfigEntity.Builder<Builder> {

        @JsonCreator
        public static Builder create() {
            return new AutoValue_TelegramEventNotificationConfigEntity.Builder()
                    .type(TYPE_NAME);
        }

        @JsonProperty(FIELD_BOT_TOKEN)
        public abstract Builder botToken(ValueReference botToken);

        @JsonProperty(FIELD_GRAYLOG_URL)
        public abstract Builder graylogURL(ValueReference graylogURL);

        @JsonProperty(FIELD_CHATS)
        public abstract Builder chats(Set<String> chats);

        @JsonProperty(FIELD_MESSAGE_TEMPLATE)
        public abstract Builder messageTemplate(ValueReference messageTemplate);

        @JsonProperty(FIELD_PROXY_ADDRESS)
        public abstract Builder proxyAddress(ValueReference proxyAddress);

        @JsonProperty(FIELD_PROXY_USER)
        public abstract Builder proxyUser(ValueReference proxyUser);

        @JsonProperty(FIELD_PROXY_PASSWORD)
        public abstract Builder proxyPassword(ValueReference proxyPassword);

        public abstract TelegramEventNotificationConfigEntity build();
    }

    @Override
    public EventNotificationConfig toNativeEntity(Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities) {
        return TelegramEventNotificationConfig.builder()
                .botToken(botToken().asString(parameters))
                .graylogURL(graylogURL().asString(parameters))
                .chats(chats())
                .messageTemplate(messageTemplate().asString(parameters))
                .proxyAddress(proxyAddress().asString(parameters))
                .proxyUser(proxyUser().asString(parameters))
                .proxyPassword(proxyPassword().asString(parameters))
                .build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ImmutableSet', '<', 'String', '>', ' ', 'chats', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '    ', '@NotBlank', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'messageTemplate', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyAddress', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyUser', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ValueReference', ' ', 'proxyPassword', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Builder', '.', 'create', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', 'implements', ' ', 'EventNotificationConfigEntity', '.', 'Builder', '<', 'Builder', '>', ' ', '{', '\n', '\n', '        ', '@JsonCreator', '\n', '        ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'create', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'AutoValue_TelegramEventNotificationConfigEntity', '.', 'Builder', '(', ')', '\n', '                    ', '.', 'type', '(', 'TYPE_NAME', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_BOT_TOKEN', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'botToken', '(', 'ValueReference', ' ', 'botToken', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_GRAYLOG_URL', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogURL', '(', 'ValueReference', ' ', 'graylogURL', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_CHATS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'chats', '(', 'Set', '<', 'String', '>', ' ', 'chats', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_MESSAGE_TEMPLATE', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTemplate', '(', 'ValueReference', ' ', 'messageTemplate', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_ADDRESS', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyAddress', '(', 'ValueReference', ' ', 'proxyAddress', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_USER', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyUser', '(', 'ValueReference', ' ', 'proxyUser', ')', ';', '\n', '\n', '        ', '@JsonProperty', '(', 'FIELD_PROXY_PASSWORD', ')', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'proxyPassword', '(', 'ValueReference', ' ', 'proxyPassword', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'TelegramEventNotificationConfigEntity', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'EventNotificationConfig', ' ', 'toNativeEntity', '(', 'Map', '<', 'String', ',', ' ', 'ValueReference', '>', ' ', 'parameters', ',', ' ', 'Map', '<', 'EntityDescriptor', ',', ' ', 'Object', '>', ' ', 'nativeEntities', ')', ' ', '{', '\n', '        ', 'return', ' ', 'TelegramEventNotificationConfig', '.', 'builder', '(', ')', '\n', '                ', '.', 'botToken', '(', 'botToken', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'graylogURL', '(', 'graylogURL', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'chats', '(', 'chats', '(', ')', ')', '\n', '                ', '.', 'messageTemplate', '(', 'messageTemplate', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyAddress', '(', 'proxyAddress', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyUser', '(', 'proxyUser', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'proxyPassword', '(', 'proxyPassword', '(', ')', '.', 'asString', '(', 'parameters', ')', ')', '\n', '                ', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,eventDefinition,"    public abstract Optional<EventDefinitionDto> eventDefinition();

    @JsonProperty(""event_definition_id"")
    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract Optional<EventDefinitionDto> eventDefinition();

    @JsonProperty(""event_definition_id"")
    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinition', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_type', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,eventDefinitionId,"    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract String eventDefinitionId();

    @JsonProperty(""event_definition_type"")
    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_type', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,eventDefinitionType,"    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract String eventDefinitionType();

    @JsonProperty(""event_definition_title"")
    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionType', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_title', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,eventDefinitionTitle,"    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract String eventDefinitionTitle();

    @JsonProperty(""event_definition_description"")
    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionTitle', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event_definition_description', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,eventDefinitionDescription,"    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract String eventDefinitionDescription();

    @JsonProperty(""job_definition_id"")
    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'eventDefinitionDescription', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_definition_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,jobDefinitionId,"    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract String jobDefinitionId();

    @JsonProperty(""job_trigger_id"")
    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobDefinitionId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'job_trigger_id', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,jobTriggerId,"    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract String jobTriggerId();

    @JsonProperty(""event"")
    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'jobTriggerId', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'event', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,event,"    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract EventDto event();

    @JsonProperty(""backlog"")
    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'EventDto', ' ', 'event', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,backlog,"    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract ImmutableList<MessageSummary> backlog();

    @JsonProperty(""backlog_size"")
    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'MessageSummary', '>', ' ', 'backlog', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'backlog_size', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,backlogSize,"    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract int backlogSize();

    @JsonProperty(""message_too_long"")
    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'int', ' ', 'backlogSize', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'message_too_long', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,messageTooLong,"    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract boolean messageTooLong();

    @JsonProperty(""graylog_url"")
    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'messageTooLong', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'graylog_url', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,graylogUrl,"    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract String graylogUrl();

    @JsonProperty(""streams"")
    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'String', ' ', 'graylogUrl', '(', ')', ';', '\n', '\n', '    ', '@JsonProperty', '(', '""', 'streams', '""', ')', '\n', '    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
master,212cd729d7d9e59999f4733c8ba734046362c5ed,MessageModelData.java,streams,"    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}",https://www.github.com/irgendwr/telegramalert/commit/212cd729d7d9e59999f4733c8ba734046362c5ed,"    public abstract ImmutableList<StreamModelData> streams();

    public static Builder builder() {
        return new AutoValue_MessageModelData.Builder();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public static abstract class Builder {
        public abstract Builder eventDefinition(Optional<EventDefinitionDto> eventDefinitionDto);

        public abstract Builder eventDefinitionId(String id);

        public abstract Builder eventDefinitionType(String type);

        public abstract Builder eventDefinitionTitle(String title);

        public abstract Builder eventDefinitionDescription(String description);

        public abstract Builder jobDefinitionId(String jobDefinitionId);

        public abstract Builder jobTriggerId(String jobTriggerId);

        public abstract Builder event(EventDto event);

        public abstract Builder backlog(List<MessageSummary> backlog);

        public abstract Builder backlogSize(int backlogSize);

        public abstract Builder messageTooLong(boolean messageTooLong);

        public abstract Builder graylogUrl(String graylogUrl);

        public abstract Builder streams(List<StreamModelData> streams);

        public abstract MessageModelData build();
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'ImmutableList', '<', 'StreamModelData', '>', ' ', 'streams', '(', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'Builder', ' ', 'builder', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'AutoValue_MessageModelData', '.', 'Builder', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'toBuilder', '(', ')', ';', '\n', '\n', '    ', '@AutoValue.Builder', '\n', '    ', 'public', ' ', 'static', ' ', 'abstract', ' ', 'class', ' ', 'Builder', ' ', '{', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinition', '(', 'Optional', '<', 'EventDefinitionDto', '>', ' ', 'eventDefinitionDto', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionId', '(', 'String', ' ', 'id', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionType', '(', 'String', ' ', 'type', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionTitle', '(', 'String', ' ', 'title', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'eventDefinitionDescription', '(', 'String', ' ', 'description', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobDefinitionId', '(', 'String', ' ', 'jobDefinitionId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'jobTriggerId', '(', 'String', ' ', 'jobTriggerId', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'event', '(', 'EventDto', ' ', 'event', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlog', '(', 'List', '<', 'MessageSummary', '>', ' ', 'backlog', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'backlogSize', '(', 'int', ' ', 'backlogSize', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'messageTooLong', '(', 'boolean', ' ', 'messageTooLong', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'graylogUrl', '(', 'String', ' ', 'graylogUrl', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'Builder', ' ', 'streams', '(', 'List', '<', 'StreamModelData', '>', ' ', 'streams', ')', ';', '\n', '\n', '        ', 'public', ' ', 'abstract', ' ', 'MessageModelData', ' ', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n']"
