Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,JolToolWindowFactory.java,createToolWindowContent,"    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JComponent jol = JolView.getInstance(project);
        toolWindow.getContentManager().addContent(ContentFactory.SERVICE.getInstance().createContent(jol, ""Object Layout"", false));
    }",https://www.github.com/stokito/ideajol/commit/a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,"    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JComponent jol = JolView.getInstance(project);
        toolWindow.getContentManager().addContent(ContentFactory.SERVICE.getInstance().createContent(jol, ""Object Layout"", false));
    }
","['    ', 'public', ' ', 'void', ' ', 'createToolWindowContent', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ToolWindow', ' ', 'toolWindow', ')', ' ', '{', '\n', '        ', 'JComponent', ' ', 'jol', ' ', '=', ' ', 'JolView', '.', 'getInstance', '(', 'project', ')', ';', '\n', '        ', 'toolWindow', '.', 'getContentManager', '(', ')', '.', 'addContent', '(', 'ContentFactory', '.', 'SERVICE', '.', 'getInstance', '(', ')', '.', 'createContent', '(', 'jol', ',', ' ', '""', 'Object Layout', '""', ',', ' ', 'false', ')', ')', ';', '\n', '    ', '}', '\n']"
master,a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,JolView.java,setupUI,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        final JPanel toolbarPanel = new JPanel(new BorderLayout());
        labelClassName = new JLabel("""");
        toolbarPanel.add(labelClassName, BorderLayout.CENTER);

        setToolbar(toolbarPanel);
    }",https://www.github.com/stokito/ideajol/commit/a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        final JPanel toolbarPanel = new JPanel(new BorderLayout());
        labelClassName = new JLabel("""");
        toolbarPanel.add(labelClassName, BorderLayout.CENTER);

        setToolbar(toolbarPanel);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'EditorFactory', ' ', 'editorFactory', ' ', '=', ' ', 'EditorFactory', '.', 'getInstance', '(', ')', ';', '\n', '        ', 'document', ' ', '=', ' ', 'editorFactory', '.', 'createDocument', '(', '""', '""', ')', ';', '\n', '        ', 'editor', ' ', '=', ' ', 'editorFactory', '.', 'createEditor', '(', 'document', ',', ' ', 'project', ',', ' ', 'FileTypeManager', '.', 'getInstance', '(', ')', '.', 'getFileTypeByExtension', '(', 'extension', ')', ',', ' ', 'true', ')', ';', '\n', '\n', '        ', 'final', ' ', 'JComponent', ' ', 'editorComponent', ' ', '=', ' ', 'editor', '.', 'getComponent', '(', ')', ';', '\n', '        ', 'add', '(', 'editorComponent', ')', ';', '\n', '\n', '        ', 'final', ' ', 'JPanel', ' ', 'toolbarPanel', ' ', '=', ' ', 'new', ' ', 'JPanel', '(', 'new', ' ', 'BorderLayout', '(', ')', ')', ';', '\n', '        ', 'labelClassName', ' ', '=', ' ', 'new', ' ', 'JLabel', '(', '""', '""', ')', ';', '\n', '        ', 'toolbarPanel', '.', 'add', '(', 'labelClassName', ',', ' ', 'BorderLayout', '.', 'CENTER', ')', ';', '\n', '\n', '        ', 'setToolbar', '(', 'toolbarPanel', ')', ';', '\n', '    ', '}', '\n']"
master,a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,JolView.java,dispose,"    public void dispose() {
        if (editor != null) {
            final EditorFactory editorFactory = EditorFactory.getInstance();",https://www.github.com/stokito/ideajol/commit/a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,"    public void dispose() {
        if (editor != null) {
            final EditorFactory editorFactory = EditorFactory.getInstance();
","['    ', 'public', ' ', 'void', ' ', 'dispose', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'editor', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'final', ' ', 'EditorFactory', ' ', 'editorFactory', ' ', '=', ' ', 'EditorFactory', '.', 'getInstance', '(', ')', ';', '\n']"
master,a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,PsiClassAdapter.java,fetchContendedGroup,"    private static String fetchContendedGroup(@NotNull PsiField psiField,  @NotNull String annotationClass) {
        PsiAnnotation annotation = psiField.getAnnotation(annotationClass);
        String contendedGroup = annotation != null ? getAnnotationStrValue(annotation) : null;
        return contendedGroup;
    }",https://www.github.com/stokito/ideajol/commit/a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,"    private static String fetchContendedGroup(@NotNull PsiField psiField,  @NotNull String annotationClass) {
        PsiAnnotation annotation = psiField.getAnnotation(annotationClass);
        String contendedGroup = annotation != null ? getAnnotationStrValue(annotation) : null;
        return contendedGroup;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'fetchContendedGroup', '(', '@NotNull', ' ', 'PsiField', ' ', 'psiField', ',', '  ', '@NotNull', ' ', 'String', ' ', 'annotationClass', ')', ' ', '{', '\n', '        ', 'PsiAnnotation', ' ', 'annotation', ' ', '=', ' ', 'psiField', '.', 'getAnnotation', '(', 'annotationClass', ')', ';', '\n', '        ', 'String', ' ', 'contendedGroup', ' ', '=', ' ', 'annotation', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'getAnnotationStrValue', '(', 'annotation', ')', ' ', ':', ' ', 'null', ';', '\n', '        ', 'return', ' ', 'contendedGroup', ';', '\n', '    ', '}', '\n']"
master,a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,ShowObjectLayoutAction.java,update,"    public void update(AnActionEvent event) {
        PsiClass selectedPsiClass = getSelectedPsiClass(event);
        event.getPresentation().setEnabled(selectedPsiClass != null);
    }",https://www.github.com/stokito/ideajol/commit/a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,"    public void update(AnActionEvent event) {
        PsiClass selectedPsiClass = getSelectedPsiClass(event);
        event.getPresentation().setEnabled(selectedPsiClass != null);
    }
","['    ', 'public', ' ', 'void', ' ', 'update', '(', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'selectedPsiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'event', '.', 'getPresentation', '(', ')', '.', 'setEnabled', '(', 'selectedPsiClass', ' ', '!', '=', ' ', 'null', ')', ';', '\n', '    ', '}', '\n']"
master,a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,ShowObjectLayoutAction.java,actionPerformed,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        assert psiClass != null;
        try {
            ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);",https://www.github.com/stokito/ideajol/commit/a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        assert psiClass != null;
        try {
            ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'Project', ' ', 'project', ' ', '=', ' ', 'event', '.', 'getProject', '(', ')', ';', '\n', '        ', 'assert', ' ', 'project', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'assert', ' ', 'psiClass', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n']"
master,a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,ShowObjectLayoutAction.java,printLayout,"    private void printLayout(ClassData classData, Layouter layouter, StringBuilder sb) {
        ClassLayout classLayout = layouter.layout(classData);
        String clazzLayout = classLayout.toPrintable();
        sb.append(clazzLayout).append('\n');
    }",https://www.github.com/stokito/ideajol/commit/a7fe905c3fc36deedbaf1a0d8c889a4fde01828f,"    private void printLayout(ClassData classData, Layouter layouter, StringBuilder sb) {
        ClassLayout classLayout = layouter.layout(classData);
        String clazzLayout = classLayout.toPrintable();
        sb.append(clazzLayout).append('\n');
    }
","['    ', 'private', ' ', 'void', ' ', 'printLayout', '(', 'ClassData', ' ', 'classData', ',', ' ', 'Layouter', ' ', 'layouter', ',', ' ', 'StringBuilder', ' ', 'sb', ')', ' ', '{', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'String', ' ', 'clazzLayout', ' ', '=', ' ', 'classLayout', '.', 'toPrintable', '(', ')', ';', '\n', '        ', 'sb', '.', 'append', '(', 'clazzLayout', ')', '.', 'append', '(', ""'\\n'"", ')', ';', '\n', '    ', '}', '\n']"
master,8ea90985d4ffaefd356015fd1498c18db58d7573,ShowObjectLayoutAction.java,actionPerformed,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        assert psiClass != null;
        try {
            JolView.getInstance(project).setOutput(psiClass);",https://www.github.com/stokito/ideajol/commit/8ea90985d4ffaefd356015fd1498c18db58d7573,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        assert psiClass != null;
        try {
            JolView.getInstance(project).setOutput(psiClass);
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'Project', ' ', 'project', ' ', '=', ' ', 'event', '.', 'getProject', '(', ')', ';', '\n', '        ', 'assert', ' ', 'project', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'assert', ' ', 'psiClass', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'JolView', '.', 'getInstance', '(', 'project', ')', '.', 'setOutput', '(', 'psiClass', ')', ';', '\n']"
master,52591eedd48278dc0246c4d05dd9fe1bdc48d44f,JolView.java,setupUI,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        setToolbar(toolbarPanel);
    }",https://www.github.com/stokito/ideajol/commit/52591eedd48278dc0246c4d05dd9fe1bdc48d44f,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        setToolbar(toolbarPanel);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'EditorFactory', ' ', 'editorFactory', ' ', '=', ' ', 'EditorFactory', '.', 'getInstance', '(', ')', ';', '\n', '        ', 'document', ' ', '=', ' ', 'editorFactory', '.', 'createDocument', '(', '""', '""', ')', ';', '\n', '        ', 'editor', ' ', '=', ' ', 'editorFactory', '.', 'createEditor', '(', 'document', ',', ' ', 'project', ',', ' ', 'FileTypeManager', '.', 'getInstance', '(', ')', '.', 'getFileTypeByExtension', '(', 'extension', ')', ',', ' ', 'true', ')', ';', '\n', '\n', '        ', 'final', ' ', 'JComponent', ' ', 'editorComponent', ' ', '=', ' ', 'editor', '.', 'getComponent', '(', ')', ';', '\n', '        ', 'add', '(', 'editorComponent', ')', ';', '\n', '\n', '        ', 'setToolbar', '(', 'toolbarPanel', ')', ';', '\n', '    ', '}', '\n']"
master,0c16fb31435481194714fdf4255998c38393a9d2,JolView.java,setupUI,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        setToolbar(toolbarPanel);

        cmbLayouter.addActionListener(e -> {
            printLayout();
        });
        cmbDataModel.addActionListener(e -> {
            printLayout();",https://www.github.com/stokito/ideajol/commit/0c16fb31435481194714fdf4255998c38393a9d2,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        setToolbar(toolbarPanel);

        cmbLayouter.addActionListener(e -> {
            printLayout();
        });
        cmbDataModel.addActionListener(e -> {
            printLayout();
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'EditorFactory', ' ', 'editorFactory', ' ', '=', ' ', 'EditorFactory', '.', 'getInstance', '(', ')', ';', '\n', '        ', 'document', ' ', '=', ' ', 'editorFactory', '.', 'createDocument', '(', '""', '""', ')', ';', '\n', '        ', 'editor', ' ', '=', ' ', 'editorFactory', '.', 'createEditor', '(', 'document', ',', ' ', 'project', ',', ' ', 'FileTypeManager', '.', 'getInstance', '(', ')', '.', 'getFileTypeByExtension', '(', 'extension', ')', ',', ' ', 'true', ')', ';', '\n', '\n', '        ', 'final', ' ', 'JComponent', ' ', 'editorComponent', ' ', '=', ' ', 'editor', '.', 'getComponent', '(', ')', ';', '\n', '        ', 'add', '(', 'editorComponent', ')', ';', '\n', '\n', '        ', 'setToolbar', '(', 'toolbarPanel', ')', ';', '\n', '\n', '        ', 'cmbLayouter', '.', 'addActionListener', '(', 'e', ' ', '-', '>', ' ', '{', '\n', '            ', 'printLayout', '(', ')', ';', '\n', '        ', '}', ')', ';', '\n', '        ', 'cmbDataModel', '.', 'addActionListener', '(', 'e', ' ', '-', '>', ' ', '{', '\n', '            ', 'printLayout', '(', ')', ';', '\n']"
master,0c16fb31435481194714fdf4255998c38393a9d2,JolView.java,printLayout,"    private void printLayout() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        String clazzLayout = classLayout.toPrintable();
        document.setText(clazzLayout);
    }",https://www.github.com/stokito/ideajol/commit/0c16fb31435481194714fdf4255998c38393a9d2,"    private void printLayout() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        String clazzLayout = classLayout.toPrintable();
        document.setText(clazzLayout);
    }
","['    ', 'private', ' ', 'void', ' ', 'printLayout', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getLayoter', '(', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'String', ' ', 'clazzLayout', ' ', '=', ' ', 'classLayout', '.', 'toPrintable', '(', ')', ';', '\n', '        ', 'document', '.', 'setText', '(', 'clazzLayout', ')', ';', '\n', '    ', '}', '\n']"
master,5d8a44924826dc954f5f47f15fd4028d128364d3,JolView.java,setupUI,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        setToolbar(toolbarPanel);

        cmbLayouter.addActionListener(e -> {
            showLayoutForSelectedClass();
        });
        cmbDataModel.addActionListener(e -> {
            showLayoutForSelectedClass();",https://www.github.com/stokito/ideajol/commit/5d8a44924826dc954f5f47f15fd4028d128364d3,"    private void setupUI() {
        final EditorFactory editorFactory = EditorFactory.getInstance();
        document = editorFactory.createDocument("""");
        editor = editorFactory.createEditor(document, project, FileTypeManager.getInstance().getFileTypeByExtension(extension), true);

        final JComponent editorComponent = editor.getComponent();
        add(editorComponent);

        setToolbar(toolbarPanel);

        cmbLayouter.addActionListener(e -> {
            showLayoutForSelectedClass();
        });
        cmbDataModel.addActionListener(e -> {
            showLayoutForSelectedClass();
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'EditorFactory', ' ', 'editorFactory', ' ', '=', ' ', 'EditorFactory', '.', 'getInstance', '(', ')', ';', '\n', '        ', 'document', ' ', '=', ' ', 'editorFactory', '.', 'createDocument', '(', '""', '""', ')', ';', '\n', '        ', 'editor', ' ', '=', ' ', 'editorFactory', '.', 'createEditor', '(', 'document', ',', ' ', 'project', ',', ' ', 'FileTypeManager', '.', 'getInstance', '(', ')', '.', 'getFileTypeByExtension', '(', 'extension', ')', ',', ' ', 'true', ')', ';', '\n', '\n', '        ', 'final', ' ', 'JComponent', ' ', 'editorComponent', ' ', '=', ' ', 'editor', '.', 'getComponent', '(', ')', ';', '\n', '        ', 'add', '(', 'editorComponent', ')', ';', '\n', '\n', '        ', 'setToolbar', '(', 'toolbarPanel', ')', ';', '\n', '\n', '        ', 'cmbLayouter', '.', 'addActionListener', '(', 'e', ' ', '-', '>', ' ', '{', '\n', '            ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '        ', '}', ')', ';', '\n', '        ', 'cmbDataModel', '.', 'addActionListener', '(', 'e', ' ', '-', '>', ' ', '{', '\n', '            ', 'showLayoutForSelectedClass', '(', ')', ';', '\n']"
master,5d8a44924826dc954f5f47f15fd4028d128364d3,JolView.java,showLayoutForClass,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = psiClass;
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        lblClassName.setText(psiClass.getName());
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/5d8a44924826dc954f5f47f15fd4028d128364d3,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = psiClass;
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        lblClassName.setText(psiClass.getName());
        showLayoutForSelectedClass();
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', ' ', 'psiClass', ';', '\n', '        ', 'this', '.', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,5d8a44924826dc954f5f47f15fd4028d128364d3,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        String clazzLayout = classLayout.toPrintable();
        document.setText(clazzLayout);
    }",https://www.github.com/stokito/ideajol/commit/5d8a44924826dc954f5f47f15fd4028d128364d3,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        String clazzLayout = classLayout.toPrintable();
        document.setText(clazzLayout);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'String', ' ', 'clazzLayout', ' ', '=', ' ', 'classLayout', '.', 'toPrintable', '(', ')', ';', '\n', '        ', 'document', '.', 'setText', '(', 'clazzLayout', ')', ';', '\n', '    ', '}', '\n']"
master,5d8a44924826dc954f5f47f15fd4028d128364d3,ShowObjectLayoutAction.java,actionPerformed,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        assert psiClass != null;
        try {
            JolView.getInstance(project).showLayoutForClass(psiClass);",https://www.github.com/stokito/ideajol/commit/5d8a44924826dc954f5f47f15fd4028d128364d3,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        assert psiClass != null;
        try {
            JolView.getInstance(project).showLayoutForClass(psiClass);
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'Project', ' ', 'project', ' ', '=', ' ', 'event', '.', 'getProject', '(', ')', ';', '\n', '        ', 'assert', ' ', 'project', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'assert', ' ', 'psiClass', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'JolView', '.', 'getInstance', '(', 'project', ')', '.', 'showLayoutForClass', '(', 'psiClass', ')', ';', '\n']"
master,39f7e2fea19eac27575386211acdd87f0f6fd802,JolView.java,setupUI,"    private void setupUI() {
        setToolbar(toolbarPanel);
        tblObjectLayout = new JBTable();
        tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        tblObjectLayout.setFillsViewportHeight(true);
        tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        tblObjectLayout.setRowSelectionAllowed(true);
        //Create the scroll pane and add the table to it. Add the scroll pane to this ToolWindowPanel.
        add(new JBScrollPane(tblObjectLayout));
        tblObjectLayout.getSelectionModel().addListSelectionListener(e -> {
            System.out.println(""selected "" + e.getFirstIndex());
            /*TODO navigate to PSI class in editor */
        });


        cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }",https://www.github.com/stokito/ideajol/commit/39f7e2fea19eac27575386211acdd87f0f6fd802,"    private void setupUI() {
        setToolbar(toolbarPanel);
        tblObjectLayout = new JBTable();
        tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        tblObjectLayout.setFillsViewportHeight(true);
        tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        tblObjectLayout.setRowSelectionAllowed(true);
        
        add(new JBScrollPane(tblObjectLayout));
        tblObjectLayout.getSelectionModel().addListSelectionListener(e -> {
            System.out.println(""selected "" + e.getFirstIndex());
            
        });


        cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'setToolbar', '(', 'toolbarPanel', ')', ';', '\n', '        ', 'tblObjectLayout', ' ', '=', ' ', 'new', ' ', 'JBTable', '(', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'setFillsViewportHeight', '(', 'true', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'setRowSelectionAllowed', '(', 'true', ')', ';', '\n', '        ', '\n', '        ', 'add', '(', 'new', ' ', 'JBScrollPane', '(', 'tblObjectLayout', ')', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'e', ' ', '-', '>', ' ', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'selected ', '""', ' ', '+', ' ', 'e', '.', 'getFirstIndex', '(', ')', ')', ';', '\n', '            ', '\n', '        ', '}', ')', ';', '\n', '\n', '\n', '        ', 'cmbLayouter', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '    ', '}', '\n']"
master,39f7e2fea19eac27575386211acdd87f0f6fd802,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);
//        String clazzLayout = classLayout.toPrintable();

        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        tblObjectLayout.setModel(model);
/*TODO configure width of columns
        tblObjectLayout.getColumnModel().getColumn(0).setWidth(60);
        tblObjectLayout.getColumnModel().getColumn(1).setWidth(50);
        tblObjectLayout.getColumnModel().getColumn(2).setPreferredWidth(250);*/
        tblObjectLayout.repaint();
    }",https://www.github.com/stokito/ideajol/commit/39f7e2fea19eac27575386211acdd87f0f6fd802,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);


        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        tblObjectLayout.setModel(model);

        tblObjectLayout.repaint();
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '\n', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', ')', ';', '\n', '\n', '        ', 'Object', '[', ']', '[', ']', ' ', 'rows', ' ', '=', ' ', 'objectLines', '.', 'toArray', '(', 'new', ' ', 'Object', '[', '0', ']', '[', '0', ']', ')', ';', '\n', '        ', 'DefaultTableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultTableModel', '(', 'rows', ',', ' ', 'COLUMNS', ')', ';', '\n', '        ', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '\n', '        ', 'tblObjectLayout', '.', 'repaint', '(', ')', ';', '\n', '    ', '}', '\n']"
master,39f7e2fea19eac27575386211acdd87f0f6fd802,JolView.java,collectObjectLayouts,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 4);

        long nextFree = classLayout.headerSize();

        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
//                String nodeText = String.format("" %6d %5d %"" + maxTypeLen + ""s %-"" + maxDescrLen + ""s"", nextFree, fieldLayoutSize, """", MSG_GAP);
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, """", """", MSG_GAP});

                interLoss += fieldLayoutSize;
            }

/*
            String nodeText = String.format("" %6d %5d %"" + maxTypeLen + ""s %-"" + maxDescrLen + ""s"",
                    fieldLayout.offset(),
                    fieldLayout.size(),
                    fieldLayout.typeClass(),
                    fieldLayout.shortFieldName()
            );
*/
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});

            nextFree = fieldLayout.offset() + fieldLayout.size();
        }

        long sizeOf = classLayout.instanceSize();

        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
//            String nodeText = String.format("" %6d %5s %"" + maxTypeLen + ""s %s"", nextFree, exterLoss, """", MSG_NEXT_GAP);
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }

//        appendNode(String.format(""Instance size: %d bytes%n"", sizeOf));
        objectLines.add(new Object[]{null, null, null, ""Instance size"", sizeOf});

        long totalLoss = interLoss + exterLoss;
//        appendNode(String.format(""Space losses: %d bytes internal + %d bytes  = %d bytes total%n"", interLoss, exterLoss, totalLoss));
        objectLines.add(new Object[]{null, null, null, ""Losses internal"", interLoss});
        objectLines.add(new Object[]{null, null, null, ""Losses external"", exterLoss});
        objectLines.add(new Object[]{null, null, null, ""Losses total"", totalLoss});
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/39f7e2fea19eac27575386211acdd87f0f6fd802,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 4);

        long nextFree = classLayout.headerSize();

        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;

                objectLines.add(new Object[]{nextFree, fieldLayoutSize, """", """", MSG_GAP});

                interLoss += fieldLayoutSize;
            }


            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});

            nextFree = fieldLayout.offset() + fieldLayout.size();
        }

        long sizeOf = classLayout.instanceSize();

        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;

            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }


        objectLines.add(new Object[]{null, null, null, ""Instance size"", sizeOf});

        long totalLoss = interLoss + exterLoss;

        objectLines.add(new Object[]{null, null, null, ""Losses internal"", interLoss});
        objectLines.add(new Object[]{null, null, null, ""Losses external"", exterLoss});
        objectLines.add(new Object[]{null, null, null, ""Losses total"", totalLoss});
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'collectObjectLayouts', '(', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '4', ')', ';', '\n', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', '""', '""', ',', ' ', '""', '""', ',', ' ', 'MSG_GAP', '}', ')', ';', '\n', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '\n', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'fieldLayout', '.', 'offset', '(', ')', ',', ' ', 'fieldLayout', '.', 'size', '(', ')', ',', ' ', 'fieldLayout', '.', 'typeClass', '(', ')', ',', ' ', 'fieldLayout', '.', 'classShortName', '(', ')', ',', ' ', 'fieldLayout', '.', 'name', '(', ')', '}', ')', ';', '\n', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_NEXT_GAP', '}', ')', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Instance size', '""', ',', ' ', 'sizeOf', '}', ')', ';', '\n', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Losses internal', '""', ',', ' ', 'interLoss', '}', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Losses external', '""', ',', ' ', 'exterLoss', '}', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Losses total', '""', ',', ' ', 'totalLoss', '}', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,39f7e2fea19eac27575386211acdd87f0f6fd802,JolView.java,layoutOptionsActionPerformed,"    private void layoutOptionsActionPerformed(ActionEvent e) {
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/39f7e2fea19eac27575386211acdd87f0f6fd802,"    private void layoutOptionsActionPerformed(ActionEvent e) {
        showLayoutForSelectedClass();
    }
","['    ', 'private', ' ', 'void', ' ', 'layoutOptionsActionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,3ecdbf3697bde43f24a69672fc9bcdff8fc66e0c,JolView.java,collectObjectLayouts,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        objectLines.add(new Object[]{null, sizeOf, null, null, ""Instance size""});
        objectLines.add(new Object[]{null, interLoss, null, null, ""Losses internal""});
        objectLines.add(new Object[]{null, exterLoss, null, null, ""Losses external""});
        objectLines.add(new Object[]{null, totalLoss, null, null, ""Losses total""});
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/3ecdbf3697bde43f24a69672fc9bcdff8fc66e0c,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        objectLines.add(new Object[]{null, sizeOf, null, null, ""Instance size""});
        objectLines.add(new Object[]{null, interLoss, null, null, ""Losses internal""});
        objectLines.add(new Object[]{null, exterLoss, null, null, ""Losses external""});
        objectLines.add(new Object[]{null, totalLoss, null, null, ""Losses total""});
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'collectObjectLayouts', '(', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', '(object header)', '""', '}', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_GAP', '}', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'fieldLayout', '.', 'offset', '(', ')', ',', ' ', 'fieldLayout', '.', 'size', '(', ')', ',', ' ', 'fieldLayout', '.', 'typeClass', '(', ')', ',', ' ', 'fieldLayout', '.', 'classShortName', '(', ')', ',', ' ', 'fieldLayout', '.', 'name', '(', ')', '}', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_NEXT_GAP', '}', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'sizeOf', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Instance size', '""', '}', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'interLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Losses internal', '""', '}', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'exterLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Losses external', '""', '}', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'null', ',', ' ', 'totalLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', 'Losses total', '""', '}', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,a3612abf1be4b93a695372f3b435065bdb84b621,JolView.java,setupUI,"    private void setupUI() {
//        super(new BorderLayout());
        add(jolForm.rootPanel, BorderLayout.CENTER);
//        setToolbar(toolbarPanel);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.setRowSelectionAllowed(true);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(e -> {
            System.out.println(""selected "" + e.getFirstIndex());
            //TODO navigate to PSI class in editor
        });

        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }",https://www.github.com/stokito/ideajol/commit/a3612abf1be4b93a695372f3b435065bdb84b621,"    private void setupUI() {

        add(jolForm.rootPanel, BorderLayout.CENTER);

        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.setRowSelectionAllowed(true);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(e -> {
            System.out.println(""selected "" + e.getFirstIndex());
            
        });

        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '\n', '        ', 'add', '(', 'jolForm', '.', 'rootPanel', ',', ' ', 'BorderLayout', '.', 'CENTER', ')', ';', '\n', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setRowSelectionAllowed', '(', 'true', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'e', ' ', '-', '>', ' ', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'selected ', '""', ' ', '+', ' ', 'e', '.', 'getFirstIndex', '(', ')', ')', ';', '\n', '            ', '\n', '        ', '}', ')', ';', '\n', '\n', '        ', 'jolForm', '.', 'cmbLayouter', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '    ', '}', '\n']"
master,a3612abf1be4b93a695372f3b435065bdb84b621,JolView.java,showLayoutForClass,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = psiClass;
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        jolForm.lblClassName.setText(psiClass.getName());
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/a3612abf1be4b93a695372f3b435065bdb84b621,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = psiClass;
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        jolForm.lblClassName.setText(psiClass.getName());
        showLayoutForSelectedClass();
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', ' ', 'psiClass', ';', '\n', '        ', 'this', '.', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,a3612abf1be4b93a695372f3b435065bdb84b621,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);
//        String clazzLayout = classLayout.toPrintable();

        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
/*TODO configure width of columns
        tblObjectLayout.getColumnModel().getColumn(0).setWidth(60);
        tblObjectLayout.getColumnModel().getColumn(1).setWidth(50);
        tblObjectLayout.getColumnModel().getColumn(2).setPreferredWidth(250);*/
        jolForm.tblObjectLayout.repaint();
    }",https://www.github.com/stokito/ideajol/commit/a3612abf1be4b93a695372f3b435065bdb84b621,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);


        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);

        jolForm.tblObjectLayout.repaint();
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '\n', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', ')', ';', '\n', '\n', '        ', 'Object', '[', ']', '[', ']', ' ', 'rows', ' ', '=', ' ', 'objectLines', '.', 'toArray', '(', 'new', ' ', 'Object', '[', '0', ']', '[', '0', ']', ')', ';', '\n', '        ', 'DefaultTableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultTableModel', '(', 'rows', ',', ' ', 'COLUMNS', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'repaint', '(', ')', ';', '\n', '    ', '}', '\n']"
master,a3612abf1be4b93a695372f3b435065bdb84b621,JolView.java,collectObjectLayouts,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        jolForm.lblInstanceSize.setText(Long.toString(totalLoss));
        jolForm.lblLossesInternal.setText(Long.toString(totalLoss));
        jolForm.lblLossesExternal.setText(Long.toString(totalLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/a3612abf1be4b93a695372f3b435065bdb84b621,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        jolForm.lblInstanceSize.setText(Long.toString(totalLoss));
        jolForm.lblLossesInternal.setText(Long.toString(totalLoss));
        jolForm.lblLossesExternal.setText(Long.toString(totalLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'collectObjectLayouts', '(', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', '(object header)', '""', '}', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_GAP', '}', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'fieldLayout', '.', 'offset', '(', ')', ',', ' ', 'fieldLayout', '.', 'size', '(', ')', ',', ' ', 'fieldLayout', '.', 'typeClass', '(', ')', ',', ' ', 'fieldLayout', '.', 'classShortName', '(', ')', ',', ' ', 'fieldLayout', '.', 'name', '(', ')', '}', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_NEXT_GAP', '}', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'jolForm', '.', 'lblInstanceSize', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'totalLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesInternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'totalLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesExternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'totalLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesTotal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'totalLoss', ')', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,8761bf139af862a92eebec76e80e51cf101d7cf5,JolView.java,showLayoutForClass,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = psiClass;
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/8761bf139af862a92eebec76e80e51cf101d7cf5,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = psiClass;
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        showLayoutForSelectedClass();
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', ' ', 'psiClass', ';', '\n', '        ', 'this', '.', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setIcon', '(', 'psiClass', '.', 'getIcon', '(', '0', ')', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,8761bf139af862a92eebec76e80e51cf101d7cf5,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);
//        String clazzLayout = classLayout.toPrintable();

        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
    }",https://www.github.com/stokito/ideajol/commit/8761bf139af862a92eebec76e80e51cf101d7cf5,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);


        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '\n', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', ')', ';', '\n', '\n', '        ', 'Object', '[', ']', '[', ']', ' ', 'rows', ' ', '=', ' ', 'objectLines', '.', 'toArray', '(', 'new', ' ', 'Object', '[', '0', ']', '[', '0', ']', ')', ';', '\n', '        ', 'DefaultTableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultTableModel', '(', 'rows', ',', ' ', 'COLUMNS', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '    ', '}', '\n']"
master,8761bf139af862a92eebec76e80e51cf101d7cf5,JolView.java,collectObjectLayouts,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        jolForm.lblInstanceSize.setText(Long.toString(sizeOf));
        jolForm.lblLossesInternal.setText(Long.toString(interLoss));
        jolForm.lblLossesExternal.setText(Long.toString(exterLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/8761bf139af862a92eebec76e80e51cf101d7cf5,"    private ArrayList<Object[]> collectObjectLayouts() {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        jolForm.lblInstanceSize.setText(Long.toString(sizeOf));
        jolForm.lblLossesInternal.setText(Long.toString(interLoss));
        jolForm.lblLossesExternal.setText(Long.toString(exterLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'collectObjectLayouts', '(', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', '(object header)', '""', '}', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_GAP', '}', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'fieldLayout', '.', 'offset', '(', ')', ',', ' ', 'fieldLayout', '.', 'size', '(', ')', ',', ' ', 'fieldLayout', '.', 'typeClass', '(', ')', ',', ' ', 'fieldLayout', '.', 'classShortName', '(', ')', ',', ' ', 'fieldLayout', '.', 'name', '(', ')', '}', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_NEXT_GAP', '}', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'jolForm', '.', 'lblInstanceSize', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'sizeOf', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesInternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'interLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesExternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'exterLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesTotal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'totalLoss', ')', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,7499748440993f0d64591795a7e807409d3dc53b,JolView.java,setupUI,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setDefaultEditor(Object.class, null);
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }",https://www.github.com/stokito/ideajol/commit/7499748440993f0d64591795a7e807409d3dc53b,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setDefaultEditor(Object.class, null);
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'add', '(', 'jolForm', '.', 'rootPanel', ',', ' ', 'BorderLayout', '.', 'CENTER', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setDefaultEditor', '(', 'Object', '.', 'class', ',', ' ', 'null', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'this', ':', ':', 'navigateToFieldInEditor', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbLayouter', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '    ', '}', '\n']"
master,7499748440993f0d64591795a7e807409d3dc53b,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);

        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
    }",https://www.github.com/stokito/ideajol/commit/7499748440993f0d64591795a7e807409d3dc53b,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        classLayout = layouter.layout(classData);

        ArrayList<Object[]> objectLines = collectObjectLayouts();

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', ')', ';', '\n', '\n', '        ', 'Object', '[', ']', '[', ']', ' ', 'rows', ' ', '=', ' ', 'objectLines', '.', 'toArray', '(', 'new', ' ', 'Object', '[', '0', ']', '[', '0', ']', ')', ';', '\n', '        ', 'DefaultTableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultTableModel', '(', 'rows', ',', ' ', 'COLUMNS', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '    ', '}', '\n']"
master,7499748440993f0d64591795a7e807409d3dc53b,JolView.java,navigateToClassInEditor,"    private MouseAdapter navigateToClassInEditor() {
        return new MouseAdapter() {
            @Override",https://www.github.com/stokito/ideajol/commit/7499748440993f0d64591795a7e807409d3dc53b,"    private MouseAdapter navigateToClassInEditor() {
        return new MouseAdapter() {
            @Override
","['    ', 'private', ' ', 'MouseAdapter', ' ', 'navigateToClassInEditor', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'MouseAdapter', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n']"
master,7499748440993f0d64591795a7e807409d3dc53b,JolView.java,mouseClicked,"            public void mouseClicked(MouseEvent e) {
                psiClass.navigate(true);
            }",https://www.github.com/stokito/ideajol/commit/7499748440993f0d64591795a7e807409d3dc53b,"            public void mouseClicked(MouseEvent e) {
                psiClass.navigate(true);
            }
","['            ', 'public', ' ', 'void', ' ', 'mouseClicked', '(', 'MouseEvent', ' ', 'e', ')', ' ', '{', '\n', '                ', 'psiClass', '.', 'navigate', '(', 'true', ')', ';', '\n', '            ', '}', '\n']"
master,7499748440993f0d64591795a7e807409d3dc53b,JolView.java,navigateToFieldInEditor,"    private void navigateToFieldInEditor(ListSelectionEvent e) {
        int fieldIndex = e.getFirstIndex();
        int fieldIndexLst = e.getLastIndex();
        String typeName = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 2);
        String fieldName = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 4);
        System.out.println(""selected "" + fieldIndex + "" "" + fieldIndexLst + "" "" + typeName + "" "" + fieldName);
        if (fieldName != null) {
            PsiField psiField = psiClass.findFieldByName(fieldName, true);",https://www.github.com/stokito/ideajol/commit/7499748440993f0d64591795a7e807409d3dc53b,"    private void navigateToFieldInEditor(ListSelectionEvent e) {
        int fieldIndex = e.getFirstIndex();
        int fieldIndexLst = e.getLastIndex();
        String typeName = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 2);
        String fieldName = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 4);
        System.out.println(""selected "" + fieldIndex + "" "" + fieldIndexLst + "" "" + typeName + "" "" + fieldName);
        if (fieldName != null) {
            PsiField psiField = psiClass.findFieldByName(fieldName, true);
","['    ', 'private', ' ', 'void', ' ', 'navigateToFieldInEditor', '(', 'ListSelectionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'int', ' ', 'fieldIndex', ' ', '=', ' ', 'e', '.', 'getFirstIndex', '(', ')', ';', '\n', '        ', 'int', ' ', 'fieldIndexLst', ' ', '=', ' ', 'e', '.', 'getLastIndex', '(', ')', ';', '\n', '        ', 'String', ' ', 'typeName', ' ', '=', ' ', '(', 'String', ')', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getModel', '(', ')', '.', 'getValueAt', '(', 'fieldIndex', ',', ' ', '2', ')', ';', '\n', '        ', 'String', ' ', 'fieldName', ' ', '=', ' ', '(', 'String', ')', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getModel', '(', ')', '.', 'getValueAt', '(', 'fieldIndex', ',', ' ', '4', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'selected ', '""', ' ', '+', ' ', 'fieldIndex', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'fieldIndexLst', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'typeName', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'fieldName', ')', ';', '\n', '        ', 'if', ' ', '(', 'fieldName', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'PsiField', ' ', 'psiField', ' ', '=', ' ', 'psiClass', '.', 'findFieldByName', '(', 'fieldName', ',', ' ', 'true', ')', ';', '\n']"
master,cd595baf1ba6ae2e12f99a617a0d22e582944a06,JolView.java,navigateToFieldInEditor,"    private void navigateToFieldInEditor(ListSelectionEvent e) {
        int fieldIndex = e.getFirstIndex();
        int fieldIndexLst = e.getLastIndex();
        String className = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 3);
        String fieldName = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 4);
        System.out.println(""selected "" + fieldIndex + "" "" + fieldIndexLst + "" "" + className + "" "" + fieldName);
        PsiField psiField = findField(className, fieldName);
        if (psiField != null) {
            psiField.navigate(true);",https://www.github.com/stokito/ideajol/commit/cd595baf1ba6ae2e12f99a617a0d22e582944a06,"    private void navigateToFieldInEditor(ListSelectionEvent e) {
        int fieldIndex = e.getFirstIndex();
        int fieldIndexLst = e.getLastIndex();
        String className = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 3);
        String fieldName = (String) jolForm.tblObjectLayout.getModel().getValueAt(fieldIndex, 4);
        System.out.println(""selected "" + fieldIndex + "" "" + fieldIndexLst + "" "" + className + "" "" + fieldName);
        PsiField psiField = findField(className, fieldName);
        if (psiField != null) {
            psiField.navigate(true);
","['    ', 'private', ' ', 'void', ' ', 'navigateToFieldInEditor', '(', 'ListSelectionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'int', ' ', 'fieldIndex', ' ', '=', ' ', 'e', '.', 'getFirstIndex', '(', ')', ';', '\n', '        ', 'int', ' ', 'fieldIndexLst', ' ', '=', ' ', 'e', '.', 'getLastIndex', '(', ')', ';', '\n', '        ', 'String', ' ', 'className', ' ', '=', ' ', '(', 'String', ')', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getModel', '(', ')', '.', 'getValueAt', '(', 'fieldIndex', ',', ' ', '3', ')', ';', '\n', '        ', 'String', ' ', 'fieldName', ' ', '=', ' ', '(', 'String', ')', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getModel', '(', ')', '.', 'getValueAt', '(', 'fieldIndex', ',', ' ', '4', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'selected ', '""', ' ', '+', ' ', 'fieldIndex', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'fieldIndexLst', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'className', ' ', '+', ' ', '""', ' ', '""', ' ', '+', ' ', 'fieldName', ')', ';', '\n', '        ', 'PsiField', ' ', 'psiField', ' ', '=', ' ', 'findField', '(', 'className', ',', ' ', 'fieldName', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiField', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'psiField', '.', 'navigate', '(', 'true', ')', ';', '\n']"
master,85e82a2c49a60f6a61f7175d8dbae669c612a9b4,JolView.java,showLayoutForClass,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass =  SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/85e82a2c49a60f6a61f7175d8dbae669c612a9b4,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass =  SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        showLayoutForSelectedClass();
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', '  ', 'SmartPointerManager', '.', 'getInstance', '(', 'project', ')', '.', 'createSmartPsiElementPointer', '(', 'psiClass', ')', ';', '\n', '        ', 'this', '.', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'classLabelFontStrike', '(', 'FALSE', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setIcon', '(', 'psiClass', '.', 'getIcon', '(', '0', ')', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,85e82a2c49a60f6a61f7175d8dbae669c612a9b4,JolView.java,mouseClicked,"            public void mouseClicked(MouseEvent e) {
                PsiClass psiClassElement = getPsiClass();
                if (psiClassElement != null) {
                    psiClassElement.navigate(true);",https://www.github.com/stokito/ideajol/commit/85e82a2c49a60f6a61f7175d8dbae669c612a9b4,"            public void mouseClicked(MouseEvent e) {
                PsiClass psiClassElement = getPsiClass();
                if (psiClassElement != null) {
                    psiClassElement.navigate(true);
","['            ', 'public', ' ', 'void', ' ', 'mouseClicked', '(', 'MouseEvent', ' ', 'e', ')', ' ', '{', '\n', '                ', 'PsiClass', ' ', 'psiClassElement', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'psiClassElement', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'psiClassElement', '.', 'navigate', '(', 'true', ')', ';', '\n']"
master,85e82a2c49a60f6a61f7175d8dbae669c612a9b4,JolView.java,classLabelFontStrike,"    private void classLabelFontStrike(Boolean strikethroughOn) {
        @SuppressWarnings(""unchecked"")
        Map<TextAttribute, Object> fontAttributes = (Map<TextAttribute, Object>) jolForm.lblClassName.getFont().getAttributes();
        fontAttributes.put(STRIKETHROUGH, strikethroughOn);
        Font strikedFont = new Font(fontAttributes);
        jolForm.lblClassName.setFont(strikedFont);
    }",https://www.github.com/stokito/ideajol/commit/85e82a2c49a60f6a61f7175d8dbae669c612a9b4,"    private void classLabelFontStrike(Boolean strikethroughOn) {
        @SuppressWarnings(""unchecked"")
        Map<TextAttribute, Object> fontAttributes = (Map<TextAttribute, Object>) jolForm.lblClassName.getFont().getAttributes();
        fontAttributes.put(STRIKETHROUGH, strikethroughOn);
        Font strikedFont = new Font(fontAttributes);
        jolForm.lblClassName.setFont(strikedFont);
    }
","['    ', 'private', ' ', 'void', ' ', 'classLabelFontStrike', '(', 'Boolean', ' ', 'strikethroughOn', ')', ' ', '{', '\n', '        ', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '        ', 'Map', '<', 'TextAttribute', ',', ' ', 'Object', '>', ' ', 'fontAttributes', ' ', '=', ' ', '(', 'Map', '<', 'TextAttribute', ',', ' ', 'Object', '>', ')', ' ', 'jolForm', '.', 'lblClassName', '.', 'getFont', '(', ')', '.', 'getAttributes', '(', ')', ';', '\n', '        ', 'fontAttributes', '.', 'put', '(', 'STRIKETHROUGH', ',', ' ', 'strikethroughOn', ')', ';', '\n', '        ', 'Font', ' ', 'strikedFont', ' ', '=', ' ', 'new', ' ', 'Font', '(', 'fontAttributes', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setFont', '(', 'strikedFont', ')', ';', '\n', '    ', '}', '\n']"
master,4143c03ae9608384acce0a6301dabdd996778aa3,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
    }",https://www.github.com/stokito/ideajol/commit/4143c03ae9608384acce0a6301dabdd996778aa3,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'Object', '[', ']', '[', ']', ' ', 'rows', ' ', '=', ' ', 'objectLines', '.', 'toArray', '(', 'new', ' ', 'Object', '[', '0', ']', '[', '0', ']', ')', ';', '\n', '        ', 'DefaultTableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultTableModel', '(', 'rows', ',', ' ', 'COLUMNS', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '    ', '}', '\n']"
master,4143c03ae9608384acce0a6301dabdd996778aa3,JolView.java,collectObjectLayouts,"    private ArrayList<Object[]> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/4143c03ae9608384acce0a6301dabdd996778aa3,"    private ArrayList<Object[]> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<Object[]> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new Object[]{0, classLayout.headerSize(), null, null, ""(object header)""});
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new Object[]{nextFree, fieldLayoutSize, null, null, MSG_GAP});
                interLoss += fieldLayoutSize;
            }
            objectLines.add(new Object[]{fieldLayout.offset(), fieldLayout.size(), fieldLayout.typeClass(), fieldLayout.classShortName(), fieldLayout.name()});
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new Object[]{nextFree, exterLoss, null, null, MSG_NEXT_GAP});
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'collectObjectLayouts', '(', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', '""', '(object header)', '""', '}', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_GAP', '}', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'fieldLayout', '.', 'offset', '(', ')', ',', ' ', 'fieldLayout', '.', 'size', '(', ')', ',', ' ', 'fieldLayout', '.', 'typeClass', '(', ')', ',', ' ', 'fieldLayout', '.', 'classShortName', '(', ')', ',', ' ', 'fieldLayout', '.', 'name', '(', ')', '}', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'Object', '[', ']', '{', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', 'null', ',', ' ', 'null', ',', ' ', 'MSG_NEXT_GAP', '}', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'showTotalInstanceSize', '(', 'interLoss', ',', ' ', 'exterLoss', ',', ' ', 'sizeOf', ',', ' ', 'totalLoss', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,4143c03ae9608384acce0a6301dabdd996778aa3,JolView.java,showTotalInstanceSize,"    private void showTotalInstanceSize(long interLoss, long exterLoss, long sizeOf, long totalLoss) {
        jolForm.lblInstanceSize.setText(Long.toString(sizeOf));
        changeLabelInstanceSizeColorIfLargerThanCacheLine(sizeOf);
        jolForm.lblLossesInternal.setText(Long.toString(interLoss));
        jolForm.lblLossesExternal.setText(Long.toString(exterLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
    }",https://www.github.com/stokito/ideajol/commit/4143c03ae9608384acce0a6301dabdd996778aa3,"    private void showTotalInstanceSize(long interLoss, long exterLoss, long sizeOf, long totalLoss) {
        jolForm.lblInstanceSize.setText(Long.toString(sizeOf));
        changeLabelInstanceSizeColorIfLargerThanCacheLine(sizeOf);
        jolForm.lblLossesInternal.setText(Long.toString(interLoss));
        jolForm.lblLossesExternal.setText(Long.toString(exterLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
    }
","['    ', 'private', ' ', 'void', ' ', 'showTotalInstanceSize', '(', 'long', ' ', 'interLoss', ',', ' ', 'long', ' ', 'exterLoss', ',', ' ', 'long', ' ', 'sizeOf', ',', ' ', 'long', ' ', 'totalLoss', ')', ' ', '{', '\n', '        ', 'jolForm', '.', 'lblInstanceSize', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'sizeOf', ')', ')', ';', '\n', '        ', 'changeLabelInstanceSizeColorIfLargerThanCacheLine', '(', 'sizeOf', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesInternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'interLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesExternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'exterLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesTotal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'totalLoss', ')', ')', ';', '\n', '    ', '}', '\n']"
master,4143c03ae9608384acce0a6301dabdd996778aa3,JolView.java,changeLabelInstanceSizeColorIfLargerThanCacheLine,"    private void changeLabelInstanceSizeColorIfLargerThanCacheLine(long sizeOf) {
        if (sizeOf > 64) {
            jolForm.lblInstanceSize.setForeground(RED);",https://www.github.com/stokito/ideajol/commit/4143c03ae9608384acce0a6301dabdd996778aa3,"    private void changeLabelInstanceSizeColorIfLargerThanCacheLine(long sizeOf) {
        if (sizeOf > 64) {
            jolForm.lblInstanceSize.setForeground(RED);
","['    ', 'private', ' ', 'void', ' ', 'changeLabelInstanceSizeColorIfLargerThanCacheLine', '(', 'long', ' ', 'sizeOf', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '>', ' ', '64', ')', ' ', '{', '\n', '            ', 'jolForm', '.', 'lblInstanceSize', '.', 'setForeground', '(', 'RED', ')', ';', '\n']"
master,838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,JolView.java,setupUI,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setDefaultEditor(Object.class, null);
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }",https://www.github.com/stokito/ideajol/commit/838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setDefaultEditor(Object.class, null);
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'add', '(', 'jolForm', '.', 'rootPanel', ',', ' ', 'BorderLayout', '.', 'CENTER', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setDefaultEditor', '(', 'Object', '.', 'class', ',', ' ', 'null', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'this', ':', ':', 'navigateToFieldInEditor', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'addActionListener', '(', 'this', ':', ':', 'copyObjectLayoutToClipboard', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbLayouter', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '    ', '}', '\n']"
master,838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,JolView.java,showLayoutForClass,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass =  SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass =  SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass();
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', '  ', 'SmartPointerManager', '.', 'getInstance', '(', 'project', ')', '.', 'createSmartPsiElementPointer', '(', 'psiClass', ')', ';', '\n', '        ', 'this', '.', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'classLabelFontStrike', '(', 'FALSE', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setIcon', '(', 'psiClass', '.', 'getIcon', '(', '0', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'setEnabled', '(', 'true', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,JolView.java,showTotalInstanceSize,"    private void showTotalInstanceSize(long interLoss, long exterLoss, long sizeOf, long totalLoss) {
        jolForm.lblInstanceSize.setText(Long.toString(sizeOf));
        changeLabelInstanceSizeColorIfLargerThanCacheLine(sizeOf);
        jolForm.lblLossesInternal.setText(Long.toString(interLoss));
        jolForm.lblLossesExternal.setText(Long.toString(exterLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
        jolForm.pnlInstanceSize.setEnabled(true);
    }",https://www.github.com/stokito/ideajol/commit/838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,"    private void showTotalInstanceSize(long interLoss, long exterLoss, long sizeOf, long totalLoss) {
        jolForm.lblInstanceSize.setText(Long.toString(sizeOf));
        changeLabelInstanceSizeColorIfLargerThanCacheLine(sizeOf);
        jolForm.lblLossesInternal.setText(Long.toString(interLoss));
        jolForm.lblLossesExternal.setText(Long.toString(exterLoss));
        jolForm.lblLossesTotal.setText(Long.toString(totalLoss));
        jolForm.pnlInstanceSize.setEnabled(true);
    }
","['    ', 'private', ' ', 'void', ' ', 'showTotalInstanceSize', '(', 'long', ' ', 'interLoss', ',', ' ', 'long', ' ', 'exterLoss', ',', ' ', 'long', ' ', 'sizeOf', ',', ' ', 'long', ' ', 'totalLoss', ')', ' ', '{', '\n', '        ', 'jolForm', '.', 'lblInstanceSize', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'sizeOf', ')', ')', ';', '\n', '        ', 'changeLabelInstanceSizeColorIfLargerThanCacheLine', '(', 'sizeOf', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesInternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'interLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesExternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'exterLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesTotal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'totalLoss', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'pnlInstanceSize', '.', 'setEnabled', '(', 'true', ')', ';', '\n', '    ', '}', '\n']"
master,838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,JolView.java,copyObjectLayoutToClipboard,"    private void copyObjectLayoutToClipboard(ActionEvent e) {
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }",https://www.github.com/stokito/ideajol/commit/838b4ad4729abbbfe6ee0aeefd1e730f3fe4154a,"    private void copyObjectLayoutToClipboard(ActionEvent e) {
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }
","['    ', 'private', ' ', 'void', ' ', 'copyObjectLayoutToClipboard', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'CopyPasteManager', '.', 'getInstance', '(', ')', '.', 'setContents', '(', 'new', ' ', 'StringSelection', '(', 'classLayout', '.', 'toPrintable', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n']"
master,185fd257765f52128e1771eba151ef95ecb8d1dd,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/185fd257765f52128e1771eba151ef95ecb8d1dd,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        DefaultTableModel model = new DefaultTableModel(rows, COLUMNS);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'Object', '[', ']', '[', ']', ' ', 'rows', ' ', '=', ' ', 'objectLines', '.', 'toArray', '(', 'new', ' ', 'Object', '[', '0', ']', '[', '0', ']', ')', ';', '\n', '        ', 'DefaultTableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultTableModel', '(', 'rows', ',', ' ', 'COLUMNS', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,8e02ad087055558638c25b0a4374c78d5f55ec8d,JolView.java,showLayoutForClass,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/8e02ad087055558638c25b0a4374c78d5f55ec8d,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        this.classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass();
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', ' ', 'SmartPointerManager', '.', 'getInstance', '(', 'project', ')', '.', 'createSmartPsiElementPointer', '(', 'psiClass', ')', ';', '\n', '        ', 'this', '.', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'classLabelFontStrike', '(', 'FALSE', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setIcon', '(', 'psiClass', '.', 'getIcon', '(', '0', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'setEnabled', '(', 'true', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,8e02ad087055558638c25b0a4374c78d5f55ec8d,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        TableModel model = new FieldLayoutTableModel(rows);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/8e02ad087055558638c25b0a4374c78d5f55ec8d,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        Object[][] rows = objectLines.toArray(new Object[0][0]);
        TableModel model = new FieldLayoutTableModel(rows);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'Object', '[', ']', '[', ']', ' ', 'rows', ' ', '=', ' ', 'objectLines', '.', 'toArray', '(', 'new', ' ', 'Object', '[', '0', ']', '[', '0', ']', ')', ';', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'rows', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,c13e266783f6face1b11388de763392b6e4a39c3,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLines);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/c13e266783f6face1b11388de763392b6e4a39c3,"    private void showLayoutForSelectedClass() {
        if (classData == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLines);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'classData', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'objectLines', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,e2b4ffa8a812187af86c8cd686be471edc704516,JolView.java,showLayoutForClass,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass(psiClass);
    }",https://www.github.com/stokito/ideajol/commit/e2b4ffa8a812187af86c8cd686be471edc704516,"    public void showLayoutForClass(PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass(psiClass);
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', ' ', 'SmartPointerManager', '.', 'getInstance', '(', 'project', ')', '.', 'createSmartPsiElementPointer', '(', 'psiClass', ')', ';', '\n', '        ', 'classLabelFontStrike', '(', 'FALSE', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setIcon', '(', 'psiClass', '.', 'getIcon', '(', '0', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'setEnabled', '(', 'true', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', 'psiClass', ')', ';', '\n', '    ', '}', '\n']"
master,e2b4ffa8a812187af86c8cd686be471edc704516,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass(PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLines);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/e2b4ffa8a812187af86c8cd686be471edc704516,"    private void showLayoutForSelectedClass(PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<Object[]> objectLines = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLines);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'ArrayList', '<', 'Object', '[', ']', '>', ' ', 'objectLines', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'objectLines', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,e2b4ffa8a812187af86c8cd686be471edc704516,JolView.java,mouseClicked,"            public void mouseClicked(MouseEvent e) {
                PsiClass psiClassElement = getPsiClass();
                if (psiClassElement == null) {
                    return;
                }
                psiClassElement.navigate(true);
            }",https://www.github.com/stokito/ideajol/commit/e2b4ffa8a812187af86c8cd686be471edc704516,"            public void mouseClicked(MouseEvent e) {
                PsiClass psiClassElement = getPsiClass();
                if (psiClassElement == null) {
                    return;
                }
                psiClassElement.navigate(true);
            }
","['            ', 'public', ' ', 'void', ' ', 'mouseClicked', '(', 'MouseEvent', ' ', 'e', ')', ' ', '{', '\n', '                ', 'PsiClass', ' ', 'psiClassElement', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'psiClassElement', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'return', ';', '\n', '                ', '}', '\n', '                ', 'psiClassElement', '.', 'navigate', '(', 'true', ')', ';', '\n', '            ', '}', '\n']"
master,e2b4ffa8a812187af86c8cd686be471edc704516,JolView.java,layoutOptionsActionPerformed,"    private void layoutOptionsActionPerformed(ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        showLayoutForSelectedClass(psiClass);
    }",https://www.github.com/stokito/ideajol/commit/e2b4ffa8a812187af86c8cd686be471edc704516,"    private void layoutOptionsActionPerformed(ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        showLayoutForSelectedClass(psiClass);
    }
","['    ', 'private', ' ', 'void', ' ', 'layoutOptionsActionPerformed', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'showLayoutForSelectedClass', '(', 'psiClass', ')', ';', '\n', '    ', '}', '\n']"
master,e2b4ffa8a812187af86c8cd686be471edc704516,JolView.java,copyObjectLayoutToClipboard,"    private void copyObjectLayoutToClipboard(ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        ClassLayout classLayout = layouter.layout(classData);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }",https://www.github.com/stokito/ideajol/commit/e2b4ffa8a812187af86c8cd686be471edc704516,"    private void copyObjectLayoutToClipboard(ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        ClassLayout classLayout = layouter.layout(classData);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }
","['    ', 'private', ' ', 'void', ' ', 'copyObjectLayoutToClipboard', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'CopyPasteManager', '.', 'getInstance', '(', ')', '.', 'setContents', '(', 'new', ' ', 'StringSelection', '(', 'classLayout', '.', 'toPrintable', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n']"
master,fea714b02edd90a2a207d043c61afb83e06cd909,JolView.java,setupUI,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }",https://www.github.com/stokito/ideajol/commit/fea714b02edd90a2a207d043c61afb83e06cd909,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbLayouter.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'add', '(', 'jolForm', '.', 'rootPanel', ',', ' ', 'BorderLayout', '.', 'CENTER', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'this', ':', ':', 'navigateToFieldInEditor', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'addActionListener', '(', 'this', ':', ':', 'copyObjectLayoutToClipboard', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbLayouter', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '    ', '}', '\n']"
master,fea714b02edd90a2a207d043c61afb83e06cd909,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass(PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/fea714b02edd90a2a207d043c61afb83e06cd909,"    private void showLayoutForSelectedClass(PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        ClassLayout classLayout = layouter.layout(classData);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLayouts', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'objectLayouts', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,fea714b02edd90a2a207d043c61afb83e06cd909,JolView.java,collectObjectLayouts,"    private ArrayList<FieldLayout> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutPadding(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutPadding(nextFree, fieldLayoutSize, MSG_GAP));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutPadding(nextFree, exterLoss, MSG_NEXT_GAP));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/fea714b02edd90a2a207d043c61afb83e06cd909,"    private ArrayList<FieldLayout> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutPadding(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutPadding(nextFree, fieldLayoutSize, MSG_GAP));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutPadding(nextFree, exterLoss, MSG_NEXT_GAP));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'collectObjectLayouts', '(', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutPadding', '(', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', '""', '(object header)', '""', ')', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutPadding', '(', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', 'MSG_GAP', ')', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'fieldLayout', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutPadding', '(', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', 'MSG_NEXT_GAP', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'showTotalInstanceSize', '(', 'interLoss', ',', ' ', 'exterLoss', ',', ' ', 'sizeOf', ',', ' ', 'totalLoss', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,17ff3a21b18c999b6364ba868b06b5270a5a3643,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass(PsiClass psiClass) {
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/17ff3a21b18c999b6364ba868b06b5270a5a3643,"    private void showLayoutForSelectedClass(PsiClass psiClass) {
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'calcClassLayout', '(', 'psiClass', ')', ';', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLayouts', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'objectLayouts', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,17ff3a21b18c999b6364ba868b06b5270a5a3643,JolView.java,copyObjectLayoutToClipboard,"    private void copyObjectLayoutToClipboard(ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }",https://www.github.com/stokito/ideajol/commit/17ff3a21b18c999b6364ba868b06b5270a5a3643,"    private void copyObjectLayoutToClipboard(ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }
","['    ', 'private', ' ', 'void', ' ', 'copyObjectLayoutToClipboard', '(', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'calcClassLayout', '(', 'psiClass', ')', ';', '\n', '        ', 'CopyPasteManager', '.', 'getInstance', '(', ')', '.', 'setContents', '(', 'new', ' ', 'StringSelection', '(', 'classLayout', '.', 'toPrintable', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n']"
master,17ff3a21b18c999b6364ba868b06b5270a5a3643,JolView.java,calcClassLayout,"    private ClassLayout calcClassLayout(PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        return layouter.layout(classData);
    }",https://www.github.com/stokito/ideajol/commit/17ff3a21b18c999b6364ba868b06b5270a5a3643,"    private ClassLayout calcClassLayout(PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        return layouter.layout(classData);
    }
","['    ', 'private', ' ', 'ClassLayout', ' ', 'calcClassLayout', '(', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'return', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '    ', '}', '\n']"
master,ae77ec29769f3d81161ab9b7cf0ad3e7ab687991,JolView.java,setupUI,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }",https://www.github.com/stokito/ideajol/commit/ae77ec29769f3d81161ab9b7cf0ad3e7ab687991,"    private void setupUI() {
        add(jolForm.rootPanel, BorderLayout.CENTER);
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'add', '(', 'jolForm', '.', 'rootPanel', ',', ' ', 'BorderLayout', '.', 'CENTER', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'this', ':', ':', 'navigateToFieldInEditor', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'addActionListener', '(', 'this', ':', ':', 'copyObjectLayoutToClipboard', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '    ', '}', '\n']"
master,c1fe232cb54ea5e974862d792a7d3259abec7c06,JolView.java,dispose,"    public void dispose() {
        project = null;
        toolWindowManager = null;
        psiClass = null;
        jolForm = null;
    }",https://www.github.com/stokito/ideajol/commit/c1fe232cb54ea5e974862d792a7d3259abec7c06,"    public void dispose() {
        project = null;
        toolWindowManager = null;
        psiClass = null;
        jolForm = null;
    }
","['    ', 'public', ' ', 'void', ' ', 'dispose', '(', ')', ' ', '{', '\n', '        ', 'project', ' ', '=', ' ', 'null', ';', '\n', '        ', 'toolWindowManager', ' ', '=', ' ', 'null', ';', '\n', '        ', 'psiClass', ' ', '=', ' ', 'null', ';', '\n', '        ', 'jolForm', ' ', '=', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,b169bf7bc366f746291d643bbdd59fd56affaf30,JolView.java,setupUI,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
        setContent(jolForm.rootPanel);
    }",https://www.github.com/stokito/ideajol/commit/b169bf7bc366f746291d643bbdd59fd56affaf30,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
        setContent(jolForm.rootPanel);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'this', ':', ':', 'navigateToFieldInEditor', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'addActionListener', '(', 'this', ':', ':', 'copyObjectLayoutToClipboard', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'setContent', '(', 'jolForm', '.', 'rootPanel', ')', ';', '\n', '    ', '}', '\n']"
master,86b06c140d25c1db8c9631152a89e9b7e845946e,JolView.java,collectObjectLayouts,"    private ArrayList<FieldLayout> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutPadding(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutPadding(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutPadding(nextFree, exterLoss, ""(loss due to the next object alignment)""));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/86b06c140d25c1db8c9631152a89e9b7e845946e,"    private ArrayList<FieldLayout> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutPadding(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutPadding(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutPadding(nextFree, exterLoss, ""(loss due to the next object alignment)""));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'collectObjectLayouts', '(', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutPadding', '(', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', '""', '(object header)', '""', ')', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutPadding', '(', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', '""', '(alignment/padding gap)', '""', ')', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'fieldLayout', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutPadding', '(', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', '""', '(loss due to the next object alignment)', '""', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'showTotalInstanceSize', '(', 'interLoss', ',', ' ', 'exterLoss', ',', ' ', 'sizeOf', ',', ' ', 'totalLoss', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,88bfbb66a2c141cf600143c4d8593a32d150f848,PsiClassAdapterTest.java,testCreateClassDataFromPsiClass,"    public void testCreateClassDataFromPsiClass() {
        myFixture.configureByText(""PackingFields.java"", ""public class PackingFields {\n"" +
                ""    boolean bo1, bo2;\n"" +
                ""    byte b1, b2;\n"" +
                ""    char c1, c2;\n"" +
                ""    double d1, d2;\n"" +
                ""    float f1, f2;\n"" +
                ""    int i1, i2;\n"" +
                ""    long l1, l2;\n"" +
                ""    short s1, s2;\n"" +
                ""}"");

        PsiClass psiClass = myFixture.findClass(""PackingFields"");
        System.out.println(psiClass.getText());
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        List<FieldData> fieldDatas = new ArrayList<>(classData.fields());
        assertEquals(16, fieldDatas.size());
        assertField(fieldDatas, 0, ""bo1"", ""boolean"", ""PackingFields"");
        assertField(fieldDatas, 1, ""bo2"", ""boolean"", ""PackingFields"");
        assertField(fieldDatas, 2, ""b1"", ""byte"", ""PackingFields"");
        assertField(fieldDatas, 3, ""b2"", ""byte"", ""PackingFields"");
        assertField(fieldDatas, 4, ""c1"", ""char"", ""PackingFields"");
        assertField(fieldDatas, 5, ""c2"", ""char"", ""PackingFields"");
        assertField(fieldDatas, 6, ""d1"", ""double"", ""PackingFields"");
        assertField(fieldDatas, 7, ""d2"", ""double"", ""PackingFields"");
        assertField(fieldDatas, 8, ""f1"", ""float"", ""PackingFields"");
        assertField(fieldDatas, 9, ""f2"", ""float"", ""PackingFields"");
        assertField(fieldDatas, 10, ""i1"", ""int"", ""PackingFields"");
        assertField(fieldDatas, 11, ""i2"", ""int"", ""PackingFields"");
        assertField(fieldDatas, 12, ""l1"", ""long"", ""PackingFields"");
        assertField(fieldDatas, 13, ""l2"", ""long"", ""PackingFields"");
        assertField(fieldDatas, 14, ""s1"", ""short"", ""PackingFields"");
        assertField(fieldDatas, 15, ""s2"", ""short"", ""PackingFields"");
    }",https://www.github.com/stokito/ideajol/commit/88bfbb66a2c141cf600143c4d8593a32d150f848,"    public void testCreateClassDataFromPsiClass() {
        myFixture.configureByText(""PackingFields.java"", ""public class PackingFields {\n"" +
                ""    boolean bo1, bo2;\n"" +
                ""    byte b1, b2;\n"" +
                ""    char c1, c2;\n"" +
                ""    double d1, d2;\n"" +
                ""    float f1, f2;\n"" +
                ""    int i1, i2;\n"" +
                ""    long l1, l2;\n"" +
                ""    short s1, s2;\n"" +
                ""}"");

        PsiClass psiClass = myFixture.findClass(""PackingFields"");
        System.out.println(psiClass.getText());
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        List<FieldData> fieldDatas = new ArrayList<>(classData.fields());
        assertEquals(16, fieldDatas.size());
        assertField(fieldDatas, 0, ""bo1"", ""boolean"", ""PackingFields"");
        assertField(fieldDatas, 1, ""bo2"", ""boolean"", ""PackingFields"");
        assertField(fieldDatas, 2, ""b1"", ""byte"", ""PackingFields"");
        assertField(fieldDatas, 3, ""b2"", ""byte"", ""PackingFields"");
        assertField(fieldDatas, 4, ""c1"", ""char"", ""PackingFields"");
        assertField(fieldDatas, 5, ""c2"", ""char"", ""PackingFields"");
        assertField(fieldDatas, 6, ""d1"", ""double"", ""PackingFields"");
        assertField(fieldDatas, 7, ""d2"", ""double"", ""PackingFields"");
        assertField(fieldDatas, 8, ""f1"", ""float"", ""PackingFields"");
        assertField(fieldDatas, 9, ""f2"", ""float"", ""PackingFields"");
        assertField(fieldDatas, 10, ""i1"", ""int"", ""PackingFields"");
        assertField(fieldDatas, 11, ""i2"", ""int"", ""PackingFields"");
        assertField(fieldDatas, 12, ""l1"", ""long"", ""PackingFields"");
        assertField(fieldDatas, 13, ""l2"", ""long"", ""PackingFields"");
        assertField(fieldDatas, 14, ""s1"", ""short"", ""PackingFields"");
        assertField(fieldDatas, 15, ""s2"", ""short"", ""PackingFields"");
    }
","['    ', 'public', ' ', 'void', ' ', 'testCreateClassDataFromPsiClass', '(', ')', ' ', '{', '\n', '        ', 'myFixture', '.', 'configureByText', '(', '""', 'PackingFields.java', '""', ',', ' ', '""', 'public class PackingFields {', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    boolean bo1, bo2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    byte b1, b2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    char c1, c2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    double d1, d2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    float f1, f2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    int i1, i2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    long l1, l2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    short s1, s2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '}', '""', ')', ';', '\n', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'myFixture', '.', 'findClass', '(', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'psiClass', '.', 'getText', '(', ')', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'List', '<', 'FieldData', '>', ' ', 'fieldDatas', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classData', '.', 'fields', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '16', ',', ' ', 'fieldDatas', '.', 'size', '(', ')', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '0', ',', ' ', '""', 'bo1', '""', ',', ' ', '""', 'boolean', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '1', ',', ' ', '""', 'bo2', '""', ',', ' ', '""', 'boolean', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '2', ',', ' ', '""', 'b1', '""', ',', ' ', '""', 'byte', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '3', ',', ' ', '""', 'b2', '""', ',', ' ', '""', 'byte', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '4', ',', ' ', '""', 'c1', '""', ',', ' ', '""', 'char', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '5', ',', ' ', '""', 'c2', '""', ',', ' ', '""', 'char', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '6', ',', ' ', '""', 'd1', '""', ',', ' ', '""', 'double', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '7', ',', ' ', '""', 'd2', '""', ',', ' ', '""', 'double', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '8', ',', ' ', '""', 'f1', '""', ',', ' ', '""', 'float', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '9', ',', ' ', '""', 'f2', '""', ',', ' ', '""', 'float', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '10', ',', ' ', '""', 'i1', '""', ',', ' ', '""', 'int', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '11', ',', ' ', '""', 'i2', '""', ',', ' ', '""', 'int', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '12', ',', ' ', '""', 'l1', '""', ',', ' ', '""', 'long', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '13', ',', ' ', '""', 'l2', '""', ',', ' ', '""', 'long', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '14', ',', ' ', '""', 's1', '""', ',', ' ', '""', 'short', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'fieldDatas', ',', ' ', '15', ',', ' ', '""', 's2', '""', ',', ' ', '""', 'short', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '    ', '}', '\n']"
master,88bfbb66a2c141cf600143c4d8593a32d150f848,PsiClassAdapterTest.java,assertField,"    private void assertField(List<FieldData> fieldDatas, int index, String name, String typeClass, String hostClass) {
        assertEquals(name, fieldDatas.get(index).name());
        assertEquals(typeClass, fieldDatas.get(index).typeClass());
        assertEquals(hostClass, fieldDatas.get(index).hostClass());
    }",https://www.github.com/stokito/ideajol/commit/88bfbb66a2c141cf600143c4d8593a32d150f848,"    private void assertField(List<FieldData> fieldDatas, int index, String name, String typeClass, String hostClass) {
        assertEquals(name, fieldDatas.get(index).name());
        assertEquals(typeClass, fieldDatas.get(index).typeClass());
        assertEquals(hostClass, fieldDatas.get(index).hostClass());
    }
","['    ', 'private', ' ', 'void', ' ', 'assertField', '(', 'List', '<', 'FieldData', '>', ' ', 'fieldDatas', ',', ' ', 'int', ' ', 'index', ',', ' ', 'String', ' ', 'name', ',', ' ', 'String', ' ', 'typeClass', ',', ' ', 'String', ' ', 'hostClass', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', 'name', ',', ' ', 'fieldDatas', '.', 'get', '(', 'index', ')', '.', 'name', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'typeClass', ',', ' ', 'fieldDatas', '.', 'get', '(', 'index', ')', '.', 'typeClass', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'hostClass', ',', ' ', 'fieldDatas', '.', 'get', '(', 'index', ')', '.', 'hostClass', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,7de3b89c90d4f5e96980a04a87e47e8be3063839,JolInspection.java,checkClass,"    public ProblemDescriptor[] checkClass(@NotNull PsiClass aClass, @NotNull InspectionManager manager, boolean isOnTheFly) {
        if (isNotUsualClass(aClass) || isBusinessLogicClass(aClass)) {
            return null;
        }
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(aClass);
        ClassLayout layout = LAYOUTER.layout(classData);
        if (layout.instanceSize() <= THRESHOLD) {
            return null;
        }
        LocalQuickFix showJolAction = new ShowJolQuickFix();
        ProblemDescriptor problem = manager.createProblemDescriptor(aClass, ""Class have too big memory footprint"", showJolAction, ProblemHighlightType.WEAK_WARNING, isOnTheFly);
        return new ProblemDescriptor[]{problem};
    }",https://www.github.com/stokito/ideajol/commit/7de3b89c90d4f5e96980a04a87e47e8be3063839,"    public ProblemDescriptor[] checkClass(@NotNull PsiClass aClass, @NotNull InspectionManager manager, boolean isOnTheFly) {
        if (isNotUsualClass(aClass) || isBusinessLogicClass(aClass)) {
            return null;
        }
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(aClass);
        ClassLayout layout = LAYOUTER.layout(classData);
        if (layout.instanceSize() <= THRESHOLD) {
            return null;
        }
        LocalQuickFix showJolAction = new ShowJolQuickFix();
        ProblemDescriptor problem = manager.createProblemDescriptor(aClass, ""Class have too big memory footprint"", showJolAction, ProblemHighlightType.WEAK_WARNING, isOnTheFly);
        return new ProblemDescriptor[]{problem};
    }
","['    ', 'public', ' ', 'ProblemDescriptor', '[', ']', ' ', 'checkClass', '(', '@NotNull', ' ', 'PsiClass', ' ', 'aClass', ',', ' ', '@NotNull', ' ', 'InspectionManager', ' ', 'manager', ',', ' ', 'boolean', ' ', 'isOnTheFly', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'isNotUsualClass', '(', 'aClass', ')', ' ', '|', '|', ' ', 'isBusinessLogicClass', '(', 'aClass', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'aClass', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'layout', ' ', '=', ' ', 'LAYOUTER', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'if', ' ', '(', 'layout', '.', 'instanceSize', '(', ')', ' ', '<', '=', ' ', 'THRESHOLD', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'LocalQuickFix', ' ', 'showJolAction', ' ', '=', ' ', 'new', ' ', 'ShowJolQuickFix', '(', ')', ';', '\n', '        ', 'ProblemDescriptor', ' ', 'problem', ' ', '=', ' ', 'manager', '.', 'createProblemDescriptor', '(', 'aClass', ',', ' ', '""', 'Class have too big memory footprint', '""', ',', ' ', 'showJolAction', ',', ' ', 'ProblemHighlightType', '.', 'WEAK_WARNING', ',', ' ', 'isOnTheFly', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ProblemDescriptor', '[', ']', '{', 'problem', '}', ';', '\n', '    ', '}', '\n']"
master,7de3b89c90d4f5e96980a04a87e47e8be3063839,JolInspection.java,isNotUsualClass,"    private boolean isNotUsualClass(PsiClass aClass) {
        return aClass.getNameIdentifier() == null ||
                aClass.isAnnotationType() ||",https://www.github.com/stokito/ideajol/commit/7de3b89c90d4f5e96980a04a87e47e8be3063839,"    private boolean isNotUsualClass(PsiClass aClass) {
        return aClass.getNameIdentifier() == null ||
                aClass.isAnnotationType() ||
","['    ', 'private', ' ', 'boolean', ' ', 'isNotUsualClass', '(', 'PsiClass', ' ', 'aClass', ')', ' ', '{', '\n', '        ', 'return', ' ', 'aClass', '.', 'getNameIdentifier', '(', ')', ' ', '=', '=', ' ', 'null', ' ', '|', '|', '\n', '                ', 'aClass', '.', 'isAnnotationType', '(', ')', ' ', '|', '|', '\n']"
master,7de3b89c90d4f5e96980a04a87e47e8be3063839,JolInspection.java,isBusinessLogicClass,"    private boolean isBusinessLogicClass(PsiClass aClass) {
        return endsWithAny(aClass.getName(), BUSINESS_LOGIC_CLASS_MARKERS);
    }",https://www.github.com/stokito/ideajol/commit/7de3b89c90d4f5e96980a04a87e47e8be3063839,"    private boolean isBusinessLogicClass(PsiClass aClass) {
        return endsWithAny(aClass.getName(), BUSINESS_LOGIC_CLASS_MARKERS);
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isBusinessLogicClass', '(', 'PsiClass', ' ', 'aClass', ')', ' ', '{', '\n', '        ', 'return', ' ', 'endsWithAny', '(', 'aClass', '.', 'getName', '(', ')', ',', ' ', 'BUSINESS_LOGIC_CLASS_MARKERS', ')', ';', '\n', '    ', '}', '\n']"
master,7de3b89c90d4f5e96980a04a87e47e8be3063839,JolInspection.java,endsWithAny,"    private boolean endsWithAny(String className, String[] businessLogicClassMarkers) {
        if (className == null) return false;
        for (String marker : businessLogicClassMarkers) {
            if (className.endsWith(marker)) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/stokito/ideajol/commit/7de3b89c90d4f5e96980a04a87e47e8be3063839,"    private boolean endsWithAny(String className, String[] businessLogicClassMarkers) {
        if (className == null) return false;
        for (String marker : businessLogicClassMarkers) {
            if (className.endsWith(marker)) {
                return true;
            }
        }
        return false;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'endsWithAny', '(', 'String', ' ', 'className', ',', ' ', 'String', '[', ']', ' ', 'businessLogicClassMarkers', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'className', ' ', '=', '=', ' ', 'null', ')', ' ', 'return', ' ', 'false', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'marker', ' ', ':', ' ', 'businessLogicClassMarkers', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'className', '.', 'endsWith', '(', 'marker', ')', ')', ' ', '{', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,7de3b89c90d4f5e96980a04a87e47e8be3063839,ShowJolQuickFix.java,applyFix,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        ActionManager am = ActionManager.getInstance();
        AnActionEvent anActionEvent = new AnActionEvent(null, DataManager.getInstance().getDataContext(),
                ActionPlaces.UNKNOWN, new Presentation(), am, 0);
        am.getAction(""showObjectLayout"").actionPerformed(anActionEvent);
",https://www.github.com/stokito/ideajol/commit/7de3b89c90d4f5e96980a04a87e47e8be3063839,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        ActionManager am = ActionManager.getInstance();
        AnActionEvent anActionEvent = new AnActionEvent(null, DataManager.getInstance().getDataContext(),
                ActionPlaces.UNKNOWN, new Presentation(), am, 0);
        am.getAction(""showObjectLayout"").actionPerformed(anActionEvent);
","['    ', 'public', ' ', 'void', ' ', 'applyFix', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ProblemDescriptor', ' ', 'problemDescriptor', ')', ' ', '{', '\n', '        ', 'PsiElement', ' ', 'psiClass', ' ', '=', ' ', 'problemDescriptor', '.', 'getPsiElement', '(', ')', ';', '\n', '        ', 'if', ' ', '(', '!', '(', 'psiClass', ' ', 'instanceof', ' ', 'PsiClass', ')', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'ActionManager', ' ', 'am', ' ', '=', ' ', 'ActionManager', '.', 'getInstance', '(', ')', ';', '\n', '        ', 'AnActionEvent', ' ', 'anActionEvent', ' ', '=', ' ', 'new', ' ', 'AnActionEvent', '(', 'null', ',', ' ', 'DataManager', '.', 'getInstance', '(', ')', '.', 'getDataContext', '(', ')', ',', '\n', '                ', 'ActionPlaces', '.', 'UNKNOWN', ',', ' ', 'new', ' ', 'Presentation', '(', ')', ',', ' ', 'am', ',', ' ', '0', ')', ';', '\n', '        ', 'am', '.', 'getAction', '(', '""', 'showObjectLayout', '""', ')', '.', 'actionPerformed', '(', 'anActionEvent', ')', ';', '\n']"
master,dd25a436727e9b85a905246f3af32429ae23f1f4,ShowObjectLayoutAction.java,actionPerformed,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        if (psiClass == null) { //FIXME
            LOG.error(""Can't show layout: unable to determine selected class. Are you selected a class name?"");
            return;
        }
//        assert psiClass != null;
        try {
            JolView.getInstance(project).showLayoutForClass(psiClass);",https://www.github.com/stokito/ideajol/commit/dd25a436727e9b85a905246f3af32429ae23f1f4,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        if (psiClass == null) { 
            LOG.error(""Can't show layout: unable to determine selected class. Are you selected a class name?"");
            return;
        }

        try {
            JolView.getInstance(project).showLayoutForClass(psiClass);
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'Project', ' ', 'project', ' ', '=', ' ', 'event', '.', 'getProject', '(', ')', ';', '\n', '        ', 'assert', ' ', 'project', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', ' ', '\n', '            ', 'LOG', '.', 'error', '(', '""', ""Can't show layout: unable to determine selected class. Are you selected a class name?"", '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'JolView', '.', 'getInstance', '(', 'project', ')', '.', 'showLayoutForClass', '(', 'psiClass', ')', ';', '\n']"
master,ac466c896d9dd4048e51350ccbc21f176cffe960,JolInspection.java,checkClass,"    public ProblemDescriptor[] checkClass(@NotNull PsiClass aClass, @NotNull InspectionManager manager, boolean isOnTheFly) {
        if (isNotUsualClass(aClass) || isBusinessLogicClass(aClass)) {
            return null;
        }
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(aClass);
        ClassLayout layout = LAYOUTER.layout(classData);
        if (layout.instanceSize() <= THRESHOLD) {
            return null;
        }
        ProblemDescriptor problem = manager.createProblemDescriptor(aClass, ""Class have too big memory footprint"", SHOW_JOL_QUICK_FIX, ProblemHighlightType.WEAK_WARNING, isOnTheFly);
        return new ProblemDescriptor[]{problem};
    }",https://www.github.com/stokito/ideajol/commit/ac466c896d9dd4048e51350ccbc21f176cffe960,"    public ProblemDescriptor[] checkClass(@NotNull PsiClass aClass, @NotNull InspectionManager manager, boolean isOnTheFly) {
        if (isNotUsualClass(aClass) || isBusinessLogicClass(aClass)) {
            return null;
        }
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(aClass);
        ClassLayout layout = LAYOUTER.layout(classData);
        if (layout.instanceSize() <= THRESHOLD) {
            return null;
        }
        ProblemDescriptor problem = manager.createProblemDescriptor(aClass, ""Class have too big memory footprint"", SHOW_JOL_QUICK_FIX, ProblemHighlightType.WEAK_WARNING, isOnTheFly);
        return new ProblemDescriptor[]{problem};
    }
","['    ', 'public', ' ', 'ProblemDescriptor', '[', ']', ' ', 'checkClass', '(', '@NotNull', ' ', 'PsiClass', ' ', 'aClass', ',', ' ', '@NotNull', ' ', 'InspectionManager', ' ', 'manager', ',', ' ', 'boolean', ' ', 'isOnTheFly', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'isNotUsualClass', '(', 'aClass', ')', ' ', '|', '|', ' ', 'isBusinessLogicClass', '(', 'aClass', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'aClass', ')', ';', '\n', '        ', 'ClassLayout', ' ', 'layout', ' ', '=', ' ', 'LAYOUTER', '.', 'layout', '(', 'classData', ')', ';', '\n', '        ', 'if', ' ', '(', 'layout', '.', 'instanceSize', '(', ')', ' ', '<', '=', ' ', 'THRESHOLD', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'ProblemDescriptor', ' ', 'problem', ' ', '=', ' ', 'manager', '.', 'createProblemDescriptor', '(', 'aClass', ',', ' ', '""', 'Class have too big memory footprint', '""', ',', ' ', 'SHOW_JOL_QUICK_FIX', ',', ' ', 'ProblemHighlightType', '.', 'WEAK_WARNING', ',', ' ', 'isOnTheFly', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ProblemDescriptor', '[', ']', '{', 'problem', '}', ';', '\n', '    ', '}', '\n']"
master,53a7a230ca75edf9dfe5943a939a13168252993f,JolView.java,collectObjectLayouts,"    private ArrayList<FieldLayout> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutGap(nextFree, exterLoss, ""(loss due to the next object alignment)""));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/53a7a230ca75edf9dfe5943a939a13168252993f,"    private ArrayList<FieldLayout> collectObjectLayouts(ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutGap(nextFree, exterLoss, ""(loss due to the next object alignment)""));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'collectObjectLayouts', '(', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', '""', '(object header)', '""', ')', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', '""', '(alignment/padding gap)', '""', ')', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'fieldLayout', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', '""', '(loss due to the next object alignment)', '""', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'showTotalInstanceSize', '(', 'interLoss', ',', ' ', 'exterLoss', ',', ' ', 'sizeOf', ',', ' ', 'totalLoss', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,ff79c1ff5cb58b27dab1b11d6e823586cc79a8b9,ShowObjectLayoutAction.java,update,"    public void update(@NotNull AnActionEvent event) {
        PsiClass selectedPsiClass = getSelectedPsiClass(event);
        event.getPresentation().setEnabled(selectedPsiClass != null);
    }",https://www.github.com/stokito/ideajol/commit/ff79c1ff5cb58b27dab1b11d6e823586cc79a8b9,"    public void update(@NotNull AnActionEvent event) {
        PsiClass selectedPsiClass = getSelectedPsiClass(event);
        event.getPresentation().setEnabled(selectedPsiClass != null);
    }
","['    ', 'public', ' ', 'void', ' ', 'update', '(', '@NotNull', ' ', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'selectedPsiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'event', '.', 'getPresentation', '(', ')', '.', 'setEnabled', '(', 'selectedPsiClass', ' ', '!', '=', ' ', 'null', ')', ';', '\n', '    ', '}', '\n']"
master,ff79c1ff5cb58b27dab1b11d6e823586cc79a8b9,ShowObjectLayoutAction.java,actionPerformed,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        if (psiClass == null) { //FIXME
            LOG.error(""Can't show layout: unable to determine selected class. Did you selected the class name?"");
            return;
        }
//        assert psiClass != null;
        try {
            JolView.getInstance(project).showLayoutForClass(psiClass);",https://www.github.com/stokito/ideajol/commit/ff79c1ff5cb58b27dab1b11d6e823586cc79a8b9,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        if (psiClass == null) { 
            LOG.error(""Can't show layout: unable to determine selected class. Did you selected the class name?"");
            return;
        }

        try {
            JolView.getInstance(project).showLayoutForClass(psiClass);
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'Project', ' ', 'project', ' ', '=', ' ', 'event', '.', 'getProject', '(', ')', ';', '\n', '        ', 'assert', ' ', 'project', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', ' ', '\n', '            ', 'LOG', '.', 'error', '(', '""', ""Can't show layout: unable to determine selected class. Did you selected the class name?"", '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'JolView', '.', 'getInstance', '(', 'project', ')', '.', 'showLayoutForClass', '(', 'psiClass', ')', ';', '\n']"
master,ff79c1ff5cb58b27dab1b11d6e823586cc79a8b9,ShowJolQuickFix.java,applyFix,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        ActionManager am = ActionManager.getInstance();
        DataContext dataContext = DataManager.getInstance().getDataContext();
        Presentation presentation = new Presentation();
        AnActionEvent anActionEvent = new AnActionEvent(null, dataContext, UNKNOWN, presentation, am, 0);
        am.getAction(""showObjectLayout"").actionPerformed(anActionEvent);
",https://www.github.com/stokito/ideajol/commit/ff79c1ff5cb58b27dab1b11d6e823586cc79a8b9,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        ActionManager am = ActionManager.getInstance();
        DataContext dataContext = DataManager.getInstance().getDataContext();
        Presentation presentation = new Presentation();
        AnActionEvent anActionEvent = new AnActionEvent(null, dataContext, UNKNOWN, presentation, am, 0);
        am.getAction(""showObjectLayout"").actionPerformed(anActionEvent);
","['    ', 'public', ' ', 'void', ' ', 'applyFix', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ProblemDescriptor', ' ', 'problemDescriptor', ')', ' ', '{', '\n', '        ', 'PsiElement', ' ', 'psiClass', ' ', '=', ' ', 'problemDescriptor', '.', 'getPsiElement', '(', ')', ';', '\n', '        ', 'if', ' ', '(', '!', '(', 'psiClass', ' ', 'instanceof', ' ', 'PsiClass', ')', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'ActionManager', ' ', 'am', ' ', '=', ' ', 'ActionManager', '.', 'getInstance', '(', ')', ';', '\n', '        ', 'DataContext', ' ', 'dataContext', ' ', '=', ' ', 'DataManager', '.', 'getInstance', '(', ')', '.', 'getDataContext', '(', ')', ';', '\n', '        ', 'Presentation', ' ', 'presentation', ' ', '=', ' ', 'new', ' ', 'Presentation', '(', ')', ';', '\n', '        ', 'AnActionEvent', ' ', 'anActionEvent', ' ', '=', ' ', 'new', ' ', 'AnActionEvent', '(', 'null', ',', ' ', 'dataContext', ',', ' ', 'UNKNOWN', ',', ' ', 'presentation', ',', ' ', 'am', ',', ' ', '0', ')', ';', '\n', '        ', 'am', '.', 'getAction', '(', '""', 'showObjectLayout', '""', ')', '.', 'actionPerformed', '(', 'anActionEvent', ')', ';', '\n']"
master,cc5e8e2e52cad08b730afab44b16c1c747c239fb,ShowJolQuickFix.java,applyFix,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        try {
            JolView.getInstance(project).showLayoutForClass((PsiClass) psiClass);",https://www.github.com/stokito/ideajol/commit/cc5e8e2e52cad08b730afab44b16c1c747c239fb,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        try {
            JolView.getInstance(project).showLayoutForClass((PsiClass) psiClass);
","['    ', 'public', ' ', 'void', ' ', 'applyFix', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ProblemDescriptor', ' ', 'problemDescriptor', ')', ' ', '{', '\n', '        ', 'PsiElement', ' ', 'psiClass', ' ', '=', ' ', 'problemDescriptor', '.', 'getPsiElement', '(', ')', ';', '\n', '        ', 'if', ' ', '(', '!', '(', 'psiClass', ' ', 'instanceof', ' ', 'PsiClass', ')', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'JolView', '.', 'getInstance', '(', 'project', ')', '.', 'showLayoutForClass', '(', '(', 'PsiClass', ')', ' ', 'psiClass', ')', ';', '\n']"
master,e118f63650e36db13d6a304216e6cc978d93acaf,JolView.java,showLayoutForClass,"    public void showLayoutForClass(@NotNull PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass(psiClass);
    }",https://www.github.com/stokito/ideajol/commit/e118f63650e36db13d6a304216e6cc978d93acaf,"    public void showLayoutForClass(@NotNull PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass(psiClass);
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', '@NotNull', ' ', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', ' ', 'SmartPointerManager', '.', 'getInstance', '(', 'project', ')', '.', 'createSmartPsiElementPointer', '(', 'psiClass', ')', ';', '\n', '        ', 'classLabelFontStrike', '(', 'FALSE', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setIcon', '(', 'psiClass', '.', 'getIcon', '(', '0', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'setEnabled', '(', 'true', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', 'psiClass', ')', ';', '\n', '    ', '}', '\n']"
master,e118f63650e36db13d6a304216e6cc978d93acaf,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass(@NotNull PsiClass psiClass) {
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/e118f63650e36db13d6a304216e6cc978d93acaf,"    private void showLayoutForSelectedClass(@NotNull PsiClass psiClass) {
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', '@NotNull', ' ', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'calcClassLayout', '(', 'psiClass', ')', ';', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLayouts', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'objectLayouts', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,e118f63650e36db13d6a304216e6cc978d93acaf,JolView.java,collectObjectLayouts,"    private ArrayList<FieldLayout> collectObjectLayouts(@NotNull ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutGap(nextFree, exterLoss, ""(loss due to the next object alignment)""));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/e118f63650e36db13d6a304216e6cc978d93acaf,"    private ArrayList<FieldLayout> collectObjectLayouts(@NotNull ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        long interLoss = 0;
        long exterLoss = 0;
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
                interLoss += fieldLayoutSize;
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            exterLoss = sizeOf - nextFree;
            objectLines.add(new FieldLayoutGap(nextFree, exterLoss, ""(loss due to the next object alignment)""));
        }
        long totalLoss = interLoss + exterLoss;

        showTotalInstanceSize(interLoss, exterLoss, sizeOf, totalLoss);
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'collectObjectLayouts', '(', '@NotNull', ' ', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', '""', '(object header)', '""', ')', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'long', ' ', 'interLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'long', ' ', 'exterLoss', ' ', '=', ' ', '0', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', '""', '(alignment/padding gap)', '""', ')', ')', ';', '\n', '                ', 'interLoss', ' ', '+', '=', ' ', 'fieldLayoutSize', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'fieldLayout', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'exterLoss', ' ', '=', ' ', 'sizeOf', ' ', '-', ' ', 'nextFree', ';', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'exterLoss', ',', ' ', '""', '(loss due to the next object alignment)', '""', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'totalLoss', ' ', '=', ' ', 'interLoss', ' ', '+', ' ', 'exterLoss', ';', '\n', '\n', '        ', 'showTotalInstanceSize', '(', 'interLoss', ',', ' ', 'exterLoss', ',', ' ', 'sizeOf', ',', ' ', 'totalLoss', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,e118f63650e36db13d6a304216e6cc978d93acaf,JolView.java,layoutOptionsActionPerformed,"    private void layoutOptionsActionPerformed(@NotNull ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        showLayoutForSelectedClass(psiClass);
    }",https://www.github.com/stokito/ideajol/commit/e118f63650e36db13d6a304216e6cc978d93acaf,"    private void layoutOptionsActionPerformed(@NotNull ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        showLayoutForSelectedClass(psiClass);
    }
","['    ', 'private', ' ', 'void', ' ', 'layoutOptionsActionPerformed', '(', '@NotNull', ' ', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'showLayoutForSelectedClass', '(', 'psiClass', ')', ';', '\n', '    ', '}', '\n']"
master,e118f63650e36db13d6a304216e6cc978d93acaf,JolView.java,copyObjectLayoutToClipboard,"    private void copyObjectLayoutToClipboard(@NotNull ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }",https://www.github.com/stokito/ideajol/commit/e118f63650e36db13d6a304216e6cc978d93acaf,"    private void copyObjectLayoutToClipboard(@NotNull ActionEvent e) {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
    }
","['    ', 'private', ' ', 'void', ' ', 'copyObjectLayoutToClipboard', '(', '@NotNull', ' ', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'calcClassLayout', '(', 'psiClass', ')', ';', '\n', '        ', 'CopyPasteManager', '.', 'getInstance', '(', ')', '.', 'setContents', '(', 'new', ' ', 'StringSelection', '(', 'classLayout', '.', 'toPrintable', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e118f63650e36db13d6a304216e6cc978d93acaf,JolView.java,calcClassLayout,"    private ClassLayout calcClassLayout(@NotNull PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        return layouter.layout(classData);
    }",https://www.github.com/stokito/ideajol/commit/e118f63650e36db13d6a304216e6cc978d93acaf,"    private ClassLayout calcClassLayout(@NotNull PsiClass psiClass) {
        Layouter layouter = getSelectedLayoter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        return layouter.layout(classData);
    }
","['    ', 'private', ' ', 'ClassLayout', ' ', 'calcClassLayout', '(', '@NotNull', ' ', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayoter', '(', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'return', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '    ', '}', '\n']"
master,8f10e35d66e0360cd7c9b601b55bec3a0b2c4eb0,ShowJolQuickFix.java,applyFix,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClassIdentifier = problemDescriptor.getPsiElement();
        if (!(psiClassIdentifier instanceof PsiIdentifier)) {
            return;
        }
        try {
            PsiClass psiClass = (PsiClass) psiClassIdentifier.getParent();",https://www.github.com/stokito/ideajol/commit/8f10e35d66e0360cd7c9b601b55bec3a0b2c4eb0,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClassIdentifier = problemDescriptor.getPsiElement();
        if (!(psiClassIdentifier instanceof PsiIdentifier)) {
            return;
        }
        try {
            PsiClass psiClass = (PsiClass) psiClassIdentifier.getParent();
","['    ', 'public', ' ', 'void', ' ', 'applyFix', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ProblemDescriptor', ' ', 'problemDescriptor', ')', ' ', '{', '\n', '        ', 'PsiElement', ' ', 'psiClassIdentifier', ' ', '=', ' ', 'problemDescriptor', '.', 'getPsiElement', '(', ')', ';', '\n', '        ', 'if', ' ', '(', '!', '(', 'psiClassIdentifier', ' ', 'instanceof', ' ', 'PsiIdentifier', ')', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', '(', 'PsiClass', ')', ' ', 'psiClassIdentifier', '.', 'getParent', '(', ')', ';', '\n']"
master,d396e7a659e905625f9c24bee575ee92cdcc3bb6,PsiClassAdapter.java,determineContendedGroup,"    private static String determineContendedGroup(@NotNull PsiField psiField) {
        String contendedGroup = fetchContendedGroup(psiField, ""sun.misc.Contended"");
        if (contendedGroup == null) {
            contendedGroup = fetchContendedGroup(psiField, ""jdk.internal.vm.annotation.Contended"");
        }
        return contendedGroup;
    }",https://www.github.com/stokito/ideajol/commit/d396e7a659e905625f9c24bee575ee92cdcc3bb6,"    private static String determineContendedGroup(@NotNull PsiField psiField) {
        String contendedGroup = fetchContendedGroup(psiField, ""sun.misc.Contended"");
        if (contendedGroup == null) {
            contendedGroup = fetchContendedGroup(psiField, ""jdk.internal.vm.annotation.Contended"");
        }
        return contendedGroup;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'determineContendedGroup', '(', '@NotNull', ' ', 'PsiField', ' ', 'psiField', ')', ' ', '{', '\n', '        ', 'String', ' ', 'contendedGroup', ' ', '=', ' ', 'fetchContendedGroup', '(', 'psiField', ',', ' ', '""', 'sun.misc.Contended', '""', ')', ';', '\n', '        ', 'if', ' ', '(', 'contendedGroup', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'contendedGroup', ' ', '=', ' ', 'fetchContendedGroup', '(', 'psiField', ',', ' ', '""', 'jdk.internal.vm.annotation.Contended', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'contendedGroup', ';', '\n', '    ', '}', '\n']"
master,bc989107140f6d4ad1c848ecdf47a6479fd38886,JolView.java,showLayoutForClass,"    public void showLayoutForClass(@NotNull PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/bc989107140f6d4ad1c848ecdf47a6479fd38886,"    public void showLayoutForClass(@NotNull PsiClass psiClass) {
        this.psiClass = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiClass);
        classLabelFontStrike(FALSE);
        jolForm.lblClassName.setText(psiClass.getName());
        jolForm.lblClassName.setIcon(psiClass.getIcon(0));
        jolForm.copyButton.setEnabled(true);
        showLayoutForSelectedClass();
    }
","['    ', 'public', ' ', 'void', ' ', 'showLayoutForClass', '(', '@NotNull', ' ', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'this', '.', 'psiClass', ' ', '=', ' ', 'SmartPointerManager', '.', 'getInstance', '(', 'project', ')', '.', 'createSmartPsiElementPointer', '(', 'psiClass', ')', ';', '\n', '        ', 'classLabelFontStrike', '(', 'FALSE', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setText', '(', 'psiClass', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setIcon', '(', 'psiClass', '.', 'getIcon', '(', '0', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'setEnabled', '(', 'true', ')', ';', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,bc989107140f6d4ad1c848ecdf47a6479fd38886,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }",https://www.github.com/stokito/ideajol/commit/bc989107140f6d4ad1c848ecdf47a6479fd38886,"    private void showLayoutForSelectedClass() {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(50);
        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMaxWidth(50);
        columnModel.getColumn(1).setResizable(false);
    }
","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'calcClassLayout', '(', 'psiClass', ')', ';', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLayouts', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'objectLayouts', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '50', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setResizable', '(', 'false', ')', ';', '\n', '    ', '}', '\n']"
master,bc989107140f6d4ad1c848ecdf47a6479fd38886,JolView.java,layoutOptionsActionPerformed,"    private void layoutOptionsActionPerformed(@NotNull ActionEvent e) {
        showLayoutForSelectedClass();
    }",https://www.github.com/stokito/ideajol/commit/bc989107140f6d4ad1c848ecdf47a6479fd38886,"    private void layoutOptionsActionPerformed(@NotNull ActionEvent e) {
        showLayoutForSelectedClass();
    }
","['    ', 'private', ' ', 'void', ' ', 'layoutOptionsActionPerformed', '(', '@NotNull', ' ', 'ActionEvent', ' ', 'e', ')', ' ', '{', '\n', '        ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '    ', '}', '\n']"
master,bc989107140f6d4ad1c848ecdf47a6479fd38886,JolView.java,classLabelFontStrike,"    private void classLabelFontStrike(Boolean strikethroughOn) {
        @SuppressWarnings(""unchecked"")
        Map<TextAttribute, Object> fontAttributes = (Map<TextAttribute, Object>) jolForm.lblClassName.getFont().getAttributes();
        fontAttributes.put(STRIKETHROUGH, strikethroughOn);
        Font strikethroughFont = new Font(fontAttributes);
        jolForm.lblClassName.setFont(strikethroughFont);
    }",https://www.github.com/stokito/ideajol/commit/bc989107140f6d4ad1c848ecdf47a6479fd38886,"    private void classLabelFontStrike(Boolean strikethroughOn) {
        @SuppressWarnings(""unchecked"")
        Map<TextAttribute, Object> fontAttributes = (Map<TextAttribute, Object>) jolForm.lblClassName.getFont().getAttributes();
        fontAttributes.put(STRIKETHROUGH, strikethroughOn);
        Font strikethroughFont = new Font(fontAttributes);
        jolForm.lblClassName.setFont(strikethroughFont);
    }
","['    ', 'private', ' ', 'void', ' ', 'classLabelFontStrike', '(', 'Boolean', ' ', 'strikethroughOn', ')', ' ', '{', '\n', '        ', '@SuppressWarnings', '(', '""', 'unchecked', '""', ')', '\n', '        ', 'Map', '<', 'TextAttribute', ',', ' ', 'Object', '>', ' ', 'fontAttributes', ' ', '=', ' ', '(', 'Map', '<', 'TextAttribute', ',', ' ', 'Object', '>', ')', ' ', 'jolForm', '.', 'lblClassName', '.', 'getFont', '(', ')', '.', 'getAttributes', '(', ')', ';', '\n', '        ', 'fontAttributes', '.', 'put', '(', 'STRIKETHROUGH', ',', ' ', 'strikethroughOn', ')', ';', '\n', '        ', 'Font', ' ', 'strikethroughFont', ' ', '=', ' ', 'new', ' ', 'Font', '(', 'fontAttributes', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'setFont', '(', 'strikethroughFont', ')', ';', '\n', '    ', '}', '\n']"
master,c4d0c81a8b286510601841fb46587a28c00264ef,JolView.java,dispose,"    public void dispose() {
        project = null;
        psiClass = null;
        jolForm = null;
    }",https://www.github.com/stokito/ideajol/commit/c4d0c81a8b286510601841fb46587a28c00264ef,"    public void dispose() {
        project = null;
        psiClass = null;
        jolForm = null;
    }
","['    ', 'public', ' ', 'void', ' ', 'dispose', '(', ')', ' ', '{', '\n', '        ', 'project', ' ', '=', ' ', 'null', ';', '\n', '        ', 'psiClass', ' ', '=', ' ', 'null', ';', '\n', '        ', 'jolForm', ' ', '=', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,15137de8e25fd5ffbc3bfeb52c085acb3115a849,PsiClassAdapter.java,determineContendedGroup,"    private static String determineContendedGroup(@NotNull PsiField psiField) {
        String contendedGroup = fetchContendedGroup(psiField, ""jdk.internal.vm.annotation.Contended"");
        if (contendedGroup == null) {
            contendedGroup = fetchContendedGroup(psiField, ""sun.misc.Contended"");
        }
        return contendedGroup;
    }",https://www.github.com/stokito/ideajol/commit/15137de8e25fd5ffbc3bfeb52c085acb3115a849,"    private static String determineContendedGroup(@NotNull PsiField psiField) {
        String contendedGroup = fetchContendedGroup(psiField, ""jdk.internal.vm.annotation.Contended"");
        if (contendedGroup == null) {
            contendedGroup = fetchContendedGroup(psiField, ""sun.misc.Contended"");
        }
        return contendedGroup;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'determineContendedGroup', '(', '@NotNull', ' ', 'PsiField', ' ', 'psiField', ')', ' ', '{', '\n', '        ', 'String', ' ', 'contendedGroup', ' ', '=', ' ', 'fetchContendedGroup', '(', 'psiField', ',', ' ', '""', 'jdk.internal.vm.annotation.Contended', '""', ')', ';', '\n', '        ', 'if', ' ', '(', 'contendedGroup', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'contendedGroup', ' ', '=', ' ', 'fetchContendedGroup', '(', 'psiField', ',', ' ', '""', 'sun.misc.Contended', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'contendedGroup', ';', '\n', '    ', '}', '\n']"
master,7fe4375d8ba96f501a276bab9f0c74c188fcf2a0,JolToolWindowFactory.java,createToolWindowContent,"    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JComponent jol = JolView.getInstance(project);
        toolWindow.getContentManager().addContent(ContentFactory.SERVICE.getInstance().createContent(jol, null, false));
    }",https://www.github.com/stokito/ideajol/commit/7fe4375d8ba96f501a276bab9f0c74c188fcf2a0,"    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JComponent jol = JolView.getInstance(project);
        toolWindow.getContentManager().addContent(ContentFactory.SERVICE.getInstance().createContent(jol, null, false));
    }
","['    ', 'public', ' ', 'void', ' ', 'createToolWindowContent', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ToolWindow', ' ', 'toolWindow', ')', ' ', '{', '\n', '        ', 'JComponent', ' ', 'jol', ' ', '=', ' ', 'JolView', '.', 'getInstance', '(', 'project', ')', ';', '\n', '        ', 'toolWindow', '.', 'getContentManager', '(', ')', '.', 'addContent', '(', 'ContentFactory', '.', 'SERVICE', '.', 'getInstance', '(', ')', '.', 'createContent', '(', 'jol', ',', ' ', 'null', ',', ' ', 'false', ')', ')', ';', '\n', '    ', '}', '\n']"
master,0a6951f8aba7c62feba555687a98c7855149efb6,JolView.java,collectObjectLayouts,"    private ArrayList<FieldLayout> collectObjectLayouts(@NotNull ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            objectLines.add(new FieldLayoutGap(nextFree, classLayout.getLossesExternal(), ""(loss due to the next object alignment)""));
        }

        showTotalInstanceSize(classLayout.getLossesInternal(), classLayout.getLossesExternal(), sizeOf, classLayout.getLossesTotal());
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/0a6951f8aba7c62feba555687a98c7855149efb6,"    private ArrayList<FieldLayout> collectObjectLayouts(@NotNull ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        long sizeOf = classLayout.instanceSize();
        if (sizeOf != nextFree) {
            objectLines.add(new FieldLayoutGap(nextFree, classLayout.getLossesExternal(), ""(loss due to the next object alignment)""));
        }

        showTotalInstanceSize(classLayout.getLossesInternal(), classLayout.getLossesExternal(), sizeOf, classLayout.getLossesTotal());
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'collectObjectLayouts', '(', '@NotNull', ' ', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', '""', '(object header)', '""', ')', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', '""', '(alignment/padding gap)', '""', ')', ')', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'fieldLayout', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'sizeOf', ' ', '=', ' ', 'classLayout', '.', 'instanceSize', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'sizeOf', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'classLayout', '.', 'getLossesExternal', '(', ')', ',', ' ', '""', '(loss due to the next object alignment)', '""', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'showTotalInstanceSize', '(', 'classLayout', '.', 'getLossesInternal', '(', ')', ',', ' ', 'classLayout', '.', 'getLossesExternal', '(', ')', ',', ' ', 'sizeOf', ',', ' ', 'classLayout', '.', 'getLossesTotal', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,da52f8f25db5e04871f952ada8ce15abba7cb59a,JolView.java,collectObjectLayouts,"    private ArrayList<FieldLayout> collectObjectLayouts(@NotNull ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        if (classLayout.instanceSize() != nextFree) {
            objectLines.add(new FieldLayoutGap(nextFree, classLayout.getLossesExternal(), ""(loss due to the next object alignment)""));
        }

        showTotalInstanceSize(classLayout);
        return objectLines;
    }",https://www.github.com/stokito/ideajol/commit/da52f8f25db5e04871f952ada8ce15abba7cb59a,"    private ArrayList<FieldLayout> collectObjectLayouts(@NotNull ClassLayout classLayout) {
        ArrayList<FieldLayout> objectLines = new ArrayList<>(classLayout.fields().size() + 8);
        objectLines.add(new FieldLayoutGap(0, classLayout.headerSize(), ""(object header)""));
        long nextFree = classLayout.headerSize();
        for (FieldLayout fieldLayout : classLayout.fields()) {
            if (fieldLayout.offset() > nextFree) {
                long fieldLayoutSize = fieldLayout.offset() - nextFree;
                objectLines.add(new FieldLayoutGap(nextFree, fieldLayoutSize, ""(alignment/padding gap)""));
            }
            objectLines.add(fieldLayout);
            nextFree = fieldLayout.offset() + fieldLayout.size();
        }
        if (classLayout.instanceSize() != nextFree) {
            objectLines.add(new FieldLayoutGap(nextFree, classLayout.getLossesExternal(), ""(loss due to the next object alignment)""));
        }

        showTotalInstanceSize(classLayout);
        return objectLines;
    }
","['    ', 'private', ' ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'collectObjectLayouts', '(', '@NotNull', ' ', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLines', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', 'classLayout', '.', 'fields', '(', ')', '.', 'size', '(', ')', ' ', '+', ' ', '8', ')', ';', '\n', '        ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', '0', ',', ' ', 'classLayout', '.', 'headerSize', '(', ')', ',', ' ', '""', '(object header)', '""', ')', ')', ';', '\n', '        ', 'long', ' ', 'nextFree', ' ', '=', ' ', 'classLayout', '.', 'headerSize', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'FieldLayout', ' ', 'fieldLayout', ' ', ':', ' ', 'classLayout', '.', 'fields', '(', ')', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'fieldLayout', '.', 'offset', '(', ')', ' ', '>', ' ', 'nextFree', ')', ' ', '{', '\n', '                ', 'long', ' ', 'fieldLayoutSize', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '-', ' ', 'nextFree', ';', '\n', '                ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'fieldLayoutSize', ',', ' ', '""', '(alignment/padding gap)', '""', ')', ')', ';', '\n', '            ', '}', '\n', '            ', 'objectLines', '.', 'add', '(', 'fieldLayout', ')', ';', '\n', '            ', 'nextFree', ' ', '=', ' ', 'fieldLayout', '.', 'offset', '(', ')', ' ', '+', ' ', 'fieldLayout', '.', 'size', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'classLayout', '.', 'instanceSize', '(', ')', ' ', '!', '=', ' ', 'nextFree', ')', ' ', '{', '\n', '            ', 'objectLines', '.', 'add', '(', 'new', ' ', 'FieldLayoutGap', '(', 'nextFree', ',', ' ', 'classLayout', '.', 'getLossesExternal', '(', ')', ',', ' ', '""', '(loss due to the next object alignment)', '""', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'showTotalInstanceSize', '(', 'classLayout', ')', ';', '\n', '        ', 'return', ' ', 'objectLines', ';', '\n', '    ', '}', '\n']"
master,da52f8f25db5e04871f952ada8ce15abba7cb59a,JolView.java,showTotalInstanceSize,"    private void showTotalInstanceSize(ClassLayout classLayout) {
        jolForm.lblInstanceSize.setText(Long.toString(classLayout.instanceSize()));
        changeLabelInstanceSizeColorIfLargerThanCacheLine(classLayout.instanceSize());
        jolForm.lblLossesInternal.setText(Long.toString( classLayout.getLossesInternal()));
        jolForm.lblLossesExternal.setText(Long.toString(classLayout.getLossesExternal()));
        jolForm.lblLossesTotal.setText(Long.toString(classLayout.getLossesTotal()));
    }",https://www.github.com/stokito/ideajol/commit/da52f8f25db5e04871f952ada8ce15abba7cb59a,"    private void showTotalInstanceSize(ClassLayout classLayout) {
        jolForm.lblInstanceSize.setText(Long.toString(classLayout.instanceSize()));
        changeLabelInstanceSizeColorIfLargerThanCacheLine(classLayout.instanceSize());
        jolForm.lblLossesInternal.setText(Long.toString( classLayout.getLossesInternal()));
        jolForm.lblLossesExternal.setText(Long.toString(classLayout.getLossesExternal()));
        jolForm.lblLossesTotal.setText(Long.toString(classLayout.getLossesTotal()));
    }
","['    ', 'private', ' ', 'void', ' ', 'showTotalInstanceSize', '(', 'ClassLayout', ' ', 'classLayout', ')', ' ', '{', '\n', '        ', 'jolForm', '.', 'lblInstanceSize', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'classLayout', '.', 'instanceSize', '(', ')', ')', ')', ';', '\n', '        ', 'changeLabelInstanceSizeColorIfLargerThanCacheLine', '(', 'classLayout', '.', 'instanceSize', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesInternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', ' ', 'classLayout', '.', 'getLossesInternal', '(', ')', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesExternal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'classLayout', '.', 'getLossesExternal', '(', ')', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblLossesTotal', '.', 'setText', '(', 'Long', '.', 'toString', '(', 'classLayout', '.', 'getLossesTotal', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n']"
master,84579922b98c3b192aa5ebae8a25750beeae6de0,PsiClassAdapterTest.java,testCreateClassDataFromPsiClass,"    public void testCreateClassDataFromPsiClass() {
        myFixture.configureByText(""PackingFields.java"", ""public class PackingFields {\n"" +
                ""    boolean bo1, bo2;\n"" +
                ""    byte b1, b2;\n"" +
                ""    char c1, c2;\n"" +
                ""    double d1, d2;\n"" +
                ""    float f1, f2;\n"" +
                ""    int i1, i2;\n"" +
                ""    long l1, l2;\n"" +
                ""    short s1, s2;\n"" +
                ""}"");

        PsiClass psiClass = myFixture.findClass(""PackingFields"");
        System.out.println(psiClass.getText());
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        assertEquals(16, classData.fields().size());
        assertField(classData, 0, ""bo1"", ""boolean"", ""PackingFields"");
        assertField(classData, 1, ""bo2"", ""boolean"", ""PackingFields"");
        assertField(classData, 2, ""b1"", ""byte"", ""PackingFields"");
        assertField(classData, 3, ""b2"", ""byte"", ""PackingFields"");
        assertField(classData, 4, ""c1"", ""char"", ""PackingFields"");
        assertField(classData, 5, ""c2"", ""char"", ""PackingFields"");
        assertField(classData, 6, ""d1"", ""double"", ""PackingFields"");
        assertField(classData, 7, ""d2"", ""double"", ""PackingFields"");
        assertField(classData, 8, ""f1"", ""float"", ""PackingFields"");
        assertField(classData, 9, ""f2"", ""float"", ""PackingFields"");
        assertField(classData, 10, ""i1"", ""int"", ""PackingFields"");
        assertField(classData, 11, ""i2"", ""int"", ""PackingFields"");
        assertField(classData, 12, ""l1"", ""long"", ""PackingFields"");
        assertField(classData, 13, ""l2"", ""long"", ""PackingFields"");
        assertField(classData, 14, ""s1"", ""short"", ""PackingFields"");
        assertField(classData, 15, ""s2"", ""short"", ""PackingFields"");
    }",https://www.github.com/stokito/ideajol/commit/84579922b98c3b192aa5ebae8a25750beeae6de0,"    public void testCreateClassDataFromPsiClass() {
        myFixture.configureByText(""PackingFields.java"", ""public class PackingFields {\n"" +
                ""    boolean bo1, bo2;\n"" +
                ""    byte b1, b2;\n"" +
                ""    char c1, c2;\n"" +
                ""    double d1, d2;\n"" +
                ""    float f1, f2;\n"" +
                ""    int i1, i2;\n"" +
                ""    long l1, l2;\n"" +
                ""    short s1, s2;\n"" +
                ""}"");

        PsiClass psiClass = myFixture.findClass(""PackingFields"");
        System.out.println(psiClass.getText());
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        assertEquals(16, classData.fields().size());
        assertField(classData, 0, ""bo1"", ""boolean"", ""PackingFields"");
        assertField(classData, 1, ""bo2"", ""boolean"", ""PackingFields"");
        assertField(classData, 2, ""b1"", ""byte"", ""PackingFields"");
        assertField(classData, 3, ""b2"", ""byte"", ""PackingFields"");
        assertField(classData, 4, ""c1"", ""char"", ""PackingFields"");
        assertField(classData, 5, ""c2"", ""char"", ""PackingFields"");
        assertField(classData, 6, ""d1"", ""double"", ""PackingFields"");
        assertField(classData, 7, ""d2"", ""double"", ""PackingFields"");
        assertField(classData, 8, ""f1"", ""float"", ""PackingFields"");
        assertField(classData, 9, ""f2"", ""float"", ""PackingFields"");
        assertField(classData, 10, ""i1"", ""int"", ""PackingFields"");
        assertField(classData, 11, ""i2"", ""int"", ""PackingFields"");
        assertField(classData, 12, ""l1"", ""long"", ""PackingFields"");
        assertField(classData, 13, ""l2"", ""long"", ""PackingFields"");
        assertField(classData, 14, ""s1"", ""short"", ""PackingFields"");
        assertField(classData, 15, ""s2"", ""short"", ""PackingFields"");
    }
","['    ', 'public', ' ', 'void', ' ', 'testCreateClassDataFromPsiClass', '(', ')', ' ', '{', '\n', '        ', 'myFixture', '.', 'configureByText', '(', '""', 'PackingFields.java', '""', ',', ' ', '""', 'public class PackingFields {', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    boolean bo1, bo2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    byte b1, b2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    char c1, c2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    double d1, d2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    float f1, f2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    int i1, i2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    long l1, l2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '    short s1, s2;', '\\', 'n', '""', ' ', '+', '\n', '                ', '""', '}', '""', ')', ';', '\n', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'myFixture', '.', 'findClass', '(', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'psiClass', '.', 'getText', '(', ')', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'assertEquals', '(', '16', ',', ' ', 'classData', '.', 'fields', '(', ')', '.', 'size', '(', ')', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '0', ',', ' ', '""', 'bo1', '""', ',', ' ', '""', 'boolean', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '1', ',', ' ', '""', 'bo2', '""', ',', ' ', '""', 'boolean', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '2', ',', ' ', '""', 'b1', '""', ',', ' ', '""', 'byte', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '3', ',', ' ', '""', 'b2', '""', ',', ' ', '""', 'byte', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '4', ',', ' ', '""', 'c1', '""', ',', ' ', '""', 'char', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '5', ',', ' ', '""', 'c2', '""', ',', ' ', '""', 'char', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '6', ',', ' ', '""', 'd1', '""', ',', ' ', '""', 'double', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '7', ',', ' ', '""', 'd2', '""', ',', ' ', '""', 'double', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '8', ',', ' ', '""', 'f1', '""', ',', ' ', '""', 'float', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '9', ',', ' ', '""', 'f2', '""', ',', ' ', '""', 'float', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '10', ',', ' ', '""', 'i1', '""', ',', ' ', '""', 'int', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '11', ',', ' ', '""', 'i2', '""', ',', ' ', '""', 'int', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '12', ',', ' ', '""', 'l1', '""', ',', ' ', '""', 'long', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '13', ',', ' ', '""', 'l2', '""', ',', ' ', '""', 'long', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '14', ',', ' ', '""', 's1', '""', ',', ' ', '""', 'short', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '        ', 'assertField', '(', 'classData', ',', ' ', '15', ',', ' ', '""', 's2', '""', ',', ' ', '""', 'short', '""', ',', ' ', '""', 'PackingFields', '""', ')', ';', '\n', '    ', '}', '\n']"
master,84579922b98c3b192aa5ebae8a25750beeae6de0,PsiClassAdapterTest.java,assertField,"    private void assertField(ClassData classData, int index, String name, String typeClass, String hostClass) {
        assertEquals(name, classData.fields().get(index).name());
        assertEquals(typeClass, classData.fields().get(index).typeClass());
        assertEquals(hostClass, classData.fields().get(index).hostClass());
    }",https://www.github.com/stokito/ideajol/commit/84579922b98c3b192aa5ebae8a25750beeae6de0,"    private void assertField(ClassData classData, int index, String name, String typeClass, String hostClass) {
        assertEquals(name, classData.fields().get(index).name());
        assertEquals(typeClass, classData.fields().get(index).typeClass());
        assertEquals(hostClass, classData.fields().get(index).hostClass());
    }
","['    ', 'private', ' ', 'void', ' ', 'assertField', '(', 'ClassData', ' ', 'classData', ',', ' ', 'int', ' ', 'index', ',', ' ', 'String', ' ', 'name', ',', ' ', 'String', ' ', 'typeClass', ',', ' ', 'String', ' ', 'hostClass', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', 'name', ',', ' ', 'classData', '.', 'fields', '(', ')', '.', 'get', '(', 'index', ')', '.', 'name', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'typeClass', ',', ' ', 'classData', '.', 'fields', '(', ')', '.', 'get', '(', 'index', ')', '.', 'typeClass', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'hostClass', ',', ' ', 'classData', '.', 'fields', '(', ')', '.', 'get', '(', 'index', ')', '.', 'hostClass', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,4f0bf0c9ab373fca495bb0a64674454f265e6319,JolToolWindowFactory.java,createToolWindowContent,"    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JolView jolView = new JolView(project);
        ContentManager contentManager = toolWindow.getContentManager();
        Content content = contentManager.getFactory().createContent(jolView, null, false);
        contentManager.addContent(content);
        content.setDisposer(jolView);
    }",https://www.github.com/stokito/ideajol/commit/4f0bf0c9ab373fca495bb0a64674454f265e6319,"    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JolView jolView = new JolView(project);
        ContentManager contentManager = toolWindow.getContentManager();
        Content content = contentManager.getFactory().createContent(jolView, null, false);
        contentManager.addContent(content);
        content.setDisposer(jolView);
    }
","['    ', 'public', ' ', 'void', ' ', 'createToolWindowContent', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ToolWindow', ' ', 'toolWindow', ')', ' ', '{', '\n', '        ', 'JolView', ' ', 'jolView', ' ', '=', ' ', 'new', ' ', 'JolView', '(', 'project', ')', ';', '\n', '        ', 'ContentManager', ' ', 'contentManager', ' ', '=', ' ', 'toolWindow', '.', 'getContentManager', '(', ')', ';', '\n', '        ', 'Content', ' ', 'content', ' ', '=', ' ', 'contentManager', '.', 'getFactory', '(', ')', '.', 'createContent', '(', 'jolView', ',', ' ', 'null', ',', ' ', 'false', ')', ';', '\n', '        ', 'contentManager', '.', 'addContent', '(', 'content', ')', ';', '\n', '        ', 'content', '.', 'setDisposer', '(', 'jolView', ')', ';', '\n', '    ', '}', '\n']"
master,37074f99551fb5dd027ea818ec0974d0ea742cb3,ShowObjectLayoutAction.java,actionPerformed,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        if (psiClass == null) { //FIXME
            LOG.error(""Can't show layout: unable to determine selected class. Did you selected the class name?"");
            return;
        }
        JolView.showJolToolWindow(project, psiClass);
    }",https://www.github.com/stokito/ideajol/commit/37074f99551fb5dd027ea818ec0974d0ea742cb3,"    public void actionPerformed(AnActionEvent event) {
        Project project = event.getProject();
        assert project != null;
        PsiClass psiClass = getSelectedPsiClass(event);
        if (psiClass == null) { 
            LOG.error(""Can't show layout: unable to determine selected class. Did you selected the class name?"");
            return;
        }
        JolView.showJolToolWindow(project, psiClass);
    }
","['    ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'Project', ' ', 'project', ' ', '=', ' ', 'event', '.', 'getProject', '(', ')', ';', '\n', '        ', 'assert', ' ', 'project', ' ', '!', '=', ' ', 'null', ';', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', ' ', '\n', '            ', 'LOG', '.', 'error', '(', '""', ""Can't show layout: unable to determine selected class. Did you selected the class name?"", '""', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'JolView', '.', 'showJolToolWindow', '(', 'project', ',', ' ', 'psiClass', ')', ';', '\n', '    ', '}', '\n']"
master,37074f99551fb5dd027ea818ec0974d0ea742cb3,JolView.java,showJolToolWindow,"    public static void showJolToolWindow(@NotNull Project project, @NotNull PsiClass psiClass) {
        JolView jolView = ServiceManager.getService(project, JolView.class);
        jolView.showLayoutForClass(psiClass);
        ToolWindowManager.getInstance(project).getToolWindow(""JOL"").activate(null);
    }",https://www.github.com/stokito/ideajol/commit/37074f99551fb5dd027ea818ec0974d0ea742cb3,"    public static void showJolToolWindow(@NotNull Project project, @NotNull PsiClass psiClass) {
        JolView jolView = ServiceManager.getService(project, JolView.class);
        jolView.showLayoutForClass(psiClass);
        ToolWindowManager.getInstance(project).getToolWindow(""JOL"").activate(null);
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'showJolToolWindow', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'JolView', ' ', 'jolView', ' ', '=', ' ', 'ServiceManager', '.', 'getService', '(', 'project', ',', ' ', 'JolView', '.', 'class', ')', ';', '\n', '        ', 'jolView', '.', 'showLayoutForClass', '(', 'psiClass', ')', ';', '\n', '        ', 'ToolWindowManager', '.', 'getInstance', '(', 'project', ')', '.', 'getToolWindow', '(', '""', 'JOL', '""', ')', '.', 'activate', '(', 'null', ')', ';', '\n', '    ', '}', '\n']"
master,45aba74d2b714e67e8cb9b17c41f35e35d7305d9,JolView.java,showJolToolWindow,"    public static void showJolToolWindow(@NotNull Project project, @NotNull PsiClass psiClass) {
        try {
            ToolWindow toolWindow = ToolWindowManager.getInstance(project).getToolWindow(""JOL"");",https://www.github.com/stokito/ideajol/commit/45aba74d2b714e67e8cb9b17c41f35e35d7305d9,"    public static void showJolToolWindow(@NotNull Project project, @NotNull PsiClass psiClass) {
        try {
            ToolWindow toolWindow = ToolWindowManager.getInstance(project).getToolWindow(""JOL"");
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'showJolToolWindow', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'ToolWindow', ' ', 'toolWindow', ' ', '=', ' ', 'ToolWindowManager', '.', 'getInstance', '(', 'project', ')', '.', 'getToolWindow', '(', '""', 'JOL', '""', ')', ';', '\n']"
master,18a64b3777f47bbff2ae266fcb8cebca3df8b0ab,ShowJolQuickFix.java,applyFix,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        JolView.showJolToolWindow(project, (PsiClass) psiClass);
    }",https://www.github.com/stokito/ideajol/commit/18a64b3777f47bbff2ae266fcb8cebca3df8b0ab,"    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor problemDescriptor) {
        PsiElement psiClass = problemDescriptor.getPsiElement();
        if (!(psiClass instanceof PsiClass)) {
            return;
        }
        JolView.showJolToolWindow(project, (PsiClass) psiClass);
    }
","['    ', 'public', ' ', 'void', ' ', 'applyFix', '(', '@NotNull', ' ', 'Project', ' ', 'project', ',', ' ', '@NotNull', ' ', 'ProblemDescriptor', ' ', 'problemDescriptor', ')', ' ', '{', '\n', '        ', 'PsiElement', ' ', 'psiClass', ' ', '=', ' ', 'problemDescriptor', '.', 'getPsiElement', '(', ')', ';', '\n', '        ', 'if', ' ', '(', '!', '(', 'psiClass', ' ', 'instanceof', ' ', 'PsiClass', ')', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'JolView', '.', 'showJolToolWindow', '(', 'project', ',', ' ', '(', 'PsiClass', ')', ' ', 'psiClass', ')', ';', '\n', '    ', '}', '\n']"
master,08ac9db77d3fdddaf56e4bb04b175d60f3be2f50,JolView.java,calcClassLayout,"    private ClassLayout calcClassLayout(@NotNull PsiClass psiClass) {
        Layouter layouter = getSelectedLayouter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        return layouter.layout(classData);
    }",https://www.github.com/stokito/ideajol/commit/08ac9db77d3fdddaf56e4bb04b175d60f3be2f50,"    private ClassLayout calcClassLayout(@NotNull PsiClass psiClass) {
        Layouter layouter = getSelectedLayouter();
        ClassData classData = PsiClassAdapter.createClassDataFromPsiClass(psiClass);
        return layouter.layout(classData);
    }
","['    ', 'private', ' ', 'ClassLayout', ' ', 'calcClassLayout', '(', '@NotNull', ' ', 'PsiClass', ' ', 'psiClass', ')', ' ', '{', '\n', '        ', 'Layouter', ' ', 'layouter', ' ', '=', ' ', 'getSelectedLayouter', '(', ')', ';', '\n', '        ', 'ClassData', ' ', 'classData', ' ', '=', ' ', 'PsiClassAdapter', '.', 'createClassDataFromPsiClass', '(', 'psiClass', ')', ';', '\n', '        ', 'return', ' ', 'layouter', '.', 'layout', '(', 'classData', ')', ';', '\n', '    ', '}', '\n']"
master,fe283cf29ca343423ab32f731edade112a74bb6b,JolInspection.java,isBusinessLogicClass,"    private boolean isBusinessLogicClass(PsiClass aClass) {
        return endsWithAny(aClass.getName(), businessLogicClassSuffixes);
    }",https://www.github.com/stokito/ideajol/commit/fe283cf29ca343423ab32f731edade112a74bb6b,"    private boolean isBusinessLogicClass(PsiClass aClass) {
        return endsWithAny(aClass.getName(), businessLogicClassSuffixes);
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isBusinessLogicClass', '(', 'PsiClass', ' ', 'aClass', ')', ' ', '{', '\n', '        ', 'return', ' ', 'endsWithAny', '(', 'aClass', '.', 'getName', '(', ')', ',', ' ', 'businessLogicClassSuffixes', ')', ';', '\n', '    ', '}', '\n']"
master,fe283cf29ca343423ab32f731edade112a74bb6b,JolInspection.java,endsWithAny,"    private boolean endsWithAny(String className, List<String> businessLogicClassSuffixes) {
        if (className == null) return false;
        for (String suffix : businessLogicClassSuffixes) {
            if (className.endsWith(suffix)) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/stokito/ideajol/commit/fe283cf29ca343423ab32f731edade112a74bb6b,"    private boolean endsWithAny(String className, List<String> businessLogicClassSuffixes) {
        if (className == null) return false;
        for (String suffix : businessLogicClassSuffixes) {
            if (className.endsWith(suffix)) {
                return true;
            }
        }
        return false;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'endsWithAny', '(', 'String', ' ', 'className', ',', ' ', 'List', '<', 'String', '>', ' ', 'businessLogicClassSuffixes', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'className', ' ', '=', '=', ' ', 'null', ')', ' ', 'return', ' ', 'false', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'suffix', ' ', ':', ' ', 'businessLogicClassSuffixes', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'className', '.', 'endsWith', '(', 'suffix', ')', ')', ' ', '{', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,fe283cf29ca343423ab32f731edade112a74bb6b,JolInspection.java,createOptionsPanel,"    public JComponent createOptionsPanel() {
        IntegerField sizeThresholdEditor = new IntegerField(null, 24, Integer.MAX_VALUE);
        sizeThresholdEditor.getValueEditor().addListener(newValue -> sizeThreshold = newValue);
        sizeThresholdEditor.setValue(sizeThreshold);
        sizeThresholdEditor.setColumns(4);
        sizeThresholdEditor.setToolTipText(""Class memory size threshold (CPU cache line is 64)"");

        ComboBox<String> layouterComboBox = new ComboBox<>(LAYOUTERS_NAMES);
        layouterComboBox.setSelectedIndex(selectedLayouter);
        layouterComboBox.addActionListener(e -> selectedLayouter = layouterComboBox.getSelectedIndex());
        layouterComboBox.setToolTipText(""Almost everywhere used HotSpot 64x COOPS. Raw layouter shows size of the fields themselves"");

        ListTable ignoredSuffixesTable = new ListTable(new ListWrappingTableModel(businessLogicClassSuffixes, ""Suffix""));

        return new FormBuilder()
                .addLabeledComponent(""Size threshold"", sizeThresholdEditor)",https://www.github.com/stokito/ideajol/commit/fe283cf29ca343423ab32f731edade112a74bb6b,"    public JComponent createOptionsPanel() {
        IntegerField sizeThresholdEditor = new IntegerField(null, 24, Integer.MAX_VALUE);
        sizeThresholdEditor.getValueEditor().addListener(newValue -> sizeThreshold = newValue);
        sizeThresholdEditor.setValue(sizeThreshold);
        sizeThresholdEditor.setColumns(4);
        sizeThresholdEditor.setToolTipText(""Class memory size threshold (CPU cache line is 64)"");

        ComboBox<String> layouterComboBox = new ComboBox<>(LAYOUTERS_NAMES);
        layouterComboBox.setSelectedIndex(selectedLayouter);
        layouterComboBox.addActionListener(e -> selectedLayouter = layouterComboBox.getSelectedIndex());
        layouterComboBox.setToolTipText(""Almost everywhere used HotSpot 64x COOPS. Raw layouter shows size of the fields themselves"");

        ListTable ignoredSuffixesTable = new ListTable(new ListWrappingTableModel(businessLogicClassSuffixes, ""Suffix""));

        return new FormBuilder()
                .addLabeledComponent(""Size threshold"", sizeThresholdEditor)
","['    ', 'public', ' ', 'JComponent', ' ', 'createOptionsPanel', '(', ')', ' ', '{', '\n', '        ', 'IntegerField', ' ', 'sizeThresholdEditor', ' ', '=', ' ', 'new', ' ', 'IntegerField', '(', 'null', ',', ' ', '24', ',', ' ', 'Integer', '.', 'MAX_VALUE', ')', ';', '\n', '        ', 'sizeThresholdEditor', '.', 'getValueEditor', '(', ')', '.', 'addListener', '(', 'newValue', ' ', '-', '>', ' ', 'sizeThreshold', ' ', '=', ' ', 'newValue', ')', ';', '\n', '        ', 'sizeThresholdEditor', '.', 'setValue', '(', 'sizeThreshold', ')', ';', '\n', '        ', 'sizeThresholdEditor', '.', 'setColumns', '(', '4', ')', ';', '\n', '        ', 'sizeThresholdEditor', '.', 'setToolTipText', '(', '""', 'Class memory size threshold (CPU cache line is 64)', '""', ')', ';', '\n', '\n', '        ', 'ComboBox', '<', 'String', '>', ' ', 'layouterComboBox', ' ', '=', ' ', 'new', ' ', 'ComboBox', '<', '>', '(', 'LAYOUTERS_NAMES', ')', ';', '\n', '        ', 'layouterComboBox', '.', 'setSelectedIndex', '(', 'selectedLayouter', ')', ';', '\n', '        ', 'layouterComboBox', '.', 'addActionListener', '(', 'e', ' ', '-', '>', ' ', 'selectedLayouter', ' ', '=', ' ', 'layouterComboBox', '.', 'getSelectedIndex', '(', ')', ')', ';', '\n', '        ', 'layouterComboBox', '.', 'setToolTipText', '(', '""', 'Almost everywhere used HotSpot 64x COOPS. Raw layouter shows size of the fields themselves', '""', ')', ';', '\n', '\n', '        ', 'ListTable', ' ', 'ignoredSuffixesTable', ' ', '=', ' ', 'new', ' ', 'ListTable', '(', 'new', ' ', 'ListWrappingTableModel', '(', 'businessLogicClassSuffixes', ',', ' ', '""', 'Suffix', '""', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'new', ' ', 'FormBuilder', '(', ')', '\n', '                ', '.', 'addLabeledComponent', '(', '""', 'Size threshold', '""', ',', ' ', 'sizeThresholdEditor', ')', '\n']"
master,7206901d688e3f3c367acac0caa1fcb86b2b75bb,JolView.java,setupUI,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(LAYOUTERS_NAMES);
        jolForm.cmbDataModel.setModel(model);
        jolForm.cmbDataModel.setSelectedIndex(DEFAULT_LAYOUTER_INDEX);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
        setContent(jolForm.rootPanel);
    }",https://www.github.com/stokito/ideajol/commit/7206901d688e3f3c367acac0caa1fcb86b2b75bb,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(LAYOUTERS_NAMES);
        jolForm.cmbDataModel.setModel(model);
        jolForm.cmbDataModel.setSelectedIndex(DEFAULT_LAYOUTER_INDEX);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
        setContent(jolForm.rootPanel);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'this', ':', ':', 'navigateToFieldInEditor', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'addActionListener', '(', 'this', ':', ':', 'copyObjectLayoutToClipboard', ')', ';', '\n', '        ', 'DefaultComboBoxModel', '<', 'String', '>', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultComboBoxModel', '<', '>', '(', 'LAYOUTERS_NAMES', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'setSelectedIndex', '(', 'DEFAULT_LAYOUTER_INDEX', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'setContent', '(', 'jolForm', '.', 'rootPanel', ')', ';', '\n', '    ', '}', '\n']"
master,e2404229bb3fedf41c91854e25556d1777e5ea78,ShowObjectLayoutAction.java,update,"    public void update(@NotNull AnActionEvent event) {
        PsiClass selectedPsiClass = getSelectedPsiClass(event);
        event.getPresentation().setEnabledAndVisible(selectedPsiClass != null);
    }",https://www.github.com/stokito/ideajol/commit/e2404229bb3fedf41c91854e25556d1777e5ea78,"    public void update(@NotNull AnActionEvent event) {
        PsiClass selectedPsiClass = getSelectedPsiClass(event);
        event.getPresentation().setEnabledAndVisible(selectedPsiClass != null);
    }
","['    ', 'public', ' ', 'void', ' ', 'update', '(', '@NotNull', ' ', 'AnActionEvent', ' ', 'event', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'selectedPsiClass', ' ', '=', ' ', 'getSelectedPsiClass', '(', 'event', ')', ';', '\n', '        ', 'event', '.', 'getPresentation', '(', ')', '.', 'setEnabledAndVisible', '(', 'selectedPsiClass', ' ', '!', '=', ' ', 'null', ')', ';', '\n', '    ', '}', '\n']"
master,e97c83d325b8d878d3b2aff053bd74d125930740,JolView.java,showLayoutForSelectedClass,"    private void showLayoutForSelectedClass() {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMinWidth(120);
        columnModel.getColumn(0).setMaxWidth(150);
//        columnModel.getColumn(0).setResizable(false);
        columnModel.getColumn(1).setMinWidth(90);
        columnModel.getColumn(1).setMaxWidth(120);
//        columnModel.getColumn(1).setResizable(false);",https://www.github.com/stokito/ideajol/commit/e97c83d325b8d878d3b2aff053bd74d125930740,"    private void showLayoutForSelectedClass() {
        PsiClass psiClass = getPsiClass();
        if (psiClass == null) {
            return;
        }
        ClassLayout classLayout = calcClassLayout(psiClass);
        ArrayList<FieldLayout> objectLayouts = collectObjectLayouts(classLayout);

        TableModel model = new FieldLayoutTableModel(objectLayouts);
        jolForm.tblObjectLayout.setModel(model);
        TableColumnModel columnModel = jolForm.tblObjectLayout.getColumnModel();
        columnModel.getColumn(0).setMinWidth(120);
        columnModel.getColumn(0).setMaxWidth(150);

        columnModel.getColumn(1).setMinWidth(90);
        columnModel.getColumn(1).setMaxWidth(120);

","['    ', 'private', ' ', 'void', ' ', 'showLayoutForSelectedClass', '(', ')', ' ', '{', '\n', '        ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'calcClassLayout', '(', 'psiClass', ')', ';', '\n', '        ', 'ArrayList', '<', 'FieldLayout', '>', ' ', 'objectLayouts', ' ', '=', ' ', 'collectObjectLayouts', '(', 'classLayout', ')', ';', '\n', '\n', '        ', 'TableModel', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'FieldLayoutTableModel', '(', 'objectLayouts', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'TableColumnModel', ' ', 'columnModel', ' ', '=', ' ', 'jolForm', '.', 'tblObjectLayout', '.', 'getColumnModel', '(', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMinWidth', '(', '120', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '0', ')', '.', 'setMaxWidth', '(', '150', ')', ';', '\n', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMinWidth', '(', '90', ')', ';', '\n', '        ', 'columnModel', '.', 'getColumn', '(', '1', ')', '.', 'setMaxWidth', '(', '120', ')', ';', '\n']"
master,60915667f9b62ec430bdb334c201e4a046487d39,JolView.java,setupUI,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(LAYOUTERS_NAMES);
        jolForm.cmbDataModel.setModel(model);
        jolForm.cmbDataModel.setSelectedIndex(DEFAULT_LAYOUTER_INDEX);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.lblDocs.addMouseListener(openDocumentation());
        setContent(jolForm.rootPanel);
    }",https://www.github.com/stokito/ideajol/commit/60915667f9b62ec430bdb334c201e4a046487d39,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(this::navigateToFieldInEditor);
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addActionListener(this::copyObjectLayoutToClipboard);
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(LAYOUTERS_NAMES);
        jolForm.cmbDataModel.setModel(model);
        jolForm.cmbDataModel.setSelectedIndex(DEFAULT_LAYOUTER_INDEX);
        jolForm.cmbDataModel.addActionListener(this::layoutOptionsActionPerformed);
        jolForm.lblDocs.addMouseListener(openDocumentation());
        setContent(jolForm.rootPanel);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'this', ':', ':', 'navigateToFieldInEditor', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'addActionListener', '(', 'this', ':', ':', 'copyObjectLayoutToClipboard', ')', ';', '\n', '        ', 'DefaultComboBoxModel', '<', 'String', '>', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultComboBoxModel', '<', '>', '(', 'LAYOUTERS_NAMES', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'setSelectedIndex', '(', 'DEFAULT_LAYOUTER_INDEX', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'this', ':', ':', 'layoutOptionsActionPerformed', ')', ';', '\n', '        ', 'jolForm', '.', 'lblDocs', '.', 'addMouseListener', '(', 'openDocumentation', '(', ')', ')', ';', '\n', '        ', 'setContent', '(', 'jolForm', '.', 'rootPanel', ')', ';', '\n', '    ', '}', '\n']"
master,60915667f9b62ec430bdb334c201e4a046487d39,JolView.java,openDocumentation,"    private MouseAdapter openDocumentation() {
        return new MouseAdapter() {
            @Override",https://www.github.com/stokito/ideajol/commit/60915667f9b62ec430bdb334c201e4a046487d39,"    private MouseAdapter openDocumentation() {
        return new MouseAdapter() {
            @Override
","['    ', 'private', ' ', 'MouseAdapter', ' ', 'openDocumentation', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'MouseAdapter', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n']"
master,60915667f9b62ec430bdb334c201e4a046487d39,JolView.java,mouseClicked,"            public void mouseClicked(MouseEvent event) {
                Desktop desktop = java.awt.Desktop.getDesktop();
                try {
                    URI oURL = new URI(jolForm.lblDocs.getToolTipText());",https://www.github.com/stokito/ideajol/commit/60915667f9b62ec430bdb334c201e4a046487d39,"            public void mouseClicked(MouseEvent event) {
                Desktop desktop = java.awt.Desktop.getDesktop();
                try {
                    URI oURL = new URI(jolForm.lblDocs.getToolTipText());
","['            ', 'public', ' ', 'void', ' ', 'mouseClicked', '(', 'MouseEvent', ' ', 'event', ')', ' ', '{', '\n', '                ', 'Desktop', ' ', 'desktop', ' ', '=', ' ', 'java', '.', 'awt', '.', 'Desktop', '.', 'getDesktop', '(', ')', ';', '\n', '                ', 'try', ' ', '{', '\n', '                    ', 'URI', ' ', 'oURL', ' ', '=', ' ', 'new', ' ', 'URI', '(', 'jolForm', '.', 'lblDocs', '.', 'getToolTipText', '(', ')', ')', ';', '\n']"
master,29fab040d35d5af9381dabacce155df141a1461d,JolView.java,setupUI,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(navigateToFieldInEditor());
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addMouseListener(copyObjectLayoutToClipboard());
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(LAYOUTERS_NAMES);
        jolForm.cmbDataModel.setModel(model);
        jolForm.cmbDataModel.setSelectedIndex(DEFAULT_LAYOUTER_INDEX);
        jolForm.cmbDataModel.addActionListener(layoutOptionsActionPerformed());
        jolForm.lblDocs.addMouseListener(openDocumentation());
        setContent(jolForm.rootPanel);
    }",https://www.github.com/stokito/ideajol/commit/29fab040d35d5af9381dabacce155df141a1461d,"    private void setupUI() {
        jolForm.tblObjectLayout.getEmptyText().setText(""Select a class then press Code / Show Object Layout"");
        jolForm.tblObjectLayout.setSelectionMode(SINGLE_SELECTION);
        jolForm.tblObjectLayout.getSelectionModel().addListSelectionListener(navigateToFieldInEditor());
        jolForm.lblClassName.addMouseListener(navigateToClassInEditor());
        jolForm.copyButton.addMouseListener(copyObjectLayoutToClipboard());
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(LAYOUTERS_NAMES);
        jolForm.cmbDataModel.setModel(model);
        jolForm.cmbDataModel.setSelectedIndex(DEFAULT_LAYOUTER_INDEX);
        jolForm.cmbDataModel.addActionListener(layoutOptionsActionPerformed());
        jolForm.lblDocs.addMouseListener(openDocumentation());
        setContent(jolForm.rootPanel);
    }
","['    ', 'private', ' ', 'void', ' ', 'setupUI', '(', ')', ' ', '{', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getEmptyText', '(', ')', '.', 'setText', '(', '""', 'Select a class then press Code / Show Object Layout', '""', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'setSelectionMode', '(', 'SINGLE_SELECTION', ')', ';', '\n', '        ', 'jolForm', '.', 'tblObjectLayout', '.', 'getSelectionModel', '(', ')', '.', 'addListSelectionListener', '(', 'navigateToFieldInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblClassName', '.', 'addMouseListener', '(', 'navigateToClassInEditor', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'copyButton', '.', 'addMouseListener', '(', 'copyObjectLayoutToClipboard', '(', ')', ')', ';', '\n', '        ', 'DefaultComboBoxModel', '<', 'String', '>', ' ', 'model', ' ', '=', ' ', 'new', ' ', 'DefaultComboBoxModel', '<', '>', '(', 'LAYOUTERS_NAMES', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'setModel', '(', 'model', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'setSelectedIndex', '(', 'DEFAULT_LAYOUTER_INDEX', ')', ';', '\n', '        ', 'jolForm', '.', 'cmbDataModel', '.', 'addActionListener', '(', 'layoutOptionsActionPerformed', '(', ')', ')', ';', '\n', '        ', 'jolForm', '.', 'lblDocs', '.', 'addMouseListener', '(', 'openDocumentation', '(', ')', ')', ';', '\n', '        ', 'setContent', '(', 'jolForm', '.', 'rootPanel', ')', ';', '\n', '    ', '}', '\n']"
master,29fab040d35d5af9381dabacce155df141a1461d,JolView.java,navigateToFieldInEditor,"    private ListSelectionListener navigateToFieldInEditor() {
        return new ListSelectionListener() {
            @Override",https://www.github.com/stokito/ideajol/commit/29fab040d35d5af9381dabacce155df141a1461d,"    private ListSelectionListener navigateToFieldInEditor() {
        return new ListSelectionListener() {
            @Override
","['    ', 'private', ' ', 'ListSelectionListener', ' ', 'navigateToFieldInEditor', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'ListSelectionListener', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n']"
master,29fab040d35d5af9381dabacce155df141a1461d,JolView.java,copyObjectLayoutToClipboard,"    private MouseAdapter copyObjectLayoutToClipboard() {
        return new MouseAdapter() {
            @Override",https://www.github.com/stokito/ideajol/commit/29fab040d35d5af9381dabacce155df141a1461d,"    private MouseAdapter copyObjectLayoutToClipboard() {
        return new MouseAdapter() {
            @Override
","['    ', 'private', ' ', 'MouseAdapter', ' ', 'copyObjectLayoutToClipboard', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'MouseAdapter', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n']"
master,29fab040d35d5af9381dabacce155df141a1461d,JolView.java,mouseClicked,"            public void mouseClicked(MouseEvent event) {
                PsiClass psiClass = getPsiClass();
                if (psiClass == null) {
                    return;
                }
                ClassLayout classLayout = calcClassLayout(psiClass);
                CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
            }",https://www.github.com/stokito/ideajol/commit/29fab040d35d5af9381dabacce155df141a1461d,"            public void mouseClicked(MouseEvent event) {
                PsiClass psiClass = getPsiClass();
                if (psiClass == null) {
                    return;
                }
                ClassLayout classLayout = calcClassLayout(psiClass);
                CopyPasteManager.getInstance().setContents(new StringSelection(classLayout.toPrintable()));
            }
","['            ', 'public', ' ', 'void', ' ', 'mouseClicked', '(', 'MouseEvent', ' ', 'event', ')', ' ', '{', '\n', '                ', 'PsiClass', ' ', 'psiClass', ' ', '=', ' ', 'getPsiClass', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'psiClass', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'return', ';', '\n', '                ', '}', '\n', '                ', 'ClassLayout', ' ', 'classLayout', ' ', '=', ' ', 'calcClassLayout', '(', 'psiClass', ')', ';', '\n', '                ', 'CopyPasteManager', '.', 'getInstance', '(', ')', '.', 'setContents', '(', 'new', ' ', 'StringSelection', '(', 'classLayout', '.', 'toPrintable', '(', ')', ')', ')', ';', '\n', '            ', '}', '\n']"
master,29fab040d35d5af9381dabacce155df141a1461d,JolView.java,layoutOptionsActionPerformed,"    private ActionListener layoutOptionsActionPerformed() {
        return new ActionListener() {
            @Override",https://www.github.com/stokito/ideajol/commit/29fab040d35d5af9381dabacce155df141a1461d,"    private ActionListener layoutOptionsActionPerformed() {
        return new ActionListener() {
            @Override
","['    ', 'private', ' ', 'ActionListener', ' ', 'layoutOptionsActionPerformed', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'ActionListener', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n']"
master,29fab040d35d5af9381dabacce155df141a1461d,JolView.java,actionPerformed,"            public void actionPerformed(ActionEvent event) {
                showLayoutForSelectedClass();
            }",https://www.github.com/stokito/ideajol/commit/29fab040d35d5af9381dabacce155df141a1461d,"            public void actionPerformed(ActionEvent event) {
                showLayoutForSelectedClass();
            }
","['            ', 'public', ' ', 'void', ' ', 'actionPerformed', '(', 'ActionEvent', ' ', 'event', ')', ' ', '{', '\n', '                ', 'showLayoutForSelectedClass', '(', ')', ';', '\n', '            ', '}', '\n']"
