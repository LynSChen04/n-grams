Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,3e392091ea966e9f45dfe2bd2a310016b3255ea9,AES256.java,encrypt,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.getEncoder().encodeToString(data);
    }",https://www.github.com/mervick/aes-everywhere/commit/3e392091ea966e9f45dfe2bd2a310016b3255ea9,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.getEncoder().encodeToString(data);
    }
","['    ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'text', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', '(', 'new', ' ', 'SecureRandom', '(', ')', ')', '.', 'generateSeed', '(', '8', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'text', '.', 'getBytes', '(', 'UTF_8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'ENCRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'data', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ')', ';', '\n', '        ', 'data', ' ', '=', ' ', 'array_concat', '(', 'array_concat', '(', 'SALTED_MAGIC', ',', ' ', 'salt', ')', ',', ' ', 'data', ')', ';', '\n', '        ', 'return', ' ', 'Base64', '.', 'getEncoder', '(', ')', '.', 'encodeToString', '(', 'data', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3e392091ea966e9f45dfe2bd2a310016b3255ea9,AES256.java,decrypt,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.getDecoder().decode(encrypted);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }",https://www.github.com/mervick/aes-everywhere/commit/3e392091ea966e9f45dfe2bd2a310016b3255ea9,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.getDecoder().decode(encrypted);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }
","['    ', 'static', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'encrypted', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'Base64', '.', 'getDecoder', '(', ')', '.', 'decode', '(', 'encrypted', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'shouldBeMagic', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', '0', ',', ' ', 'SALTED_MAGIC', '.', 'length', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'Arrays', '.', 'equals', '(', 'shouldBeMagic', ',', ' ', 'SALTED_MAGIC', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', 'SALTED_MAGIC', '.', 'length', ',', ' ', 'SALTED_MAGIC', '.', 'length', ' ', '+', ' ', '8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'DECRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'clear', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ',', ' ', '16', ',', ' ', 'inBytes', '.', 'length', ' ', '-', ' ', '16', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'String', '(', 'clear', ',', ' ', 'UTF_8', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3e392091ea966e9f45dfe2bd2a310016b3255ea9,AES256.java,array_concat,"    private static byte[] array_concat(final byte[] a, final byte[] b)
    {
        final byte[] c = new byte[a.length + b.length];
        System.arraycopy(a, 0, c, 0, a.length);
        System.arraycopy(b, 0, c, a.length, b.length);
        return c;
    }",https://www.github.com/mervick/aes-everywhere/commit/3e392091ea966e9f45dfe2bd2a310016b3255ea9,"    private static byte[] array_concat(final byte[] a, final byte[] b)
    {
        final byte[] c = new byte[a.length + b.length];
        System.arraycopy(a, 0, c, 0, a.length);
        System.arraycopy(b, 0, c, a.length, b.length);
        return c;
    }
","['    ', 'private', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'array_concat', '(', 'final', ' ', 'byte', '[', ']', ' ', 'a', ',', ' ', 'final', ' ', 'byte', '[', ']', ' ', 'b', ')', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'c', ' ', '=', ' ', 'new', ' ', 'byte', '[', 'a', '.', 'length', ' ', '+', ' ', 'b', '.', 'length', ']', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'a', ',', ' ', '0', ',', ' ', 'c', ',', ' ', '0', ',', ' ', 'a', '.', 'length', ')', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'b', ',', ' ', '0', ',', ' ', 'c', ',', ' ', 'a', '.', 'length', ',', ' ', 'b', '.', 'length', ')', ';', '\n', '        ', 'return', ' ', 'c', ';', '\n', '    ', '}', '\n', '<END>']"
master,12c352ebc88889eacef35ec526e8f075c3ebeec9,Aes256.java,main,"    public static void main(String[] args) throws Exception
    {
        String encrypted = Aes256.encrypt(""TEXT"", ""PASSWORD"");
        System.out.println(encrypted);

        String decrypted = Aes256.decrypt(encrypted, ""PASSWORD"");
        System.out.println(decrypted);
    }",https://www.github.com/mervick/aes-everywhere/commit/12c352ebc88889eacef35ec526e8f075c3ebeec9,"    public static void main(String[] args) throws Exception
    {
        String encrypted = Aes256.encrypt(""TEXT"", ""PASSWORD"");
        System.out.println(encrypted);

        String decrypted = Aes256.decrypt(encrypted, ""PASSWORD"");
        System.out.println(decrypted);
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'String', ' ', 'encrypted', ' ', '=', ' ', 'Aes256', '.', 'encrypt', '(', '""', 'TEXT', '""', ',', ' ', '""', 'PASSWORD', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'encrypted', ')', ';', '\n', '\n', '        ', 'String', ' ', 'decrypted', ' ', '=', ' ', 'Aes256', '.', 'decrypt', '(', 'encrypted', ',', ' ', '""', 'PASSWORD', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'decrypted', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Aes256.java,encrypt,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.encodeToString(data, Base64.DEFAULT);
    }",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.encodeToString(data, Base64.DEFAULT);
    }
","['    ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'text', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', '(', 'new', ' ', 'SecureRandom', '(', ')', ')', '.', 'generateSeed', '(', '8', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'text', '.', 'getBytes', '(', 'UTF_8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'ENCRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'data', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ')', ';', '\n', '        ', 'data', ' ', '=', ' ', 'array_concat', '(', 'array_concat', '(', 'SALTED_MAGIC', ',', ' ', 'salt', ')', ',', ' ', 'data', ')', ';', '\n', '        ', 'return', ' ', 'Base64', '.', 'encodeToString', '(', 'data', ',', ' ', 'Base64', '.', 'DEFAULT', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Aes256.java,decrypt,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.decode(encrypted, Base64.DEFAULT);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.decode(encrypted, Base64.DEFAULT);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }
","['    ', 'static', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'encrypted', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'Base64', '.', 'decode', '(', 'encrypted', ',', ' ', 'Base64', '.', 'DEFAULT', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'shouldBeMagic', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', '0', ',', ' ', 'SALTED_MAGIC', '.', 'length', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'Arrays', '.', 'equals', '(', 'shouldBeMagic', ',', ' ', 'SALTED_MAGIC', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', 'SALTED_MAGIC', '.', 'length', ',', ' ', 'SALTED_MAGIC', '.', 'length', ' ', '+', ' ', '8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'DECRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'clear', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ',', ' ', '16', ',', ' ', 'inBytes', '.', 'length', ' ', '-', ' ', '16', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'String', '(', 'clear', ',', ' ', 'UTF_8', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Base64.java,decode,"    public static byte[] decode(String str, int flags) {
        return decode(str.getBytes(), flags);
    }",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    public static byte[] decode(String str, int flags) {
        return decode(str.getBytes(), flags);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'decode', '(', 'String', ' ', 'str', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'return', ' ', 'decode', '(', 'str', '.', 'getBytes', '(', ')', ',', ' ', 'flags', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Base64.java,decode,"    public static byte[] decode(byte[] input, int flags) {
        return decode(input, 0, input.length, flags);
    }",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    public static byte[] decode(byte[] input, int flags) {
        return decode(input, 0, input.length, flags);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'decode', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'return', ' ', 'decode', '(', 'input', ',', ' ', '0', ',', ' ', 'input', '.', 'length', ',', ' ', 'flags', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Base64.java,decode,"    public static byte[] decode(byte[] input, int offset, int len, int flags) {
        // Allocate space for the most data the input could represent.
        // (It could contain less if it contains whitespace, etc.)
        Decoder decoder = new Decoder(flags, new byte[len*3/4]);

        if (!decoder.process(input, offset, len, true)) {
            throw new IllegalArgumentException(""bad base-64"");
        }

        // Maybe we got lucky and allocated exactly enough output space.
        if (decoder.op == decoder.output.length) {
            return decoder.output;
        }

        // Need to shorten the array, so allocate a new one of the
        // right size and copy.
        byte[] temp = new byte[decoder.op];
        System.arraycopy(decoder.output, 0, temp, 0, decoder.op);
        return temp;
    }",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    public static byte[] decode(byte[] input, int offset, int len, int flags) {
        
        
        Decoder decoder = new Decoder(flags, new byte[len*3/4]);

        if (!decoder.process(input, offset, len, true)) {
            throw new IllegalArgumentException(""bad base-64"");
        }

        
        if (decoder.op == decoder.output.length) {
            return decoder.output;
        }

        
        
        byte[] temp = new byte[decoder.op];
        System.arraycopy(decoder.output, 0, temp, 0, decoder.op);
        return temp;
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'decode', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'int', ' ', 'offset', ',', ' ', 'int', ' ', 'len', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', '\n', '        ', '\n', '        ', 'Decoder', ' ', 'decoder', ' ', '=', ' ', 'new', ' ', 'Decoder', '(', 'flags', ',', ' ', 'new', ' ', 'byte', '[', 'len', '*', '3', '/', '4', ']', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', '!', 'decoder', '.', 'process', '(', 'input', ',', ' ', 'offset', ',', ' ', 'len', ',', ' ', 'true', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'bad base-64', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'decoder', '.', 'op', ' ', '=', '=', ' ', 'decoder', '.', 'output', '.', 'length', ')', ' ', '{', '\n', '            ', 'return', ' ', 'decoder', '.', 'output', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'byte', '[', ']', ' ', 'temp', ' ', '=', ' ', 'new', ' ', 'byte', '[', 'decoder', '.', 'op', ']', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'decoder', '.', 'output', ',', ' ', '0', ',', ' ', 'temp', ',', ' ', '0', ',', ' ', 'decoder', '.', 'op', ')', ';', '\n', '        ', 'return', ' ', 'temp', ';', '\n', '    ', '}', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Base64.java,encodeToString,"    public static String encodeToString(byte[] input, int flags) {
        try {
            return new String(encode(input, flags), ""US-ASCII"");",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    public static String encodeToString(byte[] input, int flags) {
        try {
            return new String(encode(input, flags), ""US-ASCII"");
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'encodeToString', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'String', '(', 'encode', '(', 'input', ',', ' ', 'flags', ')', ',', ' ', '""', 'US-ASCII', '""', ')', ';', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Base64.java,encodeToString,"    public static String encodeToString(byte[] input, int offset, int len, int flags) {
        try {
            return new String(encode(input, offset, len, flags), ""US-ASCII"");",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    public static String encodeToString(byte[] input, int offset, int len, int flags) {
        try {
            return new String(encode(input, offset, len, flags), ""US-ASCII"");
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'encodeToString', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'int', ' ', 'offset', ',', ' ', 'int', ' ', 'len', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'String', '(', 'encode', '(', 'input', ',', ' ', 'offset', ',', ' ', 'len', ',', ' ', 'flags', ')', ',', ' ', '""', 'US-ASCII', '""', ')', ';', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Base64.java,encode,"    public static byte[] encode(byte[] input, int flags) {
        return encode(input, 0, input.length, flags);
    }",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    public static byte[] encode(byte[] input, int flags) {
        return encode(input, 0, input.length, flags);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'encode', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'return', ' ', 'encode', '(', 'input', ',', ' ', '0', ',', ' ', 'input', '.', 'length', ',', ' ', 'flags', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,Base64.java,encode,"    public static byte[] encode(byte[] input, int offset, int len, int flags) {
        Encoder encoder = new Encoder(flags, null);

        // Compute the exact length of the array we will produce.
        int output_len = len / 3 * 4;

        // Account for the tail of the data and the padding bytes, if any.
        if (encoder.do_padding) {
            if (len % 3 > 0) {
                output_len += 4;
            }
        } else {
            switch (len % 3) {
                case 0: break;
                case 1: output_len += 2; break;
                case 2: output_len += 3; break;
            }
        }

        // Account for the newlines, if any.
        if (encoder.do_newline && len > 0) {
            output_len += (((len-1) / (3 * Encoder.LINE_GROUPS)) + 1) *
                    (encoder.do_cr ? 2 : 1);
        }

        encoder.output = new byte[output_len];
        encoder.process(input, offset, len, true);

        assert encoder.op == output_len;

        return encoder.output;
    }",https://www.github.com/mervick/aes-everywhere/commit/b4c0f8be56105c4f603f36bbb5f9ffbf9a902028,"    public static byte[] encode(byte[] input, int offset, int len, int flags) {
        Encoder encoder = new Encoder(flags, null);

        
        int output_len = len / 3 * 4;

        
        if (encoder.do_padding) {
            if (len % 3 > 0) {
                output_len += 4;
            }
        } else {
            switch (len % 3) {
                case 0: break;
                case 1: output_len += 2; break;
                case 2: output_len += 3; break;
            }
        }

        
        if (encoder.do_newline && len > 0) {
            output_len += (((len-1) / (3 * Encoder.LINE_GROUPS)) + 1) *
                    (encoder.do_cr ? 2 : 1);
        }

        encoder.output = new byte[output_len];
        encoder.process(input, offset, len, true);

        assert encoder.op == output_len;

        return encoder.output;
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'encode', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'int', ' ', 'offset', ',', ' ', 'int', ' ', 'len', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'Encoder', ' ', 'encoder', ' ', '=', ' ', 'new', ' ', 'Encoder', '(', 'flags', ',', ' ', 'null', ')', ';', '\n', '\n', '        ', '\n', '        ', 'int', ' ', 'output_len', ' ', '=', ' ', 'len', ' ', '/', ' ', '3', ' ', '*', ' ', '4', ';', '\n', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'encoder', '.', 'do_padding', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'len', ' ', '%', ' ', '3', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '                ', 'output_len', ' ', '+', '=', ' ', '4', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'switch', ' ', '(', 'len', ' ', '%', ' ', '3', ')', ' ', '{', '\n', '                ', 'case', ' ', '0', ':', ' ', 'break', ';', '\n', '                ', 'case', ' ', '1', ':', ' ', 'output_len', ' ', '+', '=', ' ', '2', ';', ' ', 'break', ';', '\n', '                ', 'case', ' ', '2', ':', ' ', 'output_len', ' ', '+', '=', ' ', '3', ';', ' ', 'break', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'encoder', '.', 'do_newline', ' ', '&', '&', ' ', 'len', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '            ', 'output_len', ' ', '+', '=', ' ', '(', '(', '(', 'len', '-', '1', ')', ' ', '/', ' ', '(', '3', ' ', '*', ' ', 'Encoder', '.', 'LINE_GROUPS', ')', ')', ' ', '+', ' ', '1', ')', ' ', '*', '\n', '                    ', '(', 'encoder', '.', 'do_cr', ' ', '?', ' ', '2', ' ', ':', ' ', '1', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'encoder', '.', 'output', ' ', '=', ' ', 'new', ' ', 'byte', '[', 'output_len', ']', ';', '\n', '        ', 'encoder', '.', 'process', '(', 'input', ',', ' ', 'offset', ',', ' ', 'len', ',', ' ', 'true', ')', ';', '\n', '\n', '        ', 'assert', ' ', 'encoder', '.', 'op', ' ', '=', '=', ' ', 'output_len', ';', '\n', '\n', '        ', 'return', ' ', 'encoder', '.', 'output', ';', '\n', '    ', '}', '\n', '<END>']"
master,1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,Aes256.java,encrypt,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.getEncoder().encodeToString(data);
    }",https://www.github.com/mervick/aes-everywhere/commit/1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.getEncoder().encodeToString(data);
    }
","['    ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'text', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', '(', 'new', ' ', 'SecureRandom', '(', ')', ')', '.', 'generateSeed', '(', '8', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'text', '.', 'getBytes', '(', 'UTF_8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS7Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'ENCRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'data', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ')', ';', '\n', '        ', 'data', ' ', '=', ' ', 'array_concat', '(', 'array_concat', '(', 'SALTED_MAGIC', ',', ' ', 'salt', ')', ',', ' ', 'data', ')', ';', '\n', '        ', 'return', ' ', 'Base64', '.', 'getEncoder', '(', ')', '.', 'encodeToString', '(', 'data', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,Aes256.java,decrypt,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.getDecoder().decode(encrypted);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }",https://www.github.com/mervick/aes-everywhere/commit/1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.getDecoder().decode(encrypted);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }
","['    ', 'static', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'encrypted', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'Base64', '.', 'getDecoder', '(', ')', '.', 'decode', '(', 'encrypted', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'shouldBeMagic', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', '0', ',', ' ', 'SALTED_MAGIC', '.', 'length', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'Arrays', '.', 'equals', '(', 'shouldBeMagic', ',', ' ', 'SALTED_MAGIC', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', 'SALTED_MAGIC', '.', 'length', ',', ' ', 'SALTED_MAGIC', '.', 'length', ' ', '+', ' ', '8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS7Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'DECRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'clear', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ',', ' ', '16', ',', ' ', 'inBytes', '.', 'length', ' ', '-', ' ', '16', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'String', '(', 'clear', ',', ' ', 'UTF_8', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,Aes256.java,encrypt,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.encodeToString(data, Base64.DEFAULT);
    }",https://www.github.com/mervick/aes-everywhere/commit/1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,"    static String encrypt(String text, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);
        final byte[] salt = (new SecureRandom()).generateSeed(8);
        final byte[] inBytes = text.getBytes(UTF_8);

        final byte[] passAndSalt = array_concat(pass, salt);
        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
        byte[] data = cipher.doFinal(inBytes);
        data = array_concat(array_concat(SALTED_MAGIC, salt), data);
        return Base64.encodeToString(data, Base64.DEFAULT);
    }
","['    ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'text', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', '(', 'new', ' ', 'SecureRandom', '(', ')', ')', '.', 'generateSeed', '(', '8', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'text', '.', 'getBytes', '(', 'UTF_8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS7Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'ENCRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'data', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ')', ';', '\n', '        ', 'data', ' ', '=', ' ', 'array_concat', '(', 'array_concat', '(', 'SALTED_MAGIC', ',', ' ', 'salt', ')', ',', ' ', 'data', ')', ';', '\n', '        ', 'return', ' ', 'Base64', '.', 'encodeToString', '(', 'data', ',', ' ', 'Base64', '.', 'DEFAULT', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,Aes256.java,decrypt,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.decode(encrypted, Base64.DEFAULT);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }",https://www.github.com/mervick/aes-everywhere/commit/1f4de41c8013c08d95a8f3434df46fc8ecde0dfd,"    static String decrypt(String encrypted, String password) throws Exception
    {
        final byte[] pass = password.getBytes(US_ASCII);

        final byte[] inBytes = Base64.decode(encrypted, Base64.DEFAULT);

        final byte[] shouldBeMagic = Arrays.copyOfRange(inBytes, 0, SALTED_MAGIC.length);
        if (!Arrays.equals(shouldBeMagic, SALTED_MAGIC)) {
            throw new IllegalArgumentException(""Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value."");
        }

        final byte[] salt = Arrays.copyOfRange(inBytes, SALTED_MAGIC.length, SALTED_MAGIC.length + 8);

        final byte[] passAndSalt = array_concat(pass, salt);

        byte[] hash = new byte[0];
        byte[] keyAndIv = new byte[0];
        for (int i = 0; i < 3 && keyAndIv.length < 48; i++) {
            final byte[] hashData = array_concat(hash, passAndSalt);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            hash = md.digest(hashData);
            keyAndIv = array_concat(keyAndIv, hash);
        }

        final byte[] keyValue = Arrays.copyOfRange(keyAndIv, 0, 32);
        final SecretKeySpec key = new SecretKeySpec(keyValue, ""AES"");

        final byte[] iv = Arrays.copyOfRange(keyAndIv, 32, 48);

        final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
        final byte[] clear = cipher.doFinal(inBytes, 16, inBytes.length - 16);
        return new String(clear, UTF_8);
    }
","['    ', 'static', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'encrypted', ',', ' ', 'String', ' ', 'password', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'pass', ' ', '=', ' ', 'password', '.', 'getBytes', '(', 'US_ASCII', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'inBytes', ' ', '=', ' ', 'Base64', '.', 'decode', '(', 'encrypted', ',', ' ', 'Base64', '.', 'DEFAULT', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'shouldBeMagic', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', '0', ',', ' ', 'SALTED_MAGIC', '.', 'length', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'Arrays', '.', 'equals', '(', 'shouldBeMagic', ',', ' ', 'SALTED_MAGIC', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Initial bytes from input do not match OpenSSL SALTED_MAGIC salt value.', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'inBytes', ',', ' ', 'SALTED_MAGIC', '.', 'length', ',', ' ', 'SALTED_MAGIC', '.', 'length', ' ', '+', ' ', '8', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passAndSalt', ' ', '=', ' ', 'array_concat', '(', 'pass', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'hash', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'keyAndIv', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ' ', '&', '&', ' ', 'keyAndIv', '.', 'length', ' ', '<', ' ', '48', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'final', ' ', 'byte', '[', ']', ' ', 'hashData', ' ', '=', ' ', 'array_concat', '(', 'hash', ',', ' ', 'passAndSalt', ')', ';', '\n', '            ', 'final', ' ', 'MessageDigest', ' ', 'md', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '            ', 'hash', ' ', '=', ' ', 'md', '.', 'digest', '(', 'hashData', ')', ';', '\n', '            ', 'keyAndIv', ' ', '=', ' ', 'array_concat', '(', 'keyAndIv', ',', ' ', 'hash', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'keyValue', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '0', ',', ' ', '32', ')', ';', '\n', '        ', 'final', ' ', 'SecretKeySpec', ' ', 'key', ' ', '=', ' ', 'new', ' ', 'SecretKeySpec', '(', 'keyValue', ',', ' ', '""', 'AES', '""', ')', ';', '\n', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'iv', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'keyAndIv', ',', ' ', '32', ',', ' ', '48', ')', ';', '\n', '\n', '        ', 'final', ' ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS7Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'DECRYPT_MODE', ',', ' ', 'key', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', 'iv', ')', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'clear', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'inBytes', ',', ' ', '16', ',', ' ', 'inBytes', '.', 'length', ' ', '-', ' ', '16', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'String', '(', 'clear', ',', ' ', 'UTF_8', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,encrypt,"    public static String encrypt(String input, String passphrase) throws Exception
    {
        return Base64.getEncoder().encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)));
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static String encrypt(String input, String passphrase) throws Exception
    {
        return Base64.getEncoder().encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)));
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'input', ',', ' ', 'String', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'getEncoder', '(', ')', '.', 'encodeToString', '(', '_encrypt', '(', 'input', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'passphrase', '.', 'getBytes', '(', 'UTF_8', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,encrypt,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        return Base64.getEncoder().encode(_encrypt(input, passphrase));
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        return Base64.getEncoder().encode(_encrypt(input, passphrase));
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'encrypt', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'getEncoder', '(', ')', '.', 'encode', '(', '_encrypt', '(', 'input', ',', ' ', 'passphrase', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,_encrypt,"    private static byte[] _encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        byte[] salt = (new SecureRandom()).generateSeed(8);
        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));

        byte[] enc = cipher.doFinal(input);
        return concat(concat(SALTED, salt), enc);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    private static byte[] _encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        byte[] salt = (new SecureRandom()).generateSeed(8);
        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));

        byte[] enc = cipher.doFinal(input);
        return concat(concat(SALTED, salt), enc);
    }
","['    ', 'private', ' ', 'static', ' ', 'byte', '[', ']', ' ', '_encrypt', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', '(', 'new', ' ', 'SecureRandom', '(', ')', ')', '.', 'generateSeed', '(', '8', ')', ';', '\n', '        ', 'Object', '[', ']', ' ', 'keyIv', ' ', '=', ' ', 'deriveKeyAndIv', '(', 'passphrase', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'ENCRYPT_MODE', ',', ' ', 'new', ' ', 'SecretKeySpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '0', ']', ',', ' ', '""', 'AES', '""', ')', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '1', ']', ')', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'enc', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'input', ')', ';', '\n', '        ', 'return', ' ', 'concat', '(', 'concat', '(', 'SALTED', ',', ' ', 'salt', ')', ',', ' ', 'enc', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,decrypt,"    public static String decrypt(String crypted, String passphrase) throws Exception
    {
        return new String(decrypt(crypted.getBytes(), passphrase.getBytes(UTF_8)), UTF_8);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static String decrypt(String crypted, String passphrase) throws Exception
    {
        return new String(decrypt(crypted.getBytes(), passphrase.getBytes(UTF_8)), UTF_8);
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'crypted', ',', ' ', 'String', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'String', '(', 'decrypt', '(', 'crypted', '.', 'getBytes', '(', ')', ',', ' ', 'passphrase', '.', 'getBytes', '(', 'UTF_8', ')', ')', ',', ' ', 'UTF_8', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,decrypt,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception
    {
        byte[] data = Base64.getDecoder().decode(crypted);
        byte[] salt = Arrays.copyOfRange(data, 8, 16);

        if (!Arrays.equals(Arrays.copyOfRange(data, 0, 8), SALTED)) {
            throw new IllegalArgumentException(""Invalid crypted data"");
        }

        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));
        return cipher.doFinal(data, 16, data.length - 16);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception
    {
        byte[] data = Base64.getDecoder().decode(crypted);
        byte[] salt = Arrays.copyOfRange(data, 8, 16);

        if (!Arrays.equals(Arrays.copyOfRange(data, 0, 8), SALTED)) {
            throw new IllegalArgumentException(""Invalid crypted data"");
        }

        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));
        return cipher.doFinal(data, 16, data.length - 16);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'decrypt', '(', 'byte', '[', ']', ' ', 'crypted', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'data', ' ', '=', ' ', 'Base64', '.', 'getDecoder', '(', ')', '.', 'decode', '(', 'crypted', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'data', ',', ' ', '8', ',', ' ', '16', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', '!', 'Arrays', '.', 'equals', '(', 'Arrays', '.', 'copyOfRange', '(', 'data', ',', ' ', '0', ',', ' ', '8', ')', ',', ' ', 'SALTED', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Invalid crypted data', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Object', '[', ']', ' ', 'keyIv', ' ', '=', ' ', 'deriveKeyAndIv', '(', 'passphrase', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'DECRYPT_MODE', ',', ' ', 'new', ' ', 'SecretKeySpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '0', ']', ',', ' ', '""', 'AES', '""', ')', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '1', ']', ')', ')', ';', '\n', '        ', 'return', ' ', 'cipher', '.', 'doFinal', '(', 'data', ',', ' ', '16', ',', ' ', 'data', '.', 'length', ' ', '-', ' ', '16', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,deriveKeyAndIv,"    private static Object[] deriveKeyAndIv(byte[] passphrase, byte[] salt) throws Exception
    {
        final MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        final byte[] passSalt = concat(passphrase, salt);
        byte[] dx = new byte[0];
        byte[] di = new byte[0];

        for (int i = 0; i < 3; i++) {
            di = md5.digest(concat(di, passSalt));
            dx = concat(dx, di);
        }

        return new Object[]{Arrays.copyOfRange(dx, 0, 32), Arrays.copyOfRange(dx, 32, 48)};
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    private static Object[] deriveKeyAndIv(byte[] passphrase, byte[] salt) throws Exception
    {
        final MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        final byte[] passSalt = concat(passphrase, salt);
        byte[] dx = new byte[0];
        byte[] di = new byte[0];

        for (int i = 0; i < 3; i++) {
            di = md5.digest(concat(di, passSalt));
            dx = concat(dx, di);
        }

        return new Object[]{Arrays.copyOfRange(dx, 0, 32), Arrays.copyOfRange(dx, 32, 48)};
    }
","['    ', 'private', ' ', 'static', ' ', 'Object', '[', ']', ' ', 'deriveKeyAndIv', '(', 'byte', '[', ']', ' ', 'passphrase', ',', ' ', 'byte', '[', ']', ' ', 'salt', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'MessageDigest', ' ', 'md5', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passSalt', ' ', '=', ' ', 'concat', '(', 'passphrase', ',', ' ', 'salt', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'dx', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'di', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'di', ' ', '=', ' ', 'md5', '.', 'digest', '(', 'concat', '(', 'di', ',', ' ', 'passSalt', ')', ')', ';', '\n', '            ', 'dx', ' ', '=', ' ', 'concat', '(', 'dx', ',', ' ', 'di', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'new', ' ', 'Object', '[', ']', '{', 'Arrays', '.', 'copyOfRange', '(', 'dx', ',', ' ', '0', ',', ' ', '32', ')', ',', ' ', 'Arrays', '.', 'copyOfRange', '(', 'dx', ',', ' ', '32', ',', ' ', '48', ')', '}', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,concat,"    private static byte[] concat(byte[] a, byte[] b)
    {
        byte[] c = new byte[a.length + b.length];
        System.arraycopy(a, 0, c, 0, a.length);
        System.arraycopy(b, 0, c, a.length, b.length);
        return c;
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    private static byte[] concat(byte[] a, byte[] b)
    {
        byte[] c = new byte[a.length + b.length];
        System.arraycopy(a, 0, c, 0, a.length);
        System.arraycopy(b, 0, c, a.length, b.length);
        return c;
    }
","['    ', 'private', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'concat', '(', 'byte', '[', ']', ' ', 'a', ',', ' ', 'byte', '[', ']', ' ', 'b', ')', '\n', '    ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'c', ' ', '=', ' ', 'new', ' ', 'byte', '[', 'a', '.', 'length', ' ', '+', ' ', 'b', '.', 'length', ']', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'a', ',', ' ', '0', ',', ' ', 'c', ',', ' ', '0', ',', ' ', 'a', '.', 'length', ')', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'b', ',', ' ', '0', ',', ' ', 'c', ',', ' ', 'a', '.', 'length', ',', ' ', 'b', '.', 'length', ')', ';', '\n', '        ', 'return', ' ', 'c', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,main,"    public static void main(String[] args) throws Exception
    {
        String encrypted = Aes256.encrypt(""Java Enc"", ""PASSWORD"");
        System.out.println(encrypted);

        String decrypted = Aes256.decrypt(encrypted, ""PASSWORD"");
        System.out.println(decrypted);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static void main(String[] args) throws Exception
    {
        String encrypted = Aes256.encrypt(""Java Enc"", ""PASSWORD"");
        System.out.println(encrypted);

        String decrypted = Aes256.decrypt(encrypted, ""PASSWORD"");
        System.out.println(decrypted);
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'String', ' ', 'encrypted', ' ', '=', ' ', 'Aes256', '.', 'encrypt', '(', '""', 'Java Enc', '""', ',', ' ', '""', 'PASSWORD', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'encrypted', ')', ';', '\n', '\n', '        ', 'String', ' ', 'decrypted', ' ', '=', ' ', 'Aes256', '.', 'decrypt', '(', 'encrypted', ',', ' ', '""', 'PASSWORD', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'decrypted', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,encrypt,"    public static String encrypt(String input, String passphrase) throws Exception
    {
        return Base64.encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)), BASE64FLAGS);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static String encrypt(String input, String passphrase) throws Exception
    {
        return Base64.encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)), BASE64FLAGS);
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'input', ',', ' ', 'String', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'encodeToString', '(', '_encrypt', '(', 'input', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'passphrase', '.', 'getBytes', '(', 'UTF_8', ')', ')', ',', ' ', 'BASE64FLAGS', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,encrypt,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        return Base64.encode(_encrypt(input, passphrase), BASE64FLAGS);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        return Base64.encode(_encrypt(input, passphrase), BASE64FLAGS);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'encrypt', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'encode', '(', '_encrypt', '(', 'input', ',', ' ', 'passphrase', ')', ',', ' ', 'BASE64FLAGS', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,decrypt,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception
    {
        byte[] data = Base64.decode(crypted, BASE64FLAGS);
        byte[] salt = Arrays.copyOfRange(data, 8, 16);

        if (!Arrays.equals(Arrays.copyOfRange(data, 0, 8), SALTED)) {
            throw new IllegalArgumentException(""Invalid crypted data"");
        }

        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));
        return cipher.doFinal(data, 16, data.length - 16);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception
    {
        byte[] data = Base64.decode(crypted, BASE64FLAGS);
        byte[] salt = Arrays.copyOfRange(data, 8, 16);

        if (!Arrays.equals(Arrays.copyOfRange(data, 0, 8), SALTED)) {
            throw new IllegalArgumentException(""Invalid crypted data"");
        }

        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));
        return cipher.doFinal(data, 16, data.length - 16);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'decrypt', '(', 'byte', '[', ']', ' ', 'crypted', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'data', ' ', '=', ' ', 'Base64', '.', 'decode', '(', 'crypted', ',', ' ', 'BASE64FLAGS', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'data', ',', ' ', '8', ',', ' ', '16', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', '!', 'Arrays', '.', 'equals', '(', 'Arrays', '.', 'copyOfRange', '(', 'data', ',', ' ', '0', ',', ' ', '8', ')', ',', ' ', 'SALTED', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Invalid crypted data', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Object', '[', ']', ' ', 'keyIv', ' ', '=', ' ', 'deriveKeyAndIv', '(', 'passphrase', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'DECRYPT_MODE', ',', ' ', 'new', ' ', 'SecretKeySpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '0', ']', ',', ' ', '""', 'AES', '""', ')', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '1', ']', ')', ')', ';', '\n', '        ', 'return', ' ', 'cipher', '.', 'doFinal', '(', 'data', ',', ' ', '16', ',', ' ', 'data', '.', 'length', ' ', '-', ' ', '16', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5bc626214105975893cc2d6357bc37d9aaf35ffa,Aes256.java,main,"    public static void main(String[] args) throws Exception
    {
        String encrypted = Aes256.encrypt(""Android Enc"", ""PASSWORD"");
        System.out.println(encrypted);

        String decrypted = Aes256.decrypt(encrypted, ""PASSWORD"");
        System.out.println(decrypted);
    }",https://www.github.com/mervick/aes-everywhere/commit/5bc626214105975893cc2d6357bc37d9aaf35ffa,"    public static void main(String[] args) throws Exception
    {
        String encrypted = Aes256.encrypt(""Android Enc"", ""PASSWORD"");
        System.out.println(encrypted);

        String decrypted = Aes256.decrypt(encrypted, ""PASSWORD"");
        System.out.println(decrypted);
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'String', ' ', 'encrypted', ' ', '=', ' ', 'Aes256', '.', 'encrypt', '(', '""', 'Android Enc', '""', ',', ' ', '""', 'PASSWORD', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'encrypted', ')', ';', '\n', '\n', '        ', 'String', ' ', 'decrypted', ' ', '=', ' ', 'Aes256', '.', 'decrypt', '(', 'encrypted', ',', ' ', '""', 'PASSWORD', '""', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'decrypted', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,encrypt,"    protected byte[] encrypt(byte[] in, byte[] pass) throws Exception
    {
        return Aes256.encrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    protected byte[] encrypt(byte[] in, byte[] pass) throws Exception
    {
        return Aes256.encrypt(in, pass);
    }
","['    ', 'protected', ' ', 'byte', '[', ']', ' ', 'encrypt', '(', 'byte', '[', ']', ' ', 'in', ',', ' ', 'byte', '[', ']', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'encrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,encrypt,"    protected String encrypt(String in, String pass) throws Exception
    {
        return Aes256.encrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    protected String encrypt(String in, String pass) throws Exception
    {
        return Aes256.encrypt(in, pass);
    }
","['    ', 'protected', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'encrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,decrypt,"    protected byte[] decrypt(byte[] in, byte[] pass) throws Exception
    {
        return Aes256.decrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    protected byte[] decrypt(byte[] in, byte[] pass) throws Exception
    {
        return Aes256.decrypt(in, pass);
    }
","['    ', 'protected', ' ', 'byte', '[', ']', ' ', 'decrypt', '(', 'byte', '[', ']', ' ', 'in', ',', ' ', 'byte', '[', ']', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'decrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,decrypt,"    protected String decrypt(String in, String pass) throws Exception
    {
        return Aes256.decrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    protected String decrypt(String in, String pass) throws Exception
    {
        return Aes256.decrypt(in, pass);
    }
","['    ', 'protected', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'decrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,testDecrypt,"    private void testDecrypt(String in, String pass, String expect)
    {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            result = decrypt(in, pass);
        } catch (Exception e) { }

        try {
            bytes = decrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(expect, result, ""Fail strings"");
        assertArrayEquals(expect.getBytes(UTF_8), bytes, ""Fail bytes"");
    }",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    private void testDecrypt(String in, String pass, String expect)
    {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            result = decrypt(in, pass);
        } catch (Exception e) { }

        try {
            bytes = decrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(expect, result, ""Fail strings"");
        assertArrayEquals(expect.getBytes(UTF_8), bytes, ""Fail bytes"");
    }
","['    ', 'private', ' ', 'void', ' ', 'testDecrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ',', ' ', 'String', ' ', 'expect', ')', '\n', '    ', '{', '\n', '        ', 'String', ' ', 'result', ' ', '=', ' ', '""', '""', ';', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'result', ' ', '=', ' ', 'decrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'bytes', ' ', '=', ' ', 'decrypt', '(', 'in', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'pass', '.', 'getBytes', '(', 'UTF_8', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'assertEquals', '(', 'expect', ',', ' ', 'result', ',', ' ', '""', 'Fail strings', '""', ')', ';', '\n', '        ', 'assertArrayEquals', '(', 'expect', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'bytes', ',', ' ', '""', 'Fail bytes', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,testDecrypt1,"    public void testDecrypt1() throws Exception
    {
        testDecrypt(
            ""U2FsdGVkX1+Z9xSlpZGuO2zo51XUtsCGZPs8bKQ/jYg="",",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    public void testDecrypt1() throws Exception
    {
        testDecrypt(
            ""U2FsdGVkX1+Z9xSlpZGuO2zo51XUtsCGZPs8bKQ/jYg="",
","['    ', 'public', ' ', 'void', ' ', 'testDecrypt1', '(', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'testDecrypt', '(', '\n', '            ', '""', 'U2FsdGVkX1+Z9xSlpZGuO2zo51XUtsCGZPs8bKQ/jYg=', '""', ',', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,testDecrypt2,"    public void testDecrypt2()
    {
        testDecrypt(
            ""U2FsdGVkX1+8b3WpGTbZHtd2T9PNQ+N7GqebGaOV3cI="",",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    public void testDecrypt2()
    {
        testDecrypt(
            ""U2FsdGVkX1+8b3WpGTbZHtd2T9PNQ+N7GqebGaOV3cI="",
","['    ', 'public', ' ', 'void', ' ', 'testDecrypt2', '(', ')', '\n', '    ', '{', '\n', '        ', 'testDecrypt', '(', '\n', '            ', '""', 'U2FsdGVkX1+8b3WpGTbZHtd2T9PNQ+N7GqebGaOV3cI=', '""', ',', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,testDecrypt3,"    public void testDecrypt3()
    {
        testDecrypt(
            ""U2FsdGVkX18Kp+T3M9VajicIO9WGQQuAlMscLGiTnVyHRj2jHObWshzJXQ6RpJtW"",",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    public void testDecrypt3()
    {
        testDecrypt(
            ""U2FsdGVkX18Kp+T3M9VajicIO9WGQQuAlMscLGiTnVyHRj2jHObWshzJXQ6RpJtW"",
","['    ', 'public', ' ', 'void', ' ', 'testDecrypt3', '(', ')', '\n', '    ', '{', '\n', '        ', 'testDecrypt', '(', '\n', '            ', '""', 'U2FsdGVkX18Kp+T3M9VajicIO9WGQQuAlMscLGiTnVyHRj2jHObWshzJXQ6RpJtW', '""', ',', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,testEncryptDecrypt,"    private void testEncryptDecrypt(String in, String pass)
    {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            String enc = encrypt(in, pass);
            result = decrypt(enc, pass);
        } catch (Exception e) { }

        try {
            byte[] ct = encrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8));
            bytes = decrypt(ct, pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(in, result, ""Fail strings"");
        assertArrayEquals(in.getBytes(UTF_8), bytes, ""Fail bytes"");
    }",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    private void testEncryptDecrypt(String in, String pass)
    {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            String enc = encrypt(in, pass);
            result = decrypt(enc, pass);
        } catch (Exception e) { }

        try {
            byte[] ct = encrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8));
            bytes = decrypt(ct, pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(in, result, ""Fail strings"");
        assertArrayEquals(in.getBytes(UTF_8), bytes, ""Fail bytes"");
    }
","['    ', 'private', ' ', 'void', ' ', 'testEncryptDecrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ')', '\n', '    ', '{', '\n', '        ', 'String', ' ', 'result', ' ', '=', ' ', '""', '""', ';', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'String', ' ', 'enc', ' ', '=', ' ', 'encrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '            ', 'result', ' ', '=', ' ', 'decrypt', '(', 'enc', ',', ' ', 'pass', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'byte', '[', ']', ' ', 'ct', ' ', '=', ' ', 'encrypt', '(', 'in', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'pass', '.', 'getBytes', '(', 'UTF_8', ')', ')', ';', '\n', '            ', 'bytes', ' ', '=', ' ', 'decrypt', '(', 'ct', ',', ' ', 'pass', '.', 'getBytes', '(', 'UTF_8', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'assertEquals', '(', 'in', ',', ' ', 'result', ',', ' ', '""', 'Fail strings', '""', ')', ';', '\n', '        ', 'assertArrayEquals', '(', 'in', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'bytes', ',', ' ', '""', 'Fail bytes', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,Aes256Test.java,testEncryptDecrypt1,"    public void testEncryptDecrypt1()
    {
        testEncryptDecrypt(
            ""Test! @#$%^&*"",",https://www.github.com/mervick/aes-everywhere/commit/2c8e81eb9b9a39fef071b7c2c3e8644c4f641b1e,"    public void testEncryptDecrypt1()
    {
        testEncryptDecrypt(
            ""Test! @#$%^&*"",
","['    ', 'public', ' ', 'void', ' ', 'testEncryptDecrypt1', '(', ')', '\n', '    ', '{', '\n', '        ', 'testEncryptDecrypt', '(', '\n', '            ', '""', 'Test! @#$%^&*', '""', ',', '\n', '<END>']"
master,85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,Aes256Test.java,encrypt,"    protected byte[] encrypt(byte[] in, byte[] pass) throws Exception {
        return Aes256.encrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,"    protected byte[] encrypt(byte[] in, byte[] pass) throws Exception {
        return Aes256.encrypt(in, pass);
    }
","['    ', 'protected', ' ', 'byte', '[', ']', ' ', 'encrypt', '(', 'byte', '[', ']', ' ', 'in', ',', ' ', 'byte', '[', ']', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'encrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,Aes256Test.java,encrypt,"    protected String encrypt(String in, String pass) throws Exception {
        return Aes256.encrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,"    protected String encrypt(String in, String pass) throws Exception {
        return Aes256.encrypt(in, pass);
    }
","['    ', 'protected', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'encrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,Aes256Test.java,decrypt,"    protected byte[] decrypt(byte[] in, byte[] pass) throws Exception {
        return Aes256.decrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,"    protected byte[] decrypt(byte[] in, byte[] pass) throws Exception {
        return Aes256.decrypt(in, pass);
    }
","['    ', 'protected', ' ', 'byte', '[', ']', ' ', 'decrypt', '(', 'byte', '[', ']', ' ', 'in', ',', ' ', 'byte', '[', ']', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'decrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,Aes256Test.java,decrypt,"    protected String decrypt(String in, String pass) throws Exception {
        return Aes256.decrypt(in, pass);
    }",https://www.github.com/mervick/aes-everywhere/commit/85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,"    protected String decrypt(String in, String pass) throws Exception {
        return Aes256.decrypt(in, pass);
    }
","['    ', 'protected', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Aes256', '.', 'decrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,Aes256Test.java,testDecrypt,"    private void testDecrypt(String in, String pass, String expect) {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            result = decrypt(in, pass);
        } catch (Exception e) { }

        try {
            bytes = decrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(expect, result, ""Fail strings"");
        assertArrayEquals(expect.getBytes(UTF_8), bytes, ""Fail bytes"");
    }",https://www.github.com/mervick/aes-everywhere/commit/85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,"    private void testDecrypt(String in, String pass, String expect) {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            result = decrypt(in, pass);
        } catch (Exception e) { }

        try {
            bytes = decrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(expect, result, ""Fail strings"");
        assertArrayEquals(expect.getBytes(UTF_8), bytes, ""Fail bytes"");
    }
","['    ', 'private', ' ', 'void', ' ', 'testDecrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ',', ' ', 'String', ' ', 'expect', ')', ' ', '{', '\n', '        ', 'String', ' ', 'result', ' ', '=', ' ', '""', '""', ';', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'result', ' ', '=', ' ', 'decrypt', '(', 'in', ',', ' ', 'pass', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'bytes', ' ', '=', ' ', 'decrypt', '(', 'in', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'pass', '.', 'getBytes', '(', 'UTF_8', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'assertEquals', '(', 'expect', ',', ' ', 'result', ',', ' ', '""', 'Fail strings', '""', ')', ';', '\n', '        ', 'assertArrayEquals', '(', 'expect', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'bytes', ',', ' ', '""', 'Fail bytes', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,Aes256Test.java,testDecrypt1,"    public void testDecrypt1() throws Exception {
        testDecrypt(""U2FsdGVkX1+Z9xSlpZGuO2zo51XUtsCGZPs8bKQ/jYg="", ""pass"", ""test"");
    }",https://www.github.com/mervick/aes-everywhere/commit/85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,"    public void testDecrypt1() throws Exception {
        testDecrypt(""U2FsdGVkX1+Z9xSlpZGuO2zo51XUtsCGZPs8bKQ/jYg="", ""pass"", ""test"");
    }
","['    ', 'public', ' ', 'void', ' ', 'testDecrypt1', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'testDecrypt', '(', '""', 'U2FsdGVkX1+Z9xSlpZGuO2zo51XUtsCGZPs8bKQ/jYg=', '""', ',', ' ', '""', 'pass', '""', ',', ' ', '""', 'test', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,Aes256Test.java,testEncryptDecrypt,"    private void testEncryptDecrypt(String in, String pass) {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            result = decrypt(encrypt(in, pass), pass);
        } catch (Exception e) { }

        try {
            bytes = decrypt(encrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8)), pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(in, result, ""Fail strings"");
        assertArrayEquals(in.getBytes(UTF_8), bytes, ""Fail bytes"");
    }",https://www.github.com/mervick/aes-everywhere/commit/85c7f87327a5fb5dffdcc2e0803998e8b947c2ff,"    private void testEncryptDecrypt(String in, String pass) {
        String result = """";
        byte[] bytes = new byte[0];

        try {
            result = decrypt(encrypt(in, pass), pass);
        } catch (Exception e) { }

        try {
            bytes = decrypt(encrypt(in.getBytes(UTF_8), pass.getBytes(UTF_8)), pass.getBytes(UTF_8));
        } catch (Exception e) { }

        assertEquals(in, result, ""Fail strings"");
        assertArrayEquals(in.getBytes(UTF_8), bytes, ""Fail bytes"");
    }
","['    ', 'private', ' ', 'void', ' ', 'testEncryptDecrypt', '(', 'String', ' ', 'in', ',', ' ', 'String', ' ', 'pass', ')', ' ', '{', '\n', '        ', 'String', ' ', 'result', ' ', '=', ' ', '""', '""', ';', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'result', ' ', '=', ' ', 'decrypt', '(', 'encrypt', '(', 'in', ',', ' ', 'pass', ')', ',', ' ', 'pass', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'bytes', ' ', '=', ' ', 'decrypt', '(', 'encrypt', '(', 'in', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'pass', '.', 'getBytes', '(', 'UTF_8', ')', ')', ',', ' ', 'pass', '.', 'getBytes', '(', 'UTF_8', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', ' ', '}', '\n', '\n', '        ', 'assertEquals', '(', 'in', ',', ' ', 'result', ',', ' ', '""', 'Fail strings', '""', ')', ';', '\n', '        ', 'assertArrayEquals', '(', 'in', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'bytes', ',', ' ', '""', 'Fail bytes', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,AbstractAes256.java,_encrypt,"    protected static byte[] _encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        byte[] salt = (new SecureRandom()).generateSeed(8);
        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));

        byte[] enc = cipher.doFinal(input);
        return concat(concat(SALTED, salt), enc);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    protected static byte[] _encrypt(byte[] input, byte[] passphrase) throws Exception
    {
        byte[] salt = (new SecureRandom()).generateSeed(8);
        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));

        byte[] enc = cipher.doFinal(input);
        return concat(concat(SALTED, salt), enc);
    }
","['    ', 'protected', ' ', 'static', ' ', 'byte', '[', ']', ' ', '_encrypt', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', '(', 'new', ' ', 'SecureRandom', '(', ')', ')', '.', 'generateSeed', '(', '8', ')', ';', '\n', '        ', 'Object', '[', ']', ' ', 'keyIv', ' ', '=', ' ', 'deriveKeyAndIv', '(', 'passphrase', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'ENCRYPT_MODE', ',', ' ', 'new', ' ', 'SecretKeySpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '0', ']', ',', ' ', '""', 'AES', '""', ')', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '1', ']', ')', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'enc', ' ', '=', ' ', 'cipher', '.', 'doFinal', '(', 'input', ')', ';', '\n', '        ', 'return', ' ', 'concat', '(', 'concat', '(', 'SALTED', ',', ' ', 'salt', ')', ',', ' ', 'enc', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,AbstractAes256.java,_decrypt,"    protected static byte[] _decrypt(byte[] data, byte[] passphrase) throws Exception
    {
        byte[] salt = Arrays.copyOfRange(data, 8, 16);

        if (!Arrays.equals(Arrays.copyOfRange(data, 0, 8), SALTED)) {
            throw new IllegalArgumentException(""Invalid crypted data"");
        }

        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));
        return cipher.doFinal(data, 16, data.length - 16);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    protected static byte[] _decrypt(byte[] data, byte[] passphrase) throws Exception
    {
        byte[] salt = Arrays.copyOfRange(data, 8, 16);

        if (!Arrays.equals(Arrays.copyOfRange(data, 0, 8), SALTED)) {
            throw new IllegalArgumentException(""Invalid crypted data"");
        }

        Object[] keyIv = deriveKeyAndIv(passphrase, salt);

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec((byte[])keyIv[0], ""AES""), new IvParameterSpec((byte[])keyIv[1]));
        return cipher.doFinal(data, 16, data.length - 16);
    }
","['    ', 'protected', ' ', 'static', ' ', 'byte', '[', ']', ' ', '_decrypt', '(', 'byte', '[', ']', ' ', 'data', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'salt', ' ', '=', ' ', 'Arrays', '.', 'copyOfRange', '(', 'data', ',', ' ', '8', ',', ' ', '16', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', '!', 'Arrays', '.', 'equals', '(', 'Arrays', '.', 'copyOfRange', '(', 'data', ',', ' ', '0', ',', ' ', '8', ')', ',', ' ', 'SALTED', ')', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Invalid crypted data', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Object', '[', ']', ' ', 'keyIv', ' ', '=', ' ', 'deriveKeyAndIv', '(', 'passphrase', ',', ' ', 'salt', ')', ';', '\n', '\n', '        ', 'Cipher', ' ', 'cipher', ' ', '=', ' ', 'Cipher', '.', 'getInstance', '(', '""', 'AES/CBC/PKCS5Padding', '""', ')', ';', '\n', '        ', 'cipher', '.', 'init', '(', 'Cipher', '.', 'DECRYPT_MODE', ',', ' ', 'new', ' ', 'SecretKeySpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '0', ']', ',', ' ', '""', 'AES', '""', ')', ',', ' ', 'new', ' ', 'IvParameterSpec', '(', '(', 'byte', '[', ']', ')', 'keyIv', '[', '1', ']', ')', ')', ';', '\n', '        ', 'return', ' ', 'cipher', '.', 'doFinal', '(', 'data', ',', ' ', '16', ',', ' ', 'data', '.', 'length', ' ', '-', ' ', '16', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,AbstractAes256.java,deriveKeyAndIv,"    protected static Object[] deriveKeyAndIv(byte[] passphrase, byte[] salt) throws Exception
    {
        final MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        final byte[] passSalt = concat(passphrase, salt);
        byte[] dx = new byte[0];
        byte[] di = new byte[0];

        for (int i = 0; i < 3; i++) {
            di = md5.digest(concat(di, passSalt));
            dx = concat(dx, di);
        }

        return new Object[]{Arrays.copyOfRange(dx, 0, 32), Arrays.copyOfRange(dx, 32, 48)};
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    protected static Object[] deriveKeyAndIv(byte[] passphrase, byte[] salt) throws Exception
    {
        final MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        final byte[] passSalt = concat(passphrase, salt);
        byte[] dx = new byte[0];
        byte[] di = new byte[0];

        for (int i = 0; i < 3; i++) {
            di = md5.digest(concat(di, passSalt));
            dx = concat(dx, di);
        }

        return new Object[]{Arrays.copyOfRange(dx, 0, 32), Arrays.copyOfRange(dx, 32, 48)};
    }
","['    ', 'protected', ' ', 'static', ' ', 'Object', '[', ']', ' ', 'deriveKeyAndIv', '(', 'byte', '[', ']', ' ', 'passphrase', ',', ' ', 'byte', '[', ']', ' ', 'salt', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'final', ' ', 'MessageDigest', ' ', 'md5', ' ', '=', ' ', 'MessageDigest', '.', 'getInstance', '(', '""', 'MD5', '""', ')', ';', '\n', '        ', 'final', ' ', 'byte', '[', ']', ' ', 'passSalt', ' ', '=', ' ', 'concat', '(', 'passphrase', ',', ' ', 'salt', ')', ';', '\n', '        ', 'byte', '[', ']', ' ', 'dx', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '        ', 'byte', '[', ']', ' ', 'di', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0', ']', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', '3', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'di', ' ', '=', ' ', 'md5', '.', 'digest', '(', 'concat', '(', 'di', ',', ' ', 'passSalt', ')', ')', ';', '\n', '            ', 'dx', ' ', '=', ' ', 'concat', '(', 'dx', ',', ' ', 'di', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'new', ' ', 'Object', '[', ']', '{', 'Arrays', '.', 'copyOfRange', '(', 'dx', ',', ' ', '0', ',', ' ', '32', ')', ',', ' ', 'Arrays', '.', 'copyOfRange', '(', 'dx', ',', ' ', '32', ',', ' ', '48', ')', '}', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,AbstractAes256.java,concat,"    protected static byte[] concat(byte[] a, byte[] b)
    {
        byte[] c = new byte[a.length + b.length];
        System.arraycopy(a, 0, c, 0, a.length);
        System.arraycopy(b, 0, c, a.length, b.length);
        return c;
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    protected static byte[] concat(byte[] a, byte[] b)
    {
        byte[] c = new byte[a.length + b.length];
        System.arraycopy(a, 0, c, 0, a.length);
        System.arraycopy(b, 0, c, a.length, b.length);
        return c;
    }
","['    ', 'protected', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'concat', '(', 'byte', '[', ']', ' ', 'a', ',', ' ', 'byte', '[', ']', ' ', 'b', ')', '\n', '    ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'c', ' ', '=', ' ', 'new', ' ', 'byte', '[', 'a', '.', 'length', ' ', '+', ' ', 'b', '.', 'length', ']', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'a', ',', ' ', '0', ',', ' ', 'c', ',', ' ', '0', ',', ' ', 'a', '.', 'length', ')', ';', '\n', '        ', 'System', '.', 'arraycopy', '(', 'b', ',', ' ', '0', ',', ' ', 'c', ',', ' ', 'a', '.', 'length', ',', ' ', 'b', '.', 'length', ')', ';', '\n', '        ', 'return', ' ', 'c', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,encrypt,"    public static String encrypt(String input, String passphrase) throws Exception {
        return Base64.getEncoder().encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)));
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static String encrypt(String input, String passphrase) throws Exception {
        return Base64.getEncoder().encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)));
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'input', ',', ' ', 'String', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'getEncoder', '(', ')', '.', 'encodeToString', '(', '_encrypt', '(', 'input', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'passphrase', '.', 'getBytes', '(', 'UTF_8', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,encrypt,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception {
        return Base64.getEncoder().encode(_encrypt(input, passphrase));
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception {
        return Base64.getEncoder().encode(_encrypt(input, passphrase));
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'encrypt', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'getEncoder', '(', ')', '.', 'encode', '(', '_encrypt', '(', 'input', ',', ' ', 'passphrase', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,decrypt,"    public static String decrypt(String crypted, String passphrase) throws Exception {
        return new String(_decrypt(Base64.getDecoder().decode(crypted), passphrase.getBytes(UTF_8)), UTF_8);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static String decrypt(String crypted, String passphrase) throws Exception {
        return new String(_decrypt(Base64.getDecoder().decode(crypted), passphrase.getBytes(UTF_8)), UTF_8);
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'crypted', ',', ' ', 'String', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'String', '(', '_decrypt', '(', 'Base64', '.', 'getDecoder', '(', ')', '.', 'decode', '(', 'crypted', ')', ',', ' ', 'passphrase', '.', 'getBytes', '(', 'UTF_8', ')', ')', ',', ' ', 'UTF_8', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,decrypt,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception {
        return _decrypt(Base64.getDecoder().decode(crypted), passphrase);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception {
        return _decrypt(Base64.getDecoder().decode(crypted), passphrase);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'decrypt', '(', 'byte', '[', ']', ' ', 'crypted', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', '_decrypt', '(', 'Base64', '.', 'getDecoder', '(', ')', '.', 'decode', '(', 'crypted', ')', ',', ' ', 'passphrase', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,encrypt,"    public static String encrypt(String input, String passphrase) throws Exception {
        return Base64.encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)), Base64.NO_WRAP);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static String encrypt(String input, String passphrase) throws Exception {
        return Base64.encodeToString(_encrypt(input.getBytes(UTF_8), passphrase.getBytes(UTF_8)), Base64.NO_WRAP);
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'encrypt', '(', 'String', ' ', 'input', ',', ' ', 'String', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'encodeToString', '(', '_encrypt', '(', 'input', '.', 'getBytes', '(', 'UTF_8', ')', ',', ' ', 'passphrase', '.', 'getBytes', '(', 'UTF_8', ')', ')', ',', ' ', 'Base64', '.', 'NO_WRAP', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,encrypt,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception {
        return Base64.encode(_encrypt(input, passphrase), Base64.NO_WRAP);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static byte[] encrypt(byte[] input, byte[] passphrase) throws Exception {
        return Base64.encode(_encrypt(input, passphrase), Base64.NO_WRAP);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'encrypt', '(', 'byte', '[', ']', ' ', 'input', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'Base64', '.', 'encode', '(', '_encrypt', '(', 'input', ',', ' ', 'passphrase', ')', ',', ' ', 'Base64', '.', 'NO_WRAP', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,decrypt,"    public static String decrypt(String crypted, String passphrase) throws Exception {
        return new String(_decrypt(Base64.decode(crypted, Base64.NO_WRAP), passphrase.getBytes(UTF_8)), UTF_8);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static String decrypt(String crypted, String passphrase) throws Exception {
        return new String(_decrypt(Base64.decode(crypted, Base64.NO_WRAP), passphrase.getBytes(UTF_8)), UTF_8);
    }
","['    ', 'public', ' ', 'static', ' ', 'String', ' ', 'decrypt', '(', 'String', ' ', 'crypted', ',', ' ', 'String', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'String', '(', '_decrypt', '(', 'Base64', '.', 'decode', '(', 'crypted', ',', ' ', 'Base64', '.', 'NO_WRAP', ')', ',', ' ', 'passphrase', '.', 'getBytes', '(', 'UTF_8', ')', ')', ',', ' ', 'UTF_8', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,Aes256.java,decrypt,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception {
        return _decrypt(Base64.decode(crypted, Base64.NO_WRAP), passphrase);
    }",https://www.github.com/mervick/aes-everywhere/commit/4972e6fec775bd9105ed06ad33fc9d8e1305f0b2,"    public static byte[] decrypt(byte[] crypted, byte[] passphrase) throws Exception {
        return _decrypt(Base64.decode(crypted, Base64.NO_WRAP), passphrase);
    }
","['    ', 'public', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'decrypt', '(', 'byte', '[', ']', ' ', 'crypted', ',', ' ', 'byte', '[', ']', ' ', 'passphrase', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', '_decrypt', '(', 'Base64', '.', 'decode', '(', 'crypted', ',', ' ', 'Base64', '.', 'NO_WRAP', ')', ',', ' ', 'passphrase', ')', ';', '\n', '    ', '}', '\n', '<END>']"
