Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,e87a113fbc5d45483be110769969f4e43dacd838,Application.java,main,"    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'SpringApplication', '.', 'run', '(', 'Application', '.', 'class', ',', ' ', 'args', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,NewAssociationPublisher.java,verifyPresenceOfNewAssociation,"    private Runnable verifyPresenceOfNewAssociation(ObservableEmitter<String> emitter) {
        return () -> {
            try {",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    private Runnable verifyPresenceOfNewAssociation(ObservableEmitter<String> emitter) {
        return () -> {
            try {
","['    ', 'private', ' ', 'Runnable', ' ', 'verifyPresenceOfNewAssociation', '(', 'ObservableEmitter', '<', 'String', '>', ' ', 'emitter', ')', ' ', '{', '\n', '        ', 'return', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,BusinessDataRepository.java,findByNamePrefix,"    public List<Dog> findByNamePrefix(String namePrefix, int limit) throws Exception {
        List<Dog> dogs = null;
        String sqlDog = ""SELECT ID, NAME, VETERINARY_ID FROM DOG WHERE NAME LIKE '"" + namePrefix + ""%' LIMIT ?"";
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sqlDog)) {
            stmt.setInt(1, limit);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    if (dogs == null) {
                        dogs = new ArrayList<>();
                    }
                    dogs.add(new Dog(rst.getInt(""ID""), rst.getString(""NAME""), this.findVeterinaryById(rst.getInt(""VETERINARY_ID""))));
                }
            }
        }
        return dogs;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public List<Dog> findByNamePrefix(String namePrefix, int limit) throws Exception {
        List<Dog> dogs = null;
        String sqlDog = ""SELECT ID, NAME, VETERINARY_ID FROM DOG WHERE NAME LIKE '"" + namePrefix + ""%' LIMIT ?"";
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sqlDog)) {
            stmt.setInt(1, limit);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    if (dogs == null) {
                        dogs = new ArrayList<>();
                    }
                    dogs.add(new Dog(rst.getInt(""ID""), rst.getString(""NAME""), this.findVeterinaryById(rst.getInt(""VETERINARY_ID""))));
                }
            }
        }
        return dogs;
    }
","['    ', 'public', ' ', 'List', '<', 'Dog', '>', ' ', 'findByNamePrefix', '(', 'String', ' ', 'namePrefix', ',', ' ', 'int', ' ', 'limit', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'List', '<', 'Dog', '>', ' ', 'dogs', ' ', '=', ' ', 'null', ';', '\n', '        ', 'String', ' ', 'sqlDog', ' ', '=', ' ', '""', ""SELECT ID, NAME, VETERINARY_ID FROM DOG WHERE NAME LIKE '"", '""', ' ', '+', ' ', 'namePrefix', ' ', '+', ' ', '""', ""%' LIMIT ?"", '""', ';', '\n', '        ', 'try', ' ', '(', 'PreparedStatement', ' ', 'stmt', ' ', '=', ' ', 'this', '.', 'storageConnection', '.', 'prepareStatement', '(', 'sqlDog', ')', ')', ' ', '{', '\n', '            ', 'stmt', '.', 'setInt', '(', '1', ',', ' ', 'limit', ')', ';', '\n', '            ', 'try', ' ', '(', 'ResultSet', ' ', 'rst', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', ')', ')', ' ', '{', '\n', '                ', 'while', ' ', '(', 'rst', '.', 'next', '(', ')', ')', ' ', '{', '\n', '                    ', 'if', ' ', '(', 'dogs', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                        ', 'dogs', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '                    ', '}', '\n', '                    ', 'dogs', '.', 'add', '(', 'new', ' ', 'Dog', '(', 'rst', '.', 'getInt', '(', '""', 'ID', '""', ')', ',', ' ', 'rst', '.', 'getString', '(', '""', 'NAME', '""', ')', ',', ' ', 'this', '.', 'findVeterinaryById', '(', 'rst', '.', 'getInt', '(', '""', 'VETERINARY_ID', '""', ')', ')', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'dogs', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,BusinessDataRepository.java,findAllDogs,"    public List<Dog> findAllDogs(boolean onlyFree, int limit) throws Exception {
        List<Dog> dogs = null;
        String sqlDogAll = ""SELECT ID, NAME, VETERINARY_ID FROM DOG LIMIT ?"";
        String sqlDogOnlyFree = ""SELECT ID, NAME FROM DOG WHERE VETERINARY_ID IS NULL LIMIT ?"";
        String sqlDog = onlyFree ? sqlDogOnlyFree : sqlDogAll;
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sqlDog)) {
            stmt.setInt(1, limit);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    if (dogs == null) {
                        dogs = new ArrayList<>();
                    }
                    if (onlyFree) {
                        dogs.add(new Dog(rst.getInt(""ID""), rst.getString(""NAME""), null));
                    } else {
                        dogs.add(new Dog(rst.getInt(""ID""), rst.getString(""NAME""), this.findVeterinaryById(rst.getInt(""VETERINARY_ID""))));
                    }
                }
            }
        }

        return dogs;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public List<Dog> findAllDogs(boolean onlyFree, int limit) throws Exception {
        List<Dog> dogs = null;
        String sqlDogAll = ""SELECT ID, NAME, VETERINARY_ID FROM DOG LIMIT ?"";
        String sqlDogOnlyFree = ""SELECT ID, NAME FROM DOG WHERE VETERINARY_ID IS NULL LIMIT ?"";
        String sqlDog = onlyFree ? sqlDogOnlyFree : sqlDogAll;
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sqlDog)) {
            stmt.setInt(1, limit);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    if (dogs == null) {
                        dogs = new ArrayList<>();
                    }
                    if (onlyFree) {
                        dogs.add(new Dog(rst.getInt(""ID""), rst.getString(""NAME""), null));
                    } else {
                        dogs.add(new Dog(rst.getInt(""ID""), rst.getString(""NAME""), this.findVeterinaryById(rst.getInt(""VETERINARY_ID""))));
                    }
                }
            }
        }

        return dogs;
    }
","['    ', 'public', ' ', 'List', '<', 'Dog', '>', ' ', 'findAllDogs', '(', 'boolean', ' ', 'onlyFree', ',', ' ', 'int', ' ', 'limit', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'List', '<', 'Dog', '>', ' ', 'dogs', ' ', '=', ' ', 'null', ';', '\n', '        ', 'String', ' ', 'sqlDogAll', ' ', '=', ' ', '""', 'SELECT ID, NAME, VETERINARY_ID FROM DOG LIMIT ?', '""', ';', '\n', '        ', 'String', ' ', 'sqlDogOnlyFree', ' ', '=', ' ', '""', 'SELECT ID, NAME FROM DOG WHERE VETERINARY_ID IS NULL LIMIT ?', '""', ';', '\n', '        ', 'String', ' ', 'sqlDog', ' ', '=', ' ', 'onlyFree', ' ', '?', ' ', 'sqlDogOnlyFree', ' ', ':', ' ', 'sqlDogAll', ';', '\n', '        ', 'try', ' ', '(', 'PreparedStatement', ' ', 'stmt', ' ', '=', ' ', 'this', '.', 'storageConnection', '.', 'prepareStatement', '(', 'sqlDog', ')', ')', ' ', '{', '\n', '            ', 'stmt', '.', 'setInt', '(', '1', ',', ' ', 'limit', ')', ';', '\n', '            ', 'try', ' ', '(', 'ResultSet', ' ', 'rst', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', ')', ')', ' ', '{', '\n', '                ', 'while', ' ', '(', 'rst', '.', 'next', '(', ')', ')', ' ', '{', '\n', '                    ', 'if', ' ', '(', 'dogs', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                        ', 'dogs', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '                    ', '}', '\n', '                    ', 'if', ' ', '(', 'onlyFree', ')', ' ', '{', '\n', '                        ', 'dogs', '.', 'add', '(', 'new', ' ', 'Dog', '(', 'rst', '.', 'getInt', '(', '""', 'ID', '""', ')', ',', ' ', 'rst', '.', 'getString', '(', '""', 'NAME', '""', ')', ',', ' ', 'null', ')', ')', ';', '\n', '                    ', '}', ' ', 'else', ' ', '{', '\n', '                        ', 'dogs', '.', 'add', '(', 'new', ' ', 'Dog', '(', 'rst', '.', 'getInt', '(', '""', 'ID', '""', ')', ',', ' ', 'rst', '.', 'getString', '(', '""', 'NAME', '""', ')', ',', ' ', 'this', '.', 'findVeterinaryById', '(', 'rst', '.', 'getInt', '(', '""', 'VETERINARY_ID', '""', ')', ')', ')', ')', ';', '\n', '                    ', '}', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'dogs', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,BusinessDataRepository.java,findDogById,"    public Dog findDogById(int dogId) throws Exception {
        Dog d = null;
        String sql = ""SELECT ID, NAME, VETERINARY_ID FROM DOG WHERE ID = ?"";
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
            stmt.setInt(1, dogId);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    d = new Dog(rst.getInt(""ID""), rst.getString(""NAME""), this.findVeterinaryById(rst.getInt(""VETERINARY_ID"")));
                }
            }
        }
        return d;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public Dog findDogById(int dogId) throws Exception {
        Dog d = null;
        String sql = ""SELECT ID, NAME, VETERINARY_ID FROM DOG WHERE ID = ?"";
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
            stmt.setInt(1, dogId);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    d = new Dog(rst.getInt(""ID""), rst.getString(""NAME""), this.findVeterinaryById(rst.getInt(""VETERINARY_ID"")));
                }
            }
        }
        return d;
    }
","['    ', 'public', ' ', 'Dog', ' ', 'findDogById', '(', 'int', ' ', 'dogId', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Dog', ' ', 'd', ' ', '=', ' ', 'null', ';', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', '""', 'SELECT ID, NAME, VETERINARY_ID FROM DOG WHERE ID = ?', '""', ';', '\n', '        ', 'try', ' ', '(', 'PreparedStatement', ' ', 'stmt', ' ', '=', ' ', 'this', '.', 'storageConnection', '.', 'prepareStatement', '(', 'sql', ')', ')', ' ', '{', '\n', '            ', 'stmt', '.', 'setInt', '(', '1', ',', ' ', 'dogId', ')', ';', '\n', '            ', 'try', ' ', '(', 'ResultSet', ' ', 'rst', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', ')', ')', ' ', '{', '\n', '                ', 'while', ' ', '(', 'rst', '.', 'next', '(', ')', ')', ' ', '{', '\n', '                    ', 'd', ' ', '=', ' ', 'new', ' ', 'Dog', '(', 'rst', '.', 'getInt', '(', '""', 'ID', '""', ')', ',', ' ', 'rst', '.', 'getString', '(', '""', 'NAME', '""', ')', ',', ' ', 'this', '.', 'findVeterinaryById', '(', 'rst', '.', 'getInt', '(', '""', 'VETERINARY_ID', '""', ')', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'd', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,BusinessDataRepository.java,associatedDogToVeterinary,"    public Dog associatedDogToVeterinary(int veterinaryId, int dogId) throws Exception {
        Dog d = null;
        //Verify is the specified DogResolver is already associated
        String sql = ""SELECT COUNT(ID) FROM DOG WHERE VETERINARY_ID IS NOT NULL and ID = ?"";
        boolean isAssociated;
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
            stmt.setInt(1, dogId);
            try (ResultSet rst = stmt.executeQuery()) {
                isAssociated = rst.getInt(1) > 0;
            }
        }
        //Associated it if it's free
        if (!isAssociated) {
            sql = ""UPDATE DOG SET VETERINARY_ID = ? WHERE ID = ?"";
            try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
                stmt.setInt(1, veterinaryId);
                stmt.setInt(2, dogId);
                int count = stmt.executeUpdate();
                if (count != 1) {
                    throw new Exception(""No data updated!"");
                }
            }
            d = findDogById(dogId);
        }

        return d;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public Dog associatedDogToVeterinary(int veterinaryId, int dogId) throws Exception {
        Dog d = null;
        
        String sql = ""SELECT COUNT(ID) FROM DOG WHERE VETERINARY_ID IS NOT NULL and ID = ?"";
        boolean isAssociated;
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
            stmt.setInt(1, dogId);
            try (ResultSet rst = stmt.executeQuery()) {
                isAssociated = rst.getInt(1) > 0;
            }
        }
        
        if (!isAssociated) {
            sql = ""UPDATE DOG SET VETERINARY_ID = ? WHERE ID = ?"";
            try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
                stmt.setInt(1, veterinaryId);
                stmt.setInt(2, dogId);
                int count = stmt.executeUpdate();
                if (count != 1) {
                    throw new Exception(""No data updated!"");
                }
            }
            d = findDogById(dogId);
        }

        return d;
    }
","['    ', 'public', ' ', 'Dog', ' ', 'associatedDogToVeterinary', '(', 'int', ' ', 'veterinaryId', ',', ' ', 'int', ' ', 'dogId', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Dog', ' ', 'd', ' ', '=', ' ', 'null', ';', '\n', '        ', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', '""', 'SELECT COUNT(ID) FROM DOG WHERE VETERINARY_ID IS NOT NULL and ID = ?', '""', ';', '\n', '        ', 'boolean', ' ', 'isAssociated', ';', '\n', '        ', 'try', ' ', '(', 'PreparedStatement', ' ', 'stmt', ' ', '=', ' ', 'this', '.', 'storageConnection', '.', 'prepareStatement', '(', 'sql', ')', ')', ' ', '{', '\n', '            ', 'stmt', '.', 'setInt', '(', '1', ',', ' ', 'dogId', ')', ';', '\n', '            ', 'try', ' ', '(', 'ResultSet', ' ', 'rst', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', ')', ')', ' ', '{', '\n', '                ', 'isAssociated', ' ', '=', ' ', 'rst', '.', 'getInt', '(', '1', ')', ' ', '>', ' ', '0', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'if', ' ', '(', '!', 'isAssociated', ')', ' ', '{', '\n', '            ', 'sql', ' ', '=', ' ', '""', 'UPDATE DOG SET VETERINARY_ID = ? WHERE ID = ?', '""', ';', '\n', '            ', 'try', ' ', '(', 'PreparedStatement', ' ', 'stmt', ' ', '=', ' ', 'this', '.', 'storageConnection', '.', 'prepareStatement', '(', 'sql', ')', ')', ' ', '{', '\n', '                ', 'stmt', '.', 'setInt', '(', '1', ',', ' ', 'veterinaryId', ')', ';', '\n', '                ', 'stmt', '.', 'setInt', '(', '2', ',', ' ', 'dogId', ')', ';', '\n', '                ', 'int', ' ', 'count', ' ', '=', ' ', 'stmt', '.', 'executeUpdate', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'count', ' ', '!', '=', ' ', '1', ')', ' ', '{', '\n', '                    ', 'throw', ' ', 'new', ' ', 'Exception', '(', '""', 'No data updated!', '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '            ', 'd', ' ', '=', ' ', 'findDogById', '(', 'dogId', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'd', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,BusinessDataRepository.java,loadCfgParam,"    public String loadCfgParam(String key) throws Exception {
        String v = null;
        String sql = ""SELECT CFGVALUE FROM CONFIG WHERE CFGKEY = ?"";
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
            stmt.setString(1, key);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    v = rst.getString(""CFGVALUE"");
                }
            }
        }
        return v;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public String loadCfgParam(String key) throws Exception {
        String v = null;
        String sql = ""SELECT CFGVALUE FROM CONFIG WHERE CFGKEY = ?"";
        try (PreparedStatement stmt = this.storageConnection.prepareStatement(sql)) {
            stmt.setString(1, key);
            try (ResultSet rst = stmt.executeQuery()) {
                while (rst.next()) {
                    v = rst.getString(""CFGVALUE"");
                }
            }
        }
        return v;
    }
","['    ', 'public', ' ', 'String', ' ', 'loadCfgParam', '(', 'String', ' ', 'key', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'String', ' ', 'v', ' ', '=', ' ', 'null', ';', '\n', '        ', 'String', ' ', 'sql', ' ', '=', ' ', '""', 'SELECT CFGVALUE FROM CONFIG WHERE CFGKEY = ?', '""', ';', '\n', '        ', 'try', ' ', '(', 'PreparedStatement', ' ', 'stmt', ' ', '=', ' ', 'this', '.', 'storageConnection', '.', 'prepareStatement', '(', 'sql', ')', ')', ' ', '{', '\n', '            ', 'stmt', '.', 'setString', '(', '1', ',', ' ', 'key', ')', ';', '\n', '            ', 'try', ' ', '(', 'ResultSet', ' ', 'rst', ' ', '=', ' ', 'stmt', '.', 'executeQuery', '(', ')', ')', ' ', '{', '\n', '                ', 'while', ' ', '(', 'rst', '.', 'next', '(', ')', ')', ' ', '{', '\n', '                    ', 'v', ' ', '=', ' ', 'rst', '.', 'getString', '(', '""', 'CFGVALUE', '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'v', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,DogResolver.java,veterinary,"    public Veterinary veterinary(Dog d) throws Exception {
        Dog dg = businessDataRepository.findDogById(d.getId());
        return dg != null ? dg.getVeterinary() : null;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public Veterinary veterinary(Dog d) throws Exception {
        Dog dg = businessDataRepository.findDogById(d.getId());
        return dg != null ? dg.getVeterinary() : null;
    }
","['    ', 'public', ' ', 'Veterinary', ' ', 'veterinary', '(', 'Dog', ' ', 'd', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Dog', ' ', 'dg', ' ', '=', ' ', 'businessDataRepository', '.', 'findDogById', '(', 'd', '.', 'getId', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'dg', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'dg', '.', 'getVeterinary', '(', ')', ' ', ':', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Mutation.java,associateDogToMe,"    public Dog associateDogToMe(String accessToken, int veterinaryId, int dogId) throws Exception {
        //[VULN]: There an access control issue here because the verification of the access token do not verify that the token belong to the veterinary passed in ""veterinaryId""
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.associatedDogToVeterinary(veterinaryId, dogId);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public Dog associateDogToMe(String accessToken, int veterinaryId, int dogId) throws Exception {
        
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.associatedDogToVeterinary(veterinaryId, dogId);
    }
","['    ', 'public', ' ', 'Dog', ' ', 'associateDogToMe', '(', 'String', ' ', 'accessToken', ',', ' ', 'int', ' ', 'veterinaryId', ',', ' ', 'int', ' ', 'dogId', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'accessTokenManager', '.', 'verifyToken', '(', 'accessToken', ')', ';', '\n', '        ', 'return', ' ', 'this', '.', 'businessDataRepository', '.', 'associatedDogToVeterinary', '(', 'veterinaryId', ',', ' ', 'dogId', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Mutation.java,disassociateDogFromMe,"    public Dog disassociateDogFromMe(String accessToken, int veterinaryId, int dogId) throws Exception {
        //[VULN]: There an access control issue here because the verification of the access token do not verify that the token belong to the veterinary passed in ""veterinaryId""
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.disassociatedDogFromVeterinary(veterinaryId, dogId);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public Dog disassociateDogFromMe(String accessToken, int veterinaryId, int dogId) throws Exception {
        
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.disassociatedDogFromVeterinary(veterinaryId, dogId);
    }
","['    ', 'public', ' ', 'Dog', ' ', 'disassociateDogFromMe', '(', 'String', ' ', 'accessToken', ',', ' ', 'int', ' ', 'veterinaryId', ',', ' ', 'int', ' ', 'dogId', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'accessTokenManager', '.', 'verifyToken', '(', 'accessToken', ')', ';', '\n', '        ', 'return', ' ', 'this', '.', 'businessDataRepository', '.', 'disassociatedDogFromVeterinary', '(', 'veterinaryId', ',', ' ', 'dogId', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Query.java,auth,"    public String auth(String veterinaryName) throws Exception
    {
        return this.accessTokenManager.issueToken(veterinaryName);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public String auth(String veterinaryName) throws Exception
    {
        return this.accessTokenManager.issueToken(veterinaryName);
    }
","['    ', 'public', ' ', 'String', ' ', 'auth', '(', 'String', ' ', 'veterinaryName', ')', ' ', 'throws', ' ', 'Exception', '\n', '    ', '{', '\n', '        ', 'return', ' ', 'this', '.', 'accessTokenManager', '.', 'issueToken', '(', 'veterinaryName', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Query.java,allDogs,"    public List<Dog> allDogs(boolean onlyFree, int limit) throws Exception {
        return this.businessDataRepository.findAllDogs(onlyFree, limit);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public List<Dog> allDogs(boolean onlyFree, int limit) throws Exception {
        return this.businessDataRepository.findAllDogs(onlyFree, limit);
    }
","['    ', 'public', ' ', 'List', '<', 'Dog', '>', ' ', 'allDogs', '(', 'boolean', ' ', 'onlyFree', ',', ' ', 'int', ' ', 'limit', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'return', ' ', 'this', '.', 'businessDataRepository', '.', 'findAllDogs', '(', 'onlyFree', ',', ' ', 'limit', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Query.java,dogs,"    public List<Dog> dogs(String namePrefix, int limit) throws Exception {
        //[VULN]: There an SQLi here because the repository using string concatenation for this query
        //Payload is:
        /*
            query sqli {
              dogs(namePrefix:""ab%' UNION ALL SELECT 50 AS ID, C.CFGVALUE AS NAME, NULL AS VETERINARY_ID FROM CONFIG C LIMIT ? -- "",limit: 1000){
                id,name
              }
            }
         */
        return this.businessDataRepository.findByNamePrefix(namePrefix, limit);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public List<Dog> dogs(String namePrefix, int limit) throws Exception {
        
        
        
        return this.businessDataRepository.findByNamePrefix(namePrefix, limit);
    }
","['    ', 'public', ' ', 'List', '<', 'Dog', '>', ' ', 'dogs', '(', 'String', ' ', 'namePrefix', ',', ' ', 'int', ' ', 'limit', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', '\n', '        ', '\n', '        ', 'return', ' ', 'this', '.', 'businessDataRepository', '.', 'findByNamePrefix', '(', 'namePrefix', ',', ' ', 'limit', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Query.java,myDogs,"    public List<Dog> myDogs(String accessToken, int veterinaryId) throws Exception {
        //[VULN]: There an access control issue here because the verification of the access token do not verify that the token belong to the veterinary passed in ""veterinaryId""
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.findVeterinaryById(veterinaryId).getDogs();
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public List<Dog> myDogs(String accessToken, int veterinaryId) throws Exception {
        
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.findVeterinaryById(veterinaryId).getDogs();
    }
","['    ', 'public', ' ', 'List', '<', 'Dog', '>', ' ', 'myDogs', '(', 'String', ' ', 'accessToken', ',', ' ', 'int', ' ', 'veterinaryId', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'accessTokenManager', '.', 'verifyToken', '(', 'accessToken', ')', ';', '\n', '        ', 'return', ' ', 'this', '.', 'businessDataRepository', '.', 'findVeterinaryById', '(', 'veterinaryId', ')', '.', 'getDogs', '(', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Query.java,myInfo,"    public Veterinary myInfo(String accessToken, int veterinaryId) throws Exception {
        //[VULN]: There an access control issue here because the verification of the access token do not verify that the token belong to the veterinary passed in ""veterinaryId""
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.findVeterinaryById(veterinaryId);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public Veterinary myInfo(String accessToken, int veterinaryId) throws Exception {
        
        accessTokenManager.verifyToken(accessToken);
        return this.businessDataRepository.findVeterinaryById(veterinaryId);
    }
","['    ', 'public', ' ', 'Veterinary', ' ', 'myInfo', '(', 'String', ' ', 'accessToken', ',', ' ', 'int', ' ', 'veterinaryId', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'accessTokenManager', '.', 'verifyToken', '(', 'accessToken', ')', ';', '\n', '        ', 'return', ' ', 'this', '.', 'businessDataRepository', '.', 'findVeterinaryById', '(', 'veterinaryId', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Subscription.java,newAssociation,"    Publisher<String> newAssociation() {
        return newAssociationPublisher.getPublisher();
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    Publisher<String> newAssociation() {
        return newAssociationPublisher.getPublisher();
    }
","['    ', 'Publisher', '<', 'String', '>', ' ', 'newAssociation', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'newAssociationPublisher', '.', 'getPublisher', '(', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,VeterinaryResolver.java,dogs,"    public List<Dog> dogs(Veterinary v) throws Exception {
        Veterinary vt = businessDataRepository.findVeterinaryById(v.getId());
        return vt != null ? vt.getDogs() : null;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public List<Dog> dogs(Veterinary v) throws Exception {
        Veterinary vt = businessDataRepository.findVeterinaryById(v.getId());
        return vt != null ? vt.getDogs() : null;
    }
","['    ', 'public', ' ', 'List', '<', 'Dog', '>', ' ', 'dogs', '(', 'Veterinary', ' ', 'v', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Veterinary', ' ', 'vt', ' ', '=', ' ', 'businessDataRepository', '.', 'findVeterinaryById', '(', 'v', '.', 'getId', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'vt', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'vt', '.', 'getDogs', '(', ')', ' ', ':', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,AccessTokenManager.java,issueToken,"    public String issueToken(String veterinaryName) throws Exception {
        Algorithm algorithm = Algorithm.HMAC256(businessDataRepository.loadCfgParam(""ACCESS_TOKEN_SECRET""));
        Date validityFrame = Date.from(LocalDateTime.now().plusMinutes(60).atZone(ZoneId.systemDefault()).toInstant());
        return JWT.create().withIssuer(""AuthSystem"").withAudience(""poc"").withExpiresAt(validityFrame).withSubject(veterinaryName).sign(algorithm);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public String issueToken(String veterinaryName) throws Exception {
        Algorithm algorithm = Algorithm.HMAC256(businessDataRepository.loadCfgParam(""ACCESS_TOKEN_SECRET""));
        Date validityFrame = Date.from(LocalDateTime.now().plusMinutes(60).atZone(ZoneId.systemDefault()).toInstant());
        return JWT.create().withIssuer(""AuthSystem"").withAudience(""poc"").withExpiresAt(validityFrame).withSubject(veterinaryName).sign(algorithm);
    }
","['    ', 'public', ' ', 'String', ' ', 'issueToken', '(', 'String', ' ', 'veterinaryName', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Algorithm', ' ', 'algorithm', ' ', '=', ' ', 'Algorithm', '.', 'HMAC256', '(', 'businessDataRepository', '.', 'loadCfgParam', '(', '""', 'ACCESS_TOKEN_SECRET', '""', ')', ')', ';', '\n', '        ', 'Date', ' ', 'validityFrame', ' ', '=', ' ', 'Date', '.', 'from', '(', 'LocalDateTime', '.', 'now', '(', ')', '.', 'plusMinutes', '(', '60', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toInstant', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'JWT', '.', 'create', '(', ')', '.', 'withIssuer', '(', '""', 'AuthSystem', '""', ')', '.', 'withAudience', '(', '""', 'poc', '""', ')', '.', 'withExpiresAt', '(', 'validityFrame', ')', '.', 'withSubject', '(', 'veterinaryName', ')', '.', 'sign', '(', 'algorithm', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,AccessTokenManager.java,verifyToken,"    public void verifyToken(String token) throws Exception {
        Algorithm algorithm = Algorithm.HMAC256(businessDataRepository.loadCfgParam(""ACCESS_TOKEN_SECRET""));
        JWTVerifier verifier = JWT.require(algorithm).withIssuer(""AuthSystem"").withAudience(""poc"").build();
        verifier.verify(token);
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public void verifyToken(String token) throws Exception {
        Algorithm algorithm = Algorithm.HMAC256(businessDataRepository.loadCfgParam(""ACCESS_TOKEN_SECRET""));
        JWTVerifier verifier = JWT.require(algorithm).withIssuer(""AuthSystem"").withAudience(""poc"").build();
        verifier.verify(token);
    }
","['    ', 'public', ' ', 'void', ' ', 'verifyToken', '(', 'String', ' ', 'token', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'Algorithm', ' ', 'algorithm', ' ', '=', ' ', 'Algorithm', '.', 'HMAC256', '(', 'businessDataRepository', '.', 'loadCfgParam', '(', '""', 'ACCESS_TOKEN_SECRET', '""', ')', ')', ';', '\n', '        ', 'JWTVerifier', ' ', 'verifier', ' ', '=', ' ', 'JWT', '.', 'require', '(', 'algorithm', ')', '.', 'withIssuer', '(', '""', 'AuthSystem', '""', ')', '.', 'withAudience', '(', '""', 'poc', '""', ')', '.', 'build', '(', ')', ';', '\n', '        ', 'verifier', '.', 'verify', '(', 'token', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,ErrorHandler.java,processErrors,"    public List<GraphQLError> processErrors(List<GraphQLError> list) {
        //Log all errors from the variable ""list"" on server side
        //....
        //We return a generic error
        List<GraphQLError> error = new ArrayList<>(1);
        error.add(new GenericGraphQLError(""Query cannot be processed!""));

        return error;
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public List<GraphQLError> processErrors(List<GraphQLError> list) {
        
        
        
        List<GraphQLError> error = new ArrayList<>(1);
        error.add(new GenericGraphQLError(""Query cannot be processed!""));

        return error;
    }
","['    ', 'public', ' ', 'List', '<', 'GraphQLError', '>', ' ', 'processErrors', '(', 'List', '<', 'GraphQLError', '>', ' ', 'list', ')', ' ', '{', '\n', '        ', '\n', '        ', '\n', '        ', '\n', '        ', 'List', '<', 'GraphQLError', '>', ' ', 'error', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', '1', ')', ';', '\n', '        ', 'error', '.', 'add', '(', 'new', ' ', 'GenericGraphQLError', '(', '""', 'Query cannot be processed!', '""', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'error', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,ErrorHandler.java,errorsPresent,"    public boolean errorsPresent(List<GraphQLError> errors) {
        return (errors != null && !errors.isEmpty());
    }",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public boolean errorsPresent(List<GraphQLError> errors) {
        return (errors != null && !errors.isEmpty());
    }
","['    ', 'public', ' ', 'boolean', ' ', 'errorsPresent', '(', 'List', '<', 'GraphQLError', '>', ' ', 'errors', ')', ' ', '{', '\n', '        ', 'return', ' ', '(', 'errors', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'errors', '.', 'isEmpty', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Dog.java,toString,"    public String toString() {
        return ""DogResolver{"" +
                       ""id="" + id +",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public String toString() {
        return ""DogResolver{"" +
                       ""id="" + id +
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'DogResolver{', '""', ' ', '+', '\n', '                       ', '""', 'id=', '""', ' ', '+', ' ', 'id', ' ', '+', '\n']"
master,e87a113fbc5d45483be110769969f4e43dacd838,Veterinary.java,toString,"    public String toString() {
        return ""Veterinary{"" +
                       ""id="" + id +",https://www.github.com/righettod/poc-graphql/commit/e87a113fbc5d45483be110769969f4e43dacd838,"    public String toString() {
        return ""Veterinary{"" +
                       ""id="" + id +
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'Veterinary{', '""', ' ', '+', '\n', '                       ', '""', 'id=', '""', ' ', '+', ' ', 'id', ' ', '+', '\n']"
