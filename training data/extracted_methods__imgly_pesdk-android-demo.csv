Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,5320619061cca2d3660a52d15b08e8226ba9cb64,Application.java,changeScreen,"            public void changeScreen(String screenName) {
                googleAnalyticsTracker.setScreenName(screenName);
                googleAnalyticsTracker.send(new HitBuilders.ScreenViewBuilder().build());
            }",https://www.github.com/imgly/pesdk-android-demo/commit/5320619061cca2d3660a52d15b08e8226ba9cb64,"            public void changeScreen(String screenName) {
                googleAnalyticsTracker.setScreenName(screenName);
                googleAnalyticsTracker.send(new HitBuilders.ScreenViewBuilder().build());
            }
","['            ', 'public', ' ', 'void', ' ', 'changeScreen', '(', 'String', ' ', 'screenName', ')', ' ', '{', '\n', '                ', 'googleAnalyticsTracker', '.', 'setScreenName', '(', 'screenName', ')', ';', '\n', '                ', 'googleAnalyticsTracker', '.', 'send', '(', 'new', ' ', 'HitBuilders', '.', 'ScreenViewBuilder', '(', ')', '.', 'build', '(', ')', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,5320619061cca2d3660a52d15b08e8226ba9cb64,Application.java,sendEvent,"            public void sendEvent(String category, String action) {
                sendEvent(category, action, null);
            }",https://www.github.com/imgly/pesdk-android-demo/commit/5320619061cca2d3660a52d15b08e8226ba9cb64,"            public void sendEvent(String category, String action) {
                sendEvent(category, action, null);
            }
","['            ', 'public', ' ', 'void', ' ', 'sendEvent', '(', 'String', ' ', 'category', ',', ' ', 'String', ' ', 'action', ')', ' ', '{', '\n', '                ', 'sendEvent', '(', 'category', ',', ' ', 'action', ',', ' ', 'null', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,5320619061cca2d3660a52d15b08e8226ba9cb64,Application.java,sendEvent,"            public void sendEvent(String category, String action, String label) {
                HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder().setCategory(category).setAction(action);
                if (label != null) {
                    builder.setLabel(label);
                }
                googleAnalyticsTracker.send(builder.build());
            }",https://www.github.com/imgly/pesdk-android-demo/commit/5320619061cca2d3660a52d15b08e8226ba9cb64,"            public void sendEvent(String category, String action, String label) {
                HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder().setCategory(category).setAction(action);
                if (label != null) {
                    builder.setLabel(label);
                }
                googleAnalyticsTracker.send(builder.build());
            }
","['            ', 'public', ' ', 'void', ' ', 'sendEvent', '(', 'String', ' ', 'category', ',', ' ', 'String', ' ', 'action', ',', ' ', 'String', ' ', 'label', ')', ' ', '{', '\n', '                ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '.', 'setCategory', '(', 'category', ')', '.', 'setAction', '(', 'action', ')', ';', '\n', '                ', 'if', ' ', '(', 'label', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'builder', '.', 'setLabel', '(', 'label', ')', ';', '\n', '                ', '}', '\n', '                ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,5320619061cca2d3660a52d15b08e8226ba9cb64,Application.java,readPropertyValue,"    protected String readPropertyValue(String name) {
        if (properties == null) {
            properties = new Properties();
            try {
                new Properties();
                AssetManager assetManager = getAssets();

                InputStream in = assetManager.open(PROPERTIES_FILE);
                properties.load(in);
                in.close();

            } catch (IOException e) {
                throw new RuntimeException(""Error while loading the properties file"", e);
            }
        }
        return properties.getProperty(name);
    }",https://www.github.com/imgly/pesdk-android-demo/commit/5320619061cca2d3660a52d15b08e8226ba9cb64,"    protected String readPropertyValue(String name) {
        if (properties == null) {
            properties = new Properties();
            try {
                new Properties();
                AssetManager assetManager = getAssets();

                InputStream in = assetManager.open(PROPERTIES_FILE);
                properties.load(in);
                in.close();

            } catch (IOException e) {
                throw new RuntimeException(""Error while loading the properties file"", e);
            }
        }
        return properties.getProperty(name);
    }
","['    ', 'protected', ' ', 'String', ' ', 'readPropertyValue', '(', 'String', ' ', 'name', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'properties', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'properties', ' ', '=', ' ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'new', ' ', 'Properties', '(', ')', ';', '\n', '                ', 'AssetManager', ' ', 'assetManager', ' ', '=', ' ', 'getAssets', '(', ')', ';', '\n', '\n', '                ', 'InputStream', ' ', 'in', ' ', '=', ' ', 'assetManager', '.', 'open', '(', 'PROPERTIES_FILE', ')', ';', '\n', '                ', 'properties', '.', 'load', '(', 'in', ')', ';', '\n', '                ', 'in', '.', 'close', '(', ')', ';', '\n', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'RuntimeException', '(', '""', 'Error while loading the properties file', '""', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'properties', '.', 'getProperty', '(', 'name', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5320619061cca2d3660a52d15b08e8226ba9cb64,MainActivity.java,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        new CameraPreviewIntent(this)
                .setExportDir(CameraPreviewIntent.Directory.DCIM, FOLDER)",https://www.github.com/imgly/pesdk-android-demo/commit/5320619061cca2d3660a52d15b08e8226ba9cb64,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        new CameraPreviewIntent(this)
                .setExportDir(CameraPreviewIntent.Directory.DCIM, FOLDER)
","['    ', 'protected', ' ', 'void', ' ', 'onCreate', '(', 'Bundle', ' ', 'savedInstanceState', ')', ' ', '{', '\n', '        ', 'super', '.', 'onCreate', '(', 'savedInstanceState', ')', ';', '\n', '\n', '        ', 'new', ' ', 'CameraPreviewIntent', '(', 'this', ')', '\n', '                ', '.', 'setExportDir', '(', 'CameraPreviewIntent', '.', 'Directory', '.', 'DCIM', ',', ' ', 'FOLDER', ')', '\n', '<END>']"
master,5320619061cca2d3660a52d15b08e8226ba9cb64,MainActivity.java,onScanCompleted,"                    public void onScanCompleted(String path, Uri uri) {
                        finish();
                    }",https://www.github.com/imgly/pesdk-android-demo/commit/5320619061cca2d3660a52d15b08e8226ba9cb64,"                    public void onScanCompleted(String path, Uri uri) {
                        finish();
                    }
","['                    ', 'public', ' ', 'void', ' ', 'onScanCompleted', '(', 'String', ' ', 'path', ',', ' ', 'Uri', ' ', 'uri', ')', ' ', '{', '\n', '                        ', 'finish', '(', ')', ';', '\n', '                    ', '}', '\n', '<END>']"
master,c198c827baf11b93dd3a8733c37712ba77afbd8c,MainActivity.java,onScanCompleted,"                        public void onScanCompleted(String path, Uri uri) {
                            //onBackPressed();
                        }
                    }
            );
        }
        finish();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        PermissionRequest.onRequestPermissionsResult(requestCode, permissions, grantResults);
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void permissionGranted() {

    }

    @Override
    public void permissionDenied() {
        finish();
        System.exit(0);
    }
}",https://www.github.com/imgly/pesdk-android-demo/commit/c198c827baf11b93dd3a8733c37712ba77afbd8c,"                        public void onScanCompleted(String path, Uri uri) {
                            
                        }
                    }
            );
        }
        finish();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        PermissionRequest.onRequestPermissionsResult(requestCode, permissions, grantResults);
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void permissionGranted() {

    }

    @Override
    public void permissionDenied() {
        finish();
        System.exit(0);
    }
}
","['                        ', 'public', ' ', 'void', ' ', 'onScanCompleted', '(', 'String', ' ', 'path', ',', ' ', 'Uri', ' ', 'uri', ')', ' ', '{', '\n', '                            ', '\n', '                        ', '}', '\n', '                    ', '}', '\n', '            ', ')', ';', '\n', '        ', '}', '\n', '        ', 'finish', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'onRequestPermissionsResult', '(', 'int', ' ', 'requestCode', ',', ' ', '@NonNull', ' ', 'String', '[', ']', ' ', 'permissions', ',', ' ', '@NonNull', ' ', 'int', '[', ']', ' ', 'grantResults', ')', ' ', '{', '\n', '        ', 'PermissionRequest', '.', 'onRequestPermissionsResult', '(', 'requestCode', ',', ' ', 'permissions', ',', ' ', 'grantResults', ')', ';', '\n', '        ', 'super', '.', 'onRequestPermissionsResult', '(', 'requestCode', ',', ' ', 'permissions', ',', ' ', 'grantResults', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'permissionGranted', '(', ')', ' ', '{', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'permissionDenied', '(', ')', ' ', '{', '\n', '        ', 'finish', '(', ')', ';', '\n', '        ', 'System', '.', 'exit', '(', '0', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,c198c827baf11b93dd3a8733c37712ba77afbd8c,MainActivity.java,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        PermissionRequest.onRequestPermissionsResult(requestCode, permissions, grantResults);
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c198c827baf11b93dd3a8733c37712ba77afbd8c,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        PermissionRequest.onRequestPermissionsResult(requestCode, permissions, grantResults);
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
","['    ', 'public', ' ', 'void', ' ', 'onRequestPermissionsResult', '(', 'int', ' ', 'requestCode', ',', ' ', '@NonNull', ' ', 'String', '[', ']', ' ', 'permissions', ',', ' ', '@NonNull', ' ', 'int', '[', ']', ' ', 'grantResults', ')', ' ', '{', '\n', '        ', 'PermissionRequest', '.', 'onRequestPermissionsResult', '(', 'requestCode', ',', ' ', 'permissions', ',', ' ', 'grantResults', ')', ';', '\n', '        ', 'super', '.', 'onRequestPermissionsResult', '(', 'requestCode', ',', ' ', 'permissions', ',', ' ', 'grantResults', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c198c827baf11b93dd3a8733c37712ba77afbd8c,MainActivity.java,permissionGranted,"    public void permissionGranted() {

    }

    @Override
    public void permissionDenied() {
        finish();
        System.exit(0);
    }
}",https://www.github.com/imgly/pesdk-android-demo/commit/c198c827baf11b93dd3a8733c37712ba77afbd8c,"    public void permissionGranted() {

    }

    @Override
    public void permissionDenied() {
        finish();
        System.exit(0);
    }
}
","['    ', 'public', ' ', 'void', ' ', 'permissionGranted', '(', ')', ' ', '{', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'permissionDenied', '(', ')', ' ', '{', '\n', '        ', 'finish', '(', ')', ';', '\n', '        ', 'System', '.', 'exit', '(', '0', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,062e37197d1d4cbe72e15e52f4890c4c414c7213,MainActivity.java,onScanCompleted,"                        public void onScanCompleted(String path, Uri uri) {

                        }
                    }
            );
        }
        finish();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        PermissionRequest.onRequestPermissionsResult(requestCode, permissions, grantResults);
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void permissionGranted() {

    }

    @Override
    public void permissionDenied() {
        finish();
        System.exit(0);
    }
}",https://www.github.com/imgly/pesdk-android-demo/commit/062e37197d1d4cbe72e15e52f4890c4c414c7213,"                        public void onScanCompleted(String path, Uri uri) {

                        }
                    }
            );
        }
        finish();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        PermissionRequest.onRequestPermissionsResult(requestCode, permissions, grantResults);
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void permissionGranted() {

    }

    @Override
    public void permissionDenied() {
        finish();
        System.exit(0);
    }
}
","['                        ', 'public', ' ', 'void', ' ', 'onScanCompleted', '(', 'String', ' ', 'path', ',', ' ', 'Uri', ' ', 'uri', ')', ' ', '{', '\n', '\n', '                        ', '}', '\n', '                    ', '}', '\n', '            ', ')', ';', '\n', '        ', '}', '\n', '        ', 'finish', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'onRequestPermissionsResult', '(', 'int', ' ', 'requestCode', ',', ' ', '@NonNull', ' ', 'String', '[', ']', ' ', 'permissions', ',', ' ', '@NonNull', ' ', 'int', '[', ']', ' ', 'grantResults', ')', ' ', '{', '\n', '        ', 'PermissionRequest', '.', 'onRequestPermissionsResult', '(', 'requestCode', ',', ' ', 'permissions', ',', ' ', 'grantResults', ')', ';', '\n', '        ', 'super', '.', 'onRequestPermissionsResult', '(', 'requestCode', ',', ' ', 'permissions', ',', ' ', 'grantResults', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'permissionGranted', '(', ')', ' ', '{', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'permissionDenied', '(', ')', ' ', '{', '\n', '        ', 'finish', '(', ')', ';', '\n', '        ', 'System', '.', 'exit', '(', '0', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,09f2f88005ef85e6c4e98f539e657a1080f91de9,MainActivity.java,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        SettingsList settingsList = new SettingsList();
        settingsList
                .getSettingsModel(CameraSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""camera_"")

                .getSettingsModel(EditorSaveSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""result_"")
                .setSavePolicy(EditorSaveSettings.SavePolicy.KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT);

        new CameraPreviewBuilder(this)
                .setSettingsList(settingsList)",https://www.github.com/imgly/pesdk-android-demo/commit/09f2f88005ef85e6c4e98f539e657a1080f91de9,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        SettingsList settingsList = new SettingsList();
        settingsList
                .getSettingsModel(CameraSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""camera_"")

                .getSettingsModel(EditorSaveSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""result_"")
                .setSavePolicy(EditorSaveSettings.SavePolicy.KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT);

        new CameraPreviewBuilder(this)
                .setSettingsList(settingsList)
","['    ', 'protected', ' ', 'void', ' ', 'onCreate', '(', 'Bundle', ' ', 'savedInstanceState', ')', ' ', '{', '\n', '        ', 'super', '.', 'onCreate', '(', 'savedInstanceState', ')', ';', '\n', '\n', '        ', 'SettingsList', ' ', 'settingsList', ' ', '=', ' ', 'new', ' ', 'SettingsList', '(', ')', ';', '\n', '        ', 'settingsList', '\n', '                ', '.', 'getSettingsModel', '(', 'CameraSettings', '.', 'class', ')', '\n', '                ', '.', 'setExportDir', '(', 'Directory', '.', 'DCIM', ',', ' ', 'FOLDER', ')', '\n', '                ', '.', 'setExportPrefix', '(', '""', 'camera_', '""', ')', '\n', '\n', '                ', '.', 'getSettingsModel', '(', 'EditorSaveSettings', '.', 'class', ')', '\n', '                ', '.', 'setExportDir', '(', 'Directory', '.', 'DCIM', ',', ' ', 'FOLDER', ')', '\n', '                ', '.', 'setExportPrefix', '(', '""', 'result_', '""', ')', '\n', '                ', '.', 'setSavePolicy', '(', 'EditorSaveSettings', '.', 'SavePolicy', '.', 'KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT', ')', ';', '\n', '\n', '        ', 'new', ' ', 'CameraPreviewBuilder', '(', 'this', ')', '\n', '                ', '.', 'setSettingsList', '(', 'settingsList', ')', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onColorAdjustmentChangeContrast,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""contrast"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getContrast() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.BRIGHTNESS, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""brightness"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.BRIGHTNESS, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeContrast', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'ColorAdjustmentSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'ColorAdjustmentSettingsEvent', '.', 'BRIGHTNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeBrightness', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'ColorAdjustmentSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'ColorAdjustmentSettingsEvent', '.', 'SATURATION', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'COLOR', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onColorAdjustmentChangeBrightness,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""brightness"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeBrightness', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'ColorAdjustmentSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'ColorAdjustmentSettingsEvent', '.', 'SATURATION', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'COLOR', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onColorAdjustmentChangeSaturation,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'COLOR', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onBrushColorChange,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onBrushHardnessChange,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onBrushSizeChange,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onCropAspectChanged,"    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onFilterChanged,"    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onFilterIntensityChanged,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onFocusTypeChanged,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onFocusIntensityChanged,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onVerticalFlipChanged,"    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onHorizontalFlipChanged,"    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onRotationCW,"    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
","['    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '/', '*', ' ', 'Example', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onRotationCCW,"    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
","['    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '/', '*', ' ', 'Example', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onStickerAdd,"    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onStickerRemove,"    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onStickerFlipHorizontal,"    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onStickerFlipVertical,"    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onStickerPositionChange,"    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,onStickerToFront,"    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    protected CustomEventTracker(Parcel in) {
        this(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'this', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }
","['    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,createFromParcel,"        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }
","['        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '<END>']"
master,cb86c92fda195ac72111bcaf9e92166b16f87f0b,CustomEventTracker.java,newArray,"        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }",https://www.github.com/imgly/pesdk-android-demo/commit/cb86c92fda195ac72111bcaf9e92166b16f87f0b,"        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
","['        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onColorAdjustmentChangeContrast,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""contrast"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getContrast() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.BRIGHTNESS, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""brightness"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.BRIGHTNESS, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeContrast', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'ColorAdjustmentSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'ColorAdjustmentSettingsEvent', '.', 'BRIGHTNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeBrightness', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'ColorAdjustmentSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'ColorAdjustmentSettingsEvent', '.', 'SATURATION', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'COLOR', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onColorAdjustmentChangeBrightness,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""brightness"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = ColorAdjustmentSettings.class, event = ColorAdjustmentSettingsEvent.SATURATION, onInvalidation = false, onRevert = false)
    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeBrightness', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'ColorAdjustmentSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'ColorAdjustmentSettingsEvent', '.', 'SATURATION', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'COLOR', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onColorAdjustmentChangeSaturation,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.COLOR, onInvalidation = false, onRevert = false)
    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'COLOR', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onBrushColorChange,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.HARDNESS, onInvalidation = false, onRevert = false)
    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'HARDNESS', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onBrushHardnessChange,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = BrushLayerSettings.class, event = BrushLayerSettingsEvent.SIZE, onInvalidation = false, onRevert = false)
    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'BrushLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'BrushLayerSettingsEvent', '.', 'SIZE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onBrushSizeChange,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        
    }

    @OnStateEvent(model = CropSettings.class, event = CropSettingsEvent.ASPECT, onInvalidation = false, onRevert = false)
    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'CropSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'CropSettingsEvent', '.', 'ASPECT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onCropAspectChanged,"    protected void onCropAspectChanged(CropSettings cropSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspect().getName());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onCropAspectChanged(CropSettings cropSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.FILTER, onInvalidation = false, onRevert = false)
    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'CropSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'FILTER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onFilterChanged,"    protected void onFilterChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onFilterChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FilterSettings.class, event = FilterSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FilterSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FilterSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onFilterIntensityChanged,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.MODE, onInvalidation = false, onRevert = false)
    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'MODE', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onFocusTypeChanged,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = FocusSettings.class, event = FocusSettingsEvent.INTENSITY, onInvalidation = false, onRevert = false)
    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'FocusSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'FocusSettingsEvent', '.', 'INTENSITY', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onFocusIntensityChanged,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onVerticalFlipChanged,"    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onHorizontalFlipChanged,"    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        /* Example
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CW, onInvalidation = false, onRevert = false)
    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = OrientationSettings.class, event = OrientationSettingsEvent.ROTATION_CCW, onInvalidation = false, onRevert = false)
    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.ADD_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'OrientationSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'OrientationSettingsEvent', '.', 'ROTATION_CCW', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'ADD_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onStickerAdd,"    protected void onStickerAdd(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""add sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onStickerAdd(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.REMOVE_LAYER, onInvalidation = false, onRevert = false)
    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'REMOVE_LAYER', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onStickerRemove,"    protected void onStickerRemove(LayerListSettings settings) {
        /* Example
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();

            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""remove sticker"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onStickerRemove(LayerListSettings settings) {
        
    }

    @SuppressWarnings(""unused"")
    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_HORIZONTAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@SuppressWarnings', '(', '""', 'unused', '""', ')', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_HORIZONTAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onStickerFlipHorizontal,"    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""horizontal flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.FLIP_VERTICAL, onInvalidation = false, onRevert = false)
    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'FLIP_VERTICAL', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onStickerFlipVertical,"    protected void onStickerFlipVertical(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""vertical flip"");
            googleAnalyticsTracker.send(builder.build());
        }*/
    }


    // Many more events trackable ..........

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onStickerFlipVertical(LayerListSettings settings) {
        
    }


    

    @OnStateEvent(model = StickerLayerSettings.class, event = StickerLayerSettingsEvent.PLACEMENT_INVALID, onInvalidation = false, onRevert = false)
    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '\n', '    ', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'StickerLayerSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'StickerLayerSettingsEvent', '.', 'PLACEMENT_INVALID', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onStickerPositionChange,"    protected void onStickerPositionChange(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""position changed"");
            googleAnalyticsTracker.send(builder.build());

        }
        */
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onStickerPositionChange(LayerListSettings settings) {
        
    }

    @OnStateEvent(model = LayerListSettings.class, event = LayerListSettingsEvent.BRING_TO_FRONT, onInvalidation = false, onRevert = false)
    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@OnStateEvent', '(', 'model', ' ', '=', ' ', 'LayerListSettings', '.', 'class', ',', ' ', 'event', ' ', '=', ' ', 'LayerListSettingsEvent', '.', 'BRING_TO_FRONT', ',', ' ', 'onInvalidation', ' ', '=', ' ', 'false', ',', ' ', 'onRevert', ' ', '=', ' ', 'false', ')', '\n', '    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,d8e17920b133e91aaf21bd215d95b7be398951b4,CustomEventTracker.java,onStickerToFront,"    protected void onStickerToFront(LayerListSettings settings) {
        /* Example
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            AbstractConfig.StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
            HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                    .setCategory(stickerConfig.getType() == AbstractConfig.StickerConfigInterface.STICKER_TYPE.TEXT ? ""text"": ""sticker"")
                    .setLabel(stickerConfig.getName())
                    .setAction(""bring to front"");
            googleAnalyticsTracker.send(builder.build());
        }
        */
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}",https://www.github.com/imgly/pesdk-android-demo/commit/d8e17920b133e91aaf21bd215d95b7be398951b4,"    protected void onStickerToFront(LayerListSettings settings) {
        
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        dest.writeString(this.trackerId);
    }

    protected CustomEventTracker(Parcel in) {
        super(in);
        init(in.readString());
    }

    public static final Creator<CustomEventTracker> CREATOR = new Creator<CustomEventTracker>() {
        @Override
        public CustomEventTracker createFromParcel(Parcel source) {
            return new CustomEventTracker(source);
        }

        @Override
        public CustomEventTracker[] newArray(int size) {
            return new CustomEventTracker[size];
        }
    };
}
","['    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'int', ' ', 'describeContents', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '0', ';', '\n', '    ', '}', '\n', '\n', '    ', '@Override', '\n', '    ', 'public', ' ', 'void', ' ', 'writeToParcel', '(', 'Parcel', ' ', 'dest', ',', ' ', 'int', ' ', 'flags', ')', ' ', '{', '\n', '        ', 'super', '.', 'writeToParcel', '(', 'dest', ',', ' ', 'flags', ')', ';', '\n', '        ', 'dest', '.', 'writeString', '(', 'this', '.', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'protected', ' ', 'CustomEventTracker', '(', 'Parcel', ' ', 'in', ')', ' ', '{', '\n', '        ', 'super', '(', 'in', ')', ';', '\n', '        ', 'init', '(', 'in', '.', 'readString', '(', ')', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'final', ' ', 'Creator', '<', 'CustomEventTracker', '>', ' ', 'CREATOR', ' ', '=', ' ', 'new', ' ', 'Creator', '<', 'CustomEventTracker', '>', '(', ')', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', ' ', 'createFromParcel', '(', 'Parcel', ' ', 'source', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '(', 'source', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'CustomEventTracker', '[', ']', ' ', 'newArray', '(', 'int', ' ', 'size', ')', ' ', '{', '\n', '            ', 'return', ' ', 'new', ' ', 'CustomEventTracker', '[', 'size', ']', ';', '\n', '        ', '}', '\n', '    ', '}', ';', '\n', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,MainActivity.java,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }
","['    ', 'protected', ' ', 'void', ' ', 'onCreate', '(', 'Bundle', ' ', 'savedInstanceState', ')', ' ', '{', '\n', '        ', 'super', '.', 'onCreate', '(', 'savedInstanceState', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,MainActivity.java,onResume,"    protected void onResume() {
        super.onResume();
        SettingsList settingsList = new SettingsList();

        settingsList
                .getSettingsModel(CameraSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""camera_"")

                .getSettingsModel(EditorSaveSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""result_"")
                .setJpegQuality(80, false)
                .setSavePolicy(EditorSaveSettings.SavePolicy.KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT);

        new CameraPreviewBuilder(this)
                .setSettingsList(settingsList)",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onResume() {
        super.onResume();
        SettingsList settingsList = new SettingsList();

        settingsList
                .getSettingsModel(CameraSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""camera_"")

                .getSettingsModel(EditorSaveSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""result_"")
                .setJpegQuality(80, false)
                .setSavePolicy(EditorSaveSettings.SavePolicy.KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT);

        new CameraPreviewBuilder(this)
                .setSettingsList(settingsList)
","['    ', 'protected', ' ', 'void', ' ', 'onResume', '(', ')', ' ', '{', '\n', '        ', 'super', '.', 'onResume', '(', ')', ';', '\n', '        ', 'SettingsList', ' ', 'settingsList', ' ', '=', ' ', 'new', ' ', 'SettingsList', '(', ')', ';', '\n', '\n', '        ', 'settingsList', '\n', '                ', '.', 'getSettingsModel', '(', 'CameraSettings', '.', 'class', ')', '\n', '                ', '.', 'setExportDir', '(', 'Directory', '.', 'DCIM', ',', ' ', 'FOLDER', ')', '\n', '                ', '.', 'setExportPrefix', '(', '""', 'camera_', '""', ')', '\n', '\n', '                ', '.', 'getSettingsModel', '(', 'EditorSaveSettings', '.', 'class', ')', '\n', '                ', '.', 'setExportDir', '(', 'Directory', '.', 'DCIM', ',', ' ', 'FOLDER', ')', '\n', '                ', '.', 'setExportPrefix', '(', '""', 'result_', '""', ')', '\n', '                ', '.', 'setJpegQuality', '(', '80', ',', ' ', 'false', ')', '\n', '                ', '.', 'setSavePolicy', '(', 'EditorSaveSettings', '.', 'SavePolicy', '.', 'KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT', ')', ';', '\n', '\n', '        ', 'new', ' ', 'CameraPreviewBuilder', '(', 'this', ')', '\n', '                ', '.', 'setSettingsList', '(', 'settingsList', ')', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,MainActivity.java,onActivityResult,"    protected void onActivityResult(int requestCode, int resultCode, android.content.Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && requestCode == CAMERA_PREVIEW_RESULT) {
",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onActivityResult(int requestCode, int resultCode, android.content.Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && requestCode == CAMERA_PREVIEW_RESULT) {
","['    ', 'protected', ' ', 'void', ' ', 'onActivityResult', '(', 'int', ' ', 'requestCode', ',', ' ', 'int', ' ', 'resultCode', ',', ' ', 'android', '.', 'content', '.', 'Intent', ' ', 'data', ')', ' ', '{', '\n', '        ', 'super', '.', 'onActivityResult', '(', 'requestCode', ',', ' ', 'resultCode', ',', ' ', 'data', ')', ';', '\n', '        ', 'if', ' ', '(', 'resultCode', ' ', '=', '=', ' ', 'RESULT_OK', ' ', '&', '&', ' ', 'requestCode', ' ', '=', '=', ' ', 'CAMERA_PREVIEW_RESULT', ')', ' ', '{', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,init,"    private void init(String trackerId) {
        this.trackerId = trackerId;
        GoogleAnalytics analytics = GoogleAnalytics.getInstance(PESDK.getAppContext());
        googleAnalyticsTracker = analytics.newTracker(trackerId);
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    private void init(String trackerId) {
        this.trackerId = trackerId;
        GoogleAnalytics analytics = GoogleAnalytics.getInstance(PESDK.getAppContext());
        googleAnalyticsTracker = analytics.newTracker(trackerId);
    }
","['    ', 'private', ' ', 'void', ' ', 'init', '(', 'String', ' ', 'trackerId', ')', ' ', '{', '\n', '        ', 'this', '.', 'trackerId', ' ', '=', ' ', 'trackerId', ';', '\n', '        ', 'GoogleAnalytics', ' ', 'analytics', ' ', '=', ' ', 'GoogleAnalytics', '.', 'getInstance', '(', 'PESDK', '.', 'getAppContext', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', ' ', '=', ' ', 'analytics', '.', 'newTracker', '(', 'trackerId', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,changeToolView,"    protected void changeToolView(EditorMenuState menuState) {
        googleAnalyticsTracker.setScreenName(menuState.getCurrentTool().getName());
        googleAnalyticsTracker.send(new HitBuilders.ScreenViewBuilder().build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void changeToolView(EditorMenuState menuState) {
        googleAnalyticsTracker.setScreenName(menuState.getCurrentTool().getName());
        googleAnalyticsTracker.send(new HitBuilders.ScreenViewBuilder().build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'changeToolView', '(', 'EditorMenuState', ' ', 'menuState', ')', ' ', '{', '\n', '        ', 'googleAnalyticsTracker', '.', 'setScreenName', '(', 'menuState', '.', 'getCurrentTool', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'new', ' ', 'HitBuilders', '.', 'ScreenViewBuilder', '(', ')', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onLeaveToolWithCancel,"    protected void onLeaveToolWithCancel(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""menu action"")
                .setLabel(menuState.getCurrentTool().getName())
                .setAction(""cancel"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onLeaveToolWithCancel(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""menu action"")
                .setLabel(menuState.getCurrentTool().getName())
                .setAction(""cancel"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onLeaveToolWithCancel', '(', 'EditorMenuState', ' ', 'menuState', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'menu action', '""', ')', '\n', '                ', '.', 'setLabel', '(', 'menuState', '.', 'getCurrentTool', '(', ')', '.', 'getName', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'cancel', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onLeaveToolWithAccept,"    protected void onLeaveToolWithAccept(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""menu action"")
                .setLabel(menuState.getCurrentTool().getName())
                .setAction(""accept"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onLeaveToolWithAccept(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""menu action"")
                .setLabel(menuState.getCurrentTool().getName())
                .setAction(""accept"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onLeaveToolWithAccept', '(', 'EditorMenuState', ' ', 'menuState', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'menu action', '""', ')', '\n', '                ', '.', 'setLabel', '(', 'menuState', '.', 'getCurrentTool', '(', ')', '.', 'getName', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'accept', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onColorAdjustmentChangeContrast,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""contrast"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getContrast() * 100));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""contrast"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getContrast() * 100));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeContrast', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'change color adjustment', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'contrast', '""', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '                ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'colorAdjustmentSettings', '.', 'getContrast', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onColorAdjustmentChangeBrightness,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""brightness"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""brightness"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeBrightness', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'change color adjustment', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'brightness', '""', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '                ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'colorAdjustmentSettings', '.', 'getBrightness', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onColorAdjustmentChangeSaturation,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change color adjustment"")
                .setLabel(""saturation"")
                .setAction(""changed"")
                .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'change color adjustment', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'saturation', '""', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '                ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'colorAdjustmentSettings', '.', 'getSaturation', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onBrushColorChange,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""color"")
                .setAction(""changed"")
                .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'change brush', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'color', '""', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '                ', '.', 'setValue', '(', 'brushLayerSettings', '.', 'getBrushColor', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onBrushHardnessChange,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""hardness"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'change brush', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'hardness', '""', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '                ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'brushLayerSettings', '.', 'getBrushHardness', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onBrushSizeChange,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""change brush"")
                .setLabel(""size"")
                .setAction(""changed"")
                .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'change brush', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'size', '""', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '                ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'brushLayerSettings', '.', 'getBrushSize', '(', ')', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onCropAspectChanged,"    protected void onCropAspectChanged(TransformSettings cropSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspectConfig().getName());
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onCropAspectChanged(TransformSettings cropSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""crop changed"")
                .setLabel(""aspect"")
                .setAction(""changed aspect to: ""+cropSettings.getAspectConfig().getName());
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'TransformSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'crop changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'aspect', '""', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed aspect to: ', '""', '+', 'cropSettings', '.', 'getAspectConfig', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onFilterChanged,"    protected void onFilterChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onFilterChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'filter changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'filter: ', '""', ' ', '+', ' ', 'filterSettings', '.', 'getFilter', '(', ')', '.', 'getName', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'set fitler', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onFilterIntensityChanged,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""filter changed"")
                .setLabel(""filter: "" + filterSettings.getFilter().getName())
                .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'filter changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'filter: ', '""', ' ', '+', ' ', 'filterSettings', '.', 'getFilter', '(', ')', '.', 'getName', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'changed intensity to: ', '""', ' ', '+', ' ', 'filterSettings', '.', 'getIntensity', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onFocusTypeChanged,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'focus changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'focus: ', '""', ' ', '+', ' ', 'focusSettings', '.', 'getFocusMode', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'set type', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onFocusIntensityChanged,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""focus changed"")
                .setLabel(""focus: "" + focusSettings.getFocusMode())
                .setAction(""set intensity"")
                .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'focus changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'focus: ', '""', ' ', '+', ' ', 'focusSettings', '.', 'getFocusMode', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'set intensity', '""', ')', '\n', '                ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'focusSettings', '.', 'getFocusIntensity', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onVerticalFlipChanged,"    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onVerticalFlipChanged(OrientationSettings orientationSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is vertical flipped: "" + orientationSettings.isVerticalFlipped())
                .setAction(""change vertical flip"");

        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onVerticalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'orientation changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'Is vertical flipped: ', '""', ' ', '+', ' ', 'orientationSettings', '.', 'isVerticalFlipped', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'change vertical flip', '""', ')', ';', '\n', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onHorizontalFlipChanged,"    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onHorizontalFlipChanged(OrientationSettings orientationSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Is horizontal flipped: "" + orientationSettings.isHorizontalFlipped())
                .setAction(""change horizontal flip"");

        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onHorizontalFlipChanged', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'orientation changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'Is horizontal flipped: ', '""', ' ', '+', ' ', 'orientationSettings', '.', 'isHorizontalFlipped', '(', ')', ')', '\n', '                ', '.', 'setAction', '(', '""', 'change horizontal flip', '""', ')', ';', '\n', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onRotationCW,"    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onRotationCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CW"");

        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onRotationCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'orientation changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'Image Rotation: ', '""', ' ', '+', ' ', 'rotation', ')', '\n', '                ', '.', 'setAction', '(', '""', 'rotate CW', '""', ')', ';', '\n', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onRotationCCW,"    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onRotationCCW(OrientationSettings orientationSettings) {
        int rotation = orientationSettings.getRotation();
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
                .setCategory(""orientation changed"")
                .setLabel(""Image Rotation: "" + rotation)
                .setAction(""rotate CCW"");

        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onRotationCCW', '(', 'OrientationSettings', ' ', 'orientationSettings', ')', ' ', '{', '\n', '        ', 'int', ' ', 'rotation', ' ', '=', ' ', 'orientationSettings', '.', 'getRotation', '(', ')', ';', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '                ', '.', 'setCategory', '(', '""', 'orientation changed', '""', ')', '\n', '                ', '.', 'setLabel', '(', '""', 'Image Rotation: ', '""', ' ', '+', ' ', 'rotation', ')', '\n', '                ', '.', 'setAction', '(', '""', 'rotate CCW', '""', ')', ';', '\n', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onStickerAdd,"    protected void onStickerAdd(LayerListSettings settings) {
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onStickerAdd(LayerListSettings settings) {
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
","['    ', 'protected', ' ', 'void', ' ', 'onStickerAdd', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', 'List', '<', 'LayerListSettings', '.', 'LayerSettings', '>', ' ', 'list', ' ', '=', ' ', 'settings', '.', 'getLayerSettingsList', '(', ')', ';', '\n', '        ', 'LayerListSettings', '.', 'LayerSettings', ' ', 'lastLayer', ' ', '=', ' ', 'list', '.', 'get', '(', 'list', '.', 'size', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '        ', 'if', ' ', '(', 'lastLayer', ' ', 'instanceof', ' ', 'StickerLayerSettings', ')', ' ', '{', '\n', '            ', 'StickerConfigInterface', ' ', 'stickerConfig', ' ', '=', ' ', '(', '(', 'StickerLayerSettings', ')', ' ', 'lastLayer', ')', '.', 'getStickerConfig', '(', ')', ';', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onStickerRemove,"    protected void onStickerRemove(LayerListSettings settings) {
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onStickerRemove(LayerListSettings settings) {
        List<LayerListSettings.LayerSettings> list = settings.getLayerSettingsList();
        LayerListSettings.LayerSettings lastLayer = list.get(list.size() - 1);
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
","['    ', 'protected', ' ', 'void', ' ', 'onStickerRemove', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', 'List', '<', 'LayerListSettings', '.', 'LayerSettings', '>', ' ', 'list', ' ', '=', ' ', 'settings', '.', 'getLayerSettingsList', '(', ')', ';', '\n', '        ', 'LayerListSettings', '.', 'LayerSettings', ' ', 'lastLayer', ' ', '=', ' ', 'list', '.', 'get', '(', 'list', '.', 'size', '(', ')', ' ', '-', ' ', '1', ')', ';', '\n', '        ', 'if', ' ', '(', 'lastLayer', ' ', 'instanceof', ' ', 'StickerLayerSettings', ')', ' ', '{', '\n', '            ', 'StickerConfigInterface', ' ', 'stickerConfig', ' ', '=', ' ', '(', '(', 'StickerLayerSettings', ')', ' ', 'lastLayer', ')', '.', 'getStickerConfig', '(', ')', ';', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onStickerFlipHorizontal,"    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onStickerFlipHorizontal(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
","['    ', 'protected', ' ', 'void', ' ', 'onStickerFlipHorizontal', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', 'LayerListSettings', '.', 'LayerSettings', ' ', 'lastLayer', ' ', '=', ' ', 'settings', '.', 'getSelected', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'lastLayer', ' ', 'instanceof', ' ', 'StickerLayerSettings', ')', ' ', '{', '\n', '            ', 'StickerConfigInterface', ' ', 'stickerConfig', ' ', '=', ' ', '(', '(', 'StickerLayerSettings', ')', ' ', 'lastLayer', ')', '.', 'getStickerConfig', '(', ')', ';', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onStickerFlipVertical,"    protected void onStickerFlipVertical(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onStickerFlipVertical(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
","['    ', 'protected', ' ', 'void', ' ', 'onStickerFlipVertical', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', 'LayerListSettings', '.', 'LayerSettings', ' ', 'lastLayer', ' ', '=', ' ', 'settings', '.', 'getSelected', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'lastLayer', ' ', 'instanceof', ' ', 'StickerLayerSettings', ')', ' ', '{', '\n', '            ', 'StickerConfigInterface', ' ', 'stickerConfig', ' ', '=', ' ', '(', '(', 'StickerLayerSettings', ')', ' ', 'lastLayer', ')', '.', 'getStickerConfig', '(', ')', ';', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onStickerPositionChange,"    protected void onStickerPositionChange(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onStickerPositionChange(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
","['    ', 'protected', ' ', 'void', ' ', 'onStickerPositionChange', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', 'LayerListSettings', '.', 'LayerSettings', ' ', 'lastLayer', ' ', '=', ' ', 'settings', '.', 'getSelected', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'lastLayer', ' ', 'instanceof', ' ', 'StickerLayerSettings', ')', ' ', '{', '\n', '            ', 'StickerConfigInterface', ' ', 'stickerConfig', ' ', '=', ' ', '(', '(', 'StickerLayerSettings', ')', ' ', 'lastLayer', ')', '.', 'getStickerConfig', '(', ')', ';', '\n', '<END>']"
master,48a799a37f18fd6cb8bc96303239997e6d9477c5,CustomEventTracker.java,onStickerToFront,"    protected void onStickerToFront(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();",https://www.github.com/imgly/pesdk-android-demo/commit/48a799a37f18fd6cb8bc96303239997e6d9477c5,"    protected void onStickerToFront(LayerListSettings settings) {
        LayerListSettings.LayerSettings lastLayer = settings.getSelected();
        if (lastLayer instanceof StickerLayerSettings) {
            StickerConfigInterface stickerConfig = ((StickerLayerSettings) lastLayer).getStickerConfig();
","['    ', 'protected', ' ', 'void', ' ', 'onStickerToFront', '(', 'LayerListSettings', ' ', 'settings', ')', ' ', '{', '\n', '        ', 'LayerListSettings', '.', 'LayerSettings', ' ', 'lastLayer', ' ', '=', ' ', 'settings', '.', 'getSelected', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'lastLayer', ' ', 'instanceof', ' ', 'StickerLayerSettings', ')', ' ', '{', '\n', '            ', 'StickerConfigInterface', ' ', 'stickerConfig', ' ', '=', ' ', '(', '(', 'StickerLayerSettings', ')', ' ', 'lastLayer', ')', '.', 'getStickerConfig', '(', ')', ';', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,MainActivity.java,onResume,"    protected void onResume() {
        super.onResume();
        SettingsList settingsList = new SettingsList();


        settingsList
                .getSettingsModel(CameraSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""camera_"")

                .getSettingsModel(EditorSaveSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""result_"")
                .setJpegQuality(80, false)
                .setSavePolicy(EditorSaveSettings.SavePolicy.KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT);

        new CameraPreviewBuilder(this)
                .setSettingsList(settingsList)",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onResume() {
        super.onResume();
        SettingsList settingsList = new SettingsList();


        settingsList
                .getSettingsModel(CameraSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""camera_"")

                .getSettingsModel(EditorSaveSettings.class)
                .setExportDir(Directory.DCIM, FOLDER)
                .setExportPrefix(""result_"")
                .setJpegQuality(80, false)
                .setSavePolicy(EditorSaveSettings.SavePolicy.KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT);

        new CameraPreviewBuilder(this)
                .setSettingsList(settingsList)
","['    ', 'protected', ' ', 'void', ' ', 'onResume', '(', ')', ' ', '{', '\n', '        ', 'super', '.', 'onResume', '(', ')', ';', '\n', '        ', 'SettingsList', ' ', 'settingsList', ' ', '=', ' ', 'new', ' ', 'SettingsList', '(', ')', ';', '\n', '\n', '\n', '        ', 'settingsList', '\n', '                ', '.', 'getSettingsModel', '(', 'CameraSettings', '.', 'class', ')', '\n', '                ', '.', 'setExportDir', '(', 'Directory', '.', 'DCIM', ',', ' ', 'FOLDER', ')', '\n', '                ', '.', 'setExportPrefix', '(', '""', 'camera_', '""', ')', '\n', '\n', '                ', '.', 'getSettingsModel', '(', 'EditorSaveSettings', '.', 'class', ')', '\n', '                ', '.', 'setExportDir', '(', 'Directory', '.', 'DCIM', ',', ' ', 'FOLDER', ')', '\n', '                ', '.', 'setExportPrefix', '(', '""', 'result_', '""', ')', '\n', '                ', '.', 'setJpegQuality', '(', '80', ',', ' ', 'false', ')', '\n', '                ', '.', 'setSavePolicy', '(', 'EditorSaveSettings', '.', 'SavePolicy', '.', 'KEEP_SOURCE_AND_CREATE_ALWAYS_OUTPUT', ')', ';', '\n', '\n', '        ', 'new', ' ', 'CameraPreviewBuilder', '(', 'this', ')', '\n', '                ', '.', 'setSettingsList', '(', 'settingsList', ')', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onLeaveToolWithCancel,"    protected void onLeaveToolWithCancel(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""menu action"")
          .setLabel(menuState.getCurrentTool().getName())
          .setAction(""cancel"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onLeaveToolWithCancel(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""menu action"")
          .setLabel(menuState.getCurrentTool().getName())
          .setAction(""cancel"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onLeaveToolWithCancel', '(', 'EditorMenuState', ' ', 'menuState', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'menu action', '""', ')', '\n', '          ', '.', 'setLabel', '(', 'menuState', '.', 'getCurrentTool', '(', ')', '.', 'getName', '(', ')', ')', '\n', '          ', '.', 'setAction', '(', '""', 'cancel', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onLeaveToolWithAccept,"    protected void onLeaveToolWithAccept(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""menu action"")
          .setLabel(menuState.getCurrentTool().getName())
          .setAction(""accept"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onLeaveToolWithAccept(EditorMenuState menuState) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""menu action"")
          .setLabel(menuState.getCurrentTool().getName())
          .setAction(""accept"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onLeaveToolWithAccept', '(', 'EditorMenuState', ' ', 'menuState', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'menu action', '""', ')', '\n', '          ', '.', 'setLabel', '(', 'menuState', '.', 'getCurrentTool', '(', ')', '.', 'getName', '(', ')', ')', '\n', '          ', '.', 'setAction', '(', '""', 'accept', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onColorAdjustmentChangeContrast,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change color adjustment"")
          .setLabel(""contrast"")
          .setAction(""changed"")
          .setValue(Math.round(colorAdjustmentSettings.getContrast() * 100));

        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onColorAdjustmentChangeContrast(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change color adjustment"")
          .setLabel(""contrast"")
          .setAction(""changed"")
          .setValue(Math.round(colorAdjustmentSettings.getContrast() * 100));

        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeContrast', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'change color adjustment', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'contrast', '""', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '          ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'colorAdjustmentSettings', '.', 'getContrast', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onColorAdjustmentChangeBrightness,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change color adjustment"")
          .setLabel(""brightness"")
          .setAction(""changed"")
          .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onColorAdjustmentChangeBrightness(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change color adjustment"")
          .setLabel(""brightness"")
          .setAction(""changed"")
          .setValue(Math.round(colorAdjustmentSettings.getBrightness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeBrightness', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'change color adjustment', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'brightness', '""', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '          ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'colorAdjustmentSettings', '.', 'getBrightness', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onColorAdjustmentChangeSaturation,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change color adjustment"")
          .setLabel(""saturation"")
          .setAction(""changed"")
          .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        Trace.out(""Test"", ""Saturation"", Math.round(colorAdjustmentSettings.getSaturation() * 100));
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onColorAdjustmentChangeSaturation(ColorAdjustmentSettings colorAdjustmentSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change color adjustment"")
          .setLabel(""saturation"")
          .setAction(""changed"")
          .setValue(Math.round(colorAdjustmentSettings.getSaturation() * 100));
        googleAnalyticsTracker.send(builder.build());
        Trace.out(""Test"", ""Saturation"", Math.round(colorAdjustmentSettings.getSaturation() * 100));
    }
","['    ', 'protected', ' ', 'void', ' ', 'onColorAdjustmentChangeSaturation', '(', 'ColorAdjustmentSettings', ' ', 'colorAdjustmentSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'change color adjustment', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'saturation', '""', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '          ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'colorAdjustmentSettings', '.', 'getSaturation', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '        ', 'Trace', '.', 'out', '(', '""', 'Test', '""', ',', ' ', '""', 'Saturation', '""', ',', ' ', 'Math', '.', 'round', '(', 'colorAdjustmentSettings', '.', 'getSaturation', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onBrushColorChange,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change brush"")
          .setLabel(""color"")
          .setAction(""changed"")
          .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onBrushColorChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change brush"")
          .setLabel(""color"")
          .setAction(""changed"")
          .setValue(brushLayerSettings.getBrushColor());
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onBrushColorChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'change brush', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'color', '""', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '          ', '.', 'setValue', '(', 'brushLayerSettings', '.', 'getBrushColor', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onBrushHardnessChange,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change brush"")
          .setLabel(""hardness"")
          .setAction(""changed"")
          .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onBrushHardnessChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change brush"")
          .setLabel(""hardness"")
          .setAction(""changed"")
          .setValue(Math.round(brushLayerSettings.getBrushHardness() * 100));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onBrushHardnessChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'change brush', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'hardness', '""', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '          ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'brushLayerSettings', '.', 'getBrushHardness', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onBrushSizeChange,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change brush"")
          .setLabel(""size"")
          .setAction(""changed"")
          .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onBrushSizeChange(BrushLayerSettings brushLayerSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""change brush"")
          .setLabel(""size"")
          .setAction(""changed"")
          .setValue(Math.round(brushLayerSettings.getBrushSize()));
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onBrushSizeChange', '(', 'BrushLayerSettings', ' ', 'brushLayerSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'change brush', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'size', '""', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed', '""', ')', '\n', '          ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'brushLayerSettings', '.', 'getBrushSize', '(', ')', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onCropAspectChanged,"    protected void onCropAspectChanged(TransformSettings cropSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""crop changed"")
          .setLabel(""aspect"")
          .setAction(""changed aspect to: ""+cropSettings.getAspectConfig().getName());
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onCropAspectChanged(TransformSettings cropSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""crop changed"")
          .setLabel(""aspect"")
          .setAction(""changed aspect to: ""+cropSettings.getAspectConfig().getName());
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onCropAspectChanged', '(', 'TransformSettings', ' ', 'cropSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'crop changed', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'aspect', '""', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed aspect to: ', '""', '+', 'cropSettings', '.', 'getAspectConfig', '(', ')', '.', 'getName', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onFilterChanged,"    protected void onFilterChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""filter changed"")
          .setLabel(""filter: "" + filterSettings.getFilter().getName())
          .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onFilterChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""filter changed"")
          .setLabel(""filter: "" + filterSettings.getFilter().getName())
          .setAction(""set fitler"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFilterChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'filter changed', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'filter: ', '""', ' ', '+', ' ', 'filterSettings', '.', 'getFilter', '(', ')', '.', 'getName', '(', ')', ')', '\n', '          ', '.', 'setAction', '(', '""', 'set fitler', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onFilterIntensityChanged,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""filter changed"")
          .setLabel(""filter: "" + filterSettings.getFilter().getName())
          .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onFilterIntensityChanged(FilterSettings filterSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""filter changed"")
          .setLabel(""filter: "" + filterSettings.getFilter().getName())
          .setAction(""changed intensity to: "" + filterSettings.getIntensity());
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFilterIntensityChanged', '(', 'FilterSettings', ' ', 'filterSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'filter changed', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'filter: ', '""', ' ', '+', ' ', 'filterSettings', '.', 'getFilter', '(', ')', '.', 'getName', '(', ')', ')', '\n', '          ', '.', 'setAction', '(', '""', 'changed intensity to: ', '""', ' ', '+', ' ', 'filterSettings', '.', 'getIntensity', '(', ')', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onFocusTypeChanged,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""focus changed"")
          .setLabel(""focus: "" + focusSettings.getFocusMode())
          .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onFocusTypeChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""focus changed"")
          .setLabel(""focus: "" + focusSettings.getFocusMode())
          .setAction(""set type"");
        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFocusTypeChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'focus changed', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'focus: ', '""', ' ', '+', ' ', 'focusSettings', '.', 'getFocusMode', '(', ')', ')', '\n', '          ', '.', 'setAction', '(', '""', 'set type', '""', ')', ';', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,CustomEventTracker.java,onFocusIntensityChanged,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""focus changed"")
          .setLabel(""focus: "" + focusSettings.getFocusMode())
          .setAction(""set intensity"")
          .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
    }",https://www.github.com/imgly/pesdk-android-demo/commit/c3f6083f0a11f8c491529097320fcf8c1c6fc2e4,"    protected void onFocusIntensityChanged(FocusSettings focusSettings) {
        HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
          .setCategory(""focus changed"")
          .setLabel(""focus: "" + focusSettings.getFocusMode())
          .setAction(""set intensity"")
          .setValue(Math.round(focusSettings.getFocusIntensity() * 100));

        googleAnalyticsTracker.send(builder.build());
    }
","['    ', 'protected', ' ', 'void', ' ', 'onFocusIntensityChanged', '(', 'FocusSettings', ' ', 'focusSettings', ')', ' ', '{', '\n', '        ', 'HitBuilders', '.', 'EventBuilder', ' ', 'builder', ' ', '=', ' ', 'new', ' ', 'HitBuilders', '.', 'EventBuilder', '(', ')', '\n', '          ', '.', 'setCategory', '(', '""', 'focus changed', '""', ')', '\n', '          ', '.', 'setLabel', '(', '""', 'focus: ', '""', ' ', '+', ' ', 'focusSettings', '.', 'getFocusMode', '(', ')', ')', '\n', '          ', '.', 'setAction', '(', '""', 'set intensity', '""', ')', '\n', '          ', '.', 'setValue', '(', 'Math', '.', 'round', '(', 'focusSettings', '.', 'getFocusIntensity', '(', ')', ' ', '*', ' ', '100', ')', ')', ';', '\n', '\n', '        ', 'googleAnalyticsTracker', '.', 'send', '(', 'builder', '.', 'build', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
