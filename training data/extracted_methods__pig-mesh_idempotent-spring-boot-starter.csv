Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,31d19d6abc2896c84ae4e40b3e43d2071a50a7ad,MavenWrapperDownloader.java,downloadFileFromURL,"    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/31d19d6abc2896c84ae4e40b3e43d2071a50a7ad,"    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'downloadFileFromURL', '(', 'String', ' ', 'urlString', ',', ' ', 'File', ' ', 'destination', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'URL', ' ', 'website', ' ', '=', ' ', 'new', ' ', 'URL', '(', 'urlString', ')', ';', '\n', '        ', 'ReadableByteChannel', ' ', 'rbc', ';', '\n', '        ', 'rbc', ' ', '=', ' ', 'Channels', '.', 'newChannel', '(', 'website', '.', 'openStream', '(', ')', ')', ';', '\n', '        ', 'FileOutputStream', ' ', 'fos', ' ', '=', ' ', 'new', ' ', 'FileOutputStream', '(', 'destination', ')', ';', '\n', '        ', 'fos', '.', 'getChannel', '(', ')', '.', 'transferFrom', '(', 'rbc', ',', ' ', '0', ',', ' ', 'Long', '.', 'MAX_VALUE', ')', ';', '\n', '        ', 'fos', '.', 'close', '(', ')', ';', '\n', '        ', 'rbc', '.', 'close', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,31d19d6abc2896c84ae4e40b3e43d2071a50a7ad,IdempotentApplication.java,main,"	public static void main(String[] args) {
		SpringApplication.run(IdempotentApplication.class, args);
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/31d19d6abc2896c84ae4e40b3e43d2071a50a7ad,"	public static void main(String[] args) {
		SpringApplication.run(IdempotentApplication.class, args);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\t\t', 'SpringApplication', '.', 'run', '(', 'IdempotentApplication', '.', 'class', ',', ' ', 'args', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,f36a712cec4a1364b3beea48072ee2b97bcd8667,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint){
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        String ip = request.getRemoteAddr();
        String url = request.getRequestURL().toString();
        String args = Arrays.toString(joinPoint.getArgs());

        System.out.println(""aaaaaa"");
",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/f36a712cec4a1364b3beea48072ee2b97bcd8667,"    public void beforePointCut(JoinPoint joinPoint){
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        String ip = request.getRemoteAddr();
        String url = request.getRequestURL().toString();
        String args = Arrays.toString(joinPoint.getArgs());

        System.out.println(""aaaaaa"");
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'String', ' ', 'ip', ' ', '=', ' ', 'request', '.', 'getRemoteAddr', '(', ')', ';', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'args', ' ', '=', ' ', 'Arrays', '.', 'toString', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', ';', '\n', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'aaaaaa', '""', ')', ';', '\n', '<END>']"
master,f36a712cec4a1364b3beea48072ee2b97bcd8667,UserController.java,test,"    public String  test(String name){
        return name;
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/f36a712cec4a1364b3beea48072ee2b97bcd8667,"    public String  test(String name){
        return name;
    }
","['    ', 'public', ' ', 'String', '  ', 'test', '(', 'String', ' ', 'name', ')', '{', '\n', '        ', 'return', ' ', 'name', ';', '\n', '    ', '}', '\n', '<END>']"
master,f36a712cec4a1364b3beea48072ee2b97bcd8667,User.java,toString,"    public String toString() {
        return ""User{"" +
                ""id='"" + id + '\'' +",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/f36a712cec4a1364b3beea48072ee2b97bcd8667,"    public String toString() {
        return ""User{"" +
                ""id='"" + id + '\'' +
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'User{', '""', ' ', '+', '\n', '                ', '""', ""id='"", '""', ' ', '+', ' ', 'id', ' ', '+', ' ', ""'\\''"", ' ', '+', '\n', '<END>']"
master,5ec5ace58c8ec75553337c30fd3359d1ff66f511,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint){
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();




        String url = request.getRequestURL().toString();
        String args = Arrays.toString(joinPoint.getArgs());

        String info = url + args;



        System.out.println(""aaaaaa"");
",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/5ec5ace58c8ec75553337c30fd3359d1ff66f511,"    public void beforePointCut(JoinPoint joinPoint){
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();




        String url = request.getRequestURL().toString();
        String args = Arrays.toString(joinPoint.getArgs());

        String info = url + args;



        System.out.println(""aaaaaa"");
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '\n', '\n', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'args', ' ', '=', ' ', 'Arrays', '.', 'toString', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'url', ' ', '+', ' ', 'args', ';', '\n', '\n', '\n', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'aaaaaa', '""', ')', ';', '\n', '<END>']"
master,a1e100ee8e1f0ee840adb43b37bd99e1bc5cd9b6,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint){
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(method.isAnnotationPresent(Idempotent.class)){
            Idempotent idempotent = method.getAnnotation(Idempotent.class);
            boolean isIdempotent = idempotent.idempotent();
            if(!isIdempotent){
                return;
            }

            redisson.getMapCache("""");

            long expireTime = idempotent.expireTime();

            
        }


        String url = request.getRequestURL().toString();
        String args = Arrays.toString(joinPoint.getArgs());

        String info = url + args;



        System.out.println(""aaaaaa"");
",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/a1e100ee8e1f0ee840adb43b37bd99e1bc5cd9b6,"    public void beforePointCut(JoinPoint joinPoint){
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(method.isAnnotationPresent(Idempotent.class)){
            Idempotent idempotent = method.getAnnotation(Idempotent.class);
            boolean isIdempotent = idempotent.idempotent();
            if(!isIdempotent){
                return;
            }

            redisson.getMapCache("""");

            long expireTime = idempotent.expireTime();

            
        }


        String url = request.getRequestURL().toString();
        String args = Arrays.toString(joinPoint.getArgs());

        String info = url + args;



        System.out.println(""aaaaaa"");
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '            ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '            ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '                ', 'return', ';', '\n', '            ', '}', '\n', '\n', '            ', 'redisson', '.', 'getMapCache', '(', '""', '""', ')', ';', '\n', '\n', '            ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '\n', '            ', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'args', ' ', '=', ' ', 'Arrays', '.', 'toString', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'url', ' ', '+', ' ', 'args', ';', '\n', '\n', '\n', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'aaaaaa', '""', ')', ';', '\n', '<END>']"
master,fd111c700fbcd6600d90a76ffac29e04c2f135c8,RedissonConfig.java,redisson,"    public Redisson redisson() {
        Config config = new Config();
        config.useSingleServer().setAddress(address)
                .setPassword(password)
                .setIdleConnectionTimeout(idleConnectionTimeout)
                .setConnectTimeout(connectTimeout)
                .setTimeout(timeout)
                .setRetryAttempts(retryAttempts)
                .setRetryInterval(retryInterval)
                .setReconnectionTimeout(reconnectionTimeout)
                .setPingTimeout(pingTimeout)
                .setFailedAttempts(failedAttempts)
                .setSubscriptionsPerConnection(subscriptionsPerConnection)
                .setSubscriptionConnectionMinimumIdleSize(subscriptionConnectionMinimumIdleSize)
                .setSubscriptionConnectionPoolSize(subscriptionConnectionPoolSize)
                .setConnectionMinimumIdleSize(connectionMinimumIdleSize)
                .setConnectionPoolSize(connectionPoolSize);
        return (Redisson) Redisson.create(config);
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/fd111c700fbcd6600d90a76ffac29e04c2f135c8,"    public Redisson redisson() {
        Config config = new Config();
        config.useSingleServer().setAddress(address)
                .setPassword(password)
                .setIdleConnectionTimeout(idleConnectionTimeout)
                .setConnectTimeout(connectTimeout)
                .setTimeout(timeout)
                .setRetryAttempts(retryAttempts)
                .setRetryInterval(retryInterval)
                .setReconnectionTimeout(reconnectionTimeout)
                .setPingTimeout(pingTimeout)
                .setFailedAttempts(failedAttempts)
                .setSubscriptionsPerConnection(subscriptionsPerConnection)
                .setSubscriptionConnectionMinimumIdleSize(subscriptionConnectionMinimumIdleSize)
                .setSubscriptionConnectionPoolSize(subscriptionConnectionPoolSize)
                .setConnectionMinimumIdleSize(connectionMinimumIdleSize)
                .setConnectionPoolSize(connectionPoolSize);
        return (Redisson) Redisson.create(config);
    }
","['    ', 'public', ' ', 'Redisson', ' ', 'redisson', '(', ')', ' ', '{', '\n', '        ', 'Config', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'Config', '(', ')', ';', '\n', '        ', 'config', '.', 'useSingleServer', '(', ')', '.', 'setAddress', '(', 'address', ')', '\n', '                ', '.', 'setPassword', '(', 'password', ')', '\n', '                ', '.', 'setIdleConnectionTimeout', '(', 'idleConnectionTimeout', ')', '\n', '                ', '.', 'setConnectTimeout', '(', 'connectTimeout', ')', '\n', '                ', '.', 'setTimeout', '(', 'timeout', ')', '\n', '                ', '.', 'setRetryAttempts', '(', 'retryAttempts', ')', '\n', '                ', '.', 'setRetryInterval', '(', 'retryInterval', ')', '\n', '                ', '.', 'setReconnectionTimeout', '(', 'reconnectionTimeout', ')', '\n', '                ', '.', 'setPingTimeout', '(', 'pingTimeout', ')', '\n', '                ', '.', 'setFailedAttempts', '(', 'failedAttempts', ')', '\n', '                ', '.', 'setSubscriptionsPerConnection', '(', 'subscriptionsPerConnection', ')', '\n', '                ', '.', 'setSubscriptionConnectionMinimumIdleSize', '(', 'subscriptionConnectionMinimumIdleSize', ')', '\n', '                ', '.', 'setSubscriptionConnectionPoolSize', '(', 'subscriptionConnectionPoolSize', ')', '\n', '                ', '.', 'setConnectionMinimumIdleSize', '(', 'connectionMinimumIdleSize', ')', '\n', '                ', '.', 'setConnectionPoolSize', '(', 'connectionPoolSize', ')', ';', '\n', '        ', 'return', ' ', '(', 'Redisson', ')', ' ', 'Redisson', '.', 'create', '(', 'config', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,27f116cf50ec4cb8a9dc6f032651d1d085dce056,IdempotentAspect.java,pointCut,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        threadLocal.set(key);

        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        mapCache.fastRemove(key);
    }
}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/27f116cf50ec4cb8a9dc6f032651d1d085dce056,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        threadLocal.set(key);

        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        mapCache.fastRemove(key);
    }
}
","['    ', 'public', ' ', 'void', ' ', 'pointCut', '(', ')', '{', '}', '\n', '\n', '    ', '@Before', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '        ', 'threadLocal', '.', 'set', '(', 'key', ')', ';', '\n', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@After', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Object', ' ', 'key', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'key', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,27f116cf50ec4cb8a9dc6f032651d1d085dce056,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        threadLocal.set(key);

        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/27f116cf50ec4cb8a9dc6f032651d1d085dce056,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        threadLocal.set(key);

        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '        ', 'threadLocal', '.', 'set', '(', 'key', ')', ';', '\n', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,27f116cf50ec4cb8a9dc6f032651d1d085dce056,IdempotentAspect.java,afterPointCut,"    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        mapCache.fastRemove(key);
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/27f116cf50ec4cb8a9dc6f032651d1d085dce056,"    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        mapCache.fastRemove(key);
    }
","['    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Object', ' ', 'key', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'key', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,cd735639f4c46cc6a3c091657c8b5fa72da930a6,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        synchronized (this){
            rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        }
        threadLocal.set(key);

        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/cd735639f4c46cc6a3c091657c8b5fa72da930a6,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        synchronized (this){
            rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        }
        threadLocal.set(key);

        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '        ', '}', '\n', '        ', 'threadLocal', '.', 'set', '(', 'key', ')', ';', '\n', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,62c7555b55346861d5bc24359e029a76d3c29849,IdempotentAspect.java,pointCut,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        synchronized (this){
            rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        }
        threadLocal.set(key);
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }
        mapCache.fastRemove(key);
        LOGGER.info(""[idempotent]:has removed key={}"",key);
    }
}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/62c7555b55346861d5bc24359e029a76d3c29849,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        synchronized (this){
            rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        }
        threadLocal.set(key);
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }
        mapCache.fastRemove(key);
        LOGGER.info(""[idempotent]:has removed key={}"",key);
    }
}
","['    ', 'public', ' ', 'void', ' ', 'pointCut', '(', ')', '{', '}', '\n', '\n', '    ', '@Before', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '        ', '}', '\n', '        ', 'threadLocal', '.', 'set', '(', 'key', ')', ';', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', '@After', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Object', ' ', 'key', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'key', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'mapCache', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,62c7555b55346861d5bc24359e029a76d3c29849,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        synchronized (this){
            rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        }
        threadLocal.set(key);
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/62c7555b55346861d5bc24359e029a76d3c29849,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        String key = url + argString;
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        synchronized (this){
            rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
        }
        threadLocal.set(key);
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);
    }
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '        ', '}', '\n', '        ', 'threadLocal', '.', 'set', '(', 'key', ')', ';', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,62c7555b55346861d5bc24359e029a76d3c29849,IdempotentAspect.java,afterPointCut,"    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }
        mapCache.fastRemove(key);
        LOGGER.info(""[idempotent]:has removed key={}"",key);
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/62c7555b55346861d5bc24359e029a76d3c29849,"    public void afterPointCut(JoinPoint joinPoint){
        Object key = threadLocal.get();
        if(null == key){
            return;
        }
        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }
        mapCache.fastRemove(key);
        LOGGER.info(""[idempotent]:has removed key={}"",key);
    }
","['    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Object', ' ', 'key', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'key', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'mapCache', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,78d397cffcfccfb8529cb2741cc89a6ec8368b36,IdempotentAspect.java,pointCut,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        if(null != rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            System.out.println(""delKey=""+delKey);
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/78d397cffcfccfb8529cb2741cc89a6ec8368b36,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        if(null != rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            System.out.println(""delKey=""+delKey);
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}
","['    ', 'public', ' ', 'void', ' ', 'pointCut', '(', ')', '{', '}', '\n', '\n', '    ', '@Before', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ')', ';', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'KEY', ',', 'key', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'DELKEY', ',', 'delKey', ')', ';', '\n', '            ', 'threadLocal', '.', 'set', '(', 'map', ')', ';', '\n', '        ', '}', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@After', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'mapCache', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'delKey=', '""', '+', 'delKey', ')', ';', '\n', '            ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '            ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,78d397cffcfccfb8529cb2741cc89a6ec8368b36,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        if(null != rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/78d397cffcfccfb8529cb2741cc89a6ec8368b36,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        if(null != rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{}"",key,value,expireTime,timeUnit);

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ')', ';', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '<END>']"
master,78d397cffcfccfb8529cb2741cc89a6ec8368b36,IdempotentAspect.java,afterPointCut,"    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            System.out.println(""delKey=""+delKey);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/78d397cffcfccfb8529cb2741cc89a6ec8368b36,"    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            System.out.println(""delKey=""+delKey);
","['    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'mapCache', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'delKey=', '""', '+', 'delKey', ')', ';', '\n', '<END>']"
master,b0ea417d348546e39c5194dfa5f08b96ab5b7b61,IdempotentAspect.java,pointCut,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            System.out.println(""delKey=""+delKey);
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/b0ea417d348546e39c5194dfa5f08b96ab5b7b61,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(null == mapCache){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            System.out.println(""delKey=""+delKey);
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}
","['    ', 'public', ' ', 'void', ' ', 'pointCut', '(', ')', '{', '}', '\n', '\n', '    ', '@Before', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'KEY', ',', 'key', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'DELKEY', ',', 'delKey', ')', ';', '\n', '            ', 'threadLocal', '.', 'set', '(', 'map', ')', ';', '\n', '        ', '}', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@After', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'null', ' ', '=', '=', ' ', 'mapCache', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'delKey=', '""', '+', 'delKey', ')', ';', '\n', '            ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '            ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,b0ea417d348546e39c5194dfa5f08b96ab5b7b61,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/b0ea417d348546e39c5194dfa5f08b96ab5b7b61,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '<END>']"
master,c195f5b62674bef44d05b55f2d4a242818a81803,IdempotentAspect.java,pointCut,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        //do not need check null
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/c195f5b62674bef44d05b55f2d4a242818a81803,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}
","['    ', 'public', ' ', 'void', ' ', 'pointCut', '(', ')', '{', '}', '\n', '\n', '    ', '@Before', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'KEY', ',', 'key', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'DELKEY', ',', 'delKey', ')', ';', '\n', '            ', 'threadLocal', '.', 'set', '(', 'map', ')', ';', '\n', '        ', '}', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@After', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '            ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,c195f5b62674bef44d05b55f2d4a242818a81803,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        //do not need check null
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/c195f5b62674bef44d05b55f2d4a242818a81803,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '<END>']"
master,c195f5b62674bef44d05b55f2d4a242818a81803,IdempotentAspect.java,afterPointCut,"    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/c195f5b62674bef44d05b55f2d4a242818a81803,"    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
","['    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '<END>']"
master,c195f5b62674bef44d05b55f2d4a242818a81803,IdempotentApplicationTests.java,testNullMap,"	public void testNullMap() {
		RMapCache<Object, Object> aaa = redisson
				.getMapCache(""adsafasffsdaxdsdfsdffsdfsdffsadfafsaf"");
		aaa.putIfAbsent(""wang"",123);
		System.out.println(""aaaaa"");
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/c195f5b62674bef44d05b55f2d4a242818a81803,"	public void testNullMap() {
		RMapCache<Object, Object> aaa = redisson
				.getMapCache(""adsafasffsdaxdsdfsdffsdfsdffsadfafsaf"");
		aaa.putIfAbsent(""wang"",123);
		System.out.println(""aaaaa"");
	}
","['\t', 'public', ' ', 'void', ' ', 'testNullMap', '(', ')', ' ', '{', '\n', '\t\t', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'aaa', ' ', '=', ' ', 'redisson', '\n', '\t\t\t\t', '.', 'getMapCache', '(', '""', 'adsafasffsdaxdsdfsdffsdfsdffsadfafsaf', '""', ')', ';', '\n', '\t\t', 'aaa', '.', 'putIfAbsent', '(', '""', 'wang', '""', ',', '123', ')', ';', '\n', '\t\t', 'System', '.', 'out', '.', 'println', '(', '""', 'aaaaa', '""', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,94a53d2d27cd51c6df023720ab50572061635922,IdempotentAspect.java,pointCut,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        //do not need check null
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/94a53d2d27cd51c6df023720ab50572061635922,"    public void pointCut(){}

    @Before(""pointCut()"")
    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
            map.put(KEY,key);
            map.put(DELKEY,delKey);
            threadLocal.set(map);
        }

    }

    @After(""pointCut()"")
    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
    }
}
","['    ', 'public', ' ', 'void', ' ', 'pointCut', '(', ')', '{', '}', '\n', '\n', '    ', '@Before', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'KEY', ',', 'key', ')', ';', '\n', '            ', 'map', '.', 'put', '(', 'DELKEY', ',', 'delKey', ')', ';', '\n', '            ', 'threadLocal', '.', 'set', '(', 'map', ')', ';', '\n', '        ', '}', '\n', '\n', '    ', '}', '\n', '\n', '    ', '@After', '(', '""', 'pointCut()', '""', ')', '\n', '    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '            ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,94a53d2d27cd51c6df023720ab50572061635922,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        //do not need check null
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/94a53d2d27cd51c6df023720ab50572061635922,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        if(CollectionUtils.isEmpty(threadLocal.get())){
            Map<String, Object> map = new HashMap<>(2);
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ')', '{', '\n', '            ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '2', ')', ';', '\n', '<END>']"
master,7077f5b2b05b1abb0060d63638e5ef01d66df2bd,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        //do not need check null
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        Map<String, Object> map =
                CollectionUtils.isEmpty(threadLocal.get()) ? new HashMap<>(4):threadLocal.get();
        map.put(KEY,key);
        map.put(DELKEY,delKey);
        threadLocal.set(map);
",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/7077f5b2b05b1abb0060d63638e5ef01d66df2bd,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);

        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        Map<String, Object> map =
                CollectionUtils.isEmpty(threadLocal.get()) ? new HashMap<>(4):threadLocal.get();
        map.put(KEY,key);
        map.put(DELKEY,delKey);
        threadLocal.set(map);
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', '\n', '                ', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ' ', '?', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '4', ')', ':', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'KEY', ',', 'key', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'DELKEY', ',', 'delKey', ')', ';', '\n', '        ', 'threadLocal', '.', 'set', '(', 'map', ')', ';', '\n', '<END>']"
master,7077f5b2b05b1abb0060d63638e5ef01d66df2bd,IdempotentAspect.java,afterPointCut,"    public void afterPointCut(JoinPoint joinPoint) throws InterruptedException {
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }

        Thread.sleep(ONE_HUNDRED*1000);
        threadLocal.remove();
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/7077f5b2b05b1abb0060d63638e5ef01d66df2bd,"    public void afterPointCut(JoinPoint joinPoint) throws InterruptedException {
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }

        Thread.sleep(ONE_HUNDRED*1000);
        threadLocal.remove();
    }
","['    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', ' ', 'throws', ' ', 'InterruptedException', ' ', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '            ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Thread', '.', 'sleep', '(', 'ONE_HUNDRED', '*', '1000', ')', ';', '\n', '        ', 'threadLocal', '.', 'remove', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,ca31625dbded1563f66342e32d38a40336e43837,IdempotentAspect.java,afterPointCut,"    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
        threadLocal.remove();
    }",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/ca31625dbded1563f66342e32d38a40336e43837,"    public void afterPointCut(JoinPoint joinPoint){
        Map<String,Object> map = threadLocal.get();
        if(CollectionUtils.isEmpty(map)){
            return;
        }

        RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
        if(mapCache.size() == 0){
            return;
        }

        String key = map.get(KEY).toString();
        boolean delKey = (boolean)map.get(DELKEY);

        if(delKey){
            mapCache.fastRemove(key);
            LOGGER.info(""[idempotent]:has removed key={}"",key);
        }
        threadLocal.remove();
    }
","['    ', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', '{', '\n', '        ', 'Map', '<', 'String', ',', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'if', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'if', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '        ', 'if', '(', 'delKey', ')', '{', '\n', '            ', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '            ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', 'key', ')', ';', '\n', '        ', '}', '\n', '        ', 'threadLocal', '.', 'remove', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6096ee6e4e0481a27aedf97fbd4aca0b5228928f,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        //do not need check null
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        Map<String, Object> map =
                CollectionUtils.isEmpty(threadLocal.get()) ? new HashMap<>(4):threadLocal.get();
        map.put(KEY,key);
        map.put(DELKEY,delKey);
        threadLocal.set(map);
",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/6096ee6e4e0481a27aedf97fbd4aca0b5228928f,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.idempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        Map<String, Object> map =
                CollectionUtils.isEmpty(threadLocal.get()) ? new HashMap<>(4):threadLocal.get();
        map.put(KEY,key);
        map.put(DELKEY,delKey);
        threadLocal.set(map);
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'idempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', '\n', '                ', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ' ', '?', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '4', ')', ':', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'KEY', ',', 'key', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'DELKEY', ',', 'delKey', ')', ';', '\n', '        ', 'threadLocal', '.', 'set', '(', 'map', ')', ';', '\n', '<END>']"
master,30dbf7de53f80f3745f2dc5f18ff13f4d10fa17b,IdempotentAspect.java,beforePointCut,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.isIdempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        //do not need check null
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            //had stored
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        Map<String, Object> map =
                CollectionUtils.isEmpty(threadLocal.get()) ? new HashMap<>(4):threadLocal.get();
        map.put(KEY,key);
        map.put(DELKEY,delKey);
        threadLocal.set(map);
",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/30dbf7de53f80f3745f2dc5f18ff13f4d10fa17b,"    public void beforePointCut(JoinPoint joinPoint)throws Exception{
        ServletRequestAttributes requestAttributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        MethodSignature signature = (MethodSignature)joinPoint.getSignature();
        Method method = signature.getMethod();
        if(!method.isAnnotationPresent(Idempotent.class)){
            return;
        }
        Idempotent idempotent = method.getAnnotation(Idempotent.class);
        boolean isIdempotent = idempotent.isIdempotent();
        if(!isIdempotent){
            return;
        }

        String url = request.getRequestURL().toString();
        String argString  = Arrays.asList(joinPoint.getArgs()).toString();
        String key = url + argString;

        long expireTime = idempotent.expireTime();
        String info = idempotent.info();
        TimeUnit timeUnit = idempotent.timeUnit();
        boolean delKey = idempotent.delKey();

        
        RMapCache<String, Object> rMapCache = redisson.getMapCache(RMAPCACHE_KEY);
        String value = LocalDateTime.now().toString().replace(""T"", "" "");
        Object v1;
        if (null != rMapCache.get(key)){
            
            throw new IdempotentException(""[idempotent]:""+info);
        }
        synchronized (this){
            v1 = rMapCache.putIfAbsent(key, value, expireTime, TimeUnit.SECONDS);
            if(null != v1){
                throw new IdempotentException(""[idempotent]:""+info);
            }else {
                LOGGER.info(""[idempotent]:has stored key={},value={},expireTime={}{},now={}"",key,value,expireTime,timeUnit,LocalDateTime.now().toString());
            }
        }

        Map<String, Object> map =
                CollectionUtils.isEmpty(threadLocal.get()) ? new HashMap<>(4):threadLocal.get();
        map.put(KEY,key);
        map.put(DELKEY,delKey);
        threadLocal.set(map);
","['    ', 'public', ' ', 'void', ' ', 'beforePointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', 'throws', ' ', 'Exception', '{', '\n', '        ', 'ServletRequestAttributes', ' ', 'requestAttributes', ' ', '=', '\n', '                ', '(', 'ServletRequestAttributes', ')', ' ', 'RequestContextHolder', '.', 'getRequestAttributes', '(', ')', ';', '\n', '        ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', 'requestAttributes', '.', 'getRequest', '(', ')', ';', '\n', '\n', '        ', 'MethodSignature', ' ', 'signature', ' ', '=', ' ', '(', 'MethodSignature', ')', 'joinPoint', '.', 'getSignature', '(', ')', ';', '\n', '        ', 'Method', ' ', 'method', ' ', '=', ' ', 'signature', '.', 'getMethod', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'method', '.', 'isAnnotationPresent', '(', 'Idempotent', '.', 'class', ')', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'Idempotent', ' ', 'idempotent', ' ', '=', ' ', 'method', '.', 'getAnnotation', '(', 'Idempotent', '.', 'class', ')', ';', '\n', '        ', 'boolean', ' ', 'isIdempotent', ' ', '=', ' ', 'idempotent', '.', 'isIdempotent', '(', ')', ';', '\n', '        ', 'if', '(', '!', 'isIdempotent', ')', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'argString', '  ', '=', ' ', 'Arrays', '.', 'asList', '(', 'joinPoint', '.', 'getArgs', '(', ')', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'String', ' ', 'key', ' ', '=', ' ', 'url', ' ', '+', ' ', 'argString', ';', '\n', '\n', '        ', 'long', ' ', 'expireTime', ' ', '=', ' ', 'idempotent', '.', 'expireTime', '(', ')', ';', '\n', '        ', 'String', ' ', 'info', ' ', '=', ' ', 'idempotent', '.', 'info', '(', ')', ';', '\n', '        ', 'TimeUnit', ' ', 'timeUnit', ' ', '=', ' ', 'idempotent', '.', 'timeUnit', '(', ')', ';', '\n', '        ', 'boolean', ' ', 'delKey', ' ', '=', ' ', 'idempotent', '.', 'delKey', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'RMapCache', '<', 'String', ',', ' ', 'Object', '>', ' ', 'rMapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '        ', 'String', ' ', 'value', ' ', '=', ' ', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', '.', 'replace', '(', '""', 'T', '""', ',', ' ', '""', ' ', '""', ')', ';', '\n', '        ', 'Object', ' ', 'v1', ';', '\n', '        ', 'if', ' ', '(', 'null', ' ', '!', '=', ' ', 'rMapCache', '.', 'get', '(', 'key', ')', ')', '{', '\n', '            ', '\n', '            ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '        ', '}', '\n', '        ', 'synchronized', ' ', '(', 'this', ')', '{', '\n', '            ', 'v1', ' ', '=', ' ', 'rMapCache', '.', 'putIfAbsent', '(', 'key', ',', ' ', 'value', ',', ' ', 'expireTime', ',', ' ', 'TimeUnit', '.', 'SECONDS', ')', ';', '\n', '            ', 'if', '(', 'null', ' ', '!', '=', ' ', 'v1', ')', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'IdempotentException', '(', '""', '[idempotent]:', '""', '+', 'info', ')', ';', '\n', '            ', '}', 'else', ' ', '{', '\n', '                ', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has stored key={},value={},expireTime={}{},now={}', '""', ',', 'key', ',', 'value', ',', 'expireTime', ',', 'timeUnit', ',', 'LocalDateTime', '.', 'now', '(', ')', '.', 'toString', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', '\n', '                ', 'CollectionUtils', '.', 'isEmpty', '(', 'threadLocal', '.', 'get', '(', ')', ')', ' ', '?', ' ', 'new', ' ', 'HashMap', '<', '>', '(', '4', ')', ':', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'KEY', ',', 'key', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'DELKEY', ',', 'delKey', ')', ';', '\n', '        ', 'threadLocal', '.', 'set', '(', 'map', ')', ';', '\n', '<END>']"
master,edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,IdempotentAutoConfiguration.java,idempotentAspect,"	public IdempotentAspect idempotentAspect() {
		return new IdempotentAspect();
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,"	public IdempotentAspect idempotentAspect() {
		return new IdempotentAspect();
	}
","['\t', 'public', ' ', 'IdempotentAspect', ' ', 'idempotentAspect', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'new', ' ', 'IdempotentAspect', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,IdempotentAutoConfiguration.java,keyResolver,"	public KeyResolver keyResolver() {
		return new ExpressionResolver();
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,"	public KeyResolver keyResolver() {
		return new ExpressionResolver();
	}
","['\t', 'public', ' ', 'KeyResolver', ' ', 'keyResolver', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'new', ' ', 'ExpressionResolver', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,IdempotentAspect.java,afterPointCut,"	public void afterPointCut(JoinPoint joinPoint) {
		Map<String, Object> map = threadLocal.get();
		if (CollectionUtils.isEmpty(map)) {
			return;
		}

		RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
		if (mapCache.size() == 0) {
			return;
		}

		String key = map.get(KEY).toString();
		boolean delKey = (boolean) map.get(DELKEY);

		if (delKey) {
			mapCache.fastRemove(key);
			LOGGER.info(""[idempotent]:has removed key={}"", key);
		}
		threadLocal.remove();
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,"	public void afterPointCut(JoinPoint joinPoint) {
		Map<String, Object> map = threadLocal.get();
		if (CollectionUtils.isEmpty(map)) {
			return;
		}

		RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
		if (mapCache.size() == 0) {
			return;
		}

		String key = map.get(KEY).toString();
		boolean delKey = (boolean) map.get(DELKEY);

		if (delKey) {
			mapCache.fastRemove(key);
			LOGGER.info(""[idempotent]:has removed key={}"", key);
		}
		threadLocal.remove();
	}
","['\t', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', ' ', '{', '\n', '\t\t', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'threadLocal', '.', 'get', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', ' ', '{', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', ' ', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'delKey', ')', ' ', '{', '\n', '\t\t\t', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '\t\t\t', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', ' ', 'key', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'threadLocal', '.', 'remove', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,ExpressionResolver.java,resolver,"	public String resolver(Idempotent idempotent, JoinPoint point) {
		Object[] arguments = point.getArgs();
		String[] params = DISCOVERER.getParameterNames(getMethod(point));
		StandardEvaluationContext context = new StandardEvaluationContext();

		for (int len = 0; len < params.length; len++) {
			context.setVariable(params[len], arguments[len]);
		}

		Expression expression = PARSER.parseExpression(idempotent.key());
		return expression.getValue(context, String.class);
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,"	public String resolver(Idempotent idempotent, JoinPoint point) {
		Object[] arguments = point.getArgs();
		String[] params = DISCOVERER.getParameterNames(getMethod(point));
		StandardEvaluationContext context = new StandardEvaluationContext();

		for (int len = 0; len < params.length; len++) {
			context.setVariable(params[len], arguments[len]);
		}

		Expression expression = PARSER.parseExpression(idempotent.key());
		return expression.getValue(context, String.class);
	}
","['\t', 'public', ' ', 'String', ' ', 'resolver', '(', 'Idempotent', ' ', 'idempotent', ',', ' ', 'JoinPoint', ' ', 'point', ')', ' ', '{', '\n', '\t\t', 'Object', '[', ']', ' ', 'arguments', ' ', '=', ' ', 'point', '.', 'getArgs', '(', ')', ';', '\n', '\t\t', 'String', '[', ']', ' ', 'params', ' ', '=', ' ', 'DISCOVERER', '.', 'getParameterNames', '(', 'getMethod', '(', 'point', ')', ')', ';', '\n', '\t\t', 'StandardEvaluationContext', ' ', 'context', ' ', '=', ' ', 'new', ' ', 'StandardEvaluationContext', '(', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'int', ' ', 'len', ' ', '=', ' ', '0', ';', ' ', 'len', ' ', '<', ' ', 'params', '.', 'length', ';', ' ', 'len', '+', '+', ')', ' ', '{', '\n', '\t\t\t', 'context', '.', 'setVariable', '(', 'params', '[', 'len', ']', ',', ' ', 'arguments', '[', 'len', ']', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Expression', ' ', 'expression', ' ', '=', ' ', 'PARSER', '.', 'parseExpression', '(', 'idempotent', '.', 'key', '(', ')', ')', ';', '\n', '\t\t', 'return', ' ', 'expression', '.', 'getValue', '(', 'context', ',', ' ', 'String', '.', 'class', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,KeyResolver.java,resolver,"	String resolver(Idempotent idempotent, JoinPoint point);

}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/edf0b1209fa99591a7d1ed4b7fc69b9ef48e9a19,"	String resolver(Idempotent idempotent, JoinPoint point);

}
","['\t', 'String', ' ', 'resolver', '(', 'Idempotent', ' ', 'idempotent', ',', ' ', 'JoinPoint', ' ', 'point', ')', ';', '\n', '\n', '}', '\n', '<END>']"
master,8003b539d853e648e0b3541a14567cdc1a91ac9d,IdempotentAspect.java,afterPointCut,"	public void afterPointCut(JoinPoint joinPoint) {
		Map<String, Object> map = THREAD_CACHE.get();
		if (CollectionUtils.isEmpty(map)) {
			return;
		}

		RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
		if (mapCache.size() == 0) {
			return;
		}

		String key = map.get(KEY).toString();
		boolean delKey = (boolean) map.get(DELKEY);

		if (delKey) {
			mapCache.fastRemove(key);
			LOGGER.info(""[idempotent]:has removed key={}"", key);
		}
		THREAD_CACHE.remove();
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/8003b539d853e648e0b3541a14567cdc1a91ac9d,"	public void afterPointCut(JoinPoint joinPoint) {
		Map<String, Object> map = THREAD_CACHE.get();
		if (CollectionUtils.isEmpty(map)) {
			return;
		}

		RMapCache<Object, Object> mapCache = redisson.getMapCache(RMAPCACHE_KEY);
		if (mapCache.size() == 0) {
			return;
		}

		String key = map.get(KEY).toString();
		boolean delKey = (boolean) map.get(DELKEY);

		if (delKey) {
			mapCache.fastRemove(key);
			LOGGER.info(""[idempotent]:has removed key={}"", key);
		}
		THREAD_CACHE.remove();
	}
","['\t', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', ' ', '{', '\n', '\t\t', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'THREAD_CACHE', '.', 'get', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', ' ', '{', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redisson', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', ' ', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'delKey', ')', ' ', '{', '\n', '\t\t\t', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '\t\t\t', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', ' ', 'key', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'THREAD_CACHE', '.', 'remove', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,8003b539d853e648e0b3541a14567cdc1a91ac9d,ExpressionResolver.java,resolver,"	public String resolver(Idempotent idempotent, JoinPoint point) {
		Object[] arguments = point.getArgs();
		String[] params = DISCOVERER.getParameterNames(getMethod(point));
		StandardEvaluationContext context = new StandardEvaluationContext();

		if(params != null && params.length > 0){
			for (int len = 0; len < params.length; len++) {
				context.setVariable(params[len], arguments[len]);
			}
		}

		Expression expression = PARSER.parseExpression(idempotent.key());
		return expression.getValue(context, String.class);
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/8003b539d853e648e0b3541a14567cdc1a91ac9d,"	public String resolver(Idempotent idempotent, JoinPoint point) {
		Object[] arguments = point.getArgs();
		String[] params = DISCOVERER.getParameterNames(getMethod(point));
		StandardEvaluationContext context = new StandardEvaluationContext();

		if(params != null && params.length > 0){
			for (int len = 0; len < params.length; len++) {
				context.setVariable(params[len], arguments[len]);
			}
		}

		Expression expression = PARSER.parseExpression(idempotent.key());
		return expression.getValue(context, String.class);
	}
","['\t', 'public', ' ', 'String', ' ', 'resolver', '(', 'Idempotent', ' ', 'idempotent', ',', ' ', 'JoinPoint', ' ', 'point', ')', ' ', '{', '\n', '\t\t', 'Object', '[', ']', ' ', 'arguments', ' ', '=', ' ', 'point', '.', 'getArgs', '(', ')', ';', '\n', '\t\t', 'String', '[', ']', ' ', 'params', ' ', '=', ' ', 'DISCOVERER', '.', 'getParameterNames', '(', 'getMethod', '(', 'point', ')', ')', ';', '\n', '\t\t', 'StandardEvaluationContext', ' ', 'context', ' ', '=', ' ', 'new', ' ', 'StandardEvaluationContext', '(', ')', ';', '\n', '\n', '\t\t', 'if', '(', 'params', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'params', '.', 'length', ' ', '>', ' ', '0', ')', '{', '\n', '\t\t\t', 'for', ' ', '(', 'int', ' ', 'len', ' ', '=', ' ', '0', ';', ' ', 'len', ' ', '<', ' ', 'params', '.', 'length', ';', ' ', 'len', '+', '+', ')', ' ', '{', '\n', '\t\t\t\t', 'context', '.', 'setVariable', '(', 'params', '[', 'len', ']', ',', ' ', 'arguments', '[', 'len', ']', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Expression', ' ', 'expression', ' ', '=', ' ', 'PARSER', '.', 'parseExpression', '(', 'idempotent', '.', 'key', '(', ')', ')', ';', '\n', '\t\t', 'return', ' ', 'expression', '.', 'getValue', '(', 'context', ',', ' ', 'String', '.', 'class', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,1d8daed8a2704876a8300ef436a402becef07de1,ExpressionResolver.java,resolver,"	public String resolver(Idempotent idempotent, JoinPoint point) {
		Object[] arguments = point.getArgs();
		String[] params = DISCOVERER.getParameterNames(getMethod(point));
		StandardEvaluationContext context = new StandardEvaluationContext();

		if (params != null && params.length > 0) {
			for (int len = 0; len < params.length; len++) {
				context.setVariable(params[len], arguments[len]);
			}
		}

		Expression expression = PARSER.parseExpression(idempotent.key());
		return expression.getValue(context, String.class);
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/1d8daed8a2704876a8300ef436a402becef07de1,"	public String resolver(Idempotent idempotent, JoinPoint point) {
		Object[] arguments = point.getArgs();
		String[] params = DISCOVERER.getParameterNames(getMethod(point));
		StandardEvaluationContext context = new StandardEvaluationContext();

		if (params != null && params.length > 0) {
			for (int len = 0; len < params.length; len++) {
				context.setVariable(params[len], arguments[len]);
			}
		}

		Expression expression = PARSER.parseExpression(idempotent.key());
		return expression.getValue(context, String.class);
	}
","['\t', 'public', ' ', 'String', ' ', 'resolver', '(', 'Idempotent', ' ', 'idempotent', ',', ' ', 'JoinPoint', ' ', 'point', ')', ' ', '{', '\n', '\t\t', 'Object', '[', ']', ' ', 'arguments', ' ', '=', ' ', 'point', '.', 'getArgs', '(', ')', ';', '\n', '\t\t', 'String', '[', ']', ' ', 'params', ' ', '=', ' ', 'DISCOVERER', '.', 'getParameterNames', '(', 'getMethod', '(', 'point', ')', ')', ';', '\n', '\t\t', 'StandardEvaluationContext', ' ', 'context', ' ', '=', ' ', 'new', ' ', 'StandardEvaluationContext', '(', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'params', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'params', '.', 'length', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'for', ' ', '(', 'int', ' ', 'len', ' ', '=', ' ', '0', ';', ' ', 'len', ' ', '<', ' ', 'params', '.', 'length', ';', ' ', 'len', '+', '+', ')', ' ', '{', '\n', '\t\t\t\t', 'context', '.', 'setVariable', '(', 'params', '[', 'len', ']', ',', ' ', 'arguments', '[', 'len', ']', ')', ';', '\n', '\t\t\t', '}', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'Expression', ' ', 'expression', ' ', '=', ' ', 'PARSER', '.', 'parseExpression', '(', 'idempotent', '.', 'key', '(', ')', ')', ';', '\n', '\t\t', 'return', ' ', 'expression', '.', 'getValue', '(', 'context', ',', ' ', 'String', '.', 'class', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,1d8daed8a2704876a8300ef436a402becef07de1,DemoController.java,get,"	public String get(String key) throws Exception {
		Thread.sleep(2000L);
		return ""success"";
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/1d8daed8a2704876a8300ef436a402becef07de1,"	public String get(String key) throws Exception {
		Thread.sleep(2000L);
		return ""success"";
	}
","['\t', 'public', ' ', 'String', ' ', 'get', '(', 'String', ' ', 'key', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\t\t', 'Thread', '.', 'sleep', '(', '2000L', ')', ';', '\n', '\t\t', 'return', ' ', '""', 'success', '""', ';', '\n', '\t', '}', '\n', '<END>']"
master,1d8daed8a2704876a8300ef436a402becef07de1,DemoControllerTests.java,getOneThreadResutTest,"	void getOneThreadResutTest() throws Exception {
		mockMvc.perform(get(""/get?key=1"")).andExpect(status().isOk()).andReturn();
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/1d8daed8a2704876a8300ef436a402becef07de1,"	void getOneThreadResutTest() throws Exception {
		mockMvc.perform(get(""/get?key=1"")).andExpect(status().isOk()).andReturn();
	}
","['\t', 'void', ' ', 'getOneThreadResutTest', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\t\t', 'mockMvc', '.', 'perform', '(', 'get', '(', '""', '/get?key=1', '""', ')', ')', '.', 'andExpect', '(', 'status', '(', ')', '.', 'isOk', '(', ')', ')', '.', 'andReturn', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,71428c66f4088dd4815ecc9ee64d7764ff519b99,DemoController.java,noKey,"	public String noKey() throws Exception {
		Thread.sleep(2000L);
		return ""success"";
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/71428c66f4088dd4815ecc9ee64d7764ff519b99,"	public String noKey() throws Exception {
		Thread.sleep(2000L);
		return ""success"";
	}
","['\t', 'public', ' ', 'String', ' ', 'noKey', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\t\t', 'Thread', '.', 'sleep', '(', '2000L', ')', ';', '\n', '\t\t', 'return', ' ', '""', 'success', '""', ';', '\n', '\t', '}', '\n', '<END>']"
master,b0ad5fde5d43716138159291a52f495cf905d0b2,IdempotentAspect.java,afterPointCut,"	public void afterPointCut(JoinPoint joinPoint) {
		Map<String, Object> map = THREAD_CACHE.get();
		if (CollectionUtils.isEmpty(map)) {
			return;
		}

		RMapCache<Object, Object> mapCache = redissonClient.getMapCache(RMAPCACHE_KEY);
		if (mapCache.size() == 0) {
			return;
		}

		String key = map.get(KEY).toString();
		boolean delKey = (boolean) map.get(DELKEY);

		if (delKey) {
			mapCache.fastRemove(key);
			LOGGER.info(""[idempotent]:has removed key={}"", key);
		}
		THREAD_CACHE.remove();
	}",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/b0ad5fde5d43716138159291a52f495cf905d0b2,"	public void afterPointCut(JoinPoint joinPoint) {
		Map<String, Object> map = THREAD_CACHE.get();
		if (CollectionUtils.isEmpty(map)) {
			return;
		}

		RMapCache<Object, Object> mapCache = redissonClient.getMapCache(RMAPCACHE_KEY);
		if (mapCache.size() == 0) {
			return;
		}

		String key = map.get(KEY).toString();
		boolean delKey = (boolean) map.get(DELKEY);

		if (delKey) {
			mapCache.fastRemove(key);
			LOGGER.info(""[idempotent]:has removed key={}"", key);
		}
		THREAD_CACHE.remove();
	}
","['\t', 'public', ' ', 'void', ' ', 'afterPointCut', '(', 'JoinPoint', ' ', 'joinPoint', ')', ' ', '{', '\n', '\t\t', 'Map', '<', 'String', ',', ' ', 'Object', '>', ' ', 'map', ' ', '=', ' ', 'THREAD_CACHE', '.', 'get', '(', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'CollectionUtils', '.', 'isEmpty', '(', 'map', ')', ')', ' ', '{', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'RMapCache', '<', 'Object', ',', ' ', 'Object', '>', ' ', 'mapCache', ' ', '=', ' ', 'redissonClient', '.', 'getMapCache', '(', 'RMAPCACHE_KEY', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'mapCache', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '\t\t\t', 'return', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'String', ' ', 'key', ' ', '=', ' ', 'map', '.', 'get', '(', 'KEY', ')', '.', 'toString', '(', ')', ';', '\n', '\t\t', 'boolean', ' ', 'delKey', ' ', '=', ' ', '(', 'boolean', ')', ' ', 'map', '.', 'get', '(', 'DELKEY', ')', ';', '\n', '\n', '\t\t', 'if', ' ', '(', 'delKey', ')', ' ', '{', '\n', '\t\t\t', 'mapCache', '.', 'fastRemove', '(', 'key', ')', ';', '\n', '\t\t\t', 'LOGGER', '.', 'info', '(', '""', '[idempotent]:has removed key={}', '""', ',', ' ', 'key', ')', ';', '\n', '\t\t', '}', '\n', '\t\t', 'THREAD_CACHE', '.', 'remove', '(', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,9e44741867bc94d9ab33ff48210edf2f558b59eb,ExpressionResolverTest.java,testParameterNameDiscoverer,"    public void testParameterNameDiscoverer() throws Exception{
        String[] parameterNames = DISCOVERER.getParameterNames(DemoController.class.getDeclaredMethod(""get"",String.class));

        for (String parameterName : parameterNames) {
            System.out.println(parameterName);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/9e44741867bc94d9ab33ff48210edf2f558b59eb,"    public void testParameterNameDiscoverer() throws Exception{
        String[] parameterNames = DISCOVERER.getParameterNames(DemoController.class.getDeclaredMethod(""get"",String.class));

        for (String parameterName : parameterNames) {
            System.out.println(parameterName);
","['    ', 'public', ' ', 'void', ' ', 'testParameterNameDiscoverer', '(', ')', ' ', 'throws', ' ', 'Exception', '{', '\n', '        ', 'String', '[', ']', ' ', 'parameterNames', ' ', '=', ' ', 'DISCOVERER', '.', 'getParameterNames', '(', 'DemoController', '.', 'class', '.', 'getDeclaredMethod', '(', '""', 'get', '""', ',', 'String', '.', 'class', ')', ')', ';', '\n', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'parameterName', ' ', ':', ' ', 'parameterNames', ')', ' ', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', 'parameterName', ')', ';', '\n', '<END>']"
master,e0fcffad3a372a03018a8afe33140667c713c096,ExpressionResolverTest.java,testParameterNameDiscoverer,"	public void testParameterNameDiscoverer() throws Exception {
		String[] parameterNames = DISCOVERER
				.getParameterNames(DemoController.class.getDeclaredMethod(""get"", String.class));

		for (String parameterName : parameterNames) {
			System.out.println(parameterName);",https://www.github.com/pig-mesh/idempotent-spring-boot-starter/commit/e0fcffad3a372a03018a8afe33140667c713c096,"	public void testParameterNameDiscoverer() throws Exception {
		String[] parameterNames = DISCOVERER
				.getParameterNames(DemoController.class.getDeclaredMethod(""get"", String.class));

		for (String parameterName : parameterNames) {
			System.out.println(parameterName);
","['\t', 'public', ' ', 'void', ' ', 'testParameterNameDiscoverer', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '\t\t', 'String', '[', ']', ' ', 'parameterNames', ' ', '=', ' ', 'DISCOVERER', '\n', '\t\t\t\t', '.', 'getParameterNames', '(', 'DemoController', '.', 'class', '.', 'getDeclaredMethod', '(', '""', 'get', '""', ',', ' ', 'String', '.', 'class', ')', ')', ';', '\n', '\n', '\t\t', 'for', ' ', '(', 'String', ' ', 'parameterName', ' ', ':', ' ', 'parameterNames', ')', ' ', '{', '\n', '\t\t\t', 'System', '.', 'out', '.', 'println', '(', 'parameterName', ')', ';', '\n', '<END>']"
