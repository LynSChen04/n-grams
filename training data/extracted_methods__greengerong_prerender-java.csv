Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
    }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'filterConfig', ' ', '=', ' ', 'filterConfig', ';', '\n', '    ', '}', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,getPrerenderedPageResponse,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(request.getRequestURI());
        final HttpClient httpClient = new HttpClient();
        final GetMethod getMethod = new GetMethod(apiUrl);
        setConfig(httpClient);
        setHttpHeader(getMethod);
        final int code = httpClient.executeMethod(getMethod);
        String body = new String(getMethod.getResponseBodyAsString().getBytes(""utf-8""));
        return new ResponseResult(code, body);
    }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(request.getRequestURI());
        final HttpClient httpClient = new HttpClient();
        final GetMethod getMethod = new GetMethod(apiUrl);
        setConfig(httpClient);
        setHttpHeader(getMethod);
        final int code = httpClient.executeMethod(getMethod);
        String body = new String(getMethod.getResponseBodyAsString().getBytes(""utf-8""));
        return new ResponseResult(code, body);
    }
","['    ', 'private', ' ', 'ResponseResult', ' ', 'getPrerenderedPageResponse', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'apiUrl', ' ', '=', ' ', 'getApiUrl', '(', 'request', '.', 'getRequestURI', '(', ')', ')', ';', '\n', '        ', 'final', ' ', 'HttpClient', ' ', 'httpClient', ' ', '=', ' ', 'new', ' ', 'HttpClient', '(', ')', ';', '\n', '        ', 'final', ' ', 'GetMethod', ' ', 'getMethod', ' ', '=', ' ', 'new', ' ', 'GetMethod', '(', 'apiUrl', ')', ';', '\n', '        ', 'setConfig', '(', 'httpClient', ')', ';', '\n', '        ', 'setHttpHeader', '(', 'getMethod', ')', ';', '\n', '        ', 'final', ' ', 'int', ' ', 'code', ' ', '=', ' ', 'httpClient', '.', 'executeMethod', '(', 'getMethod', ')', ';', '\n', '        ', 'String', ' ', 'body', ' ', '=', ' ', 'new', ' ', 'String', '(', 'getMethod', '.', 'getResponseBodyAsString', '(', ')', '.', 'getBytes', '(', '""', 'utf-8', '""', ')', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ResponseResult', '(', 'code', ',', ' ', 'body', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,shouldShowPrerenderedPage,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String useAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURI();
        final String referer = request.getHeader(""Referer"");

        if (hasEscapedFragment(request)) {
            return true;
        }

        if (StringUtils.isBlank(useAgent) || !isGetMethod(request.getMethod()) || !isInSearchUserAgent(useAgent) || isInResources(url)
                || !isInWhiteList(url) || isInBlackList(url, referer)) {
            return false;
        }

        return true;
    }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String useAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURI();
        final String referer = request.getHeader(""Referer"");

        if (hasEscapedFragment(request)) {
            return true;
        }

        if (StringUtils.isBlank(useAgent) || !isGetMethod(request.getMethod()) || !isInSearchUserAgent(useAgent) || isInResources(url)
                || !isInWhiteList(url) || isInBlackList(url, referer)) {
            return false;
        }

        return true;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'shouldShowPrerenderedPage', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'useAgent', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURI', '(', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'referer', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'Referer', '""', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'hasEscapedFragment', '(', 'request', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isBlank', '(', 'useAgent', ')', ' ', '|', '|', ' ', '!', 'isGetMethod', '(', 'request', '.', 'getMethod', '(', ')', ')', ' ', '|', '|', ' ', '!', 'isInSearchUserAgent', '(', 'useAgent', ')', ' ', '|', '|', ' ', 'isInResources', '(', 'url', ')', '\n', '                ', '|', '|', ' ', '!', 'isInWhiteList', '(', 'url', ')', ' ', '|', '|', ' ', 'isInBlackList', '(', 'url', ',', ' ', 'referer', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,hasEscapedFragment,"    private boolean hasEscapedFragment(HttpServletRequest request) {
        return StringUtils.isBlank(request.getParameter(""_escaped_fragment_""));
    }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"    private boolean hasEscapedFragment(HttpServletRequest request) {
        return StringUtils.isBlank(request.getParameter(""_escaped_fragment_""));
    }
","['    ', 'private', ' ', 'boolean', ' ', 'hasEscapedFragment', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', '{', '\n', '        ', 'return', ' ', 'StringUtils', '.', 'isBlank', '(', 'request', '.', 'getParameter', '(', '""', '_escaped_fragment_', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,isGetMethod,"    private boolean isGetMethod(String method) {
        return method.equalsIgnoreCase(""GET"");
    }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"    private boolean isGetMethod(String method) {
        return method.equalsIgnoreCase(""GET"");
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isGetMethod', '(', 'String', ' ', 'method', ')', ' ', '{', '\n', '        ', 'return', ' ', 'method', '.', 'equalsIgnoreCase', '(', '""', 'GET', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,isInBlackList,"    private boolean isInBlackList(final String url, final String referer) {
        final List<String> blacklist = getBlacklist();

        return blacklist != null && from(blacklist).anyMatch(new Predicate<String>() {
            @Override",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"    private boolean isInBlackList(final String url, final String referer) {
        final List<String> blacklist = getBlacklist();

        return blacklist != null && from(blacklist).anyMatch(new Predicate<String>() {
            @Override
","['    ', 'private', ' ', 'boolean', ' ', 'isInBlackList', '(', 'final', ' ', 'String', ' ', 'url', ',', ' ', 'final', ' ', 'String', ' ', 'referer', ')', ' ', '{', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'blacklist', ' ', '=', ' ', 'getBlacklist', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 'blacklist', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'from', '(', 'blacklist', ')', '.', 'anyMatch', '(', 'new', ' ', 'Predicate', '<', 'String', '>', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,apply,"            public boolean apply(String regex) {
                final Pattern pattern = Pattern.compile(regex);
                return pattern.matcher(url).matches() ||
                        (!StringUtils.isBlank(referer) && pattern.matcher(referer).matches());",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"            public boolean apply(String regex) {
                final Pattern pattern = Pattern.compile(regex);
                return pattern.matcher(url).matches() ||
                        (!StringUtils.isBlank(referer) && pattern.matcher(referer).matches());
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'regex', ')', ' ', '{', '\n', '                ', 'final', ' ', 'Pattern', ' ', 'pattern', ' ', '=', ' ', 'Pattern', '.', 'compile', '(', 'regex', ')', ';', '\n', '                ', 'return', ' ', 'pattern', '.', 'matcher', '(', 'url', ')', '.', 'matches', '(', ')', ' ', '|', '|', '\n', '                        ', '(', '!', 'StringUtils', '.', 'isBlank', '(', 'referer', ')', ' ', '&', '&', ' ', 'pattern', '.', 'matcher', '(', 'referer', ')', '.', 'matches', '(', ')', ')', ';', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,isInWhiteList,"    private boolean isInWhiteList(final String url) {
        final List<String> whitelist = getWhitelist();
        return whitelist == null || from(whitelist).anyMatch(new Predicate<String>() {
            @Override",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"    private boolean isInWhiteList(final String url) {
        final List<String> whitelist = getWhitelist();
        return whitelist == null || from(whitelist).anyMatch(new Predicate<String>() {
            @Override
","['    ', 'private', ' ', 'boolean', ' ', 'isInWhiteList', '(', 'final', ' ', 'String', ' ', 'url', ')', ' ', '{', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'whitelist', ' ', '=', ' ', 'getWhitelist', '(', ')', ';', '\n', '        ', 'return', ' ', 'whitelist', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'from', '(', 'whitelist', ')', '.', 'anyMatch', '(', 'new', ' ', 'Predicate', '<', 'String', '>', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,apply,"            public boolean apply(String regex) {
                return Pattern.compile(regex).matcher(url).matches();
            }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"            public boolean apply(String regex) {
                return Pattern.compile(regex).matcher(url).matches();
            }
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'regex', ')', ' ', '{', '\n', '                ', 'return', ' ', 'Pattern', '.', 'compile', '(', 'regex', ')', '.', 'matcher', '(', 'url', ')', '.', 'matches', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,apply,"            public boolean apply(String item) {
                return url.contains(item.toLowerCase());
            }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"            public boolean apply(String item) {
                return url.contains(item.toLowerCase());
            }
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'item', ')', ' ', '{', '\n', '                ', 'return', ' ', 'url', '.', 'contains', '(', 'item', '.', 'toLowerCase', '(', ')', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,4f792e32636f5b5c974b723dd0ba5be922251085,PreRenderSEOFilter.java,apply,"            public boolean apply(String item) {
                return item.equalsIgnoreCase(useAgent);
            }",https://www.github.com/greengerong/prerender-java/commit/4f792e32636f5b5c974b723dd0ba5be922251085,"            public boolean apply(String item) {
                return item.equalsIgnoreCase(useAgent);
            }
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'item', ')', ' ', '{', '\n', '                ', 'return', ' ', 'item', '.', 'equalsIgnoreCase', '(', 'useAgent', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,2887c6d938e8c3d4b377608021be70517a4203ad,PreRenderSEOFilter.java,shouldShowPrerenderedPage,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String useAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURI();
        final String referer = request.getHeader(""Referer"");

        if (StringUtils.isBlank(useAgent)) {
            return false;
        }

        if (hasEscapedFragment(request)) {
            return true;
        }
        if (!isInSearchUserAgent(useAgent)) {
            return false;
        }

        if (isInResources(url)) {
            return false;
        }

        final List<String> whiteList = getWhitelist();
        if (whiteList != null && !isInWhiteList(url, whiteList)) {
            return false;
        }

        final List<String> blacklist = getBlacklist();
        if (blacklist != null && isInBlackList(url, referer, blacklist)) {
            return false;
        }

        return true;
    }",https://www.github.com/greengerong/prerender-java/commit/2887c6d938e8c3d4b377608021be70517a4203ad,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String useAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURI();
        final String referer = request.getHeader(""Referer"");

        if (StringUtils.isBlank(useAgent)) {
            return false;
        }

        if (hasEscapedFragment(request)) {
            return true;
        }
        if (!isInSearchUserAgent(useAgent)) {
            return false;
        }

        if (isInResources(url)) {
            return false;
        }

        final List<String> whiteList = getWhitelist();
        if (whiteList != null && !isInWhiteList(url, whiteList)) {
            return false;
        }

        final List<String> blacklist = getBlacklist();
        if (blacklist != null && isInBlackList(url, referer, blacklist)) {
            return false;
        }

        return true;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'shouldShowPrerenderedPage', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'useAgent', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURI', '(', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'referer', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'Referer', '""', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isBlank', '(', 'useAgent', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'hasEscapedFragment', '(', 'request', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', '!', 'isInSearchUserAgent', '(', 'useAgent', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'isInResources', '(', 'url', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'whiteList', ' ', '=', ' ', 'getWhitelist', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'whiteList', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'isInWhiteList', '(', 'url', ',', ' ', 'whiteList', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'blacklist', ' ', '=', ' ', 'getBlacklist', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'blacklist', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'isInBlackList', '(', 'url', ',', ' ', 'referer', ',', ' ', 'blacklist', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n', '<END>']"
master,2887c6d938e8c3d4b377608021be70517a4203ad,PreRenderSEOFilter.java,isInBlackList,"    private boolean isInBlackList(final String url, final String referer, List<String> blacklist) {
        return from(blacklist).anyMatch(new Predicate<String>() {
            @Override",https://www.github.com/greengerong/prerender-java/commit/2887c6d938e8c3d4b377608021be70517a4203ad,"    private boolean isInBlackList(final String url, final String referer, List<String> blacklist) {
        return from(blacklist).anyMatch(new Predicate<String>() {
            @Override
","['    ', 'private', ' ', 'boolean', ' ', 'isInBlackList', '(', 'final', ' ', 'String', ' ', 'url', ',', ' ', 'final', ' ', 'String', ' ', 'referer', ',', ' ', 'List', '<', 'String', '>', ' ', 'blacklist', ')', ' ', '{', '\n', '        ', 'return', ' ', 'from', '(', 'blacklist', ')', '.', 'anyMatch', '(', 'new', ' ', 'Predicate', '<', 'String', '>', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,2887c6d938e8c3d4b377608021be70517a4203ad,PreRenderSEOFilter.java,isInWhiteList,"    private boolean isInWhiteList(final String url, List<String> whitelist) {
        return from(whitelist).anyMatch(new Predicate<String>() {
            @Override",https://www.github.com/greengerong/prerender-java/commit/2887c6d938e8c3d4b377608021be70517a4203ad,"    private boolean isInWhiteList(final String url, List<String> whitelist) {
        return from(whitelist).anyMatch(new Predicate<String>() {
            @Override
","['    ', 'private', ' ', 'boolean', ' ', 'isInWhiteList', '(', 'final', ' ', 'String', ' ', 'url', ',', ' ', 'List', '<', 'String', '>', ' ', 'whitelist', ')', ' ', '{', '\n', '        ', 'return', ' ', 'from', '(', 'whitelist', ')', '.', 'anyMatch', '(', 'new', ' ', 'Predicate', '<', 'String', '>', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,2a918c16e2424150ef64ee9908d2ca9293e9b2a4,PreRenderSEOFilter.java,getPrerenderedPageResponse,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        logger.info(String.format(""SEO request %s ......."", apiUrl));
        final HttpClient httpClient = new HttpClient();
        final GetMethod getMethod = new GetMethod(apiUrl);
        setConfig(httpClient);
        setHttpHeader(getMethod);
        final int code = httpClient.executeMethod(getMethod);
        String body = new String(getMethod.getResponseBodyAsString().getBytes(""utf-8""));
        return new ResponseResult(code, body);
    }",https://www.github.com/greengerong/prerender-java/commit/2a918c16e2424150ef64ee9908d2ca9293e9b2a4,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        logger.info(String.format(""SEO request %s ......."", apiUrl));
        final HttpClient httpClient = new HttpClient();
        final GetMethod getMethod = new GetMethod(apiUrl);
        setConfig(httpClient);
        setHttpHeader(getMethod);
        final int code = httpClient.executeMethod(getMethod);
        String body = new String(getMethod.getResponseBodyAsString().getBytes(""utf-8""));
        return new ResponseResult(code, body);
    }
","['    ', 'private', ' ', 'ResponseResult', ' ', 'getPrerenderedPageResponse', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'apiUrl', ' ', '=', ' ', 'getApiUrl', '(', 'getFullUrl', '(', 'request', ')', ')', ';', '\n', '        ', 'logger', '.', 'info', '(', 'String', '.', 'format', '(', '""', 'SEO request %s .......', '""', ',', ' ', 'apiUrl', ')', ')', ';', '\n', '        ', 'final', ' ', 'HttpClient', ' ', 'httpClient', ' ', '=', ' ', 'new', ' ', 'HttpClient', '(', ')', ';', '\n', '        ', 'final', ' ', 'GetMethod', ' ', 'getMethod', ' ', '=', ' ', 'new', ' ', 'GetMethod', '(', 'apiUrl', ')', ';', '\n', '        ', 'setConfig', '(', 'httpClient', ')', ';', '\n', '        ', 'setHttpHeader', '(', 'getMethod', ')', ';', '\n', '        ', 'final', ' ', 'int', ' ', 'code', ' ', '=', ' ', 'httpClient', '.', 'executeMethod', '(', 'getMethod', ')', ';', '\n', '        ', 'String', ' ', 'body', ' ', '=', ' ', 'new', ' ', 'String', '(', 'getMethod', '.', 'getResponseBodyAsString', '(', ')', '.', 'getBytes', '(', '""', 'utf-8', '""', ')', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ResponseResult', '(', 'code', ',', ' ', 'body', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2a918c16e2424150ef64ee9908d2ca9293e9b2a4,PreRenderSEOFilter.java,shouldShowPrerenderedPage,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String useAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURL().toString();
        final String referer = request.getHeader(""Referer"");

        if (hasEscapedFragment(request)) {
            return true;
        }

        if (StringUtils.isBlank(useAgent)) {
            return false;
        }

        if (!isInSearchUserAgent(useAgent)) {
            return false;
        }


        if (isInResources(url)) {
            return false;
        }

        final List<String> whiteList = getWhitelist();
        if (whiteList != null && !isInWhiteList(url, whiteList)) {
            return false;
        }

        final List<String> blacklist = getBlacklist();
        if (blacklist != null && isInBlackList(url, referer, blacklist)) {
            return false;
        }

        return true;
    }",https://www.github.com/greengerong/prerender-java/commit/2a918c16e2424150ef64ee9908d2ca9293e9b2a4,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String useAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURL().toString();
        final String referer = request.getHeader(""Referer"");

        if (hasEscapedFragment(request)) {
            return true;
        }

        if (StringUtils.isBlank(useAgent)) {
            return false;
        }

        if (!isInSearchUserAgent(useAgent)) {
            return false;
        }


        if (isInResources(url)) {
            return false;
        }

        final List<String> whiteList = getWhitelist();
        if (whiteList != null && !isInWhiteList(url, whiteList)) {
            return false;
        }

        final List<String> blacklist = getBlacklist();
        if (blacklist != null && isInBlackList(url, referer, blacklist)) {
            return false;
        }

        return true;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'shouldShowPrerenderedPage', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'useAgent', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'referer', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'Referer', '""', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'hasEscapedFragment', '(', 'request', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isBlank', '(', 'useAgent', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'isInSearchUserAgent', '(', 'useAgent', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'if', ' ', '(', 'isInResources', '(', 'url', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'whiteList', ' ', '=', ' ', 'getWhitelist', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'whiteList', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'isInWhiteList', '(', 'url', ',', ' ', 'whiteList', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'blacklist', ' ', '=', ' ', 'getBlacklist', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'blacklist', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'isInBlackList', '(', 'url', ',', ' ', 'referer', ',', ' ', 'blacklist', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n', '<END>']"
master,2a918c16e2424150ef64ee9908d2ca9293e9b2a4,PreRenderSEOFilter.java,hasEscapedFragment,"    private boolean hasEscapedFragment(HttpServletRequest request) {
        return request.getParameterMap().containsKey(""_escaped_fragment_"");
    }",https://www.github.com/greengerong/prerender-java/commit/2a918c16e2424150ef64ee9908d2ca9293e9b2a4,"    private boolean hasEscapedFragment(HttpServletRequest request) {
        return request.getParameterMap().containsKey(""_escaped_fragment_"");
    }
","['    ', 'private', ' ', 'boolean', ' ', 'hasEscapedFragment', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', '{', '\n', '        ', 'return', ' ', 'request', '.', 'getParameterMap', '(', ')', '.', 'containsKey', '(', '""', '_escaped_fragment_', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b1535364299d6b2d0b5ea5424e6da452fc86e299,PreRenderSEOFilter.java,getPrerenderedPageResponse,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        final HttpClient httpClient = new HttpClient();
        final GetMethod getMethod = new GetMethod(apiUrl);
        setConfig(httpClient);
        setHttpHeader(getMethod);
        final int code = httpClient.executeMethod(getMethod);
        final String responseBody = getMethod.getResponseBodyAsString();
        String body = new String(responseBody.getBytes(""utf-8""));
        return new ResponseResult(code, body);
    }",https://www.github.com/greengerong/prerender-java/commit/b1535364299d6b2d0b5ea5424e6da452fc86e299,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        final HttpClient httpClient = new HttpClient();
        final GetMethod getMethod = new GetMethod(apiUrl);
        setConfig(httpClient);
        setHttpHeader(getMethod);
        final int code = httpClient.executeMethod(getMethod);
        final String responseBody = getMethod.getResponseBodyAsString();
        String body = new String(responseBody.getBytes(""utf-8""));
        return new ResponseResult(code, body);
    }
","['    ', 'private', ' ', 'ResponseResult', ' ', 'getPrerenderedPageResponse', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'apiUrl', ' ', '=', ' ', 'getApiUrl', '(', 'getFullUrl', '(', 'request', ')', ')', ';', '\n', '        ', 'final', ' ', 'HttpClient', ' ', 'httpClient', ' ', '=', ' ', 'new', ' ', 'HttpClient', '(', ')', ';', '\n', '        ', 'final', ' ', 'GetMethod', ' ', 'getMethod', ' ', '=', ' ', 'new', ' ', 'GetMethod', '(', 'apiUrl', ')', ';', '\n', '        ', 'setConfig', '(', 'httpClient', ')', ';', '\n', '        ', 'setHttpHeader', '(', 'getMethod', ')', ';', '\n', '        ', 'final', ' ', 'int', ' ', 'code', ' ', '=', ' ', 'httpClient', '.', 'executeMethod', '(', 'getMethod', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'responseBody', ' ', '=', ' ', 'getMethod', '.', 'getResponseBodyAsString', '(', ')', ';', '\n', '        ', 'String', ' ', 'body', ' ', '=', ' ', 'new', ' ', 'String', '(', 'responseBody', '.', 'getBytes', '(', '""', 'utf-8', '""', ')', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ResponseResult', '(', 'code', ',', ' ', 'body', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0b8af9df7a3119647e9bc7ae4626af22146894d0,PreRenderSEOFilter.java,apply,"            public boolean apply(String item) {
                return useAgent.toLowerCase().indexOf(item.toLowerCase()) >= 0;
            }",https://www.github.com/greengerong/prerender-java/commit/0b8af9df7a3119647e9bc7ae4626af22146894d0,"            public boolean apply(String item) {
                return useAgent.toLowerCase().indexOf(item.toLowerCase()) >= 0;
            }
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'item', ')', ' ', '{', '\n', '                ', 'return', ' ', 'useAgent', '.', 'toLowerCase', '(', ')', '.', 'indexOf', '(', 'item', '.', 'toLowerCase', '(', ')', ')', ' ', '>', '=', ' ', '0', ';', '\n', '            ', '}', '\n', '<END>']"
master,049d2a4cde37f9dd56657f8b590a35239744bc68,PreRenderSEOFilter.java,shouldShowPrerenderedPage,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String userAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURL().toString();
        final String referer = request.getHeader(""Referer"");

        if (hasEscapedFragment(request)) {
            return true;
        }

        if (StringUtils.isBlank(userAgent)) {
            return false;
        }

        if (!isInSearchUserAgent(userAgent)) {
            return false;
        }


        if (isInResources(url)) {
            return false;
        }

        final List<String> whiteList = getWhitelist();
        if (whiteList != null && !isInWhiteList(url, whiteList)) {
            return false;
        }

        final List<String> blacklist = getBlacklist();
        if (blacklist != null && isInBlackList(url, referer, blacklist)) {
            return false;
        }

        return true;
    }",https://www.github.com/greengerong/prerender-java/commit/049d2a4cde37f9dd56657f8b590a35239744bc68,"    private boolean shouldShowPrerenderedPage(HttpServletRequest request) throws URISyntaxException {
        final String userAgent = request.getHeader(""User-Agent"");
        final String url = request.getRequestURL().toString();
        final String referer = request.getHeader(""Referer"");

        if (hasEscapedFragment(request)) {
            return true;
        }

        if (StringUtils.isBlank(userAgent)) {
            return false;
        }

        if (!isInSearchUserAgent(userAgent)) {
            return false;
        }


        if (isInResources(url)) {
            return false;
        }

        final List<String> whiteList = getWhitelist();
        if (whiteList != null && !isInWhiteList(url, whiteList)) {
            return false;
        }

        final List<String> blacklist = getBlacklist();
        if (blacklist != null && isInBlackList(url, referer, blacklist)) {
            return false;
        }

        return true;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'shouldShowPrerenderedPage', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'userAgent', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'url', ' ', '=', ' ', 'request', '.', 'getRequestURL', '(', ')', '.', 'toString', '(', ')', ';', '\n', '        ', 'final', ' ', 'String', ' ', 'referer', ' ', '=', ' ', 'request', '.', 'getHeader', '(', '""', 'Referer', '""', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'hasEscapedFragment', '(', 'request', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'true', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isBlank', '(', 'userAgent', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'isInSearchUserAgent', '(', 'userAgent', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '\n', '        ', 'if', ' ', '(', 'isInResources', '(', 'url', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'whiteList', ' ', '=', ' ', 'getWhitelist', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'whiteList', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', '!', 'isInWhiteList', '(', 'url', ',', ' ', 'whiteList', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'List', '<', 'String', '>', ' ', 'blacklist', ' ', '=', ' ', 'getBlacklist', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'blacklist', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'isInBlackList', '(', 'url', ',', ' ', 'referer', ',', ' ', 'blacklist', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n', '<END>']"
master,049d2a4cde37f9dd56657f8b590a35239744bc68,PreRenderSEOFilter.java,apply,"            public boolean apply(String item) {
                return userAgent.toLowerCase().indexOf(item.toLowerCase()) >= 0;
            }",https://www.github.com/greengerong/prerender-java/commit/049d2a4cde37f9dd56657f8b590a35239744bc68,"            public boolean apply(String item) {
                return userAgent.toLowerCase().indexOf(item.toLowerCase()) >= 0;
            }
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'item', ')', ' ', '{', '\n', '                ', 'return', ' ', 'userAgent', '.', 'toLowerCase', '(', ')', '.', 'indexOf', '(', 'item', '.', 'toLowerCase', '(', ')', ')', ' ', '>', '=', ' ', '0', ';', '\n', '            ', '}', '\n', '<END>']"
master,a6b237b2c93e35c332b7f50601ca3af8bf94e882,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
        
        HttpClientBuilder builder = HttpClients.custom();
        
        final String proxy = filterConfig.getInitParameter(""proxy"");
        if (StringUtils.isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(filterConfig.getInitParameter(""proxyPort""));
        	DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder = builder.setRoutePlanner(routePlanner);
        }
        
        builder = builder.setConnectionManager(new PoolingHttpClientConnectionManager());
        httpClient = builder.build();
    }",https://www.github.com/greengerong/prerender-java/commit/a6b237b2c93e35c332b7f50601ca3af8bf94e882,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
        
        HttpClientBuilder builder = HttpClients.custom();
        
        final String proxy = filterConfig.getInitParameter(""proxy"");
        if (StringUtils.isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(filterConfig.getInitParameter(""proxyPort""));
        	DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder = builder.setRoutePlanner(routePlanner);
        }
        
        builder = builder.setConnectionManager(new PoolingHttpClientConnectionManager());
        httpClient = builder.build();
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'filterConfig', ' ', '=', ' ', 'filterConfig', ';', '\n', '        ', '\n', '        ', 'HttpClientBuilder', ' ', 'builder', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', ';', '\n', '        ', '\n', '        ', 'final', ' ', 'String', ' ', 'proxy', ' ', '=', ' ', 'filterConfig', '.', 'getInitParameter', '(', '""', 'proxy', '""', ')', ';', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isNotBlank', '(', 'proxy', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'int', ' ', 'proxyPort', ' ', '=', ' ', 'Integer', '.', 'parseInt', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'proxyPort', '""', ')', ')', ';', '\n', '        \t', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'new', ' ', 'HttpHost', '(', 'proxy', ',', ' ', 'proxyPort', ')', ')', ';', '\n', '            ', 'builder', ' ', '=', ' ', 'builder', '.', 'setRoutePlanner', '(', 'routePlanner', ')', ';', '\n', '        ', '}', '\n', '        ', '\n', '        ', 'builder', ' ', '=', ' ', 'builder', '.', 'setConnectionManager', '(', 'new', ' ', 'PoolingHttpClientConnectionManager', '(', ')', ')', ';', '\n', '        ', 'httpClient', ' ', '=', ' ', 'builder', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,a6b237b2c93e35c332b7f50601ca3af8bf94e882,PreRenderSEOFilter.java,getPrerenderedPageResponse,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        final HttpGet getMethod = new HttpGet(apiUrl);
        setHttpHeader(getMethod);
        CloseableHttpResponse response = httpClient.execute(getMethod);
        try {
            final int code = response.getStatusLine().getStatusCode();",https://www.github.com/greengerong/prerender-java/commit/a6b237b2c93e35c332b7f50601ca3af8bf94e882,"    private ResponseResult getPrerenderedPageResponse(HttpServletRequest request) throws IOException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        final HttpGet getMethod = new HttpGet(apiUrl);
        setHttpHeader(getMethod);
        CloseableHttpResponse response = httpClient.execute(getMethod);
        try {
            final int code = response.getStatusLine().getStatusCode();
","['    ', 'private', ' ', 'ResponseResult', ' ', 'getPrerenderedPageResponse', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'apiUrl', ' ', '=', ' ', 'getApiUrl', '(', 'getFullUrl', '(', 'request', ')', ')', ';', '\n', '        ', 'final', ' ', 'HttpGet', ' ', 'getMethod', ' ', '=', ' ', 'new', ' ', 'HttpGet', '(', 'apiUrl', ')', ';', '\n', '        ', 'setHttpHeader', '(', 'getMethod', ')', ';', '\n', '        ', 'CloseableHttpResponse', ' ', 'response', ' ', '=', ' ', 'httpClient', '.', 'execute', '(', 'getMethod', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'int', ' ', 'code', ' ', '=', ' ', 'response', '.', 'getStatusLine', '(', ')', '.', 'getStatusCode', '(', ')', ';', '\n', '<END>']"
master,e9bbf5f526e41dcc9f32668c718caa744cea27b7,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
            	if (proxyPrerenderedPageResponse(request, response)) {
            		return;
            	}
            }
        } catch (Exception e) {
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/e9bbf5f526e41dcc9f32668c718caa744cea27b7,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
            	if (proxyPrerenderedPageResponse(request, response)) {
            		return;
            	}
            }
        } catch (Exception e) {
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ';', '\n', '            ', 'final', ' ', 'HttpServletResponse', ' ', 'response', ' ', '=', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ';', '\n', '            ', 'if', ' ', '(', 'shouldShowPrerenderedPage', '(', 'request', ')', ')', ' ', '{', '\n', '            \t', 'if', ' ', '(', 'proxyPrerenderedPageResponse', '(', 'request', ',', ' ', 'response', ')', ')', ' ', '{', '\n', '            \t\t', 'return', ';', '\n', '            \t', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '        ', '}', '\n', '        ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,e9bbf5f526e41dcc9f32668c718caa744cea27b7,PreRenderSEOFilter.java,copyResponseEntity,"    protected void copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse) throws IOException {
    	HttpEntity entity = proxyResponse.getEntity();
    	if (entity != null) {
    		OutputStream servletOutputStream = servletResponse.getOutputStream();",https://www.github.com/greengerong/prerender-java/commit/e9bbf5f526e41dcc9f32668c718caa744cea27b7,"    protected void copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse) throws IOException {
    	HttpEntity entity = proxyResponse.getEntity();
    	if (entity != null) {
    		OutputStream servletOutputStream = servletResponse.getOutputStream();
","['    ', 'protected', ' ', 'void', ' ', 'copyResponseEntity', '(', 'HttpResponse', ' ', 'proxyResponse', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '    \t', 'HttpEntity', ' ', 'entity', ' ', '=', ' ', 'proxyResponse', '.', 'getEntity', '(', ')', ';', '\n', '    \t', 'if', ' ', '(', 'entity', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '    \t\t', 'OutputStream', ' ', 'servletOutputStream', ' ', '=', ' ', 'servletResponse', '.', 'getOutputStream', '(', ')', ';', '\n', '<END>']"
master,e9bbf5f526e41dcc9f32668c718caa744cea27b7,PreRenderSEOFilter.java,copyRequestHeaders,"    protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest) throws URISyntaxException {
      // Get an Enumeration of all of the header names sent by the client
      Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
      while (enumerationOfHeaderNames.hasMoreElements()) {
        String headerName = (String) enumerationOfHeaderNames.nextElement();",https://www.github.com/greengerong/prerender-java/commit/e9bbf5f526e41dcc9f32668c718caa744cea27b7,"    protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest) throws URISyntaxException {
      
      Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
      while (enumerationOfHeaderNames.hasMoreElements()) {
        String headerName = (String) enumerationOfHeaderNames.nextElement();
","['    ', 'protected', ' ', 'void', ' ', 'copyRequestHeaders', '(', 'HttpServletRequest', ' ', 'servletRequest', ',', ' ', 'HttpRequest', ' ', 'proxyRequest', ')', ' ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '      ', '\n', '      ', 'Enumeration', '<', '?', '>', ' ', 'enumerationOfHeaderNames', ' ', '=', ' ', 'servletRequest', '.', 'getHeaderNames', '(', ')', ';', '\n', '      ', 'while', ' ', '(', 'enumerationOfHeaderNames', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '        ', 'String', ' ', 'headerName', ' ', '=', ' ', '(', 'String', ')', ' ', 'enumerationOfHeaderNames', '.', 'nextElement', '(', ')', ';', '\n', '<END>']"
master,bedc861c01b11019d76c777a9b48fb0b4d462633,PreRenderSEOFilter.java,copyResponseEntity,"    protected void copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse) throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            OutputStream servletOutputStream = servletResponse.getOutputStream();",https://www.github.com/greengerong/prerender-java/commit/bedc861c01b11019d76c777a9b48fb0b4d462633,"    protected void copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse) throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            OutputStream servletOutputStream = servletResponse.getOutputStream();
","['    ', 'protected', ' ', 'void', ' ', 'copyResponseEntity', '(', 'HttpResponse', ' ', 'proxyResponse', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'HttpEntity', ' ', 'entity', ' ', '=', ' ', 'proxyResponse', '.', 'getEntity', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'entity', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'OutputStream', ' ', 'servletOutputStream', ' ', '=', ' ', 'servletResponse', '.', 'getOutputStream', '(', ')', ';', '\n', '<END>']"
master,bedc861c01b11019d76c777a9b48fb0b4d462633,PreRenderSEOFilter.java,closeQuietly,"    protected void closeQuietly(Closeable closeable) {
        try {
            closeable.close();",https://www.github.com/greengerong/prerender-java/commit/bedc861c01b11019d76c777a9b48fb0b4d462633,"    protected void closeQuietly(Closeable closeable) {
        try {
            closeable.close();
","['    ', 'protected', ' ', 'void', ' ', 'closeQuietly', '(', 'Closeable', ' ', 'closeable', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'closeable', '.', 'close', '(', ')', ';', '\n', '<END>']"
master,bedc861c01b11019d76c777a9b48fb0b4d462633,PreRenderSEOFilter.java,destroy,"    public void destroy() {
        filterConfig = null;
        try {
            httpClient.close();",https://www.github.com/greengerong/prerender-java/commit/bedc861c01b11019d76c777a9b48fb0b4d462633,"    public void destroy() {
        filterConfig = null;
        try {
            httpClient.close();
","['    ', 'public', ' ', 'void', ' ', 'destroy', '(', ')', ' ', '{', '\n', '        ', 'filterConfig', ' ', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'httpClient', '.', 'close', '(', ')', ';', '\n', '<END>']"
master,80073933543a2655c3f3a8aa2f81055d9bbe327d,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;

        HttpClientBuilder builder = HttpClients.custom();

        final String proxy = filterConfig.getInitParameter(""proxy"");
        if (StringUtils.isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(filterConfig.getInitParameter(""proxyPort""));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder = builder.setRoutePlanner(routePlanner);
        }

        builder = builder.setConnectionManager(new PoolingHttpClientConnectionManager());
        httpClient = builder.build();
    }",https://www.github.com/greengerong/prerender-java/commit/80073933543a2655c3f3a8aa2f81055d9bbe327d,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;

        HttpClientBuilder builder = HttpClients.custom();

        final String proxy = filterConfig.getInitParameter(""proxy"");
        if (StringUtils.isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(filterConfig.getInitParameter(""proxyPort""));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder = builder.setRoutePlanner(routePlanner);
        }

        builder = builder.setConnectionManager(new PoolingHttpClientConnectionManager());
        httpClient = builder.build();
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'filterConfig', ' ', '=', ' ', 'filterConfig', ';', '\n', '\n', '        ', 'HttpClientBuilder', ' ', 'builder', ' ', '=', ' ', 'HttpClients', '.', 'custom', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', ' ', 'proxy', ' ', '=', ' ', 'filterConfig', '.', 'getInitParameter', '(', '""', 'proxy', '""', ')', ';', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isNotBlank', '(', 'proxy', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'int', ' ', 'proxyPort', ' ', '=', ' ', 'Integer', '.', 'parseInt', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'proxyPort', '""', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'new', ' ', 'HttpHost', '(', 'proxy', ',', ' ', 'proxyPort', ')', ')', ';', '\n', '            ', 'builder', ' ', '=', ' ', 'builder', '.', 'setRoutePlanner', '(', 'routePlanner', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'builder', ' ', '=', ' ', 'builder', '.', 'setConnectionManager', '(', 'new', ' ', 'PoolingHttpClientConnectionManager', '(', ')', ')', ';', '\n', '        ', 'httpClient', ' ', '=', ' ', 'builder', '.', 'build', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,80073933543a2655c3f3a8aa2f81055d9bbe327d,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
                if (proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/80073933543a2655c3f3a8aa2f81055d9bbe327d,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
                if (proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ';', '\n', '            ', 'final', ' ', 'HttpServletResponse', ' ', 'response', ' ', '=', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ';', '\n', '            ', 'if', ' ', '(', 'shouldShowPrerenderedPage', '(', 'request', ')', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'proxyPrerenderedPageResponse', '(', 'request', ',', ' ', 'response', ')', ')', ' ', '{', '\n', '                    ', 'return', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '        ', '}', '\n', '        ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,80073933543a2655c3f3a8aa2f81055d9bbe327d,PreRenderSEOFilter.java,withPrerenderToken,"    private void withPrerenderToken(HttpRequest proxyRequest) {
        final String token = filterConfig.getInitParameter(""prerenderToken"");
        //for new version prerender with token.
        if (StringUtils.isNotBlank(token)) {
            proxyRequest.addHeader(""X-Prerender-Token"", token);",https://www.github.com/greengerong/prerender-java/commit/80073933543a2655c3f3a8aa2f81055d9bbe327d,"    private void withPrerenderToken(HttpRequest proxyRequest) {
        final String token = filterConfig.getInitParameter(""prerenderToken"");
        
        if (StringUtils.isNotBlank(token)) {
            proxyRequest.addHeader(""X-Prerender-Token"", token);
","['    ', 'private', ' ', 'void', ' ', 'withPrerenderToken', '(', 'HttpRequest', ' ', 'proxyRequest', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'token', ' ', '=', ' ', 'filterConfig', '.', 'getInitParameter', '(', '""', 'prerenderToken', '""', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isNotBlank', '(', 'token', ')', ')', ' ', '{', '\n', '            ', 'proxyRequest', '.', 'addHeader', '(', '""', 'X-Prerender-Token', '""', ',', ' ', 'token', ')', ';', '\n', '<END>']"
master,80073933543a2655c3f3a8aa2f81055d9bbe327d,PreRenderSEOFilter.java,copyRequestHeaders,"    protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest) throws URISyntaxException {
        // Get an Enumeration of all of the header names sent by the client
        Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
        while (enumerationOfHeaderNames.hasMoreElements()) {
            String headerName = (String) enumerationOfHeaderNames.nextElement();",https://www.github.com/greengerong/prerender-java/commit/80073933543a2655c3f3a8aa2f81055d9bbe327d,"    protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest) throws URISyntaxException {
        
        Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
        while (enumerationOfHeaderNames.hasMoreElements()) {
            String headerName = (String) enumerationOfHeaderNames.nextElement();
","['    ', 'protected', ' ', 'void', ' ', 'copyRequestHeaders', '(', 'HttpServletRequest', ' ', 'servletRequest', ',', ' ', 'HttpRequest', ' ', 'proxyRequest', ')', ' ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', '\n', '        ', 'Enumeration', '<', '?', '>', ' ', 'enumerationOfHeaderNames', ' ', '=', ' ', 'servletRequest', '.', 'getHeaderNames', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'enumerationOfHeaderNames', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'headerName', ' ', '=', ' ', '(', 'String', ')', ' ', 'enumerationOfHeaderNames', '.', 'nextElement', '(', ')', ';', '\n', '<END>']"
master,2d52b156cff6c79261fd3541b9aece5c7d8a293e,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
                if (proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/2d52b156cff6c79261fd3541b9aece5c7d8a293e,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
                if (proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ';', '\n', '            ', 'final', ' ', 'HttpServletResponse', ' ', 'response', ' ', '=', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ';', '\n', '            ', 'if', ' ', '(', 'shouldShowPrerenderedPage', '(', 'request', ')', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'proxyPrerenderedPageResponse', '(', 'request', ',', ' ', 'response', ')', ')', ' ', '{', '\n', '                    ', 'return', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', '""', 'Prerender service error', '""', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '        ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,889461e30f7d65a22ca4429f8f457b884aa05107,PreRenderEventHandler.java,beforeRender,"    String beforeRender(HttpServletRequest clientRequest);

    void afterRender(HttpServletRequest clientRequest, HttpResponse prerenderResponse);
}",https://www.github.com/greengerong/prerender-java/commit/889461e30f7d65a22ca4429f8f457b884aa05107,"    String beforeRender(HttpServletRequest clientRequest);

    void afterRender(HttpServletRequest clientRequest, HttpResponse prerenderResponse);
}
","['    ', 'String', ' ', 'beforeRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ')', ';', '\n', '\n', '    ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpResponse', ' ', 'prerenderResponse', ')', ';', '\n', '}', '\n', '<END>']"
master,889461e30f7d65a22ca4429f8f457b884aa05107,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
        this.httpClient = getHttpClient(filterConfig);
        this.preRenderEventHandler = getEventHandler(filterConfig);
    }",https://www.github.com/greengerong/prerender-java/commit/889461e30f7d65a22ca4429f8f457b884aa05107,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
        this.httpClient = getHttpClient(filterConfig);
        this.preRenderEventHandler = getEventHandler(filterConfig);
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'filterConfig', ' ', '=', ' ', 'filterConfig', ';', '\n', '        ', 'this', '.', 'httpClient', ' ', '=', ' ', 'getHttpClient', '(', 'filterConfig', ')', ';', '\n', '        ', 'this', '.', 'preRenderEventHandler', ' ', '=', ' ', 'getEventHandler', '(', 'filterConfig', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,889461e30f7d65a22ca4429f8f457b884aa05107,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {

                if (beforeRender(request, response) || proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/889461e30f7d65a22ca4429f8f457b884aa05107,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {

                if (beforeRender(request, response) || proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ';', '\n', '            ', 'final', ' ', 'HttpServletResponse', ' ', 'response', ' ', '=', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ';', '\n', '            ', 'if', ' ', '(', 'shouldShowPrerenderedPage', '(', 'request', ')', ')', ' ', '{', '\n', '\n', '                ', 'if', ' ', '(', 'beforeRender', '(', 'request', ',', ' ', 'response', ')', ' ', '|', '|', ' ', 'proxyPrerenderedPageResponse', '(', 'request', ',', ' ', 'response', ')', ')', ' ', '{', '\n', '                    ', 'return', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', '""', 'Prerender service error', '""', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '        ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,889461e30f7d65a22ca4429f8f457b884aa05107,PreRenderSEOFilter.java,beforeRender,"    private boolean beforeRender(HttpServletRequest request, HttpServletResponse response) throws IOException {
        if (preRenderEventHandler != null) {
            final String html = preRenderEventHandler.beforeRender(request);
            if (StringUtils.isNotBlank(html)) {
                final PrintWriter writer = response.getWriter();
                writer.write(html);
                writer.flush();
                closeQuietly(writer);
                return true;
            }
        }
        return false;
    }",https://www.github.com/greengerong/prerender-java/commit/889461e30f7d65a22ca4429f8f457b884aa05107,"    private boolean beforeRender(HttpServletRequest request, HttpServletResponse response) throws IOException {
        if (preRenderEventHandler != null) {
            final String html = preRenderEventHandler.beforeRender(request);
            if (StringUtils.isNotBlank(html)) {
                final PrintWriter writer = response.getWriter();
                writer.write(html);
                writer.flush();
                closeQuietly(writer);
                return true;
            }
        }
        return false;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'beforeRender', '(', 'HttpServletRequest', ' ', 'request', ',', ' ', 'HttpServletResponse', ' ', 'response', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'final', ' ', 'String', ' ', 'html', ' ', '=', ' ', 'preRenderEventHandler', '.', 'beforeRender', '(', 'request', ')', ';', '\n', '            ', 'if', ' ', '(', 'StringUtils', '.', 'isNotBlank', '(', 'html', ')', ')', ' ', '{', '\n', '                ', 'final', ' ', 'PrintWriter', ' ', 'writer', ' ', '=', ' ', 'response', '.', 'getWriter', '(', ')', ';', '\n', '                ', 'writer', '.', 'write', '(', 'html', ')', ';', '\n', '                ', 'writer', '.', 'flush', '(', ')', ';', '\n', '                ', 'closeQuietly', '(', 'writer', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n', '<END>']"
master,889461e30f7d65a22ca4429f8f457b884aa05107,PreRenderSEOFilter.java,afterRender,"    private void afterRender(HttpServletRequest request, CloseableHttpResponse proxyResponse) {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.afterRender(request, proxyResponse);",https://www.github.com/greengerong/prerender-java/commit/889461e30f7d65a22ca4429f8f457b884aa05107,"    private void afterRender(HttpServletRequest request, CloseableHttpResponse proxyResponse) {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.afterRender(request, proxyResponse);
","['    ', 'private', ' ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'request', ',', ' ', 'CloseableHttpResponse', ' ', 'proxyResponse', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'preRenderEventHandler', '.', 'afterRender', '(', 'request', ',', ' ', 'proxyResponse', ')', ';', '\n', '<END>']"
master,77fe1149d30cbf0f49effd512e238a37a9a96009,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderConfig = new PrerenderConfig(filterConfig);
        this.httpClient = prerenderConfig.getHttpClient();
        this.preRenderEventHandler = prerenderConfig.getEventHandler();
    }",https://www.github.com/greengerong/prerender-java/commit/77fe1149d30cbf0f49effd512e238a37a9a96009,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderConfig = new PrerenderConfig(filterConfig);
        this.httpClient = prerenderConfig.getHttpClient();
        this.preRenderEventHandler = prerenderConfig.getEventHandler();
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'prerenderConfig', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'filterConfig', ')', ';', '\n', '        ', 'this', '.', 'httpClient', ' ', '=', ' ', 'prerenderConfig', '.', 'getHttpClient', '(', ')', ';', '\n', '        ', 'this', '.', 'preRenderEventHandler', ' ', '=', ' ', 'prerenderConfig', '.', 'getEventHandler', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,77fe1149d30cbf0f49effd512e238a37a9a96009,PreRenderSEOFilter.java,withPrerenderToken,"    private void withPrerenderToken(HttpRequest proxyRequest) {
        final String token = prerenderConfig.getPrerenderToken();
        //for new version prerender with token.
        if (StringUtils.isNotBlank(token)) {
            proxyRequest.addHeader(""X-Prerender-Token"", token);",https://www.github.com/greengerong/prerender-java/commit/77fe1149d30cbf0f49effd512e238a37a9a96009,"    private void withPrerenderToken(HttpRequest proxyRequest) {
        final String token = prerenderConfig.getPrerenderToken();
        
        if (StringUtils.isNotBlank(token)) {
            proxyRequest.addHeader(""X-Prerender-Token"", token);
","['    ', 'private', ' ', 'void', ' ', 'withPrerenderToken', '(', 'HttpRequest', ' ', 'proxyRequest', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'token', ' ', '=', ' ', 'prerenderConfig', '.', 'getPrerenderToken', '(', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isNotBlank', '(', 'token', ')', ')', ' ', '{', '\n', '            ', 'proxyRequest', '.', 'addHeader', '(', '""', 'X-Prerender-Token', '""', ',', ' ', 'token', ')', ';', '\n', '<END>']"
master,77fe1149d30cbf0f49effd512e238a37a9a96009,PreRenderSEOFilter.java,closeQuietly,"    protected void closeQuietly(Closeable closeable) {
        try {
            if (closeable != null) {",https://www.github.com/greengerong/prerender-java/commit/77fe1149d30cbf0f49effd512e238a37a9a96009,"    protected void closeQuietly(Closeable closeable) {
        try {
            if (closeable != null) {
","['    ', 'protected', ' ', 'void', ' ', 'closeQuietly', '(', 'Closeable', ' ', 'closeable', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'if', ' ', '(', 'closeable', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '<END>']"
master,77fe1149d30cbf0f49effd512e238a37a9a96009,PreRenderSEOFilter.java,destroy,"    public void destroy() {
        prerenderConfig = null;
        closeQuietly(httpClient);
    }",https://www.github.com/greengerong/prerender-java/commit/77fe1149d30cbf0f49effd512e238a37a9a96009,"    public void destroy() {
        prerenderConfig = null;
        closeQuietly(httpClient);
    }
","['    ', 'public', ' ', 'void', ' ', 'destroy', '(', ')', ' ', '{', '\n', '        ', 'prerenderConfig', ' ', '=', ' ', 'null', ';', '\n', '        ', 'closeQuietly', '(', 'httpClient', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderConfig = new PrerenderConfig(filterConfig);
        this.httpClient = getHttpClient();
        this.preRenderEventHandler = prerenderConfig.getEventHandler();
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderConfig = new PrerenderConfig(filterConfig);
        this.httpClient = getHttpClient();
        this.preRenderEventHandler = prerenderConfig.getEventHandler();
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'prerenderConfig', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'filterConfig', ')', ';', '\n', '        ', 'this', '.', 'httpClient', ' ', '=', ' ', 'getHttpClient', '(', ')', ';', '\n', '        ', 'this', '.', 'preRenderEventHandler', ' ', '=', ' ', 'prerenderConfig', '.', 'getEventHandler', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,setUp,"    public void setUp() throws Exception {
        preRenderSEOFilter = new PreRenderSEOFilter() {
            @Override",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void setUp() throws Exception {
        preRenderSEOFilter = new PreRenderSEOFilter() {
            @Override
","['    ', 'public', ' ', 'void', ' ', 'setUp', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', 'preRenderSEOFilter', ' ', '=', ' ', 'new', ' ', 'PreRenderSEOFilter', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_not_handle_when_non_get_request,"    public void should_not_handle_when_non_get_request() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);
        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer());
        when(servletRequest.getMethod()).thenReturn(HttpPost.METHOD_NAME);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_not_handle_when_non_get_request() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);
        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer());
        when(servletRequest.getMethod()).thenReturn(HttpPost.METHOD_NAME);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_non_get_request', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpPost', '.', 'METHOD_NAME', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_handle_when_url_with_escaped_fragment_,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_url_with_escaped_fragment_', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PreRenderSEOFilter', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_not_handle_when_user_agent_is_not_crawler,"    public void should_not_handle_when_user_agent_is_not_crawler() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""no"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_not_handle_when_user_agent_is_not_crawler() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""no"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_user_agent_is_not_crawler', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'no', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_not_handle_when_url_is_a_resource,"    public void should_not_handle_when_url_is_a_resource() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test.js""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_not_handle_when_url_is_a_resource() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test.js""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_url_is_a_resource', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test.js', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list,"    public void should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,whitelist2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,whitelist2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'whitelist1,whitelist2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list,"    public void should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,http://localhost/test"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,http://localhost/test"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'blacklist1,http://localhost/test', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PreRenderSEOFilter', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_not_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200,"    public void should_not_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_not_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'NOT_FOUND', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ff5481e7d999fc7c638e21a05ea86363010934f,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/6ff5481e7d999fc7c638e21a05ea86363010934f,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'whitelist1,http://localhost/test', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'blacklist1,blacklist2', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PreRenderSEOFilter', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,PreRenderEventHandler.java,beforeRender,"    String beforeRender(HttpServletRequest clientRequest);

    void afterRender(HttpServletRequest clientRequest, HttpResponse prerenderResponse, String html);

    void destroy();
}",https://www.github.com/greengerong/prerender-java/commit/10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,"    String beforeRender(HttpServletRequest clientRequest);

    void afterRender(HttpServletRequest clientRequest, HttpResponse prerenderResponse, String html);

    void destroy();
}
","['    ', 'String', ' ', 'beforeRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ')', ';', '\n', '\n', '    ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpResponse', ' ', 'prerenderResponse', ',', ' ', 'String', ' ', 'html', ')', ';', '\n', '\n', '    ', 'void', ' ', 'destroy', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,PreRenderEventHandler.java,afterRender,"    void afterRender(HttpServletRequest clientRequest, HttpResponse prerenderResponse, String html);

    void destroy();
}",https://www.github.com/greengerong/prerender-java/commit/10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,"    void afterRender(HttpServletRequest clientRequest, HttpResponse prerenderResponse, String html);

    void destroy();
}
","['    ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpResponse', ' ', 'prerenderResponse', ',', ' ', 'String', ' ', 'html', ')', ';', '\n', '\n', '    ', 'void', ' ', 'destroy', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderConfig = new PrerenderConfig(filterConfig);
        this.httpClient = getHttpClient();
    }",https://www.github.com/greengerong/prerender-java/commit/10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderConfig = new PrerenderConfig(filterConfig);
        this.httpClient = getHttpClient();
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'prerenderConfig', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'filterConfig', ')', ';', '\n', '        ', 'this', '.', 'httpClient', ' ', '=', ' ', 'getHttpClient', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
                this.preRenderEventHandler = prerenderConfig.getEventHandler();
                if (beforeRender(request, response) || proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        try {
            final HttpServletRequest request = (HttpServletRequest) servletRequest;
            final HttpServletResponse response = (HttpServletResponse) servletResponse;
            if (shouldShowPrerenderedPage(request)) {
                this.preRenderEventHandler = prerenderConfig.getEventHandler();
                if (beforeRender(request, response) || proxyPrerenderedPageResponse(request, response)) {
                    return;
                }
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'HttpServletRequest', ' ', 'request', ' ', '=', ' ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ';', '\n', '            ', 'final', ' ', 'HttpServletResponse', ' ', 'response', ' ', '=', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ';', '\n', '            ', 'if', ' ', '(', 'shouldShowPrerenderedPage', '(', 'request', ')', ')', ' ', '{', '\n', '                ', 'this', '.', 'preRenderEventHandler', ' ', '=', ' ', 'prerenderConfig', '.', 'getEventHandler', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'beforeRender', '(', 'request', ',', ' ', 'response', ')', ' ', '|', '|', ' ', 'proxyPrerenderedPageResponse', '(', 'request', ',', ' ', 'response', ')', ')', ' ', '{', '\n', '                    ', 'return', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', '""', 'Prerender service error', '""', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '        ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,PreRenderSEOFilter.java,afterRender,"    private void afterRender(HttpServletRequest request, CloseableHttpResponse proxyResponse, String html) {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.afterRender(request, proxyResponse, html);",https://www.github.com/greengerong/prerender-java/commit/10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,"    private void afterRender(HttpServletRequest request, CloseableHttpResponse proxyResponse, String html) {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.afterRender(request, proxyResponse, html);
","['    ', 'private', ' ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'request', ',', ' ', 'CloseableHttpResponse', ' ', 'proxyResponse', ',', ' ', 'String', ' ', 'html', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'preRenderEventHandler', '.', 'afterRender', '(', 'request', ',', ' ', 'proxyResponse', ',', ' ', 'html', ')', ';', '\n', '<END>']"
master,10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,PreRenderSEOFilter.java,copyResponseEntity,"    protected String copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse) throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            PrintWriter printWriter = servletResponse.getWriter();
            try {
                final String html = EntityUtils.toString(entity);
                printWriter.write(html);
                printWriter.flush();
                return html;
            } finally {
                closeQuietly(printWriter);
            }
        }
        return """";
    }",https://www.github.com/greengerong/prerender-java/commit/10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,"    protected String copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse) throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            PrintWriter printWriter = servletResponse.getWriter();
            try {
                final String html = EntityUtils.toString(entity);
                printWriter.write(html);
                printWriter.flush();
                return html;
            } finally {
                closeQuietly(printWriter);
            }
        }
        return """";
    }
","['    ', 'protected', ' ', 'String', ' ', 'copyResponseEntity', '(', 'HttpResponse', ' ', 'proxyResponse', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'HttpEntity', ' ', 'entity', ' ', '=', ' ', 'proxyResponse', '.', 'getEntity', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'entity', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'PrintWriter', ' ', 'printWriter', ' ', '=', ' ', 'servletResponse', '.', 'getWriter', '(', ')', ';', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'final', ' ', 'String', ' ', 'html', ' ', '=', ' ', 'EntityUtils', '.', 'toString', '(', 'entity', ')', ';', '\n', '                ', 'printWriter', '.', 'write', '(', 'html', ')', ';', '\n', '                ', 'printWriter', '.', 'flush', '(', ')', ';', '\n', '                ', 'return', ' ', 'html', ';', '\n', '            ', '}', ' ', 'finally', ' ', '{', '\n', '                ', 'closeQuietly', '(', 'printWriter', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', '""', '""', ';', '\n', '    ', '}', '\n', '<END>']"
master,10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,PreRenderSEOFilter.java,destroy,"    public void destroy() {
        prerenderConfig = null;
        if (preRenderEventHandler != null) {
            preRenderEventHandler.destroy();
            preRenderEventHandler = null;
        }
        closeQuietly(httpClient);
    }",https://www.github.com/greengerong/prerender-java/commit/10e9af5f840e3c14d6d3def0ba1bfb8aca816d40,"    public void destroy() {
        prerenderConfig = null;
        if (preRenderEventHandler != null) {
            preRenderEventHandler.destroy();
            preRenderEventHandler = null;
        }
        closeQuietly(httpClient);
    }
","['    ', 'public', ' ', 'void', ' ', 'destroy', '(', ')', ' ', '{', '\n', '        ', 'prerenderConfig', ' ', '=', ' ', 'null', ';', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'preRenderEventHandler', '.', 'destroy', '(', ')', ';', '\n', '            ', 'preRenderEventHandler', ' ', '=', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'closeQuietly', '(', 'httpClient', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9dd185200f2d7517751b3758f798924b513bb9e9,PreRenderSEOFilterTest.java,should_use_request_url_from_custom_header_if_available,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        //given
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/9dd185200f2d7517751b3758f798924b513bb9e9,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PreRenderSEOFilter.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_use_request_url_from_custom_header_if_available', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'forwardedURLHeader', '""', ')', ')', '.', 'thenReturn', '(', '""', 'X-Forwarded-URL', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://localhost/test', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'X-Forwarded-URL', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PreRenderSEOFilter', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderService = new PrerenderService(new PrerenderConfig(filterConfig));
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderService = new PrerenderService(new PrerenderConfig(filterConfig));
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'prerenderService', ' ', '=', ' ', 'new', ' ', 'PrerenderService', '(', 'new', ' ', 'PrerenderConfig', '(', 'filterConfig', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPrerendered = prerenderService.tryPrerender(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPrerendered) {
            filterChain.doFilter(servletRequest, servletResponse);",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPrerendered = prerenderService.tryPrerender(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPrerendered) {
            filterChain.doFilter(servletRequest, servletResponse);
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'boolean', ' ', 'isPrerendered', ' ', '=', ' ', 'prerenderService', '.', 'tryPrerender', '(', '\n', '                ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ',', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'isPrerendered', ')', ' ', '{', '\n', '            ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilter.java,destroy,"    public void destroy() {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.destroy();
        }
        closeQuietly(httpClient);
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public void destroy() {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.destroy();
        }
        closeQuietly(httpClient);
    }
","['    ', 'public', ' ', 'void', ' ', 'destroy', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'preRenderEventHandler', '.', 'destroy', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'closeQuietly', '(', 'httpClient', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilter.java,tryPrerender,"    public boolean tryPrerender(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {
        try {
            if (handlePrerender(servletRequest, servletResponse))
                return true;
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        return false;
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public boolean tryPrerender(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {
        try {
            if (handlePrerender(servletRequest, servletResponse))
                return true;
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        return false;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'tryPrerender', '(', 'HttpServletRequest', ' ', 'servletRequest', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'if', ' ', '(', 'handlePrerender', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ')', '\n', '                ', 'return', ' ', 'true', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', '""', 'Prerender service error', '""', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilter.java,handlePrerender,"    private boolean handlePrerender(HttpServletRequest servletRequest, HttpServletResponse servletResponse)
            throws URISyntaxException, IOException {
        if (shouldShowPrerenderedPage(servletRequest)) {
            this.preRenderEventHandler = prerenderConfig.getEventHandler();
            if (beforeRender(servletRequest, servletResponse) || proxyPrerenderedPageResponse(servletRequest, servletResponse)) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    private boolean handlePrerender(HttpServletRequest servletRequest, HttpServletResponse servletResponse)
            throws URISyntaxException, IOException {
        if (shouldShowPrerenderedPage(servletRequest)) {
            this.preRenderEventHandler = prerenderConfig.getEventHandler();
            if (beforeRender(servletRequest, servletResponse) || proxyPrerenderedPageResponse(servletRequest, servletResponse)) {
                return true;
            }
        }
        return false;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'handlePrerender', '(', 'HttpServletRequest', ' ', 'servletRequest', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', '\n', '            ', 'throws', ' ', 'URISyntaxException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'shouldShowPrerenderedPage', '(', 'servletRequest', ')', ')', ' ', '{', '\n', '            ', 'this', '.', 'preRenderEventHandler', ' ', '=', ' ', 'prerenderConfig', '.', 'getEventHandler', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'beforeRender', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ' ', '|', '|', ' ', 'proxyPrerenderedPageResponse', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ')', ' ', '{', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilterTest.java,should_handle_when_url_with_escaped_fragment_,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_url_with_escaped_fragment_', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'whitelist1,http://localhost/test', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'blacklist1,blacklist2', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,PreRenderSEOFilterTest.java,should_use_request_url_from_custom_header_if_available,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        //given
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/1b5f9ef98a2be2df63bfc808c2267613a0ac13f1,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_use_request_url_from_custom_header_if_available', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'forwardedURLHeader', '""', ')', ')', '.', 'thenReturn', '(', '""', 'X-Forwarded-URL', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://localhost/test', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'X-Forwarded-URL', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderSeoService = new PrerenderSeoService(new PrerenderConfig(toMap(filterConfig)));
    }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderSeoService = new PrerenderSeoService(new PrerenderConfig(toMap(filterConfig)));
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'prerenderSeoService', ' ', '=', ' ', 'new', ' ', 'PrerenderSeoService', '(', 'new', ' ', 'PrerenderConfig', '(', 'toMap', '(', 'filterConfig', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPrerendered = prerenderSeoService.tryPrerender(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPrerendered) {
            filterChain.doFilter(servletRequest, servletResponse);",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPrerendered = prerenderSeoService.tryPrerender(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPrerendered) {
            filterChain.doFilter(servletRequest, servletResponse);
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'boolean', ' ', 'isPrerendered', ' ', '=', ' ', 'prerenderSeoService', '.', 'tryPrerender', '(', '\n', '                ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ',', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'isPrerendered', ')', ' ', '{', '\n', '            ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PreRenderSEOFilter.java,toMap,"    protected Map<String, String> toMap(FilterConfig filterConfig) {
        HashMap<String, String> config = new HashMap<String, String>();
        for (String parameterName : PARAMETER_NAMES) {
            config.put(parameterName, filterConfig.getInitParameter(parameterName));
        }
        return config;
    }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    protected Map<String, String> toMap(FilterConfig filterConfig) {
        HashMap<String, String> config = new HashMap<String, String>();
        for (String parameterName : PARAMETER_NAMES) {
            config.put(parameterName, filterConfig.getInitParameter(parameterName));
        }
        return config;
    }
","['    ', 'protected', ' ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'toMap', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', '{', '\n', '        ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'parameterName', ' ', ':', ' ', 'PARAMETER_NAMES', ')', ' ', '{', '\n', '            ', 'config', '.', 'put', '(', 'parameterName', ',', ' ', 'filterConfig', '.', 'getInitParameter', '(', 'parameterName', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'config', ';', '\n', '    ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PrerenderSeoService.java,apply,"            public boolean apply(String item) {
                return userAgent.toLowerCase().contains(item.toLowerCase());
            }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"            public boolean apply(String item) {
                return userAgent.toLowerCase().contains(item.toLowerCase());
            }
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'item', ')', ' ', '{', '\n', '                ', 'return', ' ', 'userAgent', '.', 'toLowerCase', '(', ')', '.', 'contains', '(', 'item', '.', 'toLowerCase', '(', ')', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PrerenderSeoService.java,copyResponseEntity,"    protected String copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse)
            throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            PrintWriter printWriter = servletResponse.getWriter();
            try {
                final String html = EntityUtils.toString(entity);
                printWriter.write(html);
                printWriter.flush();
                return html;
            } finally {
                closeQuietly(printWriter);
            }
        }
        return """";
    }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    protected String copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse)
            throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            PrintWriter printWriter = servletResponse.getWriter();
            try {
                final String html = EntityUtils.toString(entity);
                printWriter.write(html);
                printWriter.flush();
                return html;
            } finally {
                closeQuietly(printWriter);
            }
        }
        return """";
    }
","['    ', 'protected', ' ', 'String', ' ', 'copyResponseEntity', '(', 'HttpResponse', ' ', 'proxyResponse', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', '\n', '            ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'HttpEntity', ' ', 'entity', ' ', '=', ' ', 'proxyResponse', '.', 'getEntity', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'entity', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'PrintWriter', ' ', 'printWriter', ' ', '=', ' ', 'servletResponse', '.', 'getWriter', '(', ')', ';', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'final', ' ', 'String', ' ', 'html', ' ', '=', ' ', 'EntityUtils', '.', 'toString', '(', 'entity', ')', ';', '\n', '                ', 'printWriter', '.', 'write', '(', 'html', ')', ';', '\n', '                ', 'printWriter', '.', 'flush', '(', ')', ';', '\n', '                ', 'return', ' ', 'html', ';', '\n', '            ', '}', ' ', 'finally', ' ', '{', '\n', '                ', 'closeQuietly', '(', 'printWriter', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', '""', '""', ';', '\n', '    ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PrerenderSeoService.java,copyRequestHeaders,"    protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest)
            throws URISyntaxException {
        // Get an Enumeration of all of the header names sent by the client
        Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
        while (enumerationOfHeaderNames.hasMoreElements()) {
            String headerName = (String) enumerationOfHeaderNames.nextElement();",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    protected void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest)
            throws URISyntaxException {
        
        Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
        while (enumerationOfHeaderNames.hasMoreElements()) {
            String headerName = (String) enumerationOfHeaderNames.nextElement();
","['    ', 'protected', ' ', 'void', ' ', 'copyRequestHeaders', '(', 'HttpServletRequest', ' ', 'servletRequest', ',', ' ', 'HttpRequest', ' ', 'proxyRequest', ')', '\n', '            ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', '\n', '        ', 'Enumeration', '<', '?', '>', ' ', 'enumerationOfHeaderNames', ' ', '=', ' ', 'servletRequest', '.', 'getHeaderNames', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'enumerationOfHeaderNames', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'headerName', ' ', '=', ' ', '(', 'String', ')', ' ', 'enumerationOfHeaderNames', '.', 'nextElement', '(', ')', ';', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PreRenderSEOFilterTest.java,should_handle_when_url_with_escaped_fragment_,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_url_with_escaped_fragment_', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderSeoService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderSeoService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'whitelist1,http://localhost/test', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'blacklist1,blacklist2', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderSeoService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b25cc9f8d87b1971bd327e8bdf146f4538079faa,PreRenderSEOFilterTest.java,should_use_request_url_from_custom_header_if_available,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        //given
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/b25cc9f8d87b1971bd327e8bdf146f4538079faa,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_use_request_url_from_custom_header_if_available', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'forwardedURLHeader', '""', ')', ')', '.', 'thenReturn', '(', '""', 'X-Forwarded-URL', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://localhost/test', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'X-Forwarded-URL', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderSeoService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9803d6264a62e5da6f41639389c535f0b904499a,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPrerendered = prerenderSeoService.prerenderIfEligible(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPrerendered) {
            filterChain.doFilter(servletRequest, servletResponse);",https://www.github.com/greengerong/prerender-java/commit/9803d6264a62e5da6f41639389c535f0b904499a,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPrerendered = prerenderSeoService.prerenderIfEligible(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPrerendered) {
            filterChain.doFilter(servletRequest, servletResponse);
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'boolean', ' ', 'isPrerendered', ' ', '=', ' ', 'prerenderSeoService', '.', 'prerenderIfEligible', '(', '\n', '                ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ',', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'isPrerendered', ')', ' ', '{', '\n', '            ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '<END>']"
master,9803d6264a62e5da6f41639389c535f0b904499a,PrerenderSeoService.java,prerenderIfEligible,"    public boolean prerenderIfEligible(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {
        try {
            if (handlePrerender(servletRequest, servletResponse)) {
                return true;
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        return false;
    }",https://www.github.com/greengerong/prerender-java/commit/9803d6264a62e5da6f41639389c535f0b904499a,"    public boolean prerenderIfEligible(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {
        try {
            if (handlePrerender(servletRequest, servletResponse)) {
                return true;
            }
        } catch (Exception e) {
            log.error(""Prerender service error"", e);
        }
        return false;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'prerenderIfEligible', '(', 'HttpServletRequest', ' ', 'servletRequest', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'if', ' ', '(', 'handlePrerender', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ')', ' ', '{', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'log', '.', 'error', '(', '""', 'Prerender service error', '""', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n', '<END>']"
master,9803d6264a62e5da6f41639389c535f0b904499a,PrerenderSeoService.java,copyRequestHeaders,"    private void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest)
            throws URISyntaxException {
        // Get an Enumeration of all of the header names sent by the client
        Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
        while (enumerationOfHeaderNames.hasMoreElements()) {
            String headerName = (String) enumerationOfHeaderNames.nextElement();",https://www.github.com/greengerong/prerender-java/commit/9803d6264a62e5da6f41639389c535f0b904499a,"    private void copyRequestHeaders(HttpServletRequest servletRequest, HttpRequest proxyRequest)
            throws URISyntaxException {
        
        Enumeration<?> enumerationOfHeaderNames = servletRequest.getHeaderNames();
        while (enumerationOfHeaderNames.hasMoreElements()) {
            String headerName = (String) enumerationOfHeaderNames.nextElement();
","['    ', 'private', ' ', 'void', ' ', 'copyRequestHeaders', '(', 'HttpServletRequest', ' ', 'servletRequest', ',', ' ', 'HttpRequest', ' ', 'proxyRequest', ')', '\n', '            ', 'throws', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', '\n', '        ', 'Enumeration', '<', '?', '>', ' ', 'enumerationOfHeaderNames', ' ', '=', ' ', 'servletRequest', '.', 'getHeaderNames', '(', ')', ';', '\n', '        ', 'while', ' ', '(', 'enumerationOfHeaderNames', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '            ', 'String', ' ', 'headerName', ' ', '=', ' ', '(', 'String', ')', ' ', 'enumerationOfHeaderNames', '.', 'nextElement', '(', ')', ';', '\n', '<END>']"
master,9803d6264a62e5da6f41639389c535f0b904499a,PrerenderSeoService.java,copyResponseEntity,"    private String copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse)
            throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            PrintWriter printWriter = servletResponse.getWriter();
            try {
                final String html = EntityUtils.toString(entity);
                printWriter.write(html);
                printWriter.flush();
                return html;
            } finally {
                closeQuietly(printWriter);
            }
        }
        return """";
    }",https://www.github.com/greengerong/prerender-java/commit/9803d6264a62e5da6f41639389c535f0b904499a,"    private String copyResponseEntity(HttpResponse proxyResponse, HttpServletResponse servletResponse)
            throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        if (entity != null) {
            PrintWriter printWriter = servletResponse.getWriter();
            try {
                final String html = EntityUtils.toString(entity);
                printWriter.write(html);
                printWriter.flush();
                return html;
            } finally {
                closeQuietly(printWriter);
            }
        }
        return """";
    }
","['    ', 'private', ' ', 'String', ' ', 'copyResponseEntity', '(', 'HttpResponse', ' ', 'proxyResponse', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', '\n', '            ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'HttpEntity', ' ', 'entity', ' ', '=', ' ', 'proxyResponse', '.', 'getEntity', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'entity', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'PrintWriter', ' ', 'printWriter', ' ', '=', ' ', 'servletResponse', '.', 'getWriter', '(', ')', ';', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'final', ' ', 'String', ' ', 'html', ' ', '=', ' ', 'EntityUtils', '.', 'toString', '(', 'entity', ')', ';', '\n', '                ', 'printWriter', '.', 'write', '(', 'html', ')', ';', '\n', '                ', 'printWriter', '.', 'flush', '(', ')', ';', '\n', '                ', 'return', ' ', 'html', ';', '\n', '            ', '}', ' ', 'finally', ' ', '{', '\n', '                ', 'closeQuietly', '(', 'printWriter', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', '""', '""', ';', '\n', '    ', '}', '\n', '<END>']"
master,b1563745eaca8d36ce9c44ee794e8c5aa4e82bbe,PreRenderSEOFilter.java,init,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderSeoService = new PrerenderSeoService(toMap(filterConfig));
    }",https://www.github.com/greengerong/prerender-java/commit/b1563745eaca8d36ce9c44ee794e8c5aa4e82bbe,"    public void init(FilterConfig filterConfig) throws ServletException {
        this.prerenderSeoService = new PrerenderSeoService(toMap(filterConfig));
    }
","['    ', 'public', ' ', 'void', ' ', 'init', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', 'throws', ' ', 'ServletException', ' ', '{', '\n', '        ', 'this', '.', 'prerenderSeoService', ' ', '=', ' ', 'new', ' ', 'PrerenderSeoService', '(', 'toMap', '(', 'filterConfig', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c698f44a1996c356ea85900748d00398d94acdbf,PrerenderConfig.java,configureProxy,"    private HttpClientBuilder configureProxy(HttpClientBuilder builder) {
        final String proxy = config.get(""proxy"");
        if (StringUtils.isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(config.get(""proxyPort""));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder = builder.setRoutePlanner(routePlanner);
        }
        return builder;
    }",https://www.github.com/greengerong/prerender-java/commit/c698f44a1996c356ea85900748d00398d94acdbf,"    private HttpClientBuilder configureProxy(HttpClientBuilder builder) {
        final String proxy = config.get(""proxy"");
        if (StringUtils.isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(config.get(""proxyPort""));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder = builder.setRoutePlanner(routePlanner);
        }
        return builder;
    }
","['    ', 'private', ' ', 'HttpClientBuilder', ' ', 'configureProxy', '(', 'HttpClientBuilder', ' ', 'builder', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'proxy', ' ', '=', ' ', 'config', '.', 'get', '(', '""', 'proxy', '""', ')', ';', '\n', '        ', 'if', ' ', '(', 'StringUtils', '.', 'isNotBlank', '(', 'proxy', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'int', ' ', 'proxyPort', ' ', '=', ' ', 'Integer', '.', 'parseInt', '(', 'config', '.', 'get', '(', '""', 'proxyPort', '""', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'new', ' ', 'HttpHost', '(', 'proxy', ',', ' ', 'proxyPort', ')', ')', ';', '\n', '            ', 'builder', ' ', '=', ' ', 'builder', '.', 'setRoutePlanner', '(', 'routePlanner', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'builder', ';', '\n', '    ', '}', '\n', '<END>']"
master,c698f44a1996c356ea85900748d00398d94acdbf,PrerenderConfig.java,configureTimeout,"    private HttpClientBuilder configureTimeout(HttpClientBuilder builder) {
        final String socketTimeout = getSocketTimeout();
        if (socketTimeout != null) {
            RequestConfig config = RequestConfig.custom().setSocketTimeout(Integer.parseInt(socketTimeout)).build();
            builder = builder.setDefaultRequestConfig(config);
        }
        return builder;
    }",https://www.github.com/greengerong/prerender-java/commit/c698f44a1996c356ea85900748d00398d94acdbf,"    private HttpClientBuilder configureTimeout(HttpClientBuilder builder) {
        final String socketTimeout = getSocketTimeout();
        if (socketTimeout != null) {
            RequestConfig config = RequestConfig.custom().setSocketTimeout(Integer.parseInt(socketTimeout)).build();
            builder = builder.setDefaultRequestConfig(config);
        }
        return builder;
    }
","['    ', 'private', ' ', 'HttpClientBuilder', ' ', 'configureTimeout', '(', 'HttpClientBuilder', ' ', 'builder', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'socketTimeout', ' ', '=', ' ', 'getSocketTimeout', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'socketTimeout', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'RequestConfig', ' ', 'config', ' ', '=', ' ', 'RequestConfig', '.', 'custom', '(', ')', '.', 'setSocketTimeout', '(', 'Integer', '.', 'parseInt', '(', 'socketTimeout', ')', ')', '.', 'build', '(', ')', ';', '\n', '            ', 'builder', ' ', '=', ' ', 'builder', '.', 'setDefaultRequestConfig', '(', 'config', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'builder', ';', '\n', '    ', '}', '\n', '<END>']"
master,c698f44a1996c356ea85900748d00398d94acdbf,PrerenderConfigTest.java,should_throw_exception_if_invalid_timeout_value_specified,"    public void should_throw_exception_if_invalid_timeout_value_specified() throws Exception {
        //given
        Map<String, String> configuration = new HashMap<String, String>();
        configuration.put(""socketTimeout"", ""not_an_int"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        //when
        config.getHttpClient();
    }",https://www.github.com/greengerong/prerender-java/commit/c698f44a1996c356ea85900748d00398d94acdbf,"    public void should_throw_exception_if_invalid_timeout_value_specified() throws Exception {
        
        Map<String, String> configuration = new HashMap<String, String>();
        configuration.put(""socketTimeout"", ""not_an_int"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        
        config.getHttpClient();
    }
","['    ', 'public', ' ', 'void', ' ', 'should_throw_exception_if_invalid_timeout_value_specified', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'configuration', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', '(', ')', ';', '\n', '        ', 'configuration', '.', 'put', '(', '""', 'socketTimeout', '""', ',', ' ', '""', 'not_an_int', '""', ')', ';', '\n', '        ', 'PrerenderConfig', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'configuration', ')', ';', '\n', '        ', '\n', '        ', 'config', '.', 'getHttpClient', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c698f44a1996c356ea85900748d00398d94acdbf,PrerenderConfigTest.java,should_pass_if_correct_timeout_value_specified,"    public void should_pass_if_correct_timeout_value_specified() throws Exception {
        //given
        Map<String, String> configuration = new HashMap<String, String>();
        configuration.put(""socketTimeout"", ""1000"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        //when
        config.getHttpClient();
    }",https://www.github.com/greengerong/prerender-java/commit/c698f44a1996c356ea85900748d00398d94acdbf,"    public void should_pass_if_correct_timeout_value_specified() throws Exception {
        
        Map<String, String> configuration = new HashMap<String, String>();
        configuration.put(""socketTimeout"", ""1000"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        
        config.getHttpClient();
    }
","['    ', 'public', ' ', 'void', ' ', 'should_pass_if_correct_timeout_value_specified', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'configuration', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', '(', ')', ';', '\n', '        ', 'configuration', '.', 'put', '(', '""', 'socketTimeout', '""', ',', ' ', '""', '1000', '""', ')', ';', '\n', '        ', 'PrerenderConfig', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'configuration', ')', ';', '\n', '        ', '\n', '        ', 'config', '.', 'getHttpClient', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b6d954097427181294d51c353bf64d0206b4b2a7,PrerenderSeoService.java,proxyPrerenderedPageResponse,"    private boolean proxyPrerenderedPageResponse(HttpServletRequest request, HttpServletResponse response)
            throws IOException, URISyntaxException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        log.trace(String.format(""Prerender proxy will send request to:%s"", apiUrl));
        final HttpGet getMethod = getHttpGet(apiUrl);
        copyRequestHeaders(request, getMethod);
        withPrerenderToken(getMethod);
        CloseableHttpResponse proxyResponse = null;

        try {
            proxyResponse = httpClient.execute(getMethod);",https://www.github.com/greengerong/prerender-java/commit/b6d954097427181294d51c353bf64d0206b4b2a7,"    private boolean proxyPrerenderedPageResponse(HttpServletRequest request, HttpServletResponse response)
            throws IOException, URISyntaxException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        log.trace(String.format(""Prerender proxy will send request to:%s"", apiUrl));
        final HttpGet getMethod = getHttpGet(apiUrl);
        copyRequestHeaders(request, getMethod);
        withPrerenderToken(getMethod);
        CloseableHttpResponse proxyResponse = null;

        try {
            proxyResponse = httpClient.execute(getMethod);
","['    ', 'private', ' ', 'boolean', ' ', 'proxyPrerenderedPageResponse', '(', 'HttpServletRequest', ' ', 'request', ',', ' ', 'HttpServletResponse', ' ', 'response', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'apiUrl', ' ', '=', ' ', 'getApiUrl', '(', 'getFullUrl', '(', 'request', ')', ')', ';', '\n', '        ', 'log', '.', 'trace', '(', 'String', '.', 'format', '(', '""', 'Prerender proxy will send request to:%s', '""', ',', ' ', 'apiUrl', ')', ')', ';', '\n', '        ', 'final', ' ', 'HttpGet', ' ', 'getMethod', ' ', '=', ' ', 'getHttpGet', '(', 'apiUrl', ')', ';', '\n', '        ', 'copyRequestHeaders', '(', 'request', ',', ' ', 'getMethod', ')', ';', '\n', '        ', 'withPrerenderToken', '(', 'getMethod', ')', ';', '\n', '        ', 'CloseableHttpResponse', ' ', 'proxyResponse', ' ', '=', ' ', 'null', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'proxyResponse', ' ', '=', ' ', 'httpClient', '.', 'execute', '(', 'getMethod', ')', ';', '\n', '<END>']"
master,b6d954097427181294d51c353bf64d0206b4b2a7,PreRenderSEOFilterTest.java,should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(NOT_FOUND);
    }",https://www.github.com/greengerong/prerender-java/commit/b6d954097427181294d51c353bf64d0206b4b2a7,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(NOT_FOUND);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'NOT_FOUND', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '        ', 'verify', '(', 'servletResponse', ')', '.', 'setStatus', '(', 'NOT_FOUND', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1507e84e27badb53cc75161f16051ebd655214c6,PrerenderSeoService.java,apply,"            public boolean apply(String item) {
	        		return (url.indexOf('?') >= 0 ? url.substring(0, url.indexOf('?')) : url)
	        				.toLowerCase().endsWith(item);",https://www.github.com/greengerong/prerender-java/commit/1507e84e27badb53cc75161f16051ebd655214c6,"            public boolean apply(String item) {
	        		return (url.indexOf('?') >= 0 ? url.substring(0, url.indexOf('?')) : url)
	        				.toLowerCase().endsWith(item);
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'item', ')', ' ', '{', '\n', '\t        \t\t', 'return', ' ', '(', 'url', '.', 'indexOf', '(', ""'?'"", ')', ' ', '>', '=', ' ', '0', ' ', '?', ' ', 'url', '.', 'substring', '(', '0', ',', ' ', 'url', '.', 'indexOf', '(', ""'?'"", ')', ')', ' ', ':', ' ', 'url', ')', '\n', '\t        \t\t\t\t', '.', 'toLowerCase', '(', ')', '.', 'endsWith', '(', 'item', ')', ';', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PreRenderEventHandler.java,beforeRender,"    String beforeRender(HttpServletRequest clientRequest);

    void afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    String beforeRender(HttpServletRequest clientRequest);

    void afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}
","['    ', 'String', ' ', 'beforeRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ')', ';', '\n', '\n', '    ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpServletResponse', ' ', 'clientResponse', ',', ' ', 'HttpResponse', ' ', 'prerenderResponse', ',', ' ', 'String', ' ', 'responseHtml', ')', ';', '\n', '\n', '    ', 'void', ' ', 'destroy', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PreRenderEventHandler.java,afterRender,"    void afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    void afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}
","['    ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpServletResponse', ' ', 'clientResponse', ',', ' ', 'HttpResponse', ' ', 'prerenderResponse', ',', ' ', 'String', ' ', 'responseHtml', ')', ';', '\n', '\n', '    ', 'void', ' ', 'destroy', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PrerenderSeoService.java,getResponseHtml,"    private String getResponseHtml(HttpResponse proxyResponse)
            throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        return entity != null ? EntityUtils.toString(entity) : """";
    }",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    private String getResponseHtml(HttpResponse proxyResponse)
            throws IOException {
        HttpEntity entity = proxyResponse.getEntity();
        return entity != null ? EntityUtils.toString(entity) : """";
    }
","['    ', 'private', ' ', 'String', ' ', 'getResponseHtml', '(', 'HttpResponse', ' ', 'proxyResponse', ')', '\n', '            ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'HttpEntity', ' ', 'entity', ' ', '=', ' ', 'proxyResponse', '.', 'getEntity', '(', ')', ';', '\n', '        ', 'return', ' ', 'entity', ' ', '!', '=', ' ', 'null', ' ', '?', ' ', 'EntityUtils', '.', 'toString', '(', 'entity', ')', ' ', ':', ' ', '""', '""', ';', '\n', '    ', '}', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PrerenderSeoService.java,responseEntity,"    private void responseEntity(String html, HttpServletResponse servletResponse)
            throws IOException {
        PrintWriter printWriter = servletResponse.getWriter();
        try {
            printWriter.write(html);",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    private void responseEntity(String html, HttpServletResponse servletResponse)
            throws IOException {
        PrintWriter printWriter = servletResponse.getWriter();
        try {
            printWriter.write(html);
","['    ', 'private', ' ', 'void', ' ', 'responseEntity', '(', 'String', ' ', 'html', ',', ' ', 'HttpServletResponse', ' ', 'servletResponse', ')', '\n', '            ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'PrintWriter', ' ', 'printWriter', ' ', '=', ' ', 'servletResponse', '.', 'getWriter', '(', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'printWriter', '.', 'write', '(', 'html', ')', ';', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PrerenderSeoService.java,apply,"            public boolean apply(String item) {
                return (url.indexOf('?') >= 0 ? url.substring(0, url.indexOf('?')) : url)
                        .toLowerCase().endsWith(item);",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"            public boolean apply(String item) {
                return (url.indexOf('?') >= 0 ? url.substring(0, url.indexOf('?')) : url)
                        .toLowerCase().endsWith(item);
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'String', ' ', 'item', ')', ' ', '{', '\n', '                ', 'return', ' ', '(', 'url', '.', 'indexOf', '(', ""'?'"", ')', ' ', '>', '=', ' ', '0', ' ', '?', ' ', 'url', '.', 'substring', '(', '0', ',', ' ', 'url', '.', 'indexOf', '(', ""'?'"", ')', ')', ' ', ':', ' ', 'url', ')', '\n', '                        ', '.', 'toLowerCase', '(', ')', '.', 'endsWith', '(', 'item', ')', ';', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PrerenderSeoService.java,proxyPrerenderedPageResponse,"    private boolean proxyPrerenderedPageResponse(HttpServletRequest request, HttpServletResponse response)
            throws IOException, URISyntaxException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        log.trace(String.format(""Prerender proxy will send request to:%s"", apiUrl));
        final HttpGet getMethod = getHttpGet(apiUrl);
        copyRequestHeaders(request, getMethod);
        withPrerenderToken(getMethod);
        CloseableHttpResponse prerenderServerResponse = null;

        try {
            prerenderServerResponse = httpClient.execute(getMethod);",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    private boolean proxyPrerenderedPageResponse(HttpServletRequest request, HttpServletResponse response)
            throws IOException, URISyntaxException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        log.trace(String.format(""Prerender proxy will send request to:%s"", apiUrl));
        final HttpGet getMethod = getHttpGet(apiUrl);
        copyRequestHeaders(request, getMethod);
        withPrerenderToken(getMethod);
        CloseableHttpResponse prerenderServerResponse = null;

        try {
            prerenderServerResponse = httpClient.execute(getMethod);
","['    ', 'private', ' ', 'boolean', ' ', 'proxyPrerenderedPageResponse', '(', 'HttpServletRequest', ' ', 'request', ',', ' ', 'HttpServletResponse', ' ', 'response', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'apiUrl', ' ', '=', ' ', 'getApiUrl', '(', 'getFullUrl', '(', 'request', ')', ')', ';', '\n', '        ', 'log', '.', 'trace', '(', 'String', '.', 'format', '(', '""', 'Prerender proxy will send request to:%s', '""', ',', ' ', 'apiUrl', ')', ')', ';', '\n', '        ', 'final', ' ', 'HttpGet', ' ', 'getMethod', ' ', '=', ' ', 'getHttpGet', '(', 'apiUrl', ')', ';', '\n', '        ', 'copyRequestHeaders', '(', 'request', ',', ' ', 'getMethod', ')', ';', '\n', '        ', 'withPrerenderToken', '(', 'getMethod', ')', ';', '\n', '        ', 'CloseableHttpResponse', ' ', 'prerenderServerResponse', ' ', '=', ' ', 'null', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'prerenderServerResponse', ' ', '=', ' ', 'httpClient', '.', 'execute', '(', 'getMethod', ')', ';', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PrerenderSeoService.java,afterRender,"    private void afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, CloseableHttpResponse prerenderServerResponse, String responseHtml) {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.afterRender(clientRequest, clientResponse, prerenderServerResponse, responseHtml);",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    private void afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, CloseableHttpResponse prerenderServerResponse, String responseHtml) {
        if (preRenderEventHandler != null) {
            preRenderEventHandler.afterRender(clientRequest, clientResponse, prerenderServerResponse, responseHtml);
","['    ', 'private', ' ', 'void', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpServletResponse', ' ', 'clientResponse', ',', ' ', 'CloseableHttpResponse', ' ', 'prerenderServerResponse', ',', ' ', 'String', ' ', 'responseHtml', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'preRenderEventHandler', '.', 'afterRender', '(', 'clientRequest', ',', ' ', 'clientResponse', ',', ' ', 'prerenderServerResponse', ',', ' ', 'responseHtml', ')', ';', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PreRenderSEOFilterTest.java,should_handle_when_url_with_escaped_fragment_,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_url_with_escaped_fragment_', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderSeoService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderSeoService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PreRenderSEOFilterTest.java,should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);


        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(NOT_FOUND);
    }",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);


        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(NOT_FOUND);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'NOT_FOUND', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '        ', 'verify', '(', 'servletResponse', ')', '.', 'setStatus', '(', 'NOT_FOUND', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f3db14bf9e9f676a1e0f886a00a219a3744cdba2,PreRenderSEOFilterTest.java,should_use_request_url_from_custom_header_if_available,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        //given
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/f3db14bf9e9f676a1e0f886a00a219a3744cdba2,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(""_escaped_fragment_"", """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(PrerenderSeoService.HTTP_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_use_request_url_from_custom_header_if_available', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'forwardedURLHeader', '""', ')', ')', '.', 'thenReturn', '(', '""', 'X-Forwarded-URL', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://localhost/test', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'X-Forwarded-URL', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', '""', '_escaped_fragment_', '""', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'PrerenderSeoService', '.', 'HTTP_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,a27db6ba0c92a1c3e018f0e52f5c05de18993fc8,PreRenderEventHandler.java,beforeRender,"    String beforeRender(HttpServletRequest clientRequest);

    String afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}",https://www.github.com/greengerong/prerender-java/commit/a27db6ba0c92a1c3e018f0e52f5c05de18993fc8,"    String beforeRender(HttpServletRequest clientRequest);

    String afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}
","['    ', 'String', ' ', 'beforeRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ')', ';', '\n', '\n', '    ', 'String', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpServletResponse', ' ', 'clientResponse', ',', ' ', 'HttpResponse', ' ', 'prerenderResponse', ',', ' ', 'String', ' ', 'responseHtml', ')', ';', '\n', '\n', '    ', 'void', ' ', 'destroy', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,a27db6ba0c92a1c3e018f0e52f5c05de18993fc8,PreRenderEventHandler.java,afterRender,"    String afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}",https://www.github.com/greengerong/prerender-java/commit/a27db6ba0c92a1c3e018f0e52f5c05de18993fc8,"    String afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, HttpResponse prerenderResponse, String responseHtml);

    void destroy();
}
","['    ', 'String', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpServletResponse', ' ', 'clientResponse', ',', ' ', 'HttpResponse', ' ', 'prerenderResponse', ',', ' ', 'String', ' ', 'responseHtml', ')', ';', '\n', '\n', '    ', 'void', ' ', 'destroy', '(', ')', ';', '\n', '}', '\n', '<END>']"
master,a27db6ba0c92a1c3e018f0e52f5c05de18993fc8,PrerenderSeoService.java,afterRender,"    private String afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, CloseableHttpResponse prerenderServerResponse, String responseHtml) {
        if (preRenderEventHandler != null) {
            return preRenderEventHandler.afterRender(clientRequest, clientResponse, prerenderServerResponse, responseHtml);
        }
        return responseHtml;
    }",https://www.github.com/greengerong/prerender-java/commit/a27db6ba0c92a1c3e018f0e52f5c05de18993fc8,"    private String afterRender(HttpServletRequest clientRequest, HttpServletResponse clientResponse, CloseableHttpResponse prerenderServerResponse, String responseHtml) {
        if (preRenderEventHandler != null) {
            return preRenderEventHandler.afterRender(clientRequest, clientResponse, prerenderServerResponse, responseHtml);
        }
        return responseHtml;
    }
","['    ', 'private', ' ', 'String', ' ', 'afterRender', '(', 'HttpServletRequest', ' ', 'clientRequest', ',', ' ', 'HttpServletResponse', ' ', 'clientResponse', ',', ' ', 'CloseableHttpResponse', ' ', 'prerenderServerResponse', ',', ' ', 'String', ' ', 'responseHtml', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ' ', 'preRenderEventHandler', '.', 'afterRender', '(', 'clientRequest', ',', ' ', 'clientResponse', ',', ' ', 'prerenderServerResponse', ',', ' ', 'responseHtml', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'responseHtml', ';', '\n', '    ', '}', '\n', '<END>']"
master,4febb8e481240f88aefb966bee79526ac8f5fba0,PrerenderConfigTest.java,should_pass_if_correct_timeout_value_specified,"    public void should_pass_if_correct_timeout_value_specified() throws Exception {
        //given
        Map<String, String> configuration = new HashMap<String, String>();
        configuration.put(""socketTimeout"", ""1000"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        //when
        final CloseableHttpClient httpClient = config.getHttpClient();

        assertThat(httpClient, is(notNullValue()));
    }",https://www.github.com/greengerong/prerender-java/commit/4febb8e481240f88aefb966bee79526ac8f5fba0,"    public void should_pass_if_correct_timeout_value_specified() throws Exception {
        
        Map<String, String> configuration = new HashMap<String, String>();
        configuration.put(""socketTimeout"", ""1000"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        
        final CloseableHttpClient httpClient = config.getHttpClient();

        assertThat(httpClient, is(notNullValue()));
    }
","['    ', 'public', ' ', 'void', ' ', 'should_pass_if_correct_timeout_value_specified', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'configuration', ' ', '=', ' ', 'new', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', '(', ')', ';', '\n', '        ', 'configuration', '.', 'put', '(', '""', 'socketTimeout', '""', ',', ' ', '""', '1000', '""', ')', ';', '\n', '        ', 'PrerenderConfig', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'configuration', ')', ';', '\n', '        ', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'httpClient', ' ', '=', ' ', 'config', '.', 'getHttpClient', '(', ')', ';', '\n', '\n', '        ', 'assertThat', '(', 'httpClient', ',', ' ', 'is', '(', 'notNullValue', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PreRenderSEOFilter.java,toMap,"    protected Map<String, String> toMap(FilterConfig filterConfig) {
        Map<String, String> config = Maps.newHashMap();
        for (String parameterName : PARAMETER_NAMES) {
            config.put(parameterName, filterConfig.getInitParameter(parameterName));
        }
        return config;
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    protected Map<String, String> toMap(FilterConfig filterConfig) {
        Map<String, String> config = Maps.newHashMap();
        for (String parameterName : PARAMETER_NAMES) {
            config.put(parameterName, filterConfig.getInitParameter(parameterName));
        }
        return config;
    }
","['    ', 'protected', ' ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'toMap', '(', 'FilterConfig', ' ', 'filterConfig', ')', ' ', '{', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'config', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'for', ' ', '(', 'String', ' ', 'parameterName', ' ', ':', ' ', 'PARAMETER_NAMES', ')', ' ', '{', '\n', '            ', 'config', '.', 'put', '(', 'parameterName', ',', ' ', 'filterConfig', '.', 'getInitParameter', '(', 'parameterName', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'config', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PrerenderConfig.java,configureProxy,"    private HttpClientBuilder configureProxy(HttpClientBuilder builder) {
        final String proxy = config.get(""proxy"");
        if (isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(config.get(""proxyPort""));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder.setRoutePlanner(routePlanner);
        }
        return builder;
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    private HttpClientBuilder configureProxy(HttpClientBuilder builder) {
        final String proxy = config.get(""proxy"");
        if (isNotBlank(proxy)) {
            final int proxyPort = Integer.parseInt(config.get(""proxyPort""));
            DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(new HttpHost(proxy, proxyPort));
            builder.setRoutePlanner(routePlanner);
        }
        return builder;
    }
","['    ', 'private', ' ', 'HttpClientBuilder', ' ', 'configureProxy', '(', 'HttpClientBuilder', ' ', 'builder', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'proxy', ' ', '=', ' ', 'config', '.', 'get', '(', '""', 'proxy', '""', ')', ';', '\n', '        ', 'if', ' ', '(', 'isNotBlank', '(', 'proxy', ')', ')', ' ', '{', '\n', '            ', 'final', ' ', 'int', ' ', 'proxyPort', ' ', '=', ' ', 'Integer', '.', 'parseInt', '(', 'config', '.', 'get', '(', '""', 'proxyPort', '""', ')', ')', ';', '\n', '            ', 'DefaultProxyRoutePlanner', ' ', 'routePlanner', ' ', '=', ' ', 'new', ' ', 'DefaultProxyRoutePlanner', '(', 'new', ' ', 'HttpHost', '(', 'proxy', ',', ' ', 'proxyPort', ')', ')', ';', '\n', '            ', 'builder', '.', 'setRoutePlanner', '(', 'routePlanner', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'builder', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PrerenderConfig.java,configureTimeout,"    private HttpClientBuilder configureTimeout(HttpClientBuilder builder) {
        final String socketTimeout = getSocketTimeout();
        if (socketTimeout != null) {
            RequestConfig config = RequestConfig.custom().setSocketTimeout(Integer.parseInt(socketTimeout)).build();
            builder.setDefaultRequestConfig(config);
        }
        return builder;
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    private HttpClientBuilder configureTimeout(HttpClientBuilder builder) {
        final String socketTimeout = getSocketTimeout();
        if (socketTimeout != null) {
            RequestConfig config = RequestConfig.custom().setSocketTimeout(Integer.parseInt(socketTimeout)).build();
            builder.setDefaultRequestConfig(config);
        }
        return builder;
    }
","['    ', 'private', ' ', 'HttpClientBuilder', ' ', 'configureTimeout', '(', 'HttpClientBuilder', ' ', 'builder', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'socketTimeout', ' ', '=', ' ', 'getSocketTimeout', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'socketTimeout', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'RequestConfig', ' ', 'config', ' ', '=', ' ', 'RequestConfig', '.', 'custom', '(', ')', '.', 'setSocketTimeout', '(', 'Integer', '.', 'parseInt', '(', 'socketTimeout', ')', ')', '.', 'build', '(', ')', ';', '\n', '            ', 'builder', '.', 'setDefaultRequestConfig', '(', 'config', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'builder', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PrerenderSeoService.java,apply,"            public boolean apply(Header header) {
                return !hopByHopHeaders.containsHeader(header.getName());
            }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"            public boolean apply(Header header) {
                return !hopByHopHeaders.containsHeader(header.getName());
            }
","['            ', 'public', ' ', 'boolean', ' ', 'apply', '(', 'Header', ' ', 'header', ')', ' ', '{', '\n', '                ', 'return', ' ', '!', 'hopByHopHeaders', '.', 'containsHeader', '(', 'header', '.', 'getName', '(', ')', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PrerenderSeoService.java,apply,"            public Boolean apply(Header header) {
                servletResponse.addHeader(header.getName(), header.getValue());
                return true;
            }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"            public Boolean apply(Header header) {
                servletResponse.addHeader(header.getName(), header.getValue());
                return true;
            }
","['            ', 'public', ' ', 'Boolean', ' ', 'apply', '(', 'Header', ' ', 'header', ')', ' ', '{', '\n', '                ', 'servletResponse', '.', 'addHeader', '(', 'header', '.', 'getName', '(', ')', ',', ' ', 'header', '.', 'getValue', '(', ')', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PrerenderSeoService.java,hasEscapedFragment,"    private boolean hasEscapedFragment(HttpServletRequest request) {
        return request.getParameterMap().containsKey(ESCAPED_FRAGMENT_KEY);
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    private boolean hasEscapedFragment(HttpServletRequest request) {
        return request.getParameterMap().containsKey(ESCAPED_FRAGMENT_KEY);
    }
","['    ', 'private', ' ', 'boolean', ' ', 'hasEscapedFragment', '(', 'HttpServletRequest', ' ', 'request', ')', ' ', '{', '\n', '        ', 'return', ' ', 'request', '.', 'getParameterMap', '(', ')', '.', 'containsKey', '(', 'ESCAPED_FRAGMENT_KEY', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PrerenderSeoService.java,beforeRender,"    private boolean beforeRender(HttpServletRequest request, HttpServletResponse response) throws IOException {
        if (preRenderEventHandler != null) {
            final String html = preRenderEventHandler.beforeRender(request);
            if (isNotBlank(html)) {
                final PrintWriter writer = response.getWriter();
                writer.write(html);
                writer.flush();
                closeQuietly(writer);
                return true;
            }
        }
        return false;
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    private boolean beforeRender(HttpServletRequest request, HttpServletResponse response) throws IOException {
        if (preRenderEventHandler != null) {
            final String html = preRenderEventHandler.beforeRender(request);
            if (isNotBlank(html)) {
                final PrintWriter writer = response.getWriter();
                writer.write(html);
                writer.flush();
                closeQuietly(writer);
                return true;
            }
        }
        return false;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'beforeRender', '(', 'HttpServletRequest', ' ', 'request', ',', ' ', 'HttpServletResponse', ' ', 'response', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'preRenderEventHandler', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'final', ' ', 'String', ' ', 'html', ' ', '=', ' ', 'preRenderEventHandler', '.', 'beforeRender', '(', 'request', ')', ';', '\n', '            ', 'if', ' ', '(', 'isNotBlank', '(', 'html', ')', ')', ' ', '{', '\n', '                ', 'final', ' ', 'PrintWriter', ' ', 'writer', ' ', '=', ' ', 'response', '.', 'getWriter', '(', ')', ';', '\n', '                ', 'writer', '.', 'write', '(', 'html', ')', ';', '\n', '                ', 'writer', '.', 'flush', '(', ')', ';', '\n', '                ', 'closeQuietly', '(', 'writer', ')', ';', '\n', '                ', 'return', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PrerenderSeoService.java,withPrerenderToken,"    private void withPrerenderToken(HttpRequest proxyRequest) {
        final String token = prerenderConfig.getPrerenderToken();
        //for new version prerender with token.
        if (isNotBlank(token)) {
            proxyRequest.addHeader(""X-Prerender-Token"", token);",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    private void withPrerenderToken(HttpRequest proxyRequest) {
        final String token = prerenderConfig.getPrerenderToken();
        
        if (isNotBlank(token)) {
            proxyRequest.addHeader(""X-Prerender-Token"", token);
","['    ', 'private', ' ', 'void', ' ', 'withPrerenderToken', '(', 'HttpRequest', ' ', 'proxyRequest', ')', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'token', ' ', '=', ' ', 'prerenderConfig', '.', 'getPrerenderToken', '(', ')', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'isNotBlank', '(', 'token', ')', ')', ' ', '{', '\n', '            ', 'proxyRequest', '.', 'addHeader', '(', '""', 'X-Prerender-Token', '""', ',', ' ', 'token', ')', ';', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PreRenderSEOFilterTest.java,should_handle_when_url_with_escaped_fragment_,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_url_with_escaped_fragment_', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PreRenderSEOFilterTest.java,should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);


        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(NOT_FOUND);
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);


        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(NOT_FOUND);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'NOT_FOUND', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '        ', 'verify', '(', 'servletResponse', ')', '.', 'setStatus', '(', 'NOT_FOUND', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'whitelist1,http://localhost/test', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'blacklist1,blacklist2', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d401f984252e81865a525cf35ca35457b3ba6914,PreRenderSEOFilterTest.java,should_use_request_url_from_custom_header_if_available,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        //given
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/d401f984252e81865a525cf35ca35457b3ba6914,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(HttpGet.METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_use_request_url_from_custom_header_if_available', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'forwardedURLHeader', '""', ')', ')', '.', 'thenReturn', '(', '""', 'X-Forwarded-URL', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://localhost/test', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'HttpGet', '.', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'X-Forwarded-URL', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f011cc926c5105d38f0988ba8797f863699f9d5e,PrerenderConfig.java,isInterceptByDefault,"    public boolean isInterceptByDefault() {
      String interceptByDefault = config.get(""interceptByDefault"");
      if(interceptByDefault != null) {
        return Boolean.parseBoolean(interceptByDefault);
      }
      return true;
    }",https://www.github.com/greengerong/prerender-java/commit/f011cc926c5105d38f0988ba8797f863699f9d5e,"    public boolean isInterceptByDefault() {
      String interceptByDefault = config.get(""interceptByDefault"");
      if(interceptByDefault != null) {
        return Boolean.parseBoolean(interceptByDefault);
      }
      return true;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isInterceptByDefault', '(', ')', ' ', '{', '\n', '      ', 'String', ' ', 'interceptByDefault', ' ', '=', ' ', 'config', '.', 'get', '(', '""', 'interceptByDefault', '""', ')', ';', '\n', '      ', 'if', '(', 'interceptByDefault', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Boolean', '.', 'parseBoolean', '(', 'interceptByDefault', ')', ';', '\n', '      ', '}', '\n', '      ', 'return', ' ', 'true', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_handle_when_url_with_escaped_fragment_,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_handle_when_url_with_escaped_fragment_() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);
        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_url_with_escaped_fragment_', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_not_handle_when_user_agent_is_not_crawler,"    public void should_not_handle_when_user_agent_is_not_crawler() throws Exception {
        //given
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""no"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_not_handle_when_user_agent_is_not_crawler() throws Exception {
        
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""no"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_user_agent_is_not_crawler', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'no', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_not_handle_when_url_is_a_resource,"    public void should_not_handle_when_url_is_a_resource() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test.js""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_not_handle_when_url_is_a_resource() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test.js""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_url_is_a_resource', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test.js', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list,"    public void should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,whitelist2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,whitelist2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_white_list_is_not_empty_and_url_is_not_in_white_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'whitelist1,whitelist2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list,"    public void should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,http://localhost/test"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,http://localhost/test"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_black_list_is_not_empty_and_url_is_in_black_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'blacklist1,http://localhost/test', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_white_list_is_empty_and_black_list_is_empty', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);


        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(SC_NOT_FOUND);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_NOT_FOUND);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);


        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
        verify(servletResponse).setStatus(SC_NOT_FOUND);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_every_thing_is_ok_but_prerender_server_response_is_not_200', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_NOT_FOUND', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '        ', 'verify', '(', 'servletResponse', ')', '.', 'setStatus', '(', 'SC_NOT_FOUND', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""whitelist1,http://localhost/test"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""blacklist1,blacklist2"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_handle_when_user_agent_is_crawler_and_url_is_not_resource_and_in_white_list_and_not_in_black_list', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'whitelist1,http://localhost/test', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'blacklist1,blacklist2', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PreRenderSEOFilterTest.java,should_use_request_url_from_custom_header_if_available,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        //given
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_use_request_url_from_custom_header_if_available() throws Exception {
        
        when(filterConfig.getInitParameter(""forwardedURLHeader"")).thenReturn(""X-Forwarded-URL"");
        when(filterConfig.getInitParameter(""whitelist"")).thenReturn(""http://my.public.domain.com/"");
        when(filterConfig.getInitParameter(""blacklist"")).thenReturn(""http://localhost/test"");

        preRenderSEOFilter.init(filterConfig);

        final CloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);
        final StatusLine statusLine = mock(StatusLine.class);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getHeader(""X-Forwarded-URL"")).thenReturn(""http://my.public.domain.com/"");

        when(servletRequest.getHeaderNames()).thenReturn(mock(Enumeration.class));
        when(httpClient.execute(httpGet)).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        final HashMap<String, String> map = Maps.newHashMap();
        map.put(ESCAPED_FRAGMENT_KEY, """");
        when(servletRequest.getParameterMap()).thenReturn(map);
        when(statusLine.getStatusCode()).thenReturn(SC_OK);
        when(httpResponse.getAllHeaders()).thenReturn(new Header[0]);
        when(servletResponse.getWriter()).thenReturn(printWriter);

        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient).execute(httpGet);
        verify(filterChain, never()).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_use_request_url_from_custom_header_if_available', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'forwardedURLHeader', '""', ')', ')', '.', 'thenReturn', '(', '""', 'X-Forwarded-URL', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'whitelist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'blacklist', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://localhost/test', '""', ')', ';', '\n', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'final', ' ', 'CloseableHttpResponse', ' ', 'httpResponse', ' ', '=', ' ', 'mock', '(', 'CloseableHttpResponse', '.', 'class', ')', ';', '\n', '        ', 'final', ' ', 'StatusLine', ' ', 'statusLine', ' ', '=', ' ', 'mock', '(', 'StatusLine', '.', 'class', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'X-Forwarded-URL', '""', ')', ')', '.', 'thenReturn', '(', '""', 'http://my.public.domain.com/', '""', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeaderNames', '(', ')', ')', '.', 'thenReturn', '(', 'mock', '(', 'Enumeration', '.', 'class', ')', ')', ';', '\n', '        ', 'when', '(', 'httpClient', '.', 'execute', '(', 'httpGet', ')', ')', '.', 'thenReturn', '(', 'httpResponse', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getStatusLine', '(', ')', ')', '.', 'thenReturn', '(', 'statusLine', ')', ';', '\n', '        ', 'final', ' ', 'HashMap', '<', 'String', ',', ' ', 'String', '>', ' ', 'map', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'map', '.', 'put', '(', 'ESCAPED_FRAGMENT_KEY', ',', ' ', '""', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'map', ')', ';', '\n', '        ', 'when', '(', 'statusLine', '.', 'getStatusCode', '(', ')', ')', '.', 'thenReturn', '(', 'SC_OK', ')', ';', '\n', '        ', 'when', '(', 'httpResponse', '.', 'getAllHeaders', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'Header', '[', '0', ']', ')', ';', '\n', '        ', 'when', '(', 'servletResponse', '.', 'getWriter', '(', ')', ')', '.', 'thenReturn', '(', 'printWriter', ')', ';', '\n', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ',', ' ', 'never', '(', ')', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PrerenderConfigTest.java,should_throw_exception_if_invalid_timeout_value_specified,"    public void should_throw_exception_if_invalid_timeout_value_specified() throws Exception {
        //given
        Map<String, String> configuration = Maps.newHashMap();
        configuration.put(""socketTimeout"", ""not_an_int"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        //when
        config.getHttpClient();
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_throw_exception_if_invalid_timeout_value_specified() throws Exception {
        
        Map<String, String> configuration = Maps.newHashMap();
        configuration.put(""socketTimeout"", ""not_an_int"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        
        config.getHttpClient();
    }
","['    ', 'public', ' ', 'void', ' ', 'should_throw_exception_if_invalid_timeout_value_specified', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'configuration', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'configuration', '.', 'put', '(', '""', 'socketTimeout', '""', ',', ' ', '""', 'not_an_int', '""', ')', ';', '\n', '        ', 'PrerenderConfig', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'configuration', ')', ';', '\n', '        ', '\n', '        ', 'config', '.', 'getHttpClient', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3c02d915634ed19c43d8d6be1917d916f6ffae98,PrerenderConfigTest.java,should_pass_if_correct_timeout_value_specified,"    public void should_pass_if_correct_timeout_value_specified() throws Exception {
        //given
        Map<String, String> configuration = Maps.newHashMap();
        configuration.put(""socketTimeout"", ""1000"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        //when
        final CloseableHttpClient httpClient = config.getHttpClient();

        assertThat(httpClient, is(notNullValue()));
    }",https://www.github.com/greengerong/prerender-java/commit/3c02d915634ed19c43d8d6be1917d916f6ffae98,"    public void should_pass_if_correct_timeout_value_specified() throws Exception {
        
        Map<String, String> configuration = Maps.newHashMap();
        configuration.put(""socketTimeout"", ""1000"");
        PrerenderConfig config = new PrerenderConfig(configuration);
        
        final CloseableHttpClient httpClient = config.getHttpClient();

        assertThat(httpClient, is(notNullValue()));
    }
","['    ', 'public', ' ', 'void', ' ', 'should_pass_if_correct_timeout_value_specified', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'Map', '<', 'String', ',', ' ', 'String', '>', ' ', 'configuration', ' ', '=', ' ', 'Maps', '.', 'newHashMap', '(', ')', ';', '\n', '        ', 'configuration', '.', 'put', '(', '""', 'socketTimeout', '""', ',', ' ', '""', '1000', '""', ')', ';', '\n', '        ', 'PrerenderConfig', ' ', 'config', ' ', '=', ' ', 'new', ' ', 'PrerenderConfig', '(', 'configuration', ')', ';', '\n', '        ', '\n', '        ', 'final', ' ', 'CloseableHttpClient', ' ', 'httpClient', ' ', '=', ' ', 'config', '.', 'getHttpClient', '(', ')', ';', '\n', '\n', '        ', 'assertThat', '(', 'httpClient', ',', ' ', 'is', '(', 'notNullValue', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d677fb0e3a99f59bd76995e596688d13c1504b3d,PrerenderSeoService.java,proxyPrerenderedPageResponse,"    private boolean proxyPrerenderedPageResponse(HttpServletRequest request, HttpServletResponse response)
            throws IOException, URISyntaxException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        log.info(String.format(""Prerender proxy will send request to:%s"", apiUrl));
        final HttpGet getMethod = getHttpGet(apiUrl);
        copyRequestHeaders(request, getMethod);
        withPrerenderToken(getMethod);
        CloseableHttpResponse prerenderServerResponse = null;

        try {
            prerenderServerResponse = httpClient.execute(getMethod);",https://www.github.com/greengerong/prerender-java/commit/d677fb0e3a99f59bd76995e596688d13c1504b3d,"    private boolean proxyPrerenderedPageResponse(HttpServletRequest request, HttpServletResponse response)
            throws IOException, URISyntaxException {
        final String apiUrl = getApiUrl(getFullUrl(request));
        log.info(String.format(""Prerender proxy will send request to:%s"", apiUrl));
        final HttpGet getMethod = getHttpGet(apiUrl);
        copyRequestHeaders(request, getMethod);
        withPrerenderToken(getMethod);
        CloseableHttpResponse prerenderServerResponse = null;

        try {
            prerenderServerResponse = httpClient.execute(getMethod);
","['    ', 'private', ' ', 'boolean', ' ', 'proxyPrerenderedPageResponse', '(', 'HttpServletRequest', ' ', 'request', ',', ' ', 'HttpServletResponse', ' ', 'response', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'URISyntaxException', ' ', '{', '\n', '        ', 'final', ' ', 'String', ' ', 'apiUrl', ' ', '=', ' ', 'getApiUrl', '(', 'getFullUrl', '(', 'request', ')', ')', ';', '\n', '        ', 'log', '.', 'info', '(', 'String', '.', 'format', '(', '""', 'Prerender proxy will send request to:%s', '""', ',', ' ', 'apiUrl', ')', ')', ';', '\n', '        ', 'final', ' ', 'HttpGet', ' ', 'getMethod', ' ', '=', ' ', 'getHttpGet', '(', 'apiUrl', ')', ';', '\n', '        ', 'copyRequestHeaders', '(', 'request', ',', ' ', 'getMethod', ')', ';', '\n', '        ', 'withPrerenderToken', '(', 'getMethod', ')', ';', '\n', '        ', 'CloseableHttpResponse', ' ', 'prerenderServerResponse', ' ', '=', ' ', 'null', ';', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'prerenderServerResponse', ' ', '=', ' ', 'httpClient', '.', 'execute', '(', 'getMethod', ')', ';', '\n', '<END>']"
master,df2d5438c97ee6f55003ff3337375a27642c5a4a,PreRenderSEOFilterTest.java,should_not_handle_when_x_prerender_header_is_present,"    public void should_not_handle_when_x_prerender_header_is_present() throws Exception {
        //given
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        when(servletRequest.getHeader(""X-Prerender"")).thenReturn(""1"");
        //when
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        //then
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }",https://www.github.com/greengerong/prerender-java/commit/df2d5438c97ee6f55003ff3337375a27642c5a4a,"    public void should_not_handle_when_x_prerender_header_is_present() throws Exception {
        
        when(filterConfig.getInitParameter(""crawlerUserAgents"")).thenReturn(""crawler1,crawler2"");
        preRenderSEOFilter.init(filterConfig);

        when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/test""));
        when(servletRequest.getMethod()).thenReturn(METHOD_NAME);
        when(servletRequest.getParameterMap()).thenReturn(Maps.<String, String>newHashMap());
        when(servletRequest.getHeader(""User-Agent"")).thenReturn(""crawler1"");
        when(servletRequest.getHeader(""X-Prerender"")).thenReturn(""1"");
        
        preRenderSEOFilter.doFilter(servletRequest, servletResponse, filterChain);

        
        verify(httpClient, never()).execute(httpGet);
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
","['    ', 'public', ' ', 'void', ' ', 'should_not_handle_when_x_prerender_header_is_present', '(', ')', ' ', 'throws', ' ', 'Exception', ' ', '{', '\n', '        ', '\n', '        ', 'when', '(', 'filterConfig', '.', 'getInitParameter', '(', '""', 'crawlerUserAgents', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1,crawler2', '""', ')', ';', '\n', '        ', 'preRenderSEOFilter', '.', 'init', '(', 'filterConfig', ')', ';', '\n', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getRequestURL', '(', ')', ')', '.', 'thenReturn', '(', 'new', ' ', 'StringBuffer', '(', '""', 'http://localhost/test', '""', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getMethod', '(', ')', ')', '.', 'thenReturn', '(', 'METHOD_NAME', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getParameterMap', '(', ')', ')', '.', 'thenReturn', '(', 'Maps', '.', '<', 'String', ',', ' ', 'String', '>', 'newHashMap', '(', ')', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'User-Agent', '""', ')', ')', '.', 'thenReturn', '(', '""', 'crawler1', '""', ')', ';', '\n', '        ', 'when', '(', 'servletRequest', '.', 'getHeader', '(', '""', 'X-Prerender', '""', ')', ')', '.', 'thenReturn', '(', '""', '1', '""', ')', ';', '\n', '        ', '\n', '        ', 'preRenderSEOFilter', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ',', ' ', 'filterChain', ')', ';', '\n', '\n', '        ', '\n', '        ', 'verify', '(', 'httpClient', ',', ' ', 'never', '(', ')', ')', '.', 'execute', '(', 'httpGet', ')', ';', '\n', '        ', 'verify', '(', 'filterChain', ')', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6c415e843ce143e2eab3a21b27b00b143d68ba0b,PreRenderSEOFilter.java,doFilter,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPreRendered = prerenderSeoService.prerenderIfEligible(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPreRendered) {
            filterChain.doFilter(servletRequest, servletResponse);",https://www.github.com/greengerong/prerender-java/commit/6c415e843ce143e2eab3a21b27b00b143d68ba0b,"    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        boolean isPreRendered = prerenderSeoService.prerenderIfEligible(
                (HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);
        if (!isPreRendered) {
            filterChain.doFilter(servletRequest, servletResponse);
","['    ', 'public', ' ', 'void', ' ', 'doFilter', '(', 'ServletRequest', ' ', 'servletRequest', ',', ' ', 'ServletResponse', ' ', 'servletResponse', ',', ' ', 'FilterChain', ' ', 'filterChain', ')', '\n', '            ', 'throws', ' ', 'IOException', ',', ' ', 'ServletException', ' ', '{', '\n', '        ', 'boolean', ' ', 'isPreRendered', ' ', '=', ' ', 'prerenderSeoService', '.', 'prerenderIfEligible', '(', '\n', '                ', '(', 'HttpServletRequest', ')', ' ', 'servletRequest', ',', ' ', '(', 'HttpServletResponse', ')', ' ', 'servletResponse', ')', ';', '\n', '        ', 'if', ' ', '(', '!', 'isPreRendered', ')', ' ', '{', '\n', '            ', 'filterChain', '.', 'doFilter', '(', 'servletRequest', ',', ' ', 'servletResponse', ')', ';', '\n', '<END>']"
