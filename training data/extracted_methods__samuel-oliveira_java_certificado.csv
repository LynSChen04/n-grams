Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,createSSLContext,"    private SSLContext createSSLContext() {
        try {
            KeyManager[] keyManagers = createKeyManagers();
            TrustManager[] trustManagers = createTrustManagers();
            SSLContext sslContext = SSLContext.getInstance(""TLS"");
            sslContext.init(keyManagers, trustManagers, null);

            return sslContext;
        } catch (KeyManagementException e) {
            error(e.toString());
        } catch (KeyStoreException e) {
            error(e.toString());
        } catch (NoSuchAlgorithmException e) {
            error(e.toString());
        } catch (CertificateException e) {
            error(e.toString());
        } catch (IOException e) {
            error(e.toString());
        }
        return null;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"    private SSLContext createSSLContext() {
        try {
            KeyManager[] keyManagers = createKeyManagers();
            TrustManager[] trustManagers = createTrustManagers();
            SSLContext sslContext = SSLContext.getInstance(""TLS"");
            sslContext.init(keyManagers, trustManagers, null);

            return sslContext;
        } catch (KeyManagementException e) {
            error(e.toString());
        } catch (KeyStoreException e) {
            error(e.toString());
        } catch (NoSuchAlgorithmException e) {
            error(e.toString());
        } catch (CertificateException e) {
            error(e.toString());
        } catch (IOException e) {
            error(e.toString());
        }
        return null;
    }
","['    ', 'private', ' ', 'SSLContext', ' ', 'createSSLContext', '(', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyManager', '[', ']', ' ', 'keyManagers', ' ', '=', ' ', 'createKeyManagers', '(', ')', ';', '\n', '            ', 'TrustManager', '[', ']', ' ', 'trustManagers', ' ', '=', ' ', 'createTrustManagers', '(', ')', ';', '\n', '            ', 'SSLContext', ' ', 'sslContext', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', '""', 'TLS', '""', ')', ';', '\n', '            ', 'sslContext', '.', 'init', '(', 'keyManagers', ',', ' ', 'trustManagers', ',', ' ', 'null', ')', ';', '\n', '\n', '            ', 'return', ' ', 'sslContext', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyManagementException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'error', '(', 'e', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'error', '(', 'e', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'NoSuchAlgorithmException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'error', '(', 'e', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'CertificateException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'error', '(', 'e', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'error', '(', 'e', '.', 'toString', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'null', ';', '\n', '    ', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(String host, int port, InetAddress clientHost,
            int clientPort) throws IOException, UnknownHostException {
        return getSSLContext().getSocketFactory().createSocket(host, port,
                clientHost, clientPort);",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"    public Socket createSocket(String host, int port, InetAddress clientHost,
            int clientPort) throws IOException, UnknownHostException {
        return getSSLContext().getSocketFactory().createSocket(host, port,
                clientHost, clientPort);
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'String', ' ', 'host', ',', ' ', 'int', ' ', 'port', ',', ' ', 'InetAddress', ' ', 'clientHost', ',', '\n', '            ', 'int', ' ', 'clientPort', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'UnknownHostException', ' ', '{', '\n', '        ', 'return', ' ', 'getSSLContext', '(', ')', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', 'host', ',', ' ', 'port', ',', '\n', '                ', 'clientHost', ',', ' ', 'clientPort', ')', ';', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(String host, int port) throws IOException,
            UnknownHostException {
        return getSSLContext().getSocketFactory().createSocket(host, port);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"    public Socket createSocket(String host, int port) throws IOException,
            UnknownHostException {
        return getSSLContext().getSocketFactory().createSocket(host, port);
    }
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'String', ' ', 'host', ',', ' ', 'int', ' ', 'port', ')', ' ', 'throws', ' ', 'IOException', ',', '\n', '            ', 'UnknownHostException', ' ', '{', '\n', '        ', 'return', ' ', 'getSSLContext', '(', ')', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', 'host', ',', ' ', 'port', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(Socket socket, String host, int port,
            boolean autoClose) throws IOException, UnknownHostException {
        return getSSLContext().getSocketFactory().createSocket(socket, host,
                port, autoClose);",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"    public Socket createSocket(Socket socket, String host, int port,
            boolean autoClose) throws IOException, UnknownHostException {
        return getSSLContext().getSocketFactory().createSocket(socket, host,
                port, autoClose);
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'Socket', ' ', 'socket', ',', ' ', 'String', ' ', 'host', ',', ' ', 'int', ' ', 'port', ',', '\n', '            ', 'boolean', ' ', 'autoClose', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'UnknownHostException', ' ', '{', '\n', '        ', 'return', ' ', 'getSSLContext', '(', ')', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', 'socket', ',', ' ', 'host', ',', '\n', '                ', 'port', ',', ' ', 'autoClose', ')', ';', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,createKeyManagers,"    public KeyManager[] createKeyManagers() {
        HSKeyManager keyManager = new HSKeyManager(certificate, privateKey);

        return new KeyManager[]{keyManager};
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"    public KeyManager[] createKeyManagers() {
        HSKeyManager keyManager = new HSKeyManager(certificate, privateKey);

        return new KeyManager[]{keyManager};
    }
","['    ', 'public', ' ', 'KeyManager', '[', ']', ' ', 'createKeyManagers', '(', ')', ' ', '{', '\n', '        ', 'HSKeyManager', ' ', 'keyManager', ' ', '=', ' ', 'new', ' ', 'HSKeyManager', '(', 'certificate', ',', ' ', 'privateKey', ')', ';', '\n', '\n', '        ', 'return', ' ', 'new', ' ', 'KeyManager', '[', ']', '{', 'keyManager', '}', ';', '\n', '    ', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,createTrustManagers,"    public TrustManager[] createTrustManagers() throws KeyStoreException,
            NoSuchAlgorithmException, CertificateException, IOException {
        KeyStore trustStore = KeyStore.getInstance(""JKS"");

        trustStore.load(fileCacerts, ""changeit"".toCharArray());
        TrustManagerFactory trustManagerFactory = TrustManagerFactory
                .getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"    public TrustManager[] createTrustManagers() throws KeyStoreException,
            NoSuchAlgorithmException, CertificateException, IOException {
        KeyStore trustStore = KeyStore.getInstance(""JKS"");

        trustStore.load(fileCacerts, ""changeit"".toCharArray());
        TrustManagerFactory trustManagerFactory = TrustManagerFactory
                .getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }
","['    ', 'public', ' ', 'TrustManager', '[', ']', ' ', 'createTrustManagers', '(', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', '\n', '            ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'KeyStore', ' ', 'trustStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', '""', 'JKS', '""', ')', ';', '\n', '\n', '        ', 'trustStore', '.', 'load', '(', 'fileCacerts', ',', ' ', '""', 'changeit', '""', '.', 'toCharArray', '(', ')', ')', ';', '\n', '        ', 'TrustManagerFactory', ' ', 'trustManagerFactory', ' ', '=', ' ', 'TrustManagerFactory', '\n', '                ', '.', 'getInstance', '(', 'TrustManagerFactory', '.', 'getDefaultAlgorithm', '(', ')', ')', ';', '\n', '        ', 'trustManagerFactory', '.', 'init', '(', 'trustStore', ')', ';', '\n', '        ', 'return', ' ', 'trustManagerFactory', '.', 'getTrustManagers', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,chooseClientAlias,"        public String chooseClientAlias(String[] arg0, Principal[] arg1,
                Socket arg2) {
            return certificate.getIssuerDN().getName();
        }",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"        public String chooseClientAlias(String[] arg0, Principal[] arg1,
                Socket arg2) {
            return certificate.getIssuerDN().getName();
        }
","['        ', 'public', ' ', 'String', ' ', 'chooseClientAlias', '(', 'String', '[', ']', ' ', 'arg0', ',', ' ', 'Principal', '[', ']', ' ', 'arg1', ',', '\n', '                ', 'Socket', ' ', 'arg2', ')', ' ', '{', '\n', '            ', 'return', ' ', 'certificate', '.', 'getIssuerDN', '(', ')', '.', 'getName', '(', ')', ';', '\n', '        ', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,chooseServerAlias,"        public String chooseServerAlias(String arg0, Principal[] arg1,
                Socket arg2) {
            return null;
        }",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"        public String chooseServerAlias(String arg0, Principal[] arg1,
                Socket arg2) {
            return null;
        }
","['        ', 'public', ' ', 'String', ' ', 'chooseServerAlias', '(', 'String', ' ', 'arg0', ',', ' ', 'Principal', '[', ']', ' ', 'arg1', ',', '\n', '                ', 'Socket', ' ', 'arg2', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,SocketFactoryDinamico.java,error,"    private static void error(String log) {
        System.out.println(""ERROR: "" + log);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"    private static void error(String log) {
        System.out.println(""ERROR: "" + log);
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'error', '(', 'String', ' ', 'log', ')', ' ', '{', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'ERROR: ', '""', ' ', '+', ' ', 'log', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CacertUtil.java,gerarCacert,"	    public static void gerarCacert(List<String> listaEnderecos, String caminhoCacert) {  
	    	cacert = caminhoCacert;
	        try {  
	        	",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	    public static void gerarCacert(List<String> listaEnderecos, String caminhoCacert) {  
	    	cacert = caminhoCacert;
	        try {  
	        	
","['\t    ', 'public', ' ', 'static', ' ', 'void', ' ', 'gerarCacert', '(', 'List', '<', 'String', '>', ' ', 'listaEnderecos', ',', ' ', 'String', ' ', 'caminhoCacert', ')', ' ', '{', '  ', '\n', '\t    \t', 'cacert', ' ', '=', ' ', 'caminhoCacert', ';', '\n', '\t        ', 'try', ' ', '{', '  ', '\n', '\t        \t', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CacertUtil.java,get,"	    public static void get(String host, KeyStore ks){  
	    	try {  
		        SSLContext context = SSLContext.getInstance(""TLS"");  ",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	    public static void get(String host, KeyStore ks){  
	    	try {  
		        SSLContext context = SSLContext.getInstance(""TLS"");  
","['\t    ', 'public', ' ', 'static', ' ', 'void', ' ', 'get', '(', 'String', ' ', 'host', ',', ' ', 'KeyStore', ' ', 'ks', ')', '{', '  ', '\n', '\t    \t', 'try', ' ', '{', '  ', '\n', '\t\t        ', 'SSLContext', ' ', 'context', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', '""', 'TLS', '""', ')', ';', '  ', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CacertUtil.java,checkClientTrusted,"	        public void checkClientTrusted(X509Certificate[] chain, String authType)  
	                throws CertificateException {  
	            throw new UnsupportedOperationException();  
	        }  ",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	        public void checkClientTrusted(X509Certificate[] chain, String authType)  
	                throws CertificateException {  
	            throw new UnsupportedOperationException();  
	        }  
","['\t        ', 'public', ' ', 'void', ' ', 'checkClientTrusted', '(', 'X509Certificate', '[', ']', ' ', 'chain', ',', ' ', 'String', ' ', 'authType', ')', '  ', '\n', '\t                ', 'throws', ' ', 'CertificateException', ' ', '{', '  ', '\n', '\t            ', 'throw', ' ', 'new', ' ', 'UnsupportedOperationException', '(', ')', ';', '  ', '\n', '\t        ', '}', '  ', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CacertUtil.java,checkServerTrusted,"	        public void checkServerTrusted(X509Certificate[] chain, String authType)  
	                throws CertificateException {  
	            this.chain = chain;  
	            this.tm.checkServerTrusted(chain, authType);  
	        }  ",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	        public void checkServerTrusted(X509Certificate[] chain, String authType)  
	                throws CertificateException {  
	            this.chain = chain;  
	            this.tm.checkServerTrusted(chain, authType);  
	        }  
","['\t        ', 'public', ' ', 'void', ' ', 'checkServerTrusted', '(', 'X509Certificate', '[', ']', ' ', 'chain', ',', ' ', 'String', ' ', 'authType', ')', '  ', '\n', '\t                ', 'throws', ' ', 'CertificateException', ' ', '{', '  ', '\n', '\t            ', 'this', '.', 'chain', ' ', '=', ' ', 'chain', ';', '  ', '\n', '\t            ', 'this', '.', 'tm', '.', 'checkServerTrusted', '(', 'chain', ',', ' ', 'authType', ')', ';', '  ', '\n', '\t        ', '}', '  ', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CacertUtil.java,info,"	    private static void info(String log) {  
	        System.out.println(""INFO: "" + log);  
	    }  ",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	    private static void info(String log) {  
	        System.out.println(""INFO: "" + log);  
	    }  
","['\t    ', 'private', ' ', 'static', ' ', 'void', ' ', 'info', '(', 'String', ' ', 'log', ')', ' ', '{', '  ', '\n', '\t        ', 'System', '.', 'out', '.', 'println', '(', '""', 'INFO: ', '""', ' ', '+', ' ', 'log', ')', ';', '  ', '\n', '\t    ', '}', '  ', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CacertUtil.java,error,"	    private static void error(String log) {  
	        System.out.println(""ERROR: "" + log);  
	    }  ",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	    private static void error(String log) {  
	        System.out.println(""ERROR: "" + log);  
	    }  
","['\t    ', 'private', ' ', 'static', ' ', 'void', ' ', 'error', '(', 'String', ' ', 'log', ')', ' ', '{', '  ', '\n', '\t        ', 'System', '.', 'out', '.', 'println', '(', '""', 'ERROR: ', '""', ' ', '+', ' ', 'log', ')', ';', '  ', '\n', '\t    ', '}', '  ', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,inicializaCertificado,"	public static void inicializaCertificado(Certificado certificado , InputStream cacert) throws CertificadoException {
		
		try {
			",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	public static void inicializaCertificado(Certificado certificado , InputStream cacert) throws CertificadoException {
		
		try {
			
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'inicializaCertificado', '(', 'Certificado', ' ', 'certificado', ' ', ',', ' ', 'InputStream', ' ', 'cacert', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\t\t', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,DataValidade,"	public static Date DataValidade(Certificado certificado) throws CertificadoException {

		KeyStore keyStore = getKeyStore(certificado);
		X509Certificate certificate = getCertificate(certificado, keyStore);
		return certificate.getNotAfter();
",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	public static Date DataValidade(Certificado certificado) throws CertificadoException {

		KeyStore keyStore = getKeyStore(certificado);
		X509Certificate certificate = getCertificate(certificado, keyStore);
		return certificate.getNotAfter();
","['\t', 'public', ' ', 'static', ' ', 'Date', ' ', 'DataValidade', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '\t\t', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '\t\t', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '\t\t', 'return', ' ', 'certificate', '.', 'getNotAfter', '(', ')', ';', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,diasRestantes,"	public static Long diasRestantes(Certificado certificado) throws CertificadoException {

		Date data = DataValidade(certificado);
		if (data == null) {
			return null;
		}
		long differenceMilliSeconds = data.getTime() - new Date().getTime();
		return differenceMilliSeconds / 1000 / 60 / 60 / 24;
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	public static Long diasRestantes(Certificado certificado) throws CertificadoException {

		Date data = DataValidade(certificado);
		if (data == null) {
			return null;
		}
		long differenceMilliSeconds = data.getTime() - new Date().getTime();
		return differenceMilliSeconds / 1000 / 60 / 60 / 24;
	}
","['\t', 'public', ' ', 'static', ' ', 'Long', ' ', 'diasRestantes', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '\t\t', 'Date', ' ', 'data', ' ', '=', ' ', 'DataValidade', '(', 'certificado', ')', ';', '\n', '\t\t', 'if', ' ', '(', 'data', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'null', ';', '\n', '\t\t', '}', '\n', '\t\t', 'long', ' ', 'differenceMilliSeconds', ' ', '=', ' ', 'data', '.', 'getTime', '(', ')', ' ', '-', ' ', 'new', ' ', 'Date', '(', ')', '.', 'getTime', '(', ')', ';', '\n', '\t\t', 'return', ' ', 'differenceMilliSeconds', ' ', '/', ' ', '1000', ' ', '/', ' ', '60', ' ', '/', ' ', '60', ' ', '/', ' ', '24', ';', '\n', '\t', '}', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,valido,"	public static boolean valido(Certificado certificado) throws CertificadoException {

		if (DataValidade(certificado) != null && DataValidade(certificado).after(new Date())) {
			return true;",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	public static boolean valido(Certificado certificado) throws CertificadoException {

		if (DataValidade(certificado) != null && DataValidade(certificado).after(new Date())) {
			return true;
","['\t', 'public', ' ', 'static', ' ', 'boolean', ' ', 'valido', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '\t\t', 'if', ' ', '(', 'DataValidade', '(', 'certificado', ')', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'DataValidade', '(', 'certificado', ')', '.', 'after', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ' ', '{', '\n', '\t\t\t', 'return', ' ', 'true', ';', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,getKeyStore,"	public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
		try {
			KeyStore keyStore;",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
		try {
			KeyStore keyStore;
","['\t', 'public', ' ', 'static', ' ', 'KeyStore', ' ', 'getKeyStore', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'KeyStore', ' ', 'keyStore', ';', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,getCertificate,"	public static X509Certificate getCertificate(Certificado certificado, KeyStore keystore) throws CertificadoException {
		try {
",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	public static X509Certificate getCertificate(Certificado certificado, KeyStore keystore) throws CertificadoException {
		try {
","['\t', 'public', ' ', 'static', ' ', 'X509Certificate', ' ', 'getCertificate', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'KeyStore', ' ', 'keystore', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,getBytesFromInputStream,"	private static byte[] getBytesFromInputStream(InputStream is) throws IOException {
		try (ByteArrayOutputStream os = new ByteArrayOutputStream();) {
			byte[] buffer = new byte[0xFFFF];",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	private static byte[] getBytesFromInputStream(InputStream is) throws IOException {
		try (ByteArrayOutputStream os = new ByteArrayOutputStream();) {
			byte[] buffer = new byte[0xFFFF];
","['\t', 'private', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'getBytesFromInputStream', '(', 'InputStream', ' ', 'is', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '\t\t', 'try', ' ', '(', 'ByteArrayOutputStream', ' ', 'os', ' ', '=', ' ', 'new', ' ', 'ByteArrayOutputStream', '(', ')', ';', ')', ' ', '{', '\n', '\t\t\t', 'byte', '[', ']', ' ', 'buffer', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0xFFFF', ']', ';', '\n', '<END>']"
master,a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,CertificadoUtil.java,configA3,"	private static InputStream configA3(String marca, String dll)   
            throws UnsupportedEncodingException {  
        StringBuilder conf = new StringBuilder();  
        conf.append(""name = "")  
            .append(marca)  
            .append(""\n\r"")  
            .append(""library = "")  
            .append(dll)  
            .append(""\n\r"")  
            .append(""showInfo = true"");  
        return new ByteArrayInputStream(conf.toString().getBytes(""UTF-8""));   
    }  ",https://www.github.com/samuel-oliveira/java_certificado/commit/a9bbecfcf63e7b33da203b0a4a64bf26888ee4f4,"	private static InputStream configA3(String marca, String dll)   
            throws UnsupportedEncodingException {  
        StringBuilder conf = new StringBuilder();  
        conf.append(""name = "")  
            .append(marca)  
            .append(""\n\r"")  
            .append(""library = "")  
            .append(dll)  
            .append(""\n\r"")  
            .append(""showInfo = true"");  
        return new ByteArrayInputStream(conf.toString().getBytes(""UTF-8""));   
    }  
","['\t', 'private', ' ', 'static', ' ', 'InputStream', ' ', 'configA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ')', '   ', '\n', '            ', 'throws', ' ', 'UnsupportedEncodingException', ' ', '{', '  ', '\n', '        ', 'StringBuilder', ' ', 'conf', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '  ', '\n', '        ', 'conf', '.', 'append', '(', '""', 'name = ', '""', ')', '  ', '\n', '            ', '.', 'append', '(', 'marca', ')', '  ', '\n', '            ', '.', 'append', '(', '""', '\\', 'n', '\\', 'r', '""', ')', '  ', '\n', '            ', '.', 'append', '(', '""', 'library = ', '""', ')', '  ', '\n', '            ', '.', 'append', '(', 'dll', ')', '  ', '\n', '            ', '.', 'append', '(', '""', '\\', 'n', '\\', 'r', '""', ')', '  ', '\n', '            ', '.', 'append', '(', '""', 'showInfo = true', '""', ')', ';', '  ', '\n', '        ', 'return', ' ', 'new', ' ', 'ByteArrayInputStream', '(', 'conf', '.', 'toString', '(', ')', '.', 'getBytes', '(', '""', 'UTF-8', '""', ')', ')', ';', '   ', '\n', '    ', '}', '  ', '\n', '<END>']"
master,2f4edc1edbbdfdd47dd91ead14045bc9d05e3374,CertificadoService.java,listaCertificadosWindows,"	public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

		// Estou setando a variavel para 20 dispositivos no maximo
		List<Certificado> listaCert = new ArrayList<>(20);
		Certificado certificado = new Certificado();
		certificado.setTipo(Certificado.WINDOWS);;
		try {
			KeyStore ks = getKeyStore(certificado);
			Enumeration<String> aliasEnum = ks.aliases();

			while (aliasEnum.hasMoreElements()) {
				String aliasKey = (String) aliasEnum.nextElement();

				if (aliasKey != null) {
					Certificado cert = new Certificado();
					cert.setNome(aliasKey);
					cert.setTipo(Certificado.WINDOWS);
					cert.setSenha("""");
					Date dataValidade = DataValidade(cert);
					if (dataValidade == null) {
						cert.setNome(""(INVALIDO)"" + aliasKey);
						cert.setVencimento(LocalDate.of(2000, 1, 1));
						cert.setDiasRestantes(0L);
						cert.setValido(false);
					} else {
						cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
						cert.setDiasRestantes(diasRestantes(cert));
						cert.setValido(valido(cert));
					}

					listaCert.add(cert);
				}

			}

		} catch (KeyStoreException ex) {
			throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
		}

		return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/2f4edc1edbbdfdd47dd91ead14045bc9d05e3374,"	public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

		
		List<Certificado> listaCert = new ArrayList<>(20);
		Certificado certificado = new Certificado();
		certificado.setTipo(Certificado.WINDOWS);;
		try {
			KeyStore ks = getKeyStore(certificado);
			Enumeration<String> aliasEnum = ks.aliases();

			while (aliasEnum.hasMoreElements()) {
				String aliasKey = (String) aliasEnum.nextElement();

				if (aliasKey != null) {
					Certificado cert = new Certificado();
					cert.setNome(aliasKey);
					cert.setTipo(Certificado.WINDOWS);
					cert.setSenha("""");
					Date dataValidade = DataValidade(cert);
					if (dataValidade == null) {
						cert.setNome(""(INVALIDO)"" + aliasKey);
						cert.setVencimento(LocalDate.of(2000, 1, 1));
						cert.setDiasRestantes(0L);
						cert.setValido(false);
					} else {
						cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
						cert.setDiasRestantes(diasRestantes(cert));
						cert.setValido(valido(cert));
					}

					listaCert.add(cert);
				}

			}

		} catch (KeyStoreException ex) {
			throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
		}

		return listaCert;
","['\t', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '\t\t', '\n', '\t\t', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', '20', ')', ';', '\n', '\t\t', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '\t\t', 'certificado', '.', 'setTipo', '(', 'Certificado', '.', 'WINDOWS', ')', ';', ';', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '\t\t\t', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '\t\t\t', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'String', ' ', 'aliasKey', ' ', '=', ' ', '(', 'String', ')', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '\t\t\t\t\t', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '\t\t\t\t\t', 'cert', '.', 'setTipo', '(', 'Certificado', '.', 'WINDOWS', ')', ';', '\n', '\t\t\t\t\t', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '\t\t\t\t\t', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'DataValidade', '(', 'cert', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', ' ', 'aliasKey', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\n', '\t\t\t\t\t', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', ' ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,601826053fe83b70888d5ec807d5daa0a9e0eeb5,CertificadoService.java,listaCertificadosWindows,"	public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

		// Estou setando a variavel para 20 dispositivos no maximo
		List<Certificado> listaCert = new ArrayList<>(20);
		Certificado certificado = new Certificado();
		certificado.setTipo(Certificado.WINDOWS);;
		try {
			KeyStore ks = getKeyStore(certificado);
			Enumeration<String> aliasEnum = ks.aliases();

			while (aliasEnum.hasMoreElements()) {
				String aliasKey = aliasEnum.nextElement();

				if (aliasKey != null) {
					Certificado cert = new Certificado();
					cert.setNome(aliasKey);
					cert.setTipo(Certificado.WINDOWS);
					cert.setSenha("""");
					Date dataValidade = DataValidade(cert);
					if (dataValidade == null) {
						cert.setNome(""(INVALIDO)"" + aliasKey);
						cert.setVencimento(LocalDate.of(2000, 1, 1));
						cert.setDiasRestantes(0L);
						cert.setValido(false);
					} else {
						cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
						cert.setDiasRestantes(diasRestantes(cert));
						cert.setValido(valido(cert));
					}

					listaCert.add(cert);
				}

			}

		} catch (KeyStoreException ex) {
			throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
		}

		return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/601826053fe83b70888d5ec807d5daa0a9e0eeb5,"	public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

		
		List<Certificado> listaCert = new ArrayList<>(20);
		Certificado certificado = new Certificado();
		certificado.setTipo(Certificado.WINDOWS);;
		try {
			KeyStore ks = getKeyStore(certificado);
			Enumeration<String> aliasEnum = ks.aliases();

			while (aliasEnum.hasMoreElements()) {
				String aliasKey = aliasEnum.nextElement();

				if (aliasKey != null) {
					Certificado cert = new Certificado();
					cert.setNome(aliasKey);
					cert.setTipo(Certificado.WINDOWS);
					cert.setSenha("""");
					Date dataValidade = DataValidade(cert);
					if (dataValidade == null) {
						cert.setNome(""(INVALIDO)"" + aliasKey);
						cert.setVencimento(LocalDate.of(2000, 1, 1));
						cert.setDiasRestantes(0L);
						cert.setValido(false);
					} else {
						cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
						cert.setDiasRestantes(diasRestantes(cert));
						cert.setValido(valido(cert));
					}

					listaCert.add(cert);
				}

			}

		} catch (KeyStoreException ex) {
			throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
		}

		return listaCert;
","['\t', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '\t\t', '\n', '\t\t', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', '20', ')', ';', '\n', '\t\t', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '\t\t', 'certificado', '.', 'setTipo', '(', 'Certificado', '.', 'WINDOWS', ')', ';', ';', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '\t\t\t', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '\t\t\t', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '\t\t\t\t', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '\t\t\t\t', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '\t\t\t\t\t', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '\t\t\t\t\t', 'cert', '.', 'setTipo', '(', 'Certificado', '.', 'WINDOWS', ')', ';', '\n', '\t\t\t\t\t', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '\t\t\t\t\t', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'DataValidade', '(', 'cert', ')', ';', '\n', '\t\t\t\t\t', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', ' ', 'aliasKey', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '\t\t\t\t\t', '}', ' ', 'else', ' ', '{', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '\t\t\t\t\t\t', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '\t\t\t\t\t', '}', '\n', '\n', '\t\t\t\t\t', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '\t\t\t\t', '}', '\n', '\n', '\t\t\t', '}', '\n', '\n', '\t\t', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', ' ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '\t\t', '}', '\n', '\n', '\t\t', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(final String host, final int port, final InetAddress localAddress, final int localPort, final HttpConnectionParams params) throws IOException {
        final Socket socket = this.ssl.getSocketFactory().createSocket();
        ((SSLSocket) socket).setEnabledProtocols(new String[]{""SSLv3"",""TLSv1""});
        socket.bind(new InetSocketAddress(localAddress, localPort));
        socket.connect(new InetSocketAddress(host, port), 60000);
        return socket;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"    public Socket createSocket(final String host, final int port, final InetAddress localAddress, final int localPort, final HttpConnectionParams params) throws IOException {
        final Socket socket = this.ssl.getSocketFactory().createSocket();
        ((SSLSocket) socket).setEnabledProtocols(new String[]{""SSLv3"",""TLSv1""});
        socket.bind(new InetSocketAddress(localAddress, localPort));
        socket.connect(new InetSocketAddress(host, port), 60000);
        return socket;
    }
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'final', ' ', 'String', ' ', 'host', ',', ' ', 'final', ' ', 'int', ' ', 'port', ',', ' ', 'final', ' ', 'InetAddress', ' ', 'localAddress', ',', ' ', 'final', ' ', 'int', ' ', 'localPort', ',', ' ', 'final', ' ', 'HttpConnectionParams', ' ', 'params', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'Socket', ' ', 'socket', ' ', '=', ' ', 'this', '.', 'ssl', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', ')', ';', '\n', '        ', '(', '(', 'SSLSocket', ')', ' ', 'socket', ')', '.', 'setEnabledProtocols', '(', 'new', ' ', 'String', '[', ']', '{', '""', 'SSLv3', '""', ',', '""', 'TLSv1', '""', '}', ')', ';', '\n', '        ', 'socket', '.', 'bind', '(', 'new', ' ', 'InetSocketAddress', '(', 'localAddress', ',', ' ', 'localPort', ')', ')', ';', '\n', '        ', 'socket', '.', 'connect', '(', 'new', ' ', 'InetSocketAddress', '(', 'host', ',', ' ', 'port', ')', ',', ' ', '60000', ')', ';', '\n', '        ', 'return', ' ', 'socket', ';', '\n', '    ', '}', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(final String host, final int port, final InetAddress clientHost, final int clientPort) throws IOException {
        return this.ssl.getSocketFactory().createSocket(host, port, clientHost, clientPort);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"    public Socket createSocket(final String host, final int port, final InetAddress clientHost, final int clientPort) throws IOException {
        return this.ssl.getSocketFactory().createSocket(host, port, clientHost, clientPort);
    }
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'final', ' ', 'String', ' ', 'host', ',', ' ', 'final', ' ', 'int', ' ', 'port', ',', ' ', 'final', ' ', 'InetAddress', ' ', 'clientHost', ',', ' ', 'final', ' ', 'int', ' ', 'clientPort', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'return', ' ', 'this', '.', 'ssl', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', 'host', ',', ' ', 'port', ',', ' ', 'clientHost', ',', ' ', 'clientPort', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(final String host, final int port) throws IOException {
        return this.ssl.getSocketFactory().createSocket(host, port);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"    public Socket createSocket(final String host, final int port) throws IOException {
        return this.ssl.getSocketFactory().createSocket(host, port);
    }
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'final', ' ', 'String', ' ', 'host', ',', ' ', 'final', ' ', 'int', ' ', 'port', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'return', ' ', 'this', '.', 'ssl', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', 'host', ',', ' ', 'port', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,createSSLContext,"    private SSLContext createSSLContext() throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(""TLSv1"");
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"    private SSLContext createSSLContext() throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(""TLSv1"");
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }
","['    ', 'private', ' ', 'SSLContext', ' ', 'createSSLContext', '(', ')', ' ', 'throws', ' ', 'UnrecoverableKeyException', ',', ' ', 'CertificateException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'KeyStoreException', ',', ' ', 'IOException', ',', ' ', 'KeyManagementException', ' ', '{', '\n', '        ', 'final', ' ', 'KeyManager', '[', ']', ' ', 'keyManagers', ' ', '=', ' ', 'createKeyManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'TrustManager', '[', ']', ' ', 'trustManagers', ' ', '=', ' ', 'createTrustManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'SSLContext', ' ', 'sslContext', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', '""', 'TLSv1', '""', ')', ';', '\n', '        ', 'sslContext', '.', 'init', '(', 'keyManagers', ',', ' ', 'trustManagers', ',', ' ', 'null', ')', ';', '\n', '        ', 'return', ' ', 'sslContext', ';', '\n', '    ', '}', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,createKeyManagers,"    private KeyManager[] createKeyManagers() throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        return new KeyManager[]{new NFKeyManager(certificate, privateKey)};
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"    private KeyManager[] createKeyManagers() throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        return new KeyManager[]{new NFKeyManager(certificate, privateKey)};
    }
","['    ', 'private', ' ', 'KeyManager', '[', ']', ' ', 'createKeyManagers', '(', ')', ' ', 'throws', ' ', 'UnrecoverableKeyException', ',', ' ', 'KeyStoreException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'KeyManager', '[', ']', '{', 'new', ' ', 'NFKeyManager', '(', 'certificate', ',', ' ', 'privateKey', ')', '}', ';', '\n', '    ', '}', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,createTrustManagers,"    private TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(""JKS"");
        trustStore.load(fileCacerts, ""changeit"".toCharArray());
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"    private TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(""JKS"");
        trustStore.load(fileCacerts, ""changeit"".toCharArray());
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }
","['    ', 'private', ' ', 'TrustManager', '[', ']', ' ', 'createTrustManagers', '(', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'TrustManagerFactory', ' ', 'trustManagerFactory', ' ', '=', ' ', 'TrustManagerFactory', '.', 'getInstance', '(', 'TrustManagerFactory', '.', 'getDefaultAlgorithm', '(', ')', ')', ';', '\n', '        ', 'KeyStore', ' ', 'trustStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', '""', 'JKS', '""', ')', ';', '\n', '        ', 'trustStore', '.', 'load', '(', 'fileCacerts', ',', ' ', '""', 'changeit', '""', '.', 'toCharArray', '(', ')', ')', ';', '\n', '        ', 'trustManagerFactory', '.', 'init', '(', 'trustStore', ')', ';', '\n', '        ', 'return', ' ', 'trustManagerFactory', '.', 'getTrustManagers', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,chooseClientAlias,"        public String chooseClientAlias(final String[] arg0, final Principal[] arg1, final Socket arg2) {
            return this.certificate.getIssuerDN().getName();
        }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"        public String chooseClientAlias(final String[] arg0, final Principal[] arg1, final Socket arg2) {
            return this.certificate.getIssuerDN().getName();
        }
","['        ', 'public', ' ', 'String', ' ', 'chooseClientAlias', '(', 'final', ' ', 'String', '[', ']', ' ', 'arg0', ',', ' ', 'final', ' ', 'Principal', '[', ']', ' ', 'arg1', ',', ' ', 'final', ' ', 'Socket', ' ', 'arg2', ')', ' ', '{', '\n', '            ', 'return', ' ', 'this', '.', 'certificate', '.', 'getIssuerDN', '(', ')', '.', 'getName', '(', ')', ';', '\n', '        ', '}', '\n', '<END>']"
master,5fd979b9122c8512186a117c244c94261a523432,SocketFactoryDinamico.java,chooseServerAlias,"        public String chooseServerAlias(final String arg0, final Principal[] arg1, final Socket arg2) {
            return null;
        }",https://www.github.com/samuel-oliveira/java_certificado/commit/5fd979b9122c8512186a117c244c94261a523432,"        public String chooseServerAlias(final String arg0, final Principal[] arg1, final Socket arg2) {
            return null;
        }
","['        ', 'public', ' ', 'String', ' ', 'chooseServerAlias', '(', 'final', ' ', 'String', ' ', 'arg0', ',', ' ', 'final', ' ', 'Principal', '[', ']', ' ', 'arg1', ',', ' ', 'final', ' ', 'Socket', ' ', 'arg2', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,SocketFactoryDinamico.java,createSSLContext,"    private SSLContext createSSLContext() throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(""TLS"");
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"    private SSLContext createSSLContext() throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(""TLS"");
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }
","['    ', 'private', ' ', 'SSLContext', ' ', 'createSSLContext', '(', ')', ' ', 'throws', ' ', 'UnrecoverableKeyException', ',', ' ', 'CertificateException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'KeyStoreException', ',', ' ', 'IOException', ',', ' ', 'KeyManagementException', ' ', '{', '\n', '        ', 'final', ' ', 'KeyManager', '[', ']', ' ', 'keyManagers', ' ', '=', ' ', 'createKeyManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'TrustManager', '[', ']', ' ', 'trustManagers', ' ', '=', ' ', 'createTrustManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'SSLContext', ' ', 'sslContext', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', '""', 'TLS', '""', ')', ';', '\n', '        ', 'sslContext', '.', 'init', '(', 'keyManagers', ',', ' ', 'trustManagers', ',', ' ', 'null', ')', ';', '\n', '        ', 'return', ' ', 'sslContext', ';', '\n', '    ', '}', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,main,"	public static void main(String[] args) {
		gerarCacert(null, CACERT);
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"	public static void main(String[] args) {
		gerarCacert(null, CACERT);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\t\t', 'gerarCacert', '(', 'null', ',', ' ', 'CACERT', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,gerarCacert,"	public static void gerarCacert(List<String> listaEnderecos, String caminhoCacert) {
		cacert = caminhoCacert;
		try {
",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"	public static void gerarCacert(List<String> listaEnderecos, String caminhoCacert) {
		cacert = caminhoCacert;
		try {
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'gerarCacert', '(', 'List', '<', 'String', '>', ' ', 'listaEnderecos', ',', ' ', 'String', ' ', 'caminhoCacert', ')', ' ', '{', '\n', '\t\t', 'cacert', ' ', '=', ' ', 'caminhoCacert', ';', '\n', '\t\t', 'try', ' ', '{', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,get,"	public static void get(String host, KeyStore ks) {
		try {
			SSLContext context = SSLContext.getInstance(""TLS"");",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"	public static void get(String host, KeyStore ks) {
		try {
			SSLContext context = SSLContext.getInstance(""TLS"");
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'get', '(', 'String', ' ', 'host', ',', ' ', 'KeyStore', ' ', 'ks', ')', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'SSLContext', ' ', 'context', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', '""', 'TLS', '""', ')', ';', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,checkClientTrusted,"		public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
			throw new UnsupportedOperationException();
		}",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"		public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
			throw new UnsupportedOperationException();
		}
","['\t\t', 'public', ' ', 'void', ' ', 'checkClientTrusted', '(', 'X509Certificate', '[', ']', ' ', 'chain', ',', ' ', 'String', ' ', 'authType', ')', ' ', 'throws', ' ', 'CertificateException', ' ', '{', '\n', '\t\t\t', 'throw', ' ', 'new', ' ', 'UnsupportedOperationException', '(', ')', ';', '\n', '\t\t', '}', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,checkServerTrusted,"		public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
			this.chain = chain;
			this.tm.checkServerTrusted(chain, authType);
		}",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"		public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
			this.chain = chain;
			this.tm.checkServerTrusted(chain, authType);
		}
","['\t\t', 'public', ' ', 'void', ' ', 'checkServerTrusted', '(', 'X509Certificate', '[', ']', ' ', 'chain', ',', ' ', 'String', ' ', 'authType', ')', ' ', 'throws', ' ', 'CertificateException', ' ', '{', '\n', '\t\t\t', 'this', '.', 'chain', ' ', '=', ' ', 'chain', ';', '\n', '\t\t\t', 'this', '.', 'tm', '.', 'checkServerTrusted', '(', 'chain', ',', ' ', 'authType', ')', ';', '\n', '\t\t', '}', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,info,"	private static void info(String log) {
		System.out.println(""INFO: "" + log);
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"	private static void info(String log) {
		System.out.println(""INFO: "" + log);
	}
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'info', '(', 'String', ' ', 'log', ')', ' ', '{', '\n', '\t\t', 'System', '.', 'out', '.', 'println', '(', '""', 'INFO: ', '""', ' ', '+', ' ', 'log', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,8622424c0909ac3993236c3f6bc777323d29e0c7,CacertUtil.java,error,"	private static void error(String log) {
		System.out.println(""ERROR: "" + log);
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/8622424c0909ac3993236c3f6bc777323d29e0c7,"	private static void error(String log) {
		System.out.println(""ERROR: "" + log);
	}
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'error', '(', 'String', ' ', 'log', ')', ' ', '{', '\n', '\t\t', 'System', '.', 'out', '.', 'println', '(', '""', 'ERROR: ', '""', ' ', '+', ' ', 'log', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,1cd95a2e75d3afb5edefa30991ed53586e056d28,Certificado.java,isAtivarProperties,"	public boolean isAtivarProperties() {
		return ativarProperties;
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/1cd95a2e75d3afb5edefa30991ed53586e056d28,"	public boolean isAtivarProperties() {
		return ativarProperties;
	}
","['\t', 'public', ' ', 'boolean', ' ', 'isAtivarProperties', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'ativarProperties', ';', '\n', '\t', '}', '\n', '<END>']"
master,cfb2369248ceaec9cc4ffe4a4cf951be19217cd5,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(final String host, final int port, final InetAddress localAddress, final int localPort, final HttpConnectionParams params) throws IOException {
        final Socket socket = this.ssl.getSocketFactory().createSocket();
        ((SSLSocket) socket).setEnabledProtocols(new String[]{""TLSv1.2""});
        socket.bind(new InetSocketAddress(localAddress, localPort));
        socket.connect(new InetSocketAddress(host, port), 60000);
        return socket;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/cfb2369248ceaec9cc4ffe4a4cf951be19217cd5,"    public Socket createSocket(final String host, final int port, final InetAddress localAddress, final int localPort, final HttpConnectionParams params) throws IOException {
        final Socket socket = this.ssl.getSocketFactory().createSocket();
        ((SSLSocket) socket).setEnabledProtocols(new String[]{""TLSv1.2""});
        socket.bind(new InetSocketAddress(localAddress, localPort));
        socket.connect(new InetSocketAddress(host, port), 60000);
        return socket;
    }
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'final', ' ', 'String', ' ', 'host', ',', ' ', 'final', ' ', 'int', ' ', 'port', ',', ' ', 'final', ' ', 'InetAddress', ' ', 'localAddress', ',', ' ', 'final', ' ', 'int', ' ', 'localPort', ',', ' ', 'final', ' ', 'HttpConnectionParams', ' ', 'params', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'Socket', ' ', 'socket', ' ', '=', ' ', 'this', '.', 'ssl', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', ')', ';', '\n', '        ', '(', '(', 'SSLSocket', ')', ' ', 'socket', ')', '.', 'setEnabledProtocols', '(', 'new', ' ', 'String', '[', ']', '{', '""', 'TLSv1.2', '""', '}', ')', ';', '\n', '        ', 'socket', '.', 'bind', '(', 'new', ' ', 'InetSocketAddress', '(', 'localAddress', ',', ' ', 'localPort', ')', ')', ';', '\n', '        ', 'socket', '.', 'connect', '(', 'new', ' ', 'InetSocketAddress', '(', 'host', ',', ' ', 'port', ')', ',', ' ', '60000', ')', ';', '\n', '        ', 'return', ' ', 'socket', ';', '\n', '    ', '}', '\n', '<END>']"
master,3ce778a73e5fbb3dc8638c91ac00c9ed37269469,CacertUtil.java,main,"	public static void main(String[] args) {
		List<String> lista = new ArrayList<>();
		lista.add(""ymbdlb.santander.com.br"");
		gerarCacert(lista, CACERT);
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/3ce778a73e5fbb3dc8638c91ac00c9ed37269469,"	public static void main(String[] args) {
		List<String> lista = new ArrayList<>();
		lista.add(""ymbdlb.santander.com.br"");
		gerarCacert(lista, CACERT);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\t\t', 'List', '<', 'String', '>', ' ', 'lista', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '\t\t', 'lista', '.', 'add', '(', '""', 'ymbdlb.santander.com.br', '""', ')', ';', '\n', '\t\t', 'gerarCacert', '(', 'lista', ',', ' ', 'CACERT', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,106b75b6cc70c99c2127a337a251403995c53367,SocketFactoryDinamico.java,createSSLContext,"    private SSLContext createSSLContext() throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(""TLSv1.2"");
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/106b75b6cc70c99c2127a337a251403995c53367,"    private SSLContext createSSLContext() throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(""TLSv1.2"");
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }
","['    ', 'private', ' ', 'SSLContext', ' ', 'createSSLContext', '(', ')', ' ', 'throws', ' ', 'UnrecoverableKeyException', ',', ' ', 'CertificateException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'KeyStoreException', ',', ' ', 'IOException', ',', ' ', 'KeyManagementException', ' ', '{', '\n', '        ', 'final', ' ', 'KeyManager', '[', ']', ' ', 'keyManagers', ' ', '=', ' ', 'createKeyManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'TrustManager', '[', ']', ' ', 'trustManagers', ' ', '=', ' ', 'createTrustManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'SSLContext', ' ', 'sslContext', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'sslContext', '.', 'init', '(', 'keyManagers', ',', ' ', 'trustManagers', ',', ' ', 'null', ')', ';', '\n', '        ', 'return', ' ', 'sslContext', ';', '\n', '    ', '}', '\n', '<END>']"
master,ce4acd20c850b2ae4405f9f668a148e54ecf614b,CertificadoService.java,getKeyStore,"	public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
		try {
			KeyStore keyStore = null;",https://www.github.com/samuel-oliveira/java_certificado/commit/ce4acd20c850b2ae4405f9f668a148e54ecf614b,"	public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
		try {
			KeyStore keyStore = null;
","['\t', 'public', ' ', 'static', ' ', 'KeyStore', ' ', 'getKeyStore', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'null', ';', '\n', '<END>']"
master,ce4acd20c850b2ae4405f9f668a148e54ecf614b,SocketFactoryDinamico.java,createSocket,"    public Socket createSocket(final String host, final int port, final InetAddress localAddress, final int localPort, final HttpConnectionParams params) throws IOException {
        final Socket socket = this.ssl.getSocketFactory().createSocket();
        socket.bind(new InetSocketAddress(localAddress, localPort));
        socket.connect(new InetSocketAddress(host, port), 60000);
        return socket;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/ce4acd20c850b2ae4405f9f668a148e54ecf614b,"    public Socket createSocket(final String host, final int port, final InetAddress localAddress, final int localPort, final HttpConnectionParams params) throws IOException {
        final Socket socket = this.ssl.getSocketFactory().createSocket();
        socket.bind(new InetSocketAddress(localAddress, localPort));
        socket.connect(new InetSocketAddress(host, port), 60000);
        return socket;
    }
","['    ', 'public', ' ', 'Socket', ' ', 'createSocket', '(', 'final', ' ', 'String', ' ', 'host', ',', ' ', 'final', ' ', 'int', ' ', 'port', ',', ' ', 'final', ' ', 'InetAddress', ' ', 'localAddress', ',', ' ', 'final', ' ', 'int', ' ', 'localPort', ',', ' ', 'final', ' ', 'HttpConnectionParams', ' ', 'params', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'Socket', ' ', 'socket', ' ', '=', ' ', 'this', '.', 'ssl', '.', 'getSocketFactory', '(', ')', '.', 'createSocket', '(', ')', ';', '\n', '        ', 'socket', '.', 'bind', '(', 'new', ' ', 'InetSocketAddress', '(', 'localAddress', ',', ' ', 'localPort', ')', ')', ';', '\n', '        ', 'socket', '.', 'connect', '(', 'new', ' ', 'InetSocketAddress', '(', 'host', ',', ' ', 'port', ')', ',', ' ', '60000', ')', ';', '\n', '        ', 'return', ' ', 'socket', ';', '\n', '    ', '}', '\n', '<END>']"
master,ce4acd20c850b2ae4405f9f668a148e54ecf614b,SocketFactoryDinamico.java,createSSLContext,"    private SSLContext createSSLContext(String sslProtocol) throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(sslProtocol);
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/ce4acd20c850b2ae4405f9f668a148e54ecf614b,"    private SSLContext createSSLContext(String sslProtocol) throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(sslProtocol);
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }
","['    ', 'private', ' ', 'SSLContext', ' ', 'createSSLContext', '(', 'String', ' ', 'sslProtocol', ')', ' ', 'throws', ' ', 'UnrecoverableKeyException', ',', ' ', 'CertificateException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'KeyStoreException', ',', ' ', 'IOException', ',', ' ', 'KeyManagementException', ' ', '{', '\n', '        ', 'final', ' ', 'KeyManager', '[', ']', ' ', 'keyManagers', ' ', '=', ' ', 'createKeyManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'TrustManager', '[', ']', ' ', 'trustManagers', ' ', '=', ' ', 'createTrustManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'SSLContext', ' ', 'sslContext', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', 'sslProtocol', ')', ';', '\n', '        ', 'sslContext', '.', 'init', '(', 'keyManagers', ',', ' ', 'trustManagers', ',', ' ', 'null', ')', ';', '\n', '        ', 'return', ' ', 'sslContext', ';', '\n', '    ', '}', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,inicializaCertificado,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {

        try {
",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {

        try {
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'inicializaCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'InputStream', ' ', 'cacert', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,certificadoA3,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias) throws CertificadoException {

        Certificado certificado = new Certificado();
        certificado.setMarcaA3(marca);
        certificado.setSenha(senha);
        certificado.setDllA3(dll);
        certificado.setTipo(Certificado.A3);

        certificado.setNome(alias);
        certificado.setVencimento(DataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));

        return certificado;
",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias) throws CertificadoException {

        Certificado certificado = new Certificado();
        certificado.setMarcaA3(marca);
        certificado.setSenha(senha);
        certificado.setDllA3(dll);
        certificado.setTipo(Certificado.A3);

        certificado.setNome(alias);
        certificado.setVencimento(DataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));

        return certificado;
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'senha', ',', ' ', 'String', ' ', 'alias', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setMarcaA3', '(', 'marca', ')', ';', '\n', '        ', 'certificado', '.', 'setSenha', '(', 'senha', ')', ';', '\n', '        ', 'certificado', '.', 'setDllA3', '(', 'dll', ')', ';', '\n', '        ', 'certificado', '.', 'setTipo', '(', 'Certificado', '.', 'A3', ')', ';', '\n', '\n', '        ', 'certificado', '.', 'setNome', '(', 'alias', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'DataValidade', '(', 'certificado', ')', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '\n', '        ', 'return', ' ', 'certificado', ';', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,DataValidade,"    public static Date DataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        X509Certificate certificate = getCertificate(certificado, keyStore);
        return certificate.getNotAfter();
",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    public static Date DataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        X509Certificate certificate = getCertificate(certificado, keyStore);
        return certificate.getNotAfter();
","['    ', 'public', ' ', 'static', ' ', 'Date', ' ', 'DataValidade', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '        ', 'return', ' ', 'certificate', '.', 'getNotAfter', '(', ')', ';', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,diasRestantes,"    public static Long diasRestantes(Certificado certificado) throws CertificadoException {

        Date data = DataValidade(certificado);
        if (data == null) {
            return null;
        }
        long differenceMilliSeconds = data.getTime() - new Date().getTime();
        return differenceMilliSeconds / 1000 / 60 / 60 / 24;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    public static Long diasRestantes(Certificado certificado) throws CertificadoException {

        Date data = DataValidade(certificado);
        if (data == null) {
            return null;
        }
        long differenceMilliSeconds = data.getTime() - new Date().getTime();
        return differenceMilliSeconds / 1000 / 60 / 60 / 24;
    }
","['    ', 'public', ' ', 'static', ' ', 'Long', ' ', 'diasRestantes', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'Date', ' ', 'data', ' ', '=', ' ', 'DataValidade', '(', 'certificado', ')', ';', '\n', '        ', 'if', ' ', '(', 'data', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'differenceMilliSeconds', ' ', '=', ' ', 'data', '.', 'getTime', '(', ')', ' ', '-', ' ', 'new', ' ', 'Date', '(', ')', '.', 'getTime', '(', ')', ';', '\n', '        ', 'return', ' ', 'differenceMilliSeconds', ' ', '/', ' ', '1000', ' ', '/', ' ', '60', ' ', '/', ' ', '60', ' ', '/', ' ', '24', ';', '\n', '    ', '}', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,valido,"    public static boolean valido(Certificado certificado) throws CertificadoException {

        if (DataValidade(certificado) != null && DataValidade(certificado).after(new Date())) {
            return true;",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    public static boolean valido(Certificado certificado) throws CertificadoException {

        if (DataValidade(certificado) != null && DataValidade(certificado).after(new Date())) {
            return true;
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'valido', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'if', ' ', '(', 'DataValidade', '(', 'certificado', ')', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'DataValidade', '(', 'certificado', ')', '.', 'after', '(', 'new', ' ', 'Date', '(', ')', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'true', ';', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,getKeyStore,"    public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
        try {
            KeyStore keyStore = null;",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
        try {
            KeyStore keyStore = null;
","['    ', 'public', ' ', 'static', ' ', 'KeyStore', ' ', 'getKeyStore', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'null', ';', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,getCertificate,"    public static X509Certificate getCertificate(Certificado certificado, KeyStore keystore) throws CertificadoException {
        try {
",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    public static X509Certificate getCertificate(Certificado certificado, KeyStore keystore) throws CertificadoException {
        try {
","['    ', 'public', ' ', 'static', ' ', 'X509Certificate', ' ', 'getCertificate', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'KeyStore', ' ', 'keystore', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,getBytesFromInputStream,"    private static byte[] getBytesFromInputStream(InputStream is) throws IOException {
        try (ByteArrayOutputStream os = new ByteArrayOutputStream();) {
            byte[] buffer = new byte[0xFFFF];",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    private static byte[] getBytesFromInputStream(InputStream is) throws IOException {
        try (ByteArrayOutputStream os = new ByteArrayOutputStream();) {
            byte[] buffer = new byte[0xFFFF];
","['    ', 'private', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'getBytesFromInputStream', '(', 'InputStream', ' ', 'is', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'try', ' ', '(', 'ByteArrayOutputStream', ' ', 'os', ' ', '=', ' ', 'new', ' ', 'ByteArrayOutputStream', '(', ')', ';', ')', ' ', '{', '\n', '            ', 'byte', '[', ']', ' ', 'buffer', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0xFFFF', ']', ';', '\n', '<END>']"
master,a129e6dc43a90864d7589bc9948e48e030b8518c,CertificadoService.java,configA3,"    private static InputStream configA3(String marca, String dll)
            throws UnsupportedEncodingException {
        StringBuilder conf = new StringBuilder();
        conf.append(""name = "")
                .append(marca)
                .append(""\n\r"")
                .append(""library = "")
                .append(dll)
                .append(""\n\r"")
                .append(""showInfo = true"");
        return new ByteArrayInputStream(conf.toString().getBytes(""UTF-8""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/a129e6dc43a90864d7589bc9948e48e030b8518c,"    private static InputStream configA3(String marca, String dll)
            throws UnsupportedEncodingException {
        StringBuilder conf = new StringBuilder();
        conf.append(""name = "")
                .append(marca)
                .append(""\n\r"")
                .append(""library = "")
                .append(dll)
                .append(""\n\r"")
                .append(""showInfo = true"");
        return new ByteArrayInputStream(conf.toString().getBytes(""UTF-8""));
    }
","['    ', 'private', ' ', 'static', ' ', 'InputStream', ' ', 'configA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ')', '\n', '            ', 'throws', ' ', 'UnsupportedEncodingException', ' ', '{', '\n', '        ', 'StringBuilder', ' ', 'conf', ' ', '=', ' ', 'new', ' ', 'StringBuilder', '(', ')', ';', '\n', '        ', 'conf', '.', 'append', '(', '""', 'name = ', '""', ')', '\n', '                ', '.', 'append', '(', 'marca', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n', '\\', 'r', '""', ')', '\n', '                ', '.', 'append', '(', '""', 'library = ', '""', ')', '\n', '                ', '.', 'append', '(', 'dll', ')', '\n', '                ', '.', 'append', '(', '""', '\\', 'n', '\\', 'r', '""', ')', '\n', '                ', '.', 'append', '(', '""', 'showInfo = true', '""', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ByteArrayInputStream', '(', 'conf', '.', 'toString', '(', ')', '.', 'getBytes', '(', '""', 'UTF-8', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,82ec5efd97d333acbe2705b8999d66c5c0197a83,CertificadoService.java,listaAliasCertificadosA3,"    public static List<String> listaAliasCertificadosA3(String marca, String dll, String senha) throws CertificadoException {

        try {
            List<String> listaCert = new ArrayList<>(20);",https://www.github.com/samuel-oliveira/java_certificado/commit/82ec5efd97d333acbe2705b8999d66c5c0197a83,"    public static List<String> listaAliasCertificadosA3(String marca, String dll, String senha) throws CertificadoException {

        try {
            List<String> listaCert = new ArrayList<>(20);
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'String', '>', ' ', 'listaAliasCertificadosA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'senha', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'List', '<', 'String', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', '20', ')', ';', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,CertificadoService.java,DataValidade,"    private static Date DataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        X509Certificate certificate = getCertificate(certificado, keyStore);
        return certificate.getNotAfter();
",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    private static Date DataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        X509Certificate certificate = getCertificate(certificado, keyStore);
        return certificate.getNotAfter();
","['    ', 'private', ' ', 'static', ' ', 'Date', ' ', 'DataValidade', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '        ', 'return', ' ', 'certificate', '.', 'getNotAfter', '(', ')', ';', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,CertificadoService.java,diasRestantes,"    private static Long diasRestantes(Certificado certificado) throws CertificadoException {

        Date data = DataValidade(certificado);
        if (data == null) {
            return null;
        }
        long differenceMilliSeconds = data.getTime() - new Date().getTime();
        return differenceMilliSeconds / 1000 / 60 / 60 / 24;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    private static Long diasRestantes(Certificado certificado) throws CertificadoException {

        Date data = DataValidade(certificado);
        if (data == null) {
            return null;
        }
        long differenceMilliSeconds = data.getTime() - new Date().getTime();
        return differenceMilliSeconds / 1000 / 60 / 60 / 24;
    }
","['    ', 'private', ' ', 'static', ' ', 'Long', ' ', 'diasRestantes', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'Date', ' ', 'data', ' ', '=', ' ', 'DataValidade', '(', 'certificado', ')', ';', '\n', '        ', 'if', ' ', '(', 'data', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'long', ' ', 'differenceMilliSeconds', ' ', '=', ' ', 'data', '.', 'getTime', '(', ')', ' ', '-', ' ', 'new', ' ', 'Date', '(', ')', '.', 'getTime', '(', ')', ';', '\n', '        ', 'return', ' ', 'differenceMilliSeconds', ' ', '/', ' ', '1000', ' ', '/', ' ', '60', ' ', '/', ' ', '60', ' ', '/', ' ', '24', ';', '\n', '    ', '}', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,CertificadoService.java,valido,"    private static boolean valido(Certificado certificado) throws CertificadoException {

        return DataValidade(certificado) != null && DataValidade(certificado).after(new Date());
",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    private static boolean valido(Certificado certificado) throws CertificadoException {

        return DataValidade(certificado) != null && DataValidade(certificado).after(new Date());
","['    ', 'private', ' ', 'static', ' ', 'boolean', ' ', 'valido', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'return', ' ', 'DataValidade', '(', 'certificado', ')', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'DataValidade', '(', 'certificado', ')', '.', 'after', '(', 'new', ' ', 'Date', '(', ')', ')', ';', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,CertificadoService.java,getKeyStore,"    public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
        try {
            KeyStore keyStore;",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
        try {
            KeyStore keyStore;
","['    ', 'public', ' ', 'static', ' ', 'KeyStore', ' ', 'getKeyStore', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'keyStore', ';', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,CertificadoService.java,getBytesFromInputStream,"    private static byte[] getBytesFromInputStream(InputStream is) throws IOException {
        try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {
            byte[] buffer = new byte[0xFFFF];",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    private static byte[] getBytesFromInputStream(InputStream is) throws IOException {
        try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {
            byte[] buffer = new byte[0xFFFF];
","['    ', 'private', ' ', 'static', ' ', 'byte', '[', ']', ' ', 'getBytesFromInputStream', '(', 'InputStream', ' ', 'is', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'try', ' ', '(', 'ByteArrayOutputStream', ' ', 'os', ' ', '=', ' ', 'new', ' ', 'ByteArrayOutputStream', '(', ')', ')', ' ', '{', '\n', '            ', 'byte', '[', ']', ' ', 'buffer', ' ', '=', ' ', 'new', ' ', 'byte', '[', '0xFFFF', ']', ';', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,CertificadoService.java,configA3,"    private static InputStream configA3(String marca, String dll)
            throws UnsupportedEncodingException {
        String conf = ""name = "" +
                marca +
                ""\n\r"" +
                ""library = "" +
                dll +
                ""\n\r"" +
                ""showInfo = true"";
        return new ByteArrayInputStream(conf.getBytes(""UTF-8""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    private static InputStream configA3(String marca, String dll)
            throws UnsupportedEncodingException {
        String conf = ""name = "" +
                marca +
                ""\n\r"" +
                ""library = "" +
                dll +
                ""\n\r"" +
                ""showInfo = true"";
        return new ByteArrayInputStream(conf.getBytes(""UTF-8""));
    }
","['    ', 'private', ' ', 'static', ' ', 'InputStream', ' ', 'configA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ')', '\n', '            ', 'throws', ' ', 'UnsupportedEncodingException', ' ', '{', '\n', '        ', 'String', ' ', 'conf', ' ', '=', ' ', '""', 'name = ', '""', ' ', '+', '\n', '                ', 'marca', ' ', '+', '\n', '                ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                ', '""', 'library = ', '""', ' ', '+', '\n', '                ', 'dll', ' ', '+', '\n', '                ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                ', '""', 'showInfo = true', '""', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ByteArrayInputStream', '(', 'conf', '.', 'getBytes', '(', '""', 'UTF-8', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,SocketFactoryDinamico.java,createSSLContext,"    private SSLContext createSSLContext(String sslProtocol) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(sslProtocol);
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    private SSLContext createSSLContext(String sslProtocol) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {
        final KeyManager[] keyManagers = createKeyManagers();
        final TrustManager[] trustManagers = createTrustManagers();
        final SSLContext sslContext = SSLContext.getInstance(sslProtocol);
        sslContext.init(keyManagers, trustManagers, null);
        return sslContext;
    }
","['    ', 'private', ' ', 'SSLContext', ' ', 'createSSLContext', '(', 'String', ' ', 'sslProtocol', ')', ' ', 'throws', ' ', 'CertificateException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'KeyStoreException', ',', ' ', 'IOException', ',', ' ', 'KeyManagementException', ' ', '{', '\n', '        ', 'final', ' ', 'KeyManager', '[', ']', ' ', 'keyManagers', ' ', '=', ' ', 'createKeyManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'TrustManager', '[', ']', ' ', 'trustManagers', ' ', '=', ' ', 'createTrustManagers', '(', ')', ';', '\n', '        ', 'final', ' ', 'SSLContext', ' ', 'sslContext', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', 'sslProtocol', ')', ';', '\n', '        ', 'sslContext', '.', 'init', '(', 'keyManagers', ',', ' ', 'trustManagers', ',', ' ', 'null', ')', ';', '\n', '        ', 'return', ' ', 'sslContext', ';', '\n', '    ', '}', '\n', '<END>']"
master,3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,SocketFactoryDinamico.java,createKeyManagers,"    private KeyManager[] createKeyManagers() {
        return new KeyManager[]{new NFKeyManager(certificate, privateKey)};
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/3b25bba9fcec4ebaa9fbd5be55c0975ff5136e4b,"    private KeyManager[] createKeyManagers() {
        return new KeyManager[]{new NFKeyManager(certificate, privateKey)};
    }
","['    ', 'private', ' ', 'KeyManager', '[', ']', ' ', 'createKeyManagers', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'KeyManager', '[', ']', '{', 'new', ' ', 'NFKeyManager', '(', 'certificate', ',', ' ', 'privateKey', ')', '}', ';', '\n', '    ', '}', '\n', '<END>']"
master,c94e6f9e576341f6404eae906ec4846e4695c573,Certificado.java,isAtivarProperties,"    public boolean isAtivarProperties() {
		return ativarProperties;
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/c94e6f9e576341f6404eae906ec4846e4695c573,"    public boolean isAtivarProperties() {
		return ativarProperties;
	}
","['    ', 'public', ' ', 'boolean', ' ', 'isAtivarProperties', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', 'ativarProperties', ';', '\n', '\t', '}', '\n', '<END>']"
master,c94e6f9e576341f6404eae906ec4846e4695c573,CertificadoService.java,certificadoA3,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias, String serialToken) throws CertificadoException {

        Certificado certificado = new Certificado();
        certificado.setMarcaA3(marca);
        certificado.setSenha(senha);
        certificado.setDllA3(dll);
        certificado.setTipo(Certificado.A3);
        certificado.setSerialToken(serialToken);
        certificado.setNome(alias);
        certificado.setVencimento(DataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));


        return certificado;
",https://www.github.com/samuel-oliveira/java_certificado/commit/c94e6f9e576341f6404eae906ec4846e4695c573,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias, String serialToken) throws CertificadoException {

        Certificado certificado = new Certificado();
        certificado.setMarcaA3(marca);
        certificado.setSenha(senha);
        certificado.setDllA3(dll);
        certificado.setTipo(Certificado.A3);
        certificado.setSerialToken(serialToken);
        certificado.setNome(alias);
        certificado.setVencimento(DataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));


        return certificado;
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'senha', ',', ' ', 'String', ' ', 'alias', ',', ' ', 'String', ' ', 'serialToken', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setMarcaA3', '(', 'marca', ')', ';', '\n', '        ', 'certificado', '.', 'setSenha', '(', 'senha', ')', ';', '\n', '        ', 'certificado', '.', 'setDllA3', '(', 'dll', ')', ';', '\n', '        ', 'certificado', '.', 'setTipo', '(', 'Certificado', '.', 'A3', ')', ';', '\n', '        ', 'certificado', '.', 'setSerialToken', '(', 'serialToken', ')', ';', '\n', '        ', 'certificado', '.', 'setNome', '(', 'alias', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'DataValidade', '(', 'certificado', ')', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '\n', '\n', '        ', 'return', ' ', 'certificado', ';', '\n', '<END>']"
master,c94e6f9e576341f6404eae906ec4846e4695c573,CertificadoService.java,DataValidade,"    private static Date DataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        if (keyStore == null) {
            throw new CertificadoException(""Erro Ao pegar Keytore, verifique o Certificado"");
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);


        return certificate.getNotAfter();
",https://www.github.com/samuel-oliveira/java_certificado/commit/c94e6f9e576341f6404eae906ec4846e4695c573,"    private static Date DataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        if (keyStore == null) {
            throw new CertificadoException(""Erro Ao pegar Keytore, verifique o Certificado"");
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);


        return certificate.getNotAfter();
","['    ', 'private', ' ', 'static', ' ', 'Date', ' ', 'DataValidade', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar Keytore, verifique o Certificado', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '\n', '\n', '        ', 'return', ' ', 'certificate', '.', 'getNotAfter', '(', ')', ';', '\n', '<END>']"
master,c94e6f9e576341f6404eae906ec4846e4695c573,CertificadoService.java,configA3,"    private static InputStream configA3(String marca, String dll, String slot)
            throws UnsupportedEncodingException {

        String slotInfo = """";

        if (slot != null) {
            slotInfo = ""\n\r"" +
                    ""slot = "" + slot;
        }

        String conf = ""name = "" +
                marca +
                ""\n\r"" +
                ""library = "" +
                dll +
                slotInfo +
                ""\n\r"" +
                ""showInfo = true"";
        return new ByteArrayInputStream(conf.getBytes(""UTF-8""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/c94e6f9e576341f6404eae906ec4846e4695c573,"    private static InputStream configA3(String marca, String dll, String slot)
            throws UnsupportedEncodingException {

        String slotInfo = """";

        if (slot != null) {
            slotInfo = ""\n\r"" +
                    ""slot = "" + slot;
        }

        String conf = ""name = "" +
                marca +
                ""\n\r"" +
                ""library = "" +
                dll +
                slotInfo +
                ""\n\r"" +
                ""showInfo = true"";
        return new ByteArrayInputStream(conf.getBytes(""UTF-8""));
    }
","['    ', 'private', ' ', 'static', ' ', 'InputStream', ' ', 'configA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'slot', ')', '\n', '            ', 'throws', ' ', 'UnsupportedEncodingException', ' ', '{', '\n', '\n', '        ', 'String', ' ', 'slotInfo', ' ', '=', ' ', '""', '""', ';', '\n', '\n', '        ', 'if', ' ', '(', 'slot', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'slotInfo', ' ', '=', ' ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                    ', '""', 'slot = ', '""', ' ', '+', ' ', 'slot', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'conf', ' ', '=', ' ', '""', 'name = ', '""', ' ', '+', '\n', '                ', 'marca', ' ', '+', '\n', '                ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                ', '""', 'library = ', '""', ' ', '+', '\n', '                ', 'dll', ' ', '+', '\n', '                ', 'slotInfo', ' ', '+', '\n', '                ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                ', '""', 'showInfo = true', '""', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ByteArrayInputStream', '(', 'conf', '.', 'getBytes', '(', '""', 'UTF-8', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c94e6f9e576341f6404eae906ec4846e4695c573,CertificadoService.java,getSlot,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" + e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" + e.getMessage());
        }

        return slotSelected;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/c94e6f9e576341f6404eae906ec4846e4695c573,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" + e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" + e.getMessage());
        }

        return slotSelected;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'getSlot', '(', 'String', ' ', 'libraryPath', ',', ' ', 'String', ' ', 'serialNumber', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'CK_C_INITIALIZE_ARGS', ' ', 'initArgs', ' ', '=', ' ', 'new', ' ', 'CK_C_INITIALIZE_ARGS', '(', ')', ';', '\n', '        ', 'String', ' ', 'functionList', ' ', '=', ' ', '""', 'C_GetFunctionList', '""', ';', '\n', '\n', '        ', 'initArgs', '.', 'flags', ' ', '=', ' ', '0', ';', '\n', '        ', 'PKCS11', ' ', 'tmpPKCS11', ';', '\n', '        ', 'long', '[', ']', ' ', 'slotList', ';', '\n', '        ', 'String', ' ', 'slotSelected', ' ', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'initArgs', ',', ' ', 'false', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '                ', 'throw', ' ', 'ex', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'PKCS11Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'null', ',', ' ', 'true', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao pegar Slot A3: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'slotList', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetSlotList', '(', 'true', ')', ';', '\n', '\n', '            ', 'for', ' ', '(', 'long', ' ', 'slot', ' ', ':', ' ', 'slotList', ')', ' ', '{', '\n', '                ', 'CK_TOKEN_INFO', ' ', 'tokenInfo', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetTokenInfo', '(', 'slot', ')', ';', '\n', '                ', 'if', ' ', '(', 'serialNumber', '.', 'equals', '(', 'String', '.', 'valueOf', '(', 'tokenInfo', '.', 'serialNumber', ')', ')', ')', ' ', '{', '\n', '                    ', 'slotSelected', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'slot', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar SlotA3: ', '""', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'slotSelected', ';', '\n', '    ', '}', '\n', '<END>']"
master,9165a2e0f86f516001bf11e1af9dc4ab7028d3b5,CacertUtil.java,main,"	public static void main(String[] args) {
	    List<String> lista = new ArrayList<>();
		gerarCacert(lista);
	}",https://www.github.com/samuel-oliveira/java_certificado/commit/9165a2e0f86f516001bf11e1af9dc4ab7028d3b5,"	public static void main(String[] args) {
	    List<String> lista = new ArrayList<>();
		gerarCacert(lista);
	}
","['\t', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\t    ', 'List', '<', 'String', '>', ' ', 'lista', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '\t\t', 'gerarCacert', '(', 'lista', ')', ';', '\n', '\t', '}', '\n', '<END>']"
master,9165a2e0f86f516001bf11e1af9dc4ab7028d3b5,CacertUtil.java,gerarCacert,"	private static void gerarCacert(List<String> listaEnderecos) {
		cacert = CacertUtil.CACERT;
		try {
",https://www.github.com/samuel-oliveira/java_certificado/commit/9165a2e0f86f516001bf11e1af9dc4ab7028d3b5,"	private static void gerarCacert(List<String> listaEnderecos) {
		cacert = CacertUtil.CACERT;
		try {
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'gerarCacert', '(', 'List', '<', 'String', '>', ' ', 'listaEnderecos', ')', ' ', '{', '\n', '\t\t', 'cacert', ' ', '=', ' ', 'CacertUtil', '.', 'CACERT', ';', '\n', '\t\t', 'try', ' ', '{', '\n', '<END>']"
master,9165a2e0f86f516001bf11e1af9dc4ab7028d3b5,CacertUtil.java,get,"	private static void get(String host, KeyStore ks) {
		try {
			SSLContext context = SSLContext.getInstance(""TLS"");",https://www.github.com/samuel-oliveira/java_certificado/commit/9165a2e0f86f516001bf11e1af9dc4ab7028d3b5,"	private static void get(String host, KeyStore ks) {
		try {
			SSLContext context = SSLContext.getInstance(""TLS"");
","['\t', 'private', ' ', 'static', ' ', 'void', ' ', 'get', '(', 'String', ' ', 'host', ',', ' ', 'KeyStore', ' ', 'ks', ')', ' ', '{', '\n', '\t\t', 'try', ' ', '{', '\n', '\t\t\t', 'SSLContext', ' ', 'context', ' ', '=', ' ', 'SSLContext', '.', 'getInstance', '(', '""', 'TLS', '""', ')', ';', '\n', '<END>']"
master,9b5094939ae870e949f690fb82e7b22cd08b8924,CertificadoService.java,listaCertificadosWindows,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

        // Estou setando a variavel para 20 dispositivos no maximo
        List<Certificado> listaCert = new ArrayList<>(20);
        Certificado certificado = new Certificado();
        certificado.setTipo(Certificado.WINDOWS);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey != null) {
                    Certificado cert = new Certificado();
                    cert.setNome(aliasKey);
                    cert.setTipo(Certificado.WINDOWS);
                    cert.setSenha("""");
                    Date dataValidade = DataValidade(cert);
                    if (dataValidade == null) {
                        cert.setNome(""(INVALIDO)"" + aliasKey);
                        cert.setVencimento(LocalDate.of(2000, 1, 1));
                        cert.setDiasRestantes(0L);
                        cert.setValido(false);
                    } else {
                        cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        cert.setDiasRestantes(diasRestantes(cert));
                        cert.setValido(valido(cert));
                    }

                    listaCert.add(cert);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
        }

        return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/9b5094939ae870e949f690fb82e7b22cd08b8924,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

        
        List<Certificado> listaCert = new ArrayList<>(20);
        Certificado certificado = new Certificado();
        certificado.setTipo(Certificado.WINDOWS);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey != null) {
                    Certificado cert = new Certificado();
                    cert.setNome(aliasKey);
                    cert.setTipo(Certificado.WINDOWS);
                    cert.setSenha("""");
                    Date dataValidade = DataValidade(cert);
                    if (dataValidade == null) {
                        cert.setNome(""(INVALIDO)"" + aliasKey);
                        cert.setVencimento(LocalDate.of(2000, 1, 1));
                        cert.setDiasRestantes(0L);
                        cert.setValido(false);
                    } else {
                        cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        cert.setDiasRestantes(diasRestantes(cert));
                        cert.setValido(valido(cert));
                    }

                    listaCert.add(cert);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
        }

        return listaCert;
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', '20', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setTipo', '(', 'Certificado', '.', 'WINDOWS', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '                    ', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '                    ', 'cert', '.', 'setTipo', '(', 'Certificado', '.', 'WINDOWS', ')', ';', '\n', '                    ', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '                    ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'DataValidade', '(', 'cert', ')', ';', '\n', '                    ', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                        ', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', ' ', 'aliasKey', ')', ';', '\n', '                        ', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '                        ', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '                    ', '}', ' ', 'else', ' ', '{', '\n', '                        ', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '                    ', '}', '\n', '\n', '                    ', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', ' ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,070de9cb2c78f246fa9712b52166d9ad66d64b27,CertificadoService.java,getCertificadoByCnpj,"    public static Certificado getCertificadoByCnpj(String cnpj) throws CertificadoException {
        return getCertificadoByDados(cnpj, CNPJ);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/070de9cb2c78f246fa9712b52166d9ad66d64b27,"    public static Certificado getCertificadoByCnpj(String cnpj) throws CertificadoException {
        return getCertificadoByDados(cnpj, CNPJ);
    }
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'getCertificadoByCnpj', '(', 'String', ' ', 'cnpj', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'getCertificadoByDados', '(', 'cnpj', ',', ' ', 'CNPJ', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,070de9cb2c78f246fa9712b52166d9ad66d64b27,CertificadoService.java,getCertificadoByCpf,"    public static Certificado getCertificadoByCpf(String cnpj) throws CertificadoException {
        return getCertificadoByDados(cnpj, CPF);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/070de9cb2c78f246fa9712b52166d9ad66d64b27,"    public static Certificado getCertificadoByCpf(String cnpj) throws CertificadoException {
        return getCertificadoByDados(cnpj, CPF);
    }
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'getCertificadoByCpf', '(', 'String', ' ', 'cnpj', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'getCertificadoByDados', '(', 'cnpj', ',', ' ', 'CPF', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,certificadoA3,"    public static Certificado certificadoA3(String marca, String dll, String senha) throws CertificadoException {
        return certificadoA3(marca, dll, senha, null, null);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static Certificado certificadoA3(String marca, String dll, String senha) throws CertificadoException {
        return certificadoA3(marca, dll, senha, null, null);
    }
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'senha', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'certificadoA3', '(', 'marca', ',', ' ', 'dll', ',', ' ', 'senha', ',', ' ', 'null', ',', ' ', 'null', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,certificadoA3,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias) throws CertificadoException {

        return certificadoA3(marca, dll, senha, alias, null);
",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias) throws CertificadoException {

        return certificadoA3(marca, dll, senha, alias, null);
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'senha', ',', ' ', 'String', ' ', 'alias', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'return', ' ', 'certificadoA3', '(', 'marca', ',', ' ', 'dll', ',', ' ', 'senha', ',', ' ', 'alias', ',', ' ', 'null', ')', ';', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,certificadoA3,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias, String serialToken) throws CertificadoException {

        try {
            Certificado certificado = new Certificado();",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static Certificado certificadoA3(String marca, String dll, String senha, String alias, String serialToken) throws CertificadoException {

        try {
            Certificado certificado = new Certificado();
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'senha', ',', ' ', 'String', ' ', 'alias', ',', ' ', 'String', ' ', 'serialToken', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,listaCertificadosMac,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipo(Certificado.MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey != null) {
                    Certificado cert = new Certificado();
                    cert.setNome(aliasKey);
                    cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
                    cert.setTipo(Certificado.MAC);
                    cert.setSenha("""");
                    Date dataValidade = DataValidade(cert);
                    if (dataValidade == null) {
                        cert.setNome(""(INVALIDO)"" + aliasKey);
                        cert.setVencimento(LocalDate.of(2000, 1, 1));
                        cert.setDiasRestantes(0L);
                        cert.setValido(false);
                    } else {
                        cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        cert.setDiasRestantes(diasRestantes(cert));
                        cert.setValido(valido(cert));
                    }

                    listaCert.add(cert);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
        }

        return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipo(Certificado.MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey != null) {
                    Certificado cert = new Certificado();
                    cert.setNome(aliasKey);
                    cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
                    cert.setTipo(Certificado.MAC);
                    cert.setSenha("""");
                    Date dataValidade = DataValidade(cert);
                    if (dataValidade == null) {
                        cert.setNome(""(INVALIDO)"" + aliasKey);
                        cert.setVencimento(LocalDate.of(2000, 1, 1));
                        cert.setDiasRestantes(0L);
                        cert.setValido(false);
                    } else {
                        cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        cert.setDiasRestantes(diasRestantes(cert));
                        cert.setValido(valido(cert));
                    }

                    listaCert.add(cert);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" + ex.getMessage());
        }

        return listaCert;
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosMac', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setTipo', '(', 'Certificado', '.', 'MAC', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '                    ', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '                    ', 'cert', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'cert', ',', ' ', 'ks', ')', ')', ';', '\n', '                    ', 'cert', '.', 'setTipo', '(', 'Certificado', '.', 'MAC', ')', ';', '\n', '                    ', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '                    ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'DataValidade', '(', 'cert', ')', ';', '\n', '                    ', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                        ', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', ' ', 'aliasKey', ')', ';', '\n', '                        ', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '                        ', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '                    ', '}', ' ', 'else', ' ', '{', '\n', '                        ', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '                        ', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '                    ', '}', '\n', '\n', '                    ', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', ' ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,getCertificadoByCnpj,"    public static Certificado getCertificadoByCnpj(String cnpj) throws CertificadoException {
        return getCertificadoByCnpjCpf(cnpj);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static Certificado getCertificadoByCnpj(String cnpj) throws CertificadoException {
        return getCertificadoByCnpjCpf(cnpj);
    }
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'getCertificadoByCnpj', '(', 'String', ' ', 'cnpj', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'getCertificadoByCnpjCpf', '(', 'cnpj', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,getCertificadoByCpf,"    public static Certificado getCertificadoByCpf(String cnpj) throws CertificadoException {
        return getCertificadoByCnpjCpf(cnpj);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static Certificado getCertificadoByCpf(String cnpj) throws CertificadoException {
        return getCertificadoByCnpjCpf(cnpj);
    }
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'getCertificadoByCpf', '(', 'String', ' ', 'cnpj', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'getCertificadoByCnpjCpf', '(', 'cnpj', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,cc7929ef62b66ad80042c3e913b59e6f28c13d09,CertificadoService.java,verifica,"    public static <T> Optional<T> verifica(T obj) {
        if (obj == null)
            return Optional.empty();
        if (obj instanceof Collection)
            return ((Collection<?>) obj).size() == 0 ? Optional.empty() : Optional.of(obj);

        final String s = String.valueOf(obj).trim();

        return s.length() == 0 || s.equalsIgnoreCase(""null"") ? Optional.empty() : Optional.of(obj);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/cc7929ef62b66ad80042c3e913b59e6f28c13d09,"    public static <T> Optional<T> verifica(T obj) {
        if (obj == null)
            return Optional.empty();
        if (obj instanceof Collection)
            return ((Collection<?>) obj).size() == 0 ? Optional.empty() : Optional.of(obj);

        final String s = String.valueOf(obj).trim();

        return s.length() == 0 || s.equalsIgnoreCase(""null"") ? Optional.empty() : Optional.of(obj);
    }
","['    ', 'public', ' ', 'static', ' ', '<', 'T', '>', ' ', 'Optional', '<', 'T', '>', ' ', 'verifica', '(', 'T', ' ', 'obj', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'obj', ' ', '=', '=', ' ', 'null', ')', '\n', '            ', 'return', ' ', 'Optional', '.', 'empty', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'obj', ' ', 'instanceof', ' ', 'Collection', ')', '\n', '            ', 'return', ' ', '(', '(', 'Collection', '<', '?', '>', ')', ' ', 'obj', ')', '.', 'size', '(', ')', ' ', '=', '=', ' ', '0', ' ', '?', ' ', 'Optional', '.', 'empty', '(', ')', ' ', ':', ' ', 'Optional', '.', 'of', '(', 'obj', ')', ';', '\n', '\n', '        ', 'final', ' ', 'String', ' ', 's', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'obj', ')', '.', 'trim', '(', ')', ';', '\n', '\n', '        ', 'return', ' ', 's', '.', 'length', '(', ')', ' ', '=', '=', ' ', '0', ' ', '|', '|', ' ', 's', '.', 'equalsIgnoreCase', '(', '""', 'null', '""', ')', ' ', '?', ' ', 'Optional', '.', 'empty', '(', ')', ' ', ':', ' ', 'Optional', '.', 'of', '(', 'obj', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado) throws CertificadoException, KeyStoreException {
        KeyStore keyStore = getKeyStore(certificado);
        Enumeration<String> aliasEnum = keyStore.aliases();
        String aliasKey = aliasEnum.nextElement();

        certificado.setNome(aliasKey);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificado, keyStore));
        certificado.setVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    private static void setDadosCertificado(Certificado certificado) throws CertificadoException, KeyStoreException {
        KeyStore keyStore = getKeyStore(certificado);
        Enumeration<String> aliasEnum = keyStore.aliases();
        String aliasKey = aliasEnum.nextElement();

        certificado.setNome(aliasKey);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificado, keyStore));
        certificado.setVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '        ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '        ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'certificado', ',', ' ', 'keyStore', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '(', 'certificado', ')', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,listaCertificadosWindows,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_WINDOWS);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_WINDOWS);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                                                   ex.getMessage());
        }

        return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_WINDOWS);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_WINDOWS);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                                                   ex.getMessage());
        }

        return listaCert;
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setTipoCertificado', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', '\n', '                        ', 'null', ')', ' ', '{', '\n', '                    ', 'setDadosCertificado', '(', 'listaCert', ',', ' ', 'ks', ',', ' ', 'aliasKey', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                                                   ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(List<Certificado> listaCert, KeyStore ks, String aliasKey, TipoCertificadoEnum tipoCertificadoEnum) throws CertificadoException {
        Certificado cert = new Certificado();
        cert.setNome(aliasKey);
        cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
        cert.setTipoCertificado(tipoCertificadoEnum);
        cert.setSenha("""");
        Date dataValidade = dataValidade(cert);
        if (dataValidade ==
                null) {
            cert.setNome(""(INVALIDO)"" +
                                 aliasKey);
            cert.setVencimento(LocalDate.of(2000, 1, 1));
            cert.setDiasRestantes(0L);
            cert.setValido(false);
        } else {
            cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            cert.setDiasRestantes(diasRestantes(cert));
            cert.setValido(valido(cert));
        }

        listaCert.add(cert);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    private static void setDadosCertificado(List<Certificado> listaCert, KeyStore ks, String aliasKey, TipoCertificadoEnum tipoCertificadoEnum) throws CertificadoException {
        Certificado cert = new Certificado();
        cert.setNome(aliasKey);
        cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
        cert.setTipoCertificado(tipoCertificadoEnum);
        cert.setSenha("""");
        Date dataValidade = dataValidade(cert);
        if (dataValidade ==
                null) {
            cert.setNome(""(INVALIDO)"" +
                                 aliasKey);
            cert.setVencimento(LocalDate.of(2000, 1, 1));
            cert.setDiasRestantes(0L);
            cert.setValido(false);
        } else {
            cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            cert.setDiasRestantes(diasRestantes(cert));
            cert.setValido(valido(cert));
        }

        listaCert.add(cert);
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ',', ' ', 'KeyStore', ' ', 'ks', ',', ' ', 'String', ' ', 'aliasKey', ',', ' ', 'TipoCertificadoEnum', ' ', 'tipoCertificadoEnum', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', 'cert', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'cert', ',', ' ', 'ks', ')', ')', ';', '\n', '        ', 'cert', '.', 'setTipoCertificado', '(', 'tipoCertificadoEnum', ')', ';', '\n', '        ', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'cert', ')', ';', '\n', '        ', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', '\n', '                ', 'null', ')', ' ', '{', '\n', '            ', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', '\n', '                                 ', 'aliasKey', ')', ';', '\n', '            ', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '            ', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '            ', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,listaCertificadosMac,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_MAC);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                                                   ex.getMessage());
        }

        return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_MAC);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                                                   ex.getMessage());
        }

        return listaCert;
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosMac', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setTipoCertificado', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', '\n', '                        ', 'null', ')', ' ', '{', '\n', '                    ', 'setDadosCertificado', '(', 'listaCert', ',', ' ', 'ks', ',', ' ', 'aliasKey', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                                                   ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,dataValidade,"    private static Date dataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        if (keyStore ==
                null) {
            throw new CertificadoException(""Erro Ao pegar Keytore, verifique o Certificado"");
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);


        return certificate.getNotAfter();
",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    private static Date dataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        if (keyStore ==
                null) {
            throw new CertificadoException(""Erro Ao pegar Keytore, verifique o Certificado"");
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);


        return certificate.getNotAfter();
","['    ', 'private', ' ', 'static', ' ', 'Date', ' ', 'dataValidade', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', '\n', '                ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar Keytore, verifique o Certificado', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '\n', '\n', '        ', 'return', ' ', 'certificate', '.', 'getNotAfter', '(', ')', ';', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,diasRestantes,"    private static Long diasRestantes(Certificado certificado) {
        return LocalDate.now().until(certificado.getVencimento(), ChronoUnit.DAYS);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    private static Long diasRestantes(Certificado certificado) {
        return LocalDate.now().until(certificado.getVencimento(), ChronoUnit.DAYS);
    }
","['    ', 'private', ' ', 'static', ' ', 'Long', ' ', 'diasRestantes', '(', 'Certificado', ' ', 'certificado', ')', ' ', '{', '\n', '        ', 'return', ' ', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,valido,"    private static boolean valido(Certificado certificado) {
        return LocalDate.now().isBefore(certificado.getVencimento());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    private static boolean valido(Certificado certificado) {
        return LocalDate.now().isBefore(certificado.getVencimento());
    }
","['    ', 'private', ' ', 'static', ' ', 'boolean', ' ', 'valido', '(', 'Certificado', ' ', 'certificado', ')', ' ', '{', '\n', '        ', 'return', ' ', 'LocalDate', '.', 'now', '(', ')', '.', 'isBefore', '(', 'certificado', '.', 'getVencimento', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,configA3,"    private static InputStream configA3(String marca, String dll, String slot)
            throws UnsupportedEncodingException {

        String slotInfo = """";

        if (slot !=
                null) {
            slotInfo = ""\n\r"" +
                    ""slot = "" +
                    slot;
        }

        String conf = ""name = "" +
                marca +
                ""\n\r"" +
                ""library = "" +
                dll +
                slotInfo +
                ""\n\r"" +
                ""showInfo = true"";
        return new ByteArrayInputStream(conf.getBytes(""UTF-8""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    private static InputStream configA3(String marca, String dll, String slot)
            throws UnsupportedEncodingException {

        String slotInfo = """";

        if (slot !=
                null) {
            slotInfo = ""\n\r"" +
                    ""slot = "" +
                    slot;
        }

        String conf = ""name = "" +
                marca +
                ""\n\r"" +
                ""library = "" +
                dll +
                slotInfo +
                ""\n\r"" +
                ""showInfo = true"";
        return new ByteArrayInputStream(conf.getBytes(""UTF-8""));
    }
","['    ', 'private', ' ', 'static', ' ', 'InputStream', ' ', 'configA3', '(', 'String', ' ', 'marca', ',', ' ', 'String', ' ', 'dll', ',', ' ', 'String', ' ', 'slot', ')', '\n', '            ', 'throws', ' ', 'UnsupportedEncodingException', ' ', '{', '\n', '\n', '        ', 'String', ' ', 'slotInfo', ' ', '=', ' ', '""', '""', ';', '\n', '\n', '        ', 'if', ' ', '(', 'slot', ' ', '!', '=', '\n', '                ', 'null', ')', ' ', '{', '\n', '            ', 'slotInfo', ' ', '=', ' ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                    ', '""', 'slot = ', '""', ' ', '+', '\n', '                    ', 'slot', ';', '\n', '        ', '}', '\n', '\n', '        ', 'String', ' ', 'conf', ' ', '=', ' ', '""', 'name = ', '""', ' ', '+', '\n', '                ', 'marca', ' ', '+', '\n', '                ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                ', '""', 'library = ', '""', ' ', '+', '\n', '                ', 'dll', ' ', '+', '\n', '                ', 'slotInfo', ' ', '+', '\n', '                ', '""', '\\', 'n', '\\', 'r', '""', ' ', '+', '\n', '                ', '""', 'showInfo = true', '""', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ByteArrayInputStream', '(', 'conf', '.', 'getBytes', '(', '""', 'UTF-8', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoService.java,getSlot,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                                                       e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                                                   e.getMessage());
        }

        return slotSelected;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                                                       e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                                                   e.getMessage());
        }

        return slotSelected;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'getSlot', '(', 'String', ' ', 'libraryPath', ',', ' ', 'String', ' ', 'serialNumber', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'CK_C_INITIALIZE_ARGS', ' ', 'initArgs', ' ', '=', ' ', 'new', ' ', 'CK_C_INITIALIZE_ARGS', '(', ')', ';', '\n', '        ', 'String', ' ', 'functionList', ' ', '=', ' ', '""', 'C_GetFunctionList', '""', ';', '\n', '\n', '        ', 'initArgs', '.', 'flags', ' ', '=', ' ', '0', ';', '\n', '        ', 'PKCS11', ' ', 'tmpPKCS11', ';', '\n', '        ', 'long', '[', ']', ' ', 'slotList', ';', '\n', '        ', 'String', ' ', 'slotSelected', ' ', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'initArgs', ',', ' ', 'false', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '                ', 'throw', ' ', 'ex', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'PKCS11Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'null', ',', ' ', 'true', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao pegar Slot A3: ', '""', ' ', '+', '\n', '                                                       ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'slotList', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetSlotList', '(', 'true', ')', ';', '\n', '\n', '            ', 'for', ' ', '(', 'long', ' ', 'slot', ' ', ':', ' ', 'slotList', ')', ' ', '{', '\n', '                ', 'CK_TOKEN_INFO', ' ', 'tokenInfo', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetTokenInfo', '(', 'slot', ')', ';', '\n', '                ', 'if', ' ', '(', 'serialNumber', '.', 'equals', '(', 'String', '.', 'valueOf', '(', 'tokenInfo', '.', 'serialNumber', ')', ')', ')', ' ', '{', '\n', '                    ', 'slotSelected', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'slot', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar SlotA3: ', '""', ' ', '+', '\n', '                                                   ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'slotSelected', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,TipoCertificadoEnum.java,valueOfDescricao,"    public static TipoCertificadoEnum valueOfDescricao(String descricao) {
        return Arrays.stream(values()).filter(x -> x.getDescricao().equals(descricao)).findFirst().orElseThrow(IllegalArgumentException::new);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public static TipoCertificadoEnum valueOfDescricao(String descricao) {
        return Arrays.stream(values()).filter(x -> x.getDescricao().equals(descricao)).findFirst().orElseThrow(IllegalArgumentException::new);
    }
","['    ', 'public', ' ', 'static', ' ', 'TipoCertificadoEnum', ' ', 'valueOfDescricao', '(', 'String', ' ', 'descricao', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Arrays', '.', 'stream', '(', 'values', '(', ')', ')', '.', 'filter', '(', 'x', ' ', '-', '>', ' ', 'x', '.', 'getDescricao', '(', ')', '.', 'equals', '(', 'descricao', ')', ')', '.', 'findFirst', '(', ')', '.', 'orElseThrow', '(', 'IllegalArgumentException', ':', ':', 'new', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoServiceTest.java,certificadoPfxCPF,"    public void certificadoPfxCPF() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void certificadoPfxCPF() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxCPF', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cpf teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CPF', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoServiceTest.java,certificadoPfxCNPJ,"    public void certificadoPfxCNPJ() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void certificadoPfxCNPJ() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxCNPJ', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', '""', '123456', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoServiceTest.java,certificadoPfxBytes,"    public void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.isAtivarProperties(), false);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.isAtivarProperties(), false);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxBytes', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', '""', '123456', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isValido', '(', ')', ',', ' ', 'true', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ',', ' ', 'false', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,CertificadoServiceTest.java,getCertificadoByCnpjCpf,"    public void getCertificadoByCnpjCpf() throws CertificadoException {

        Certificado certCPF = CertificadoService.certificadoPfx(CERTIFICADO_CPF, ""123456"");
        Certificado certCNPJ = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");

        PowerMockito.mockStatic(CertificadoService.class);
        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CPF))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CPF)).findFirst().orElse(null)
                );

        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CNPJ))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CNPJ)).findFirst().orElse(null)
                );

        Certificado certificadoCPF = CertificadoService.getCertificadoByCnpjCpf(CPF);
        Certificado certificadoCNPJ = CertificadoService.getCertificadoByCnpjCpf(CNPJ);

        assertEquals(certificadoCPF.getCnpjCpf(), CPF);
        assertEquals(certificadoCNPJ.getCnpjCpf(), CNPJ);
",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void getCertificadoByCnpjCpf() throws CertificadoException {

        Certificado certCPF = CertificadoService.certificadoPfx(CERTIFICADO_CPF, ""123456"");
        Certificado certCNPJ = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");

        PowerMockito.mockStatic(CertificadoService.class);
        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CPF))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CPF)).findFirst().orElse(null)
                );

        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CNPJ))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CNPJ)).findFirst().orElse(null)
                );

        Certificado certificadoCPF = CertificadoService.getCertificadoByCnpjCpf(CPF);
        Certificado certificadoCNPJ = CertificadoService.getCertificadoByCnpjCpf(CNPJ);

        assertEquals(certificadoCPF.getCnpjCpf(), CPF);
        assertEquals(certificadoCNPJ.getCnpjCpf(), CNPJ);
","['    ', 'public', ' ', 'void', ' ', 'getCertificadoByCnpjCpf', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'Certificado', ' ', 'certCPF', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', '""', '123456', '""', ')', ';', '\n', '        ', 'Certificado', ' ', 'certCNPJ', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', '""', '123456', '""', ')', ';', '\n', '\n', '        ', 'PowerMockito', '.', 'mockStatic', '(', 'CertificadoService', '.', 'class', ')', ';', '\n', '        ', 'PowerMockito', '.', 'when', '(', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CPF', ')', ')', '\n', '                ', '.', 'then', '(', '(', 'Answer', '<', 'Certificado', '>', ')', ' ', 'invocation', ' ', '-', '>', '\n', '                        ', 'Stream', '.', 'of', '(', 'certCPF', ',', ' ', 'certCNPJ', ')', '.', 'filter', '(', 'c', ' ', '-', '>', ' ', 'c', '.', 'getCnpjCpf', '(', ')', '.', 'equals', '(', 'CPF', ')', ')', '.', 'findFirst', '(', ')', '.', 'orElse', '(', 'null', ')', '\n', '                ', ')', ';', '\n', '\n', '        ', 'PowerMockito', '.', 'when', '(', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CNPJ', ')', ')', '\n', '                ', '.', 'then', '(', '(', 'Answer', '<', 'Certificado', '>', ')', ' ', 'invocation', ' ', '-', '>', '\n', '                        ', 'Stream', '.', 'of', '(', 'certCPF', ',', ' ', 'certCNPJ', ')', '.', 'filter', '(', 'c', ' ', '-', '>', ' ', 'c', '.', 'getCnpjCpf', '(', ')', '.', 'equals', '(', 'CNPJ', ')', ')', '.', 'findFirst', '(', ')', '.', 'orElse', '(', 'null', ')', '\n', '                ', ')', ';', '\n', '\n', '        ', 'Certificado', ' ', 'certificadoCPF', ' ', '=', ' ', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CPF', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificadoCNPJ', ' ', '=', ' ', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CNPJ', ')', ';', '\n', '\n', '        ', 'assertEquals', '(', 'certificadoCPF', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CPF', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificadoCNPJ', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,TipoCertificadoA3Test.java,deveRepresentarAMarcaCorretamente,"    public void deveRepresentarAMarcaCorretamente() {
        assertEquals(""SafeWeb"", TipoCertificadoA3.LEITOR_SCR3310.getMarca());
        assertEquals(""eToken"", TipoCertificadoA3.TOKEN_ALADDIN.getMarca());
        assertEquals(""SmartCard"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getMarca());
        assertEquals(""Oberthur"", TipoCertificadoA3.OBERTHUR.getMarca());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void deveRepresentarAMarcaCorretamente() {
        assertEquals(""SafeWeb"", TipoCertificadoA3.LEITOR_SCR3310.getMarca());
        assertEquals(""eToken"", TipoCertificadoA3.TOKEN_ALADDIN.getMarca());
        assertEquals(""SmartCard"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getMarca());
        assertEquals(""Oberthur"", TipoCertificadoA3.OBERTHUR.getMarca());
    }
","['    ', 'public', ' ', 'void', ' ', 'deveRepresentarAMarcaCorretamente', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', '""', 'SafeWeb', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_SCR3310', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'eToken', '""', ',', ' ', 'TipoCertificadoA3', '.', 'TOKEN_ALADDIN', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'SmartCard', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_GEMPC_PERTO', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'Oberthur', '""', ',', ' ', 'TipoCertificadoA3', '.', 'OBERTHUR', '.', 'getMarca', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,TipoCertificadoA3Test.java,deveRepresentarADllCorretamente,"    public void deveRepresentarADllCorretamente() {
        assertEquals(""c:/windows/system32/cmp11.dll"", TipoCertificadoA3.LEITOR_SCR3310.getDll());
        assertEquals(""c:/windows/system32/eTpkcs11.dll"", TipoCertificadoA3.TOKEN_ALADDIN.getDll());
        assertEquals(""c:/windows/system32/aetpkss1.dll"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getDll());
        assertEquals(""c:/windows/system32/OcsCryptoki.dll"", TipoCertificadoA3.OBERTHUR.getDll());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void deveRepresentarADllCorretamente() {
        assertEquals(""c:/windows/system32/cmp11.dll"", TipoCertificadoA3.LEITOR_SCR3310.getDll());
        assertEquals(""c:/windows/system32/eTpkcs11.dll"", TipoCertificadoA3.TOKEN_ALADDIN.getDll());
        assertEquals(""c:/windows/system32/aetpkss1.dll"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getDll());
        assertEquals(""c:/windows/system32/OcsCryptoki.dll"", TipoCertificadoA3.OBERTHUR.getDll());
    }
","['    ', 'public', ' ', 'void', ' ', 'deveRepresentarADllCorretamente', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/cmp11.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_SCR3310', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/eTpkcs11.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'TOKEN_ALADDIN', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/aetpkss1.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_GEMPC_PERTO', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/OcsCryptoki.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'OBERTHUR', '.', 'getDll', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,TipoCertificadoEnumTest.java,deveRepresentarADescricaoCorretamente,"    public void deveRepresentarADescricaoCorretamente() {

        assertEquals(""windows"", TipoCertificadoEnum.REPOSITORIO_WINDOWS.getDescricao());
        assertEquals(""mac"", TipoCertificadoEnum.REPOSITORIO_MAC.getDescricao());
        assertEquals(""arquivo"", TipoCertificadoEnum.ARQUIVO.getDescricao());
        assertEquals(""arquivo_bytes"", TipoCertificadoEnum.ARQUIVO_BYTES.getDescricao());
        assertEquals(""a3"", TipoCertificadoEnum.TOKEN_A3.getDescricao());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void deveRepresentarADescricaoCorretamente() {

        assertEquals(""windows"", TipoCertificadoEnum.REPOSITORIO_WINDOWS.getDescricao());
        assertEquals(""mac"", TipoCertificadoEnum.REPOSITORIO_MAC.getDescricao());
        assertEquals(""arquivo"", TipoCertificadoEnum.ARQUIVO.getDescricao());
        assertEquals(""arquivo_bytes"", TipoCertificadoEnum.ARQUIVO_BYTES.getDescricao());
        assertEquals(""a3"", TipoCertificadoEnum.TOKEN_A3.getDescricao());
    }
","['    ', 'public', ' ', 'void', ' ', 'deveRepresentarADescricaoCorretamente', '(', ')', ' ', '{', '\n', '\n', '        ', 'assertEquals', '(', '""', 'windows', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'mac', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'arquivo', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'arquivo_bytes', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'a3', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'TOKEN_A3', '.', 'getDescricao', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,TipoCertificadoEnumTest.java,deveLancarExcecaoCasoTenteBuscarDescricaoErrada,"    public void deveLancarExcecaoCasoTenteBuscarDescricaoErrada() {
        TipoCertificadoEnum.valueOfDescricao(""window"");
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void deveLancarExcecaoCasoTenteBuscarDescricaoErrada() {
        TipoCertificadoEnum.valueOfDescricao(""window"");
    }
","['    ', 'public', ' ', 'void', ' ', 'deveLancarExcecaoCasoTenteBuscarDescricaoErrada', '(', ')', ' ', '{', '\n', '        ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'window', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,89c096bbed4b9be5756bcba8821e841925e1828d,TipoCertificadoEnumTest.java,deveObterAtravesDaDescricao,"    public void deveObterAtravesDaDescricao() {
        assertEquals(TipoCertificadoEnum.REPOSITORIO_WINDOWS, TipoCertificadoEnum.valueOfDescricao(""windows""));
        assertEquals(TipoCertificadoEnum.REPOSITORIO_MAC, TipoCertificadoEnum.valueOfDescricao(""mac""));
        assertEquals(TipoCertificadoEnum.ARQUIVO, TipoCertificadoEnum.valueOfDescricao(""arquivo""));
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, TipoCertificadoEnum.valueOfDescricao(""arquivo_bytes""));
        assertEquals(TipoCertificadoEnum.TOKEN_A3, TipoCertificadoEnum.valueOfDescricao(""a3""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/89c096bbed4b9be5756bcba8821e841925e1828d,"    public void deveObterAtravesDaDescricao() {
        assertEquals(TipoCertificadoEnum.REPOSITORIO_WINDOWS, TipoCertificadoEnum.valueOfDescricao(""windows""));
        assertEquals(TipoCertificadoEnum.REPOSITORIO_MAC, TipoCertificadoEnum.valueOfDescricao(""mac""));
        assertEquals(TipoCertificadoEnum.ARQUIVO, TipoCertificadoEnum.valueOfDescricao(""arquivo""));
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, TipoCertificadoEnum.valueOfDescricao(""arquivo_bytes""));
        assertEquals(TipoCertificadoEnum.TOKEN_A3, TipoCertificadoEnum.valueOfDescricao(""a3""));
    }
","['    ', 'public', ' ', 'void', ' ', 'deveObterAtravesDaDescricao', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'windows', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'mac', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'arquivo', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'arquivo_bytes', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'TOKEN_A3', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'a3', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CertificadoServiceTest.java,getCertificadoByCnpjCpf,"    public void getCertificadoByCnpjCpf() throws CertificadoException, FileNotFoundException {

        Certificado certCPF = CertificadoService.certificadoPfx(CERTIFICADO_CPF, ""123456"");
        Certificado certCNPJ = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");

        PowerMockito.mockStatic(CertificadoService.class);
        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CPF))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CPF)).findFirst().orElse(null)
                );

        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CNPJ))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CNPJ)).findFirst().orElse(null)
                );

        Certificado certificadoCPF = CertificadoService.getCertificadoByCnpjCpf(CPF);
        Certificado certificadoCNPJ = CertificadoService.getCertificadoByCnpjCpf(CNPJ);

        assertEquals(certificadoCPF.getCnpjCpf(), CPF);
        assertEquals(certificadoCNPJ.getCnpjCpf(), CNPJ);
",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void getCertificadoByCnpjCpf() throws CertificadoException, FileNotFoundException {

        Certificado certCPF = CertificadoService.certificadoPfx(CERTIFICADO_CPF, ""123456"");
        Certificado certCNPJ = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");

        PowerMockito.mockStatic(CertificadoService.class);
        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CPF))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CPF)).findFirst().orElse(null)
                );

        PowerMockito.when(CertificadoService.getCertificadoByCnpjCpf(CNPJ))
                .then((Answer<Certificado>) invocation ->
                        Stream.of(certCPF, certCNPJ).filter(c -> c.getCnpjCpf().equals(CNPJ)).findFirst().orElse(null)
                );

        Certificado certificadoCPF = CertificadoService.getCertificadoByCnpjCpf(CPF);
        Certificado certificadoCNPJ = CertificadoService.getCertificadoByCnpjCpf(CNPJ);

        assertEquals(certificadoCPF.getCnpjCpf(), CPF);
        assertEquals(certificadoCNPJ.getCnpjCpf(), CNPJ);
","['    ', 'public', ' ', 'void', ' ', 'getCertificadoByCnpjCpf', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '\n', '        ', 'Certificado', ' ', 'certCPF', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', '""', '123456', '""', ')', ';', '\n', '        ', 'Certificado', ' ', 'certCNPJ', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', '""', '123456', '""', ')', ';', '\n', '\n', '        ', 'PowerMockito', '.', 'mockStatic', '(', 'CertificadoService', '.', 'class', ')', ';', '\n', '        ', 'PowerMockito', '.', 'when', '(', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CPF', ')', ')', '\n', '                ', '.', 'then', '(', '(', 'Answer', '<', 'Certificado', '>', ')', ' ', 'invocation', ' ', '-', '>', '\n', '                        ', 'Stream', '.', 'of', '(', 'certCPF', ',', ' ', 'certCNPJ', ')', '.', 'filter', '(', 'c', ' ', '-', '>', ' ', 'c', '.', 'getCnpjCpf', '(', ')', '.', 'equals', '(', 'CPF', ')', ')', '.', 'findFirst', '(', ')', '.', 'orElse', '(', 'null', ')', '\n', '                ', ')', ';', '\n', '\n', '        ', 'PowerMockito', '.', 'when', '(', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CNPJ', ')', ')', '\n', '                ', '.', 'then', '(', '(', 'Answer', '<', 'Certificado', '>', ')', ' ', 'invocation', ' ', '-', '>', '\n', '                        ', 'Stream', '.', 'of', '(', 'certCPF', ',', ' ', 'certCNPJ', ')', '.', 'filter', '(', 'c', ' ', '-', '>', ' ', 'c', '.', 'getCnpjCpf', '(', ')', '.', 'equals', '(', 'CNPJ', ')', ')', '.', 'findFirst', '(', ')', '.', 'orElse', '(', 'null', ')', '\n', '                ', ')', ';', '\n', '\n', '        ', 'Certificado', ' ', 'certificadoCPF', ' ', '=', ' ', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CPF', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificadoCNPJ', ' ', '=', ' ', 'CertificadoService', '.', 'getCertificadoByCnpjCpf', '(', 'CNPJ', ')', ';', '\n', '\n', '        ', 'assertEquals', '(', 'certificadoCPF', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CPF', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificadoCNPJ', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxParametroNull,"    public void certificadoPfxParametroNull() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(null, null);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxParametroNull() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(null, null);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxParametroNull', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'null', ',', ' ', 'null', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxArquivoNaoExiste,"    public void certificadoPfxArquivoNaoExiste() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(""CertificadoNaoExiste.pfx"", """");
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxArquivoNaoExiste() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(""CertificadoNaoExiste.pfx"", """");
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxArquivoNaoExiste', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', '""', 'CertificadoNaoExiste.pfx', '""', ',', ' ', '""', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxSenhaInvalida,"    public void certificadoPfxSenhaInvalida() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, """");
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxSenhaInvalida() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, """");
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxSenhaInvalida', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', '""', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxArquivoInvalido,"    public void certificadoPfxArquivoInvalido() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(""pom.xml"", """");
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxArquivoInvalido() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(""pom.xml"", """");
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxArquivoInvalido', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', '""', 'pom.xml', '""', ',', ' ', '""', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxCPF,"    public void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxCPF', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cpf teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CPF', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxCNPJ,"    public void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxCNPJ', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', '""', '123456', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxByteParametroNull,"    public void certificadoPfxByteParametroNull() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfxBytes(null, null);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxByteParametroNull() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfxBytes(null, null);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxByteParametroNull', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'null', ',', ' ', 'null', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxByteSenhaInvalida,"    public void certificadoPfxByteSenhaInvalida() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, ""12345"");
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxByteSenhaInvalida() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, ""12345"");
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxByteSenhaInvalida', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', '""', '12345', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,CriacaoCertificadoTestes.java,certificadoPfxByteInvalido,"    public void certificadoPfxByteInvalido() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfxBytes(""pom.xml"".getBytes(), """");
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/7970b8bf41ade788b8b4eef56ec0abf6a5ce660f,"    public void certificadoPfxByteInvalido() throws CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfxBytes(""pom.xml"".getBytes(), """");
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxByteInvalido', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', '""', 'pom.xml', '""', '.', 'getBytes', '(', ')', ',', ' ', '""', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b799a5fa8b1d4077acdb04d3fb8cb2a055432947,CertificadoServiceTest.java,certificadoPfxBytes,"    public void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.isAtivarProperties(), false);
        certificado.setAtivarProperties(true);
        assertEquals(certificado.isAtivarProperties(), true);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/b799a5fa8b1d4077acdb04d3fb8cb2a055432947,"    public void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, ""123456"");
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.isAtivarProperties(), false);
        certificado.setAtivarProperties(true);
        assertEquals(certificado.isAtivarProperties(), true);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
    }
","['    ', 'public', ' ', 'void', ' ', 'certificadoPfxBytes', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', '""', '123456', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isValido', '(', ')', ',', ' ', 'true', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ',', ' ', 'false', ')', ';', '\n', '        ', 'certificado', '.', 'setAtivarProperties', '(', 'true', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ',', ' ', 'true', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado) throws CertificadoException, KeyStoreException {

        KeyStore keyStore = getKeyStore(certificado);
        Enumeration<String> aliasEnum = keyStore.aliases();
        String aliasKey = aliasEnum.nextElement();

        certificado.setNome(aliasKey);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificado, keyStore));
        certificado.setVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    private static void setDadosCertificado(Certificado certificado) throws CertificadoException, KeyStoreException {

        KeyStore keyStore = getKeyStore(certificado);
        Enumeration<String> aliasEnum = keyStore.aliases();
        String aliasKey = aliasEnum.nextElement();

        certificado.setNome(aliasKey);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificado, keyStore));
        certificado.setVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '        ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '        ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'certificado', ',', ' ', 'keyStore', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '(', 'certificado', ')', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxParametroNull,"    void certificadoPfxParametroNull() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(null, SENHA);
        });
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, null);",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxParametroNull() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(null, SENHA);
        });
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, null);
","['    ', 'void', ' ', 'certificadoPfxParametroNull', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'null', ',', ' ', 'SENHA', ')', ';', '\n', '        ', '}', ')', ';', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'null', ')', ';', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxArquivoNaoExiste,"    void certificadoPfxArquivoNaoExiste() {
        Assertions.assertThrows(FileNotFoundException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(""CertificadoNaoExiste.pfx"", """");",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxArquivoNaoExiste() {
        Assertions.assertThrows(FileNotFoundException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(""CertificadoNaoExiste.pfx"", """");
","['    ', 'void', ' ', 'certificadoPfxArquivoNaoExiste', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'FileNotFoundException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', '""', 'CertificadoNaoExiste.pfx', '""', ',', ' ', '""', '""', ')', ';', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxSenhaInvalida,"    void certificadoPfxSenhaInvalida() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, """");",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxSenhaInvalida() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, """");
","['    ', 'void', ' ', 'certificadoPfxSenhaInvalida', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'CertificadoException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', '""', '""', ')', ';', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxArquivoInvalido,"    void certificadoPfxArquivoInvalido() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(""pom.xml"", """");",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxArquivoInvalido() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfx(""pom.xml"", """");
","['    ', 'void', ' ', 'certificadoPfxArquivoInvalido', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'CertificadoException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', '""', 'pom.xml', '""', ',', ' ', '""', '""', ')', ';', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxCPF,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }
","['    ', 'void', ' ', 'certificadoPfxCPF', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cpf teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CPF', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxCNPJ,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
    }
","['    ', 'void', ' ', 'certificadoPfxCNPJ', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxByteParametroNull,"    void certificadoPfxByteParametroNull() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(null, SENHA);
        });
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxByteParametroNull() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(null, SENHA);
        });
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
","['    ', 'void', ' ', 'certificadoPfxByteParametroNull', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'null', ',', ' ', 'SENHA', ')', ';', '\n', '        ', '}', ')', ';', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxByteSenhaInvalida,"    void certificadoPfxByteSenhaInvalida() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxByteSenhaInvalida() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
","['    ', 'void', ' ', 'certificadoPfxByteSenhaInvalida', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'CertificadoException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxByteInvalido,"    void certificadoPfxByteInvalido() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(""pom.xml"".getBytes(), """");",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxByteInvalido() {
        Assertions.assertThrows(CertificadoException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(""pom.xml"".getBytes(), """");
","['    ', 'void', ' ', 'certificadoPfxByteInvalido', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'CertificadoException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', '""', 'pom.xml', '""', '.', 'getBytes', '(', ')', ',', ' ', '""', '""', ')', ';', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,certificadoPfxBytes,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(certificado.getSslProtocol(), ""TLSv1.3"");
        assertEquals(certificado.isAtivarProperties(), false);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(certificado.getSslProtocol(), ""TLSv1.3"");
        assertEquals(certificado.isAtivarProperties(), false);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
    }
","['    ', 'void', ' ', 'certificadoPfxBytes', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isValido', '(', ')', ',', ' ', 'true', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'certificado', '.', 'setSslProtocol', '(', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ',', ' ', 'false', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,inicaConfiguracoesCorretamente,"    void inicaConfiguracoesCorretamente() throws IOException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        InputStream cacert = new FileInputStream(new File(""Cacert""));
        CertificadoService.inicializaCertificado(certificado, cacert);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void inicaConfiguracoesCorretamente() throws IOException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        InputStream cacert = new FileInputStream(new File(""Cacert""));
        CertificadoService.inicializaCertificado(certificado, cacert);
    }
","['    ', 'void', ' ', 'inicaConfiguracoesCorretamente', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'InputStream', ' ', 'cacert', ' ', '=', ' ', 'new', ' ', 'FileInputStream', '(', 'new', ' ', 'File', '(', '""', 'Cacert', '""', ')', ')', ';', '\n', '        ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'certificado', ',', ' ', 'cacert', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,CertificadoServiceTest.java,inicaConfiguracoesParametrosNull,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = new FileInputStream(new File(""Cacert""));
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        //Certificado Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null, cacert)
        );
        //Cacert Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null, cacert)",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = new FileInputStream(new File(""Cacert""));
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null, cacert)
        );
        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null, cacert)
","['    ', 'void', ' ', 'inicaConfiguracoesParametrosNull', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'InputStream', ' ', 'cacert', ' ', '=', ' ', 'new', ' ', 'FileInputStream', '(', 'new', ' ', 'File', '(', '""', 'Cacert', '""', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '            ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ',', ' ', 'cacert', ')', '\n', '        ', ')', ';', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '            ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ',', ' ', 'cacert', ')', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,TipoCertificadoA3Test.java,deveRepresentarAMarcaCorretamente,"    void deveRepresentarAMarcaCorretamente() {
        assertEquals(""SafeWeb"", TipoCertificadoA3.LEITOR_SCR3310.getMarca());
        assertEquals(""eToken"", TipoCertificadoA3.TOKEN_ALADDIN.getMarca());
        assertEquals(""SmartCard"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getMarca());
        assertEquals(""Oberthur"", TipoCertificadoA3.OBERTHUR.getMarca());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void deveRepresentarAMarcaCorretamente() {
        assertEquals(""SafeWeb"", TipoCertificadoA3.LEITOR_SCR3310.getMarca());
        assertEquals(""eToken"", TipoCertificadoA3.TOKEN_ALADDIN.getMarca());
        assertEquals(""SmartCard"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getMarca());
        assertEquals(""Oberthur"", TipoCertificadoA3.OBERTHUR.getMarca());
    }
","['    ', 'void', ' ', 'deveRepresentarAMarcaCorretamente', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', '""', 'SafeWeb', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_SCR3310', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'eToken', '""', ',', ' ', 'TipoCertificadoA3', '.', 'TOKEN_ALADDIN', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'SmartCard', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_GEMPC_PERTO', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'Oberthur', '""', ',', ' ', 'TipoCertificadoA3', '.', 'OBERTHUR', '.', 'getMarca', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,TipoCertificadoA3Test.java,deveRepresentarADllCorretamente,"    void deveRepresentarADllCorretamente() {
        assertEquals(""c:/windows/system32/cmp11.dll"", TipoCertificadoA3.LEITOR_SCR3310.getDll());
        assertEquals(""c:/windows/system32/eTpkcs11.dll"", TipoCertificadoA3.TOKEN_ALADDIN.getDll());
        assertEquals(""c:/windows/system32/aetpkss1.dll"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getDll());
        assertEquals(""c:/windows/system32/OcsCryptoki.dll"", TipoCertificadoA3.OBERTHUR.getDll());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void deveRepresentarADllCorretamente() {
        assertEquals(""c:/windows/system32/cmp11.dll"", TipoCertificadoA3.LEITOR_SCR3310.getDll());
        assertEquals(""c:/windows/system32/eTpkcs11.dll"", TipoCertificadoA3.TOKEN_ALADDIN.getDll());
        assertEquals(""c:/windows/system32/aetpkss1.dll"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getDll());
        assertEquals(""c:/windows/system32/OcsCryptoki.dll"", TipoCertificadoA3.OBERTHUR.getDll());
    }
","['    ', 'void', ' ', 'deveRepresentarADllCorretamente', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/cmp11.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_SCR3310', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/eTpkcs11.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'TOKEN_ALADDIN', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/aetpkss1.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_GEMPC_PERTO', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/OcsCryptoki.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'OBERTHUR', '.', 'getDll', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,TipoCertificadoEnumTest.java,deveRepresentarADescricaoCorretamente,"    void deveRepresentarADescricaoCorretamente() {

        assertEquals(""windows"", TipoCertificadoEnum.REPOSITORIO_WINDOWS.getDescricao());
        assertEquals(""mac"", TipoCertificadoEnum.REPOSITORIO_MAC.getDescricao());
        assertEquals(""arquivo"", TipoCertificadoEnum.ARQUIVO.getDescricao());
        assertEquals(""arquivo_bytes"", TipoCertificadoEnum.ARQUIVO_BYTES.getDescricao());
        assertEquals(""a3"", TipoCertificadoEnum.TOKEN_A3.getDescricao());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void deveRepresentarADescricaoCorretamente() {

        assertEquals(""windows"", TipoCertificadoEnum.REPOSITORIO_WINDOWS.getDescricao());
        assertEquals(""mac"", TipoCertificadoEnum.REPOSITORIO_MAC.getDescricao());
        assertEquals(""arquivo"", TipoCertificadoEnum.ARQUIVO.getDescricao());
        assertEquals(""arquivo_bytes"", TipoCertificadoEnum.ARQUIVO_BYTES.getDescricao());
        assertEquals(""a3"", TipoCertificadoEnum.TOKEN_A3.getDescricao());
    }
","['    ', 'void', ' ', 'deveRepresentarADescricaoCorretamente', '(', ')', ' ', '{', '\n', '\n', '        ', 'assertEquals', '(', '""', 'windows', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'mac', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'arquivo', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'arquivo_bytes', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', '.', 'getDescricao', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'a3', '""', ',', ' ', 'TipoCertificadoEnum', '.', 'TOKEN_A3', '.', 'getDescricao', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,TipoCertificadoEnumTest.java,deveLancarExcecaoCasoTenteBuscarDescricaoErrada,"    void deveLancarExcecaoCasoTenteBuscarDescricaoErrada() {
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                TipoCertificadoEnum.valueOfDescricao(""window"")",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void deveLancarExcecaoCasoTenteBuscarDescricaoErrada() {
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                TipoCertificadoEnum.valueOfDescricao(""window"")
","['    ', 'void', ' ', 'deveLancarExcecaoCasoTenteBuscarDescricaoErrada', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '                ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'window', '""', ')', '\n', '<END>']"
master,0e5f046b153a35c5826a4fe4106d44e5ae63407a,TipoCertificadoEnumTest.java,deveObterAtravesDaDescricao,"    void deveObterAtravesDaDescricao() {
        assertEquals(TipoCertificadoEnum.REPOSITORIO_WINDOWS, TipoCertificadoEnum.valueOfDescricao(""windows""));
        assertEquals(TipoCertificadoEnum.REPOSITORIO_MAC, TipoCertificadoEnum.valueOfDescricao(""mac""));
        assertEquals(TipoCertificadoEnum.ARQUIVO, TipoCertificadoEnum.valueOfDescricao(""arquivo""));
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, TipoCertificadoEnum.valueOfDescricao(""arquivo_bytes""));
        assertEquals(TipoCertificadoEnum.TOKEN_A3, TipoCertificadoEnum.valueOfDescricao(""a3""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/0e5f046b153a35c5826a4fe4106d44e5ae63407a,"    void deveObterAtravesDaDescricao() {
        assertEquals(TipoCertificadoEnum.REPOSITORIO_WINDOWS, TipoCertificadoEnum.valueOfDescricao(""windows""));
        assertEquals(TipoCertificadoEnum.REPOSITORIO_MAC, TipoCertificadoEnum.valueOfDescricao(""mac""));
        assertEquals(TipoCertificadoEnum.ARQUIVO, TipoCertificadoEnum.valueOfDescricao(""arquivo""));
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, TipoCertificadoEnum.valueOfDescricao(""arquivo_bytes""));
        assertEquals(TipoCertificadoEnum.TOKEN_A3, TipoCertificadoEnum.valueOfDescricao(""a3""));
    }
","['    ', 'void', ' ', 'deveObterAtravesDaDescricao', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'windows', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'mac', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'arquivo', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'arquivo_bytes', '""', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'TOKEN_A3', ',', ' ', 'TipoCertificadoEnum', '.', 'valueOfDescricao', '(', '""', 'a3', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9e57a396ff1b03a5eced20aee445fee7658d4723,CertificadoProperties.java,main,"    public static void main(String[] args) throws IOException {
        File cert = File.createTempFile(""cert"", "".pfx"");
        Files.write(cert.toPath(),Files.readAllBytes(new File(""d:/certificado.pfx"").toPath()));
        System.out.println(cert.getAbsolutePath());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/9e57a396ff1b03a5eced20aee445fee7658d4723,"    public static void main(String[] args) throws IOException {
        File cert = File.createTempFile(""cert"", "".pfx"");
        Files.write(cert.toPath(),Files.readAllBytes(new File(""d:/certificado.pfx"").toPath()));
        System.out.println(cert.getAbsolutePath());
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'File', ' ', 'cert', ' ', '=', ' ', 'File', '.', 'createTempFile', '(', '""', 'cert', '""', ',', ' ', '""', '.pfx', '""', ')', ';', '\n', '        ', 'Files', '.', 'write', '(', 'cert', '.', 'toPath', '(', ')', ',', 'Files', '.', 'readAllBytes', '(', 'new', ' ', 'File', '(', '""', 'd:/certificado.pfx', '""', ')', '.', 'toPath', '(', ')', ')', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'cert', '.', 'getAbsolutePath', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,9e57a396ff1b03a5eced20aee445fee7658d4723,SocketFactoryDinamico.java,createKeyManagers,"    private KeyManager[] createKeyManagers() {
        return new KeyManager[]{new AliasKeyManager(keyStore, alias, senha)};
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/9e57a396ff1b03a5eced20aee445fee7658d4723,"    private KeyManager[] createKeyManagers() {
        return new KeyManager[]{new AliasKeyManager(keyStore, alias, senha)};
    }
","['    ', 'private', ' ', 'KeyManager', '[', ']', ' ', 'createKeyManagers', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'KeyManager', '[', ']', '{', 'new', ' ', 'AliasKeyManager', '(', 'keyStore', ',', ' ', 'alias', ',', ' ', 'senha', ')', '}', ';', '\n', '    ', '}', '\n', '<END>']"
master,8489741977c31fe1e2349bc1279af7917904c36a,AliasKeyManager.java,chooseClientAlias,"    public String chooseClientAlias(String[] str, Principal[] principal, Socket socket) {
        return alias;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/8489741977c31fe1e2349bc1279af7917904c36a,"    public String chooseClientAlias(String[] str, Principal[] principal, Socket socket) {
        return alias;
    }
","['    ', 'public', ' ', 'String', ' ', 'chooseClientAlias', '(', 'String', '[', ']', ' ', 'str', ',', ' ', 'Principal', '[', ']', ' ', 'principal', ',', ' ', 'Socket', ' ', 'socket', ')', ' ', '{', '\n', '        ', 'return', ' ', 'alias', ';', '\n', '    ', '}', '\n', '<END>']"
master,8489741977c31fe1e2349bc1279af7917904c36a,AliasKeyManager.java,chooseServerAlias,"    public String chooseServerAlias(String str, Principal[] principal, Socket socket) {
        return alias;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/8489741977c31fe1e2349bc1279af7917904c36a,"    public String chooseServerAlias(String str, Principal[] principal, Socket socket) {
        return alias;
    }
","['    ', 'public', ' ', 'String', ' ', 'chooseServerAlias', '(', 'String', ' ', 'str', ',', ' ', 'Principal', '[', ']', ' ', 'principal', ',', ' ', 'Socket', ' ', 'socket', ')', ' ', '{', '\n', '        ', 'return', ' ', 'alias', ';', '\n', '    ', '}', '\n', '<END>']"
master,5a067540a4e9ef82f42d36f8932c11aa3d80387c,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado) throws CertificadoException, KeyStoreException {

        KeyStore keyStore = getKeyStore(certificado);
        Enumeration<String> aliasEnum = keyStore.aliases();
        String aliasKey = aliasEnum.nextElement();

        certificado.setNome(aliasKey);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificado, keyStore));
        certificado.setVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5a067540a4e9ef82f42d36f8932c11aa3d80387c,"    private static void setDadosCertificado(Certificado certificado) throws CertificadoException, KeyStoreException {

        KeyStore keyStore = getKeyStore(certificado);
        Enumeration<String> aliasEnum = keyStore.aliases();
        String aliasKey = aliasEnum.nextElement();

        certificado.setNome(aliasKey);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificado, keyStore));
        certificado.setVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade(certificado).toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '        ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '        ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'certificado', ',', ' ', 'keyStore', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '(', 'certificado', ')', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDataHoraVencimento', '(', 'dataValidade', '(', 'certificado', ')', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,5a067540a4e9ef82f42d36f8932c11aa3d80387c,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(List<Certificado> listaCert, KeyStore ks, String aliasKey, TipoCertificadoEnum tipoCertificadoEnum) throws CertificadoException {
        Certificado cert = new Certificado();
        cert.setNome(aliasKey);
        cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
        cert.setTipoCertificado(tipoCertificadoEnum);
        cert.setSenha("""");
        Date dataValidade = dataValidade(cert);
        if (dataValidade ==
                null) {
            cert.setNome(""(INVALIDO)"" +
                                 aliasKey);
            cert.setVencimento(LocalDate.of(2000, 1, 1));
            cert.setDataHoraVencimento(LocalDateTime.of(2000, 1, 1, 0, 0, 0));
            cert.setDiasRestantes(0L);
            cert.setValido(false);
        } else {
            cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            cert.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
            cert.setDiasRestantes(diasRestantes(cert));
            cert.setValido(valido(cert));
        }

        listaCert.add(cert);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/5a067540a4e9ef82f42d36f8932c11aa3d80387c,"    private static void setDadosCertificado(List<Certificado> listaCert, KeyStore ks, String aliasKey, TipoCertificadoEnum tipoCertificadoEnum) throws CertificadoException {
        Certificado cert = new Certificado();
        cert.setNome(aliasKey);
        cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
        cert.setTipoCertificado(tipoCertificadoEnum);
        cert.setSenha("""");
        Date dataValidade = dataValidade(cert);
        if (dataValidade ==
                null) {
            cert.setNome(""(INVALIDO)"" +
                                 aliasKey);
            cert.setVencimento(LocalDate.of(2000, 1, 1));
            cert.setDataHoraVencimento(LocalDateTime.of(2000, 1, 1, 0, 0, 0));
            cert.setDiasRestantes(0L);
            cert.setValido(false);
        } else {
            cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            cert.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
            cert.setDiasRestantes(diasRestantes(cert));
            cert.setValido(valido(cert));
        }

        listaCert.add(cert);
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ',', ' ', 'KeyStore', ' ', 'ks', ',', ' ', 'String', ' ', 'aliasKey', ',', ' ', 'TipoCertificadoEnum', ' ', 'tipoCertificadoEnum', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', 'cert', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'cert', ',', ' ', 'ks', ')', ')', ';', '\n', '        ', 'cert', '.', 'setTipoCertificado', '(', 'tipoCertificadoEnum', ')', ';', '\n', '        ', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'cert', ')', ';', '\n', '        ', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', '\n', '                ', 'null', ')', ' ', '{', '\n', '            ', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', '\n', '                                 ', 'aliasKey', ')', ';', '\n', '            ', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDataHoraVencimento', '(', 'LocalDateTime', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '            ', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDataHoraVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '            ', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f927ef08421004d3d2d0c2600c2490c0012934b3,CacertUtil.java,main,"    public static void main(String[] args) {

        try {
            List<String> lista = listaPadraoWebService();",https://www.github.com/samuel-oliveira/java_certificado/commit/f927ef08421004d3d2d0c2600c2490c0012934b3,"    public static void main(String[] args) {

        try {
            List<String> lista = listaPadraoWebService();
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'List', '<', 'String', '>', ' ', 'lista', ' ', '=', ' ', 'listaPadraoWebService', '(', ')', ';', '\n', '<END>']"
master,f927ef08421004d3d2d0c2600c2490c0012934b3,CacertUtil.java,get,"    private static void get(String host, KeyStore ks) {
        try {
            System.out.println(""Info: Capturando ca: ""+host);",https://www.github.com/samuel-oliveira/java_certificado/commit/f927ef08421004d3d2d0c2600c2490c0012934b3,"    private static void get(String host, KeyStore ks) {
        try {
            System.out.println(""Info: Capturando ca: ""+host);
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'get', '(', 'String', ' ', 'host', ',', ' ', 'KeyStore', ' ', 'ks', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'Info: Capturando ca: ', '""', '+', 'host', ')', ';', '\n', '<END>']"
master,f927ef08421004d3d2d0c2600c2490c0012934b3,CacertUtil.java,checkClientTrusted,"        public void checkClientTrusted(X509Certificate[] chain, String authType) {
            throw new UnsupportedOperationException();
        }",https://www.github.com/samuel-oliveira/java_certificado/commit/f927ef08421004d3d2d0c2600c2490c0012934b3,"        public void checkClientTrusted(X509Certificate[] chain, String authType) {
            throw new UnsupportedOperationException();
        }
","['        ', 'public', ' ', 'void', ' ', 'checkClientTrusted', '(', 'X509Certificate', '[', ']', ' ', 'chain', ',', ' ', 'String', ' ', 'authType', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'UnsupportedOperationException', '(', ')', ';', '\n', '        ', '}', '\n', '<END>']"
master,f927ef08421004d3d2d0c2600c2490c0012934b3,CacertUtil.java,checkServerTrusted,"        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            this.chain = chain;
            this.tm.checkServerTrusted(chain, authType);
        }",https://www.github.com/samuel-oliveira/java_certificado/commit/f927ef08421004d3d2d0c2600c2490c0012934b3,"        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            this.chain = chain;
            this.tm.checkServerTrusted(chain, authType);
        }
","['        ', 'public', ' ', 'void', ' ', 'checkServerTrusted', '(', 'X509Certificate', '[', ']', ' ', 'chain', ',', ' ', 'String', ' ', 'authType', ')', ' ', 'throws', ' ', 'CertificateException', ' ', '{', '\n', '            ', 'this', '.', 'chain', ' ', '=', ' ', 'chain', ';', '\n', '            ', 'this', '.', 'tm', '.', 'checkServerTrusted', '(', 'chain', ',', ' ', 'authType', ')', ';', '\n', '        ', '}', '\n', '<END>']"
master,db8a17b07913415af29e25ad6f9c6f37706e1624,TipoCertificadoA3Test.java,deveRepresentarAMarcaCorretamente,"    void deveRepresentarAMarcaCorretamente() {
        assertEquals(""SafeWeb"", TipoCertificadoA3.LEITOR_SCR3310.getMarca());
        assertEquals(""eToken"", TipoCertificadoA3.TOKEN_ALADDIN.getMarca());
        assertEquals(""SmartCard"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getMarca());
        assertEquals(""Oberthur"", TipoCertificadoA3.OBERTHUR.getMarca());
        assertEquals(""EnterSafe"", TipoCertificadoA3.ENTER_SAFE.getMarca());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db8a17b07913415af29e25ad6f9c6f37706e1624,"    void deveRepresentarAMarcaCorretamente() {
        assertEquals(""SafeWeb"", TipoCertificadoA3.LEITOR_SCR3310.getMarca());
        assertEquals(""eToken"", TipoCertificadoA3.TOKEN_ALADDIN.getMarca());
        assertEquals(""SmartCard"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getMarca());
        assertEquals(""Oberthur"", TipoCertificadoA3.OBERTHUR.getMarca());
        assertEquals(""EnterSafe"", TipoCertificadoA3.ENTER_SAFE.getMarca());
    }
","['    ', 'void', ' ', 'deveRepresentarAMarcaCorretamente', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', '""', 'SafeWeb', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_SCR3310', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'eToken', '""', ',', ' ', 'TipoCertificadoA3', '.', 'TOKEN_ALADDIN', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'SmartCard', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_GEMPC_PERTO', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'Oberthur', '""', ',', ' ', 'TipoCertificadoA3', '.', 'OBERTHUR', '.', 'getMarca', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'EnterSafe', '""', ',', ' ', 'TipoCertificadoA3', '.', 'ENTER_SAFE', '.', 'getMarca', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,db8a17b07913415af29e25ad6f9c6f37706e1624,TipoCertificadoA3Test.java,deveRepresentarADllCorretamente,"    void deveRepresentarADllCorretamente() {
        assertEquals(""c:/windows/system32/cmp11.dll"", TipoCertificadoA3.LEITOR_SCR3310.getDll());
        assertEquals(""c:/windows/system32/eTpkcs11.dll"", TipoCertificadoA3.TOKEN_ALADDIN.getDll());
        assertEquals(""c:/windows/system32/aetpkss1.dll"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getDll());
        assertEquals(""c:/windows/system32/OcsCryptoki.dll"", TipoCertificadoA3.OBERTHUR.getDll());
        assertEquals(""c:/windows/system32/eps2003csp11.dll"", TipoCertificadoA3.ENTER_SAFE.getDll());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db8a17b07913415af29e25ad6f9c6f37706e1624,"    void deveRepresentarADllCorretamente() {
        assertEquals(""c:/windows/system32/cmp11.dll"", TipoCertificadoA3.LEITOR_SCR3310.getDll());
        assertEquals(""c:/windows/system32/eTpkcs11.dll"", TipoCertificadoA3.TOKEN_ALADDIN.getDll());
        assertEquals(""c:/windows/system32/aetpkss1.dll"", TipoCertificadoA3.LEITOR_GEMPC_PERTO.getDll());
        assertEquals(""c:/windows/system32/OcsCryptoki.dll"", TipoCertificadoA3.OBERTHUR.getDll());
        assertEquals(""c:/windows/system32/eps2003csp11.dll"", TipoCertificadoA3.ENTER_SAFE.getDll());
    }
","['    ', 'void', ' ', 'deveRepresentarADllCorretamente', '(', ')', ' ', '{', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/cmp11.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_SCR3310', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/eTpkcs11.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'TOKEN_ALADDIN', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/aetpkss1.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'LEITOR_GEMPC_PERTO', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/OcsCryptoki.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'OBERTHUR', '.', 'getDll', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'c:/windows/system32/eps2003csp11.dll', '""', ',', ' ', 'TipoCertificadoA3', '.', 'ENTER_SAFE', '.', 'getDll', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoService.java,inicializaCertificado,"    public static void inicializaCertificado(Certificado certificado) throws CertificadoException {
        cacertProprio = true;
        inicializaCertificado(certificado, CertificadoService.class.getResourceAsStream(""/cacert""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    public static void inicializaCertificado(Certificado certificado) throws CertificadoException {
        cacertProprio = true;
        inicializaCertificado(certificado, CertificadoService.class.getResourceAsStream(""/cacert""));
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'inicializaCertificado', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'cacertProprio', ' ', '=', ' ', 'true', ';', '\n', '        ', 'inicializaCertificado', '(', 'certificado', ',', ' ', 'CertificadoService', '.', 'class', '.', 'getResourceAsStream', '(', '""', '/cacert', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoService.java,listaCertificadosWindows,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_WINDOWS);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_WINDOWS);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage());
        }

        return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_WINDOWS);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_WINDOWS);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage());
        }

        return listaCert;
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setTipoCertificado', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', '\n', '                        ', 'null', ')', ' ', '{', '\n', '                    ', 'setDadosCertificado', '(', 'listaCert', ',', ' ', 'ks', ',', ' ', 'aliasKey', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                    ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(List<Certificado> listaCert, KeyStore ks, String aliasKey, TipoCertificadoEnum tipoCertificadoEnum) throws CertificadoException {
        Certificado cert = new Certificado();
        cert.setNome(aliasKey);
        cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
        cert.setTipoCertificado(tipoCertificadoEnum);
        cert.setSenha("""");
        Date dataValidade = dataValidade(cert);
        if (dataValidade ==
                null) {
            cert.setNome(""(INVALIDO)"" +
                    aliasKey);
            cert.setVencimento(LocalDate.of(2000, 1, 1));
            cert.setDataHoraVencimento(LocalDateTime.of(2000, 1, 1, 0, 0, 0));
            cert.setDiasRestantes(0L);
            cert.setValido(false);
        } else {
            cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            cert.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
            cert.setDiasRestantes(diasRestantes(cert));
            cert.setValido(valido(cert));
        }

        listaCert.add(cert);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    private static void setDadosCertificado(List<Certificado> listaCert, KeyStore ks, String aliasKey, TipoCertificadoEnum tipoCertificadoEnum) throws CertificadoException {
        Certificado cert = new Certificado();
        cert.setNome(aliasKey);
        cert.setCnpjCpf(getDocumentoFromCertificado(cert, ks));
        cert.setTipoCertificado(tipoCertificadoEnum);
        cert.setSenha("""");
        Date dataValidade = dataValidade(cert);
        if (dataValidade ==
                null) {
            cert.setNome(""(INVALIDO)"" +
                    aliasKey);
            cert.setVencimento(LocalDate.of(2000, 1, 1));
            cert.setDataHoraVencimento(LocalDateTime.of(2000, 1, 1, 0, 0, 0));
            cert.setDiasRestantes(0L);
            cert.setValido(false);
        } else {
            cert.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            cert.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
            cert.setDiasRestantes(diasRestantes(cert));
            cert.setValido(valido(cert));
        }

        listaCert.add(cert);
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ',', ' ', 'KeyStore', ' ', 'ks', ',', ' ', 'String', ' ', 'aliasKey', ',', ' ', 'TipoCertificadoEnum', ' ', 'tipoCertificadoEnum', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'cert', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', 'cert', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'cert', ',', ' ', 'ks', ')', ')', ';', '\n', '        ', 'cert', '.', 'setTipoCertificado', '(', 'tipoCertificadoEnum', ')', ';', '\n', '        ', 'cert', '.', 'setSenha', '(', '""', '""', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'cert', ')', ';', '\n', '        ', 'if', ' ', '(', 'dataValidade', ' ', '=', '=', '\n', '                ', 'null', ')', ' ', '{', '\n', '            ', 'cert', '.', 'setNome', '(', '""', '(INVALIDO)', '""', ' ', '+', '\n', '                    ', 'aliasKey', ')', ';', '\n', '            ', 'cert', '.', 'setVencimento', '(', 'LocalDate', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDataHoraVencimento', '(', 'LocalDateTime', '.', 'of', '(', '2000', ',', ' ', '1', ',', ' ', '1', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDiasRestantes', '(', '0', 'L', ')', ';', '\n', '            ', 'cert', '.', 'setValido', '(', 'false', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'cert', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDataHoraVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '            ', 'cert', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'cert', ')', ')', ';', '\n', '            ', 'cert', '.', 'setValido', '(', 'valido', '(', 'cert', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'listaCert', '.', 'add', '(', 'cert', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoService.java,listaCertificadosMac,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_MAC);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage());
        }

        return listaCert;
",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado certificado = new Certificado();
        certificado.setTipoCertificado(TipoCertificadoEnum.REPOSITORIO_MAC);
        try {
            KeyStore ks = getKeyStore(certificado);
            Enumeration<String> aliasEnum = ks.aliases();

            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();

                if (aliasKey !=
                        null) {
                    setDadosCertificado(listaCert, ks, aliasKey, TipoCertificadoEnum.REPOSITORIO_MAC);
                }

            }

        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage());
        }

        return listaCert;
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosMac', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'certificado', '.', 'setTipoCertificado', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', '\n', '                        ', 'null', ')', ' ', '{', '\n', '                    ', 'setDadosCertificado', '(', 'listaCert', ',', ' ', 'ks', ',', ' ', 'aliasKey', ',', ' ', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ')', ';', '\n', '                ', '}', '\n', '\n', '            ', '}', '\n', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                    ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoService.java,dataValidade,"    private static Date dataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        if (keyStore ==
                null) {
            throw new CertificadoException(""Erro Ao pegar Keytore, verifique o Certificado"");
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);

        return certificate.getNotAfter();
",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    private static Date dataValidade(Certificado certificado) throws CertificadoException {

        KeyStore keyStore = getKeyStore(certificado);
        if (keyStore ==
                null) {
            throw new CertificadoException(""Erro Ao pegar Keytore, verifique o Certificado"");
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);

        return certificate.getNotAfter();
","['    ', 'private', ' ', 'static', ' ', 'Date', ' ', 'dataValidade', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', '\n', '                ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar Keytore, verifique o Certificado', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '\n', '        ', 'return', ' ', 'certificate', '.', 'getNotAfter', '(', ')', ';', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoService.java,getSlot,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage());
        }

        return slotSelected;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage());
        }

        return slotSelected;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'getSlot', '(', 'String', ' ', 'libraryPath', ',', ' ', 'String', ' ', 'serialNumber', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'CK_C_INITIALIZE_ARGS', ' ', 'initArgs', ' ', '=', ' ', 'new', ' ', 'CK_C_INITIALIZE_ARGS', '(', ')', ';', '\n', '        ', 'String', ' ', 'functionList', ' ', '=', ' ', '""', 'C_GetFunctionList', '""', ';', '\n', '\n', '        ', 'initArgs', '.', 'flags', ' ', '=', ' ', '0', ';', '\n', '        ', 'PKCS11', ' ', 'tmpPKCS11', ';', '\n', '        ', 'long', '[', ']', ' ', 'slotList', ';', '\n', '        ', 'String', ' ', 'slotSelected', ' ', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'initArgs', ',', ' ', 'false', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '                ', 'throw', ' ', 'ex', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'PKCS11Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'null', ',', ' ', 'true', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao pegar Slot A3: ', '""', ' ', '+', '\n', '                        ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'slotList', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetSlotList', '(', 'true', ')', ';', '\n', '\n', '            ', 'for', ' ', '(', 'long', ' ', 'slot', ' ', ':', ' ', 'slotList', ')', ' ', '{', '\n', '                ', 'CK_TOKEN_INFO', ' ', 'tokenInfo', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetTokenInfo', '(', 'slot', ')', ';', '\n', '                ', 'if', ' ', '(', 'serialNumber', '.', 'equals', '(', 'String', '.', 'valueOf', '(', 'tokenInfo', '.', 'serialNumber', ')', ')', ')', ' ', '{', '\n', '                    ', 'slotSelected', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'slot', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar SlotA3: ', '""', ' ', '+', '\n', '                    ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'slotSelected', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoServiceTest.java,inicaConfiguracoesCorretamente,"    void inicaConfiguracoesCorretamente() throws IOException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        CertificadoService.inicializaCertificado(certificado);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    void inicaConfiguracoesCorretamente() throws IOException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        CertificadoService.inicializaCertificado(certificado);
    }
","['    ', 'void', ' ', 'inicaConfiguracoesCorretamente', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'certificado', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,CertificadoServiceTest.java,inicaConfiguracoesParametrosNull,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = new FileInputStream(new File(""Cacert""));
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        //Certificado Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)
        );
        //Cacert Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)",https://www.github.com/samuel-oliveira/java_certificado/commit/6ea88d75e5e0af8cfdcf9fab6f5ce77acbc00288,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = new FileInputStream(new File(""Cacert""));
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)
        );
        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)
","['    ', 'void', ' ', 'inicaConfiguracoesParametrosNull', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'InputStream', ' ', 'cacert', ' ', '=', ' ', 'new', ' ', 'FileInputStream', '(', 'new', ' ', 'File', '(', '""', 'Cacert', '""', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '            ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '        ', ')', ';', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '            ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '<END>']"
master,6bb11a7aab810726684e7dab2ab7cdff32f9ce83,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificate));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6bb11a7aab810726684e7dab2ab7cdff32f9ce83,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificate));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'KeyStore', ' ', 'keyStore', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '            ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '            ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'certificate', ')', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'certificate', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDataHoraVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6bb11a7aab810726684e7dab2ab7cdff32f9ce83,CertificadoService.java,listaCertificadosWindows,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_WINDOWS);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6bb11a7aab810726684e7dab2ab7cdff32f9ce83,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_WINDOWS);
    }
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6bb11a7aab810726684e7dab2ab7cdff32f9ce83,CertificadoService.java,listaCertificadosMac,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_MAC);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6bb11a7aab810726684e7dab2ab7cdff32f9ce83,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_MAC);
    }
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosMac', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,6bb11a7aab810726684e7dab2ab7cdff32f9ce83,CertificadoService.java,listaCertificadosRepositorio,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    listaCert.add(certificado);
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage());
        }
        return listaCert;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/6bb11a7aab810726684e7dab2ab7cdff32f9ce83,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    listaCert.add(certificado);
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage());
        }
        return listaCert;
    }
","['    ', 'private', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', ' ', 'tipo', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'cert', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'cert', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '                    ', 'certificado', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '                    ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '                    ', 'setDadosCertificado', '(', 'certificado', ',', ' ', 'ks', ')', ';', '\n', '                    ', 'listaCert', '.', 'add', '(', 'certificado', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                    ', 'ex', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '    ', '}', '\n', '<END>']"
master,6bb11a7aab810726684e7dab2ab7cdff32f9ce83,CertificadoService.java,dataValidade,"    private static Date dataValidade(X509Certificate certificate) {
        return Optional.ofNullable(certificate.getNotAfter())
                .orElse(Date.from(LocalDate.of(2020, 1, 1).atStartOfDay(ZoneId.systemDefault()).toInstant()));",https://www.github.com/samuel-oliveira/java_certificado/commit/6bb11a7aab810726684e7dab2ab7cdff32f9ce83,"    private static Date dataValidade(X509Certificate certificate) {
        return Optional.ofNullable(certificate.getNotAfter())
                .orElse(Date.from(LocalDate.of(2020, 1, 1).atStartOfDay(ZoneId.systemDefault()).toInstant()));
","['    ', 'private', ' ', 'static', ' ', 'Date', ' ', 'dataValidade', '(', 'X509Certificate', ' ', 'certificate', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Optional', '.', 'ofNullable', '(', 'certificate', '.', 'getNotAfter', '(', ')', ')', '\n', '                ', '.', 'orElse', '(', 'Date', '.', 'from', '(', 'LocalDate', '.', 'of', '(', '2020', ',', ' ', '1', ',', ' ', '1', ')', '.', 'atStartOfDay', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toInstant', '(', ')', ')', ')', ';', '\n', '<END>']"
master,9dc27276bcd58378b8f2b1a0e7d930eed002fc51,CertificadoServiceTest.java,inicaConfiguracoesParametrosNull,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = CertificadoServiceTest.class.getResourceAsStream(""cacert"");
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        //Certificado Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)
        );
        //Cacert Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)",https://www.github.com/samuel-oliveira/java_certificado/commit/9dc27276bcd58378b8f2b1a0e7d930eed002fc51,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = CertificadoServiceTest.class.getResourceAsStream(""cacert"");
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)
        );
        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
            CertificadoService.inicializaCertificado(null)
","['    ', 'void', ' ', 'inicaConfiguracoesParametrosNull', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'InputStream', ' ', 'cacert', ' ', '=', ' ', 'CertificadoServiceTest', '.', 'class', '.', 'getResourceAsStream', '(', '""', 'cacert', '""', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '            ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '        ', ')', ';', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '            ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '<END>']"
master,f40c417565078630bbf58ed17d617f490d2649b7,CertificadoService.java,getCertificadoByCnpjCpf,"    public static Certificado getCertificadoByCnpjCpf(String cnpjCpf) throws CertificadoException {
        return listaCertificadosWindows().stream().filter(cert -> Optional.ofNullable(cert.getCnpjCpf()).orElse("""")
                .startsWith(cnpjCpf)).findFirst().orElseThrow(() -> new CertificadoException(",https://www.github.com/samuel-oliveira/java_certificado/commit/f40c417565078630bbf58ed17d617f490d2649b7,"    public static Certificado getCertificadoByCnpjCpf(String cnpjCpf) throws CertificadoException {
        return listaCertificadosWindows().stream().filter(cert -> Optional.ofNullable(cert.getCnpjCpf()).orElse("""")
                .startsWith(cnpjCpf)).findFirst().orElseThrow(() -> new CertificadoException(
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'getCertificadoByCnpjCpf', '(', 'String', ' ', 'cnpjCpf', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'listaCertificadosWindows', '(', ')', '.', 'stream', '(', ')', '.', 'filter', '(', 'cert', ' ', '-', '>', ' ', 'Optional', '.', 'ofNullable', '(', 'cert', '.', 'getCnpjCpf', '(', ')', ')', '.', 'orElse', '(', '""', '""', ')', '\n', '                ', '.', 'startsWith', '(', 'cnpjCpf', ')', ')', '.', 'findFirst', '(', ')', '.', 'orElseThrow', '(', '(', ')', ' ', '-', '>', ' ', 'new', ' ', 'CertificadoException', '(', '\n', '<END>']"
master,766e147cd83919f22b7d65546b0a651f0dfb53a5,Certificado.java,toString,"	public String toString() {
		return ""Certificado{"" +
				""nome='"" + nome + '\'' +",https://www.github.com/samuel-oliveira/java_certificado/commit/766e147cd83919f22b7d65546b0a651f0dfb53a5,"	public String toString() {
		return ""Certificado{"" +
				""nome='"" + nome + '\'' +
","['\t', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '\t\t', 'return', ' ', '""', 'Certificado{', '""', ' ', '+', '\n', '\t\t\t\t', '""', ""nome='"", '""', ' ', '+', ' ', 'nome', ' ', '+', ' ', ""'\\''"", ' ', '+', '\n', '<END>']"
master,766e147cd83919f22b7d65546b0a651f0dfb53a5,CertificadoService.java,getSlot,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                System.out.println(""SLOTS: ""+slot);
                System.out.println(""SN: ""+serialNumber);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage());
        }

        return slotSelected;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/766e147cd83919f22b7d65546b0a651f0dfb53a5,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage());
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                System.out.println(""SLOTS: ""+slot);
                System.out.println(""SN: ""+serialNumber);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage());
        }

        return slotSelected;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'getSlot', '(', 'String', ' ', 'libraryPath', ',', ' ', 'String', ' ', 'serialNumber', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'CK_C_INITIALIZE_ARGS', ' ', 'initArgs', ' ', '=', ' ', 'new', ' ', 'CK_C_INITIALIZE_ARGS', '(', ')', ';', '\n', '        ', 'String', ' ', 'functionList', ' ', '=', ' ', '""', 'C_GetFunctionList', '""', ';', '\n', '\n', '        ', 'initArgs', '.', 'flags', ' ', '=', ' ', '0', ';', '\n', '        ', 'PKCS11', ' ', 'tmpPKCS11', ';', '\n', '        ', 'long', '[', ']', ' ', 'slotList', ';', '\n', '        ', 'String', ' ', 'slotSelected', ' ', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'initArgs', ',', ' ', 'false', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '                ', 'throw', ' ', 'ex', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'PKCS11Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'null', ',', ' ', 'true', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao pegar Slot A3: ', '""', ' ', '+', '\n', '                        ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'slotList', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetSlotList', '(', 'true', ')', ';', '\n', '\n', '            ', 'for', ' ', '(', 'long', ' ', 'slot', ' ', ':', ' ', 'slotList', ')', ' ', '{', '\n', '                ', 'CK_TOKEN_INFO', ' ', 'tokenInfo', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetTokenInfo', '(', 'slot', ')', ';', '\n', '                ', 'System', '.', 'out', '.', 'println', '(', '""', 'SLOTS: ', '""', '+', 'slot', ')', ';', '\n', '                ', 'System', '.', 'out', '.', 'println', '(', '""', 'SN: ', '""', '+', 'serialNumber', ')', ';', '\n', '                ', 'if', ' ', '(', 'serialNumber', '.', 'equals', '(', 'String', '.', 'valueOf', '(', 'tokenInfo', '.', 'serialNumber', ')', ')', ')', ' ', '{', '\n', '                    ', 'slotSelected', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'slot', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar SlotA3: ', '""', ' ', '+', '\n', '                    ', 'e', '.', 'getMessage', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'slotSelected', ';', '\n', '    ', '}', '\n', '<END>']"
master,766e147cd83919f22b7d65546b0a651f0dfb53a5,CacertUtil.java,get,"    private static void get(String host, KeyStore ks) {
        try {
            System.out.println(""Info: Capturando ca: "" + host);",https://www.github.com/samuel-oliveira/java_certificado/commit/766e147cd83919f22b7d65546b0a651f0dfb53a5,"    private static void get(String host, KeyStore ks) {
        try {
            System.out.println(""Info: Capturando ca: "" + host);
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'get', '(', 'String', ' ', 'host', ',', ' ', 'KeyStore', ' ', 'ks', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'System', '.', 'out', '.', 'println', '(', '""', 'Info: Capturando ca: ', '""', ' ', '+', ' ', 'host', ')', ';', '\n', '<END>']"
master,25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,Certificado.java,isAtivarProperties,"    public boolean isAtivarProperties() {
        return ativarProperties;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,"    public boolean isAtivarProperties() {
        return ativarProperties;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isAtivarProperties', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'ativarProperties', ';', '\n', '    ', '}', '\n', '<END>']"
master,25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,Certificado.java,isValido,"    public boolean isValido() {
        return valido;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,"    public boolean isValido() {
        return valido;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isValido', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'valido', ';', '\n', '    ', '}', '\n', '<END>']"
master,25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,Certificado.java,toString,"    public String toString() {
        return ""Certificado{"" +
                ""nome='"" + nome + '\'' +",https://www.github.com/samuel-oliveira/java_certificado/commit/25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,"    public String toString() {
        return ""Certificado{"" +
                ""nome='"" + nome + '\'' +
","['    ', 'public', ' ', 'String', ' ', 'toString', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', '""', 'Certificado{', '""', ' ', '+', '\n', '                ', '""', ""nome='"", '""', ' ', '+', ' ', 'nome', ' ', '+', ' ', ""'\\''"", ' ', '+', '\n', '<END>']"
master,25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificate));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/25a6d4a66b7fbcb726c4096d49ee987a47d9c4bc,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificate));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'KeyStore', ' ', 'keyStore', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '            ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '            ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'certificate', ')', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'certificate', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDataHoraVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setNumeroSerie', '(', 'certificate', '.', 'getSerialNumber', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,09399bc5f91194bc8ff5d95d47248cafb5e7221a,CertificadoService.java,listaCertificadosRepositorio,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    listaCert.add(certificado);
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage(),ex);
        }
        return listaCert;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/09399bc5f91194bc8ff5d95d47248cafb5e7221a,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    listaCert.add(certificado);
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage(),ex);
        }
        return listaCert;
    }
","['    ', 'private', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', ' ', 'tipo', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'cert', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'cert', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '                    ', 'certificado', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '                    ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '                    ', 'setDadosCertificado', '(', 'certificado', ',', ' ', 'ks', ')', ';', '\n', '                    ', 'listaCert', '.', 'add', '(', 'certificado', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                    ', 'ex', '.', 'getMessage', '(', ')', ',', 'ex', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '    ', '}', '\n', '<END>']"
master,09399bc5f91194bc8ff5d95d47248cafb5e7221a,CertificadoService.java,getSlot,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage(),e);
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                System.out.println(""SLOTS: ""+slot);
                System.out.println(""SN: ""+serialNumber);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage(),e);
        }

        return slotSelected;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/09399bc5f91194bc8ff5d95d47248cafb5e7221a,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage(),e);
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                System.out.println(""SLOTS: ""+slot);
                System.out.println(""SN: ""+serialNumber);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage(),e);
        }

        return slotSelected;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'getSlot', '(', 'String', ' ', 'libraryPath', ',', ' ', 'String', ' ', 'serialNumber', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'CK_C_INITIALIZE_ARGS', ' ', 'initArgs', ' ', '=', ' ', 'new', ' ', 'CK_C_INITIALIZE_ARGS', '(', ')', ';', '\n', '        ', 'String', ' ', 'functionList', ' ', '=', ' ', '""', 'C_GetFunctionList', '""', ';', '\n', '\n', '        ', 'initArgs', '.', 'flags', ' ', '=', ' ', '0', ';', '\n', '        ', 'PKCS11', ' ', 'tmpPKCS11', ';', '\n', '        ', 'long', '[', ']', ' ', 'slotList', ';', '\n', '        ', 'String', ' ', 'slotSelected', ' ', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'initArgs', ',', ' ', 'false', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '                ', 'throw', ' ', 'ex', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'PKCS11Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'null', ',', ' ', 'true', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao pegar Slot A3: ', '""', ' ', '+', '\n', '                        ', 'e', '.', 'getMessage', '(', ')', ',', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'slotList', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetSlotList', '(', 'true', ')', ';', '\n', '\n', '            ', 'for', ' ', '(', 'long', ' ', 'slot', ' ', ':', ' ', 'slotList', ')', ' ', '{', '\n', '                ', 'CK_TOKEN_INFO', ' ', 'tokenInfo', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetTokenInfo', '(', 'slot', ')', ';', '\n', '                ', 'System', '.', 'out', '.', 'println', '(', '""', 'SLOTS: ', '""', '+', 'slot', ')', ';', '\n', '                ', 'System', '.', 'out', '.', 'println', '(', '""', 'SN: ', '""', '+', 'serialNumber', ')', ';', '\n', '                ', 'if', ' ', '(', 'serialNumber', '.', 'equals', '(', 'String', '.', 'valueOf', '(', 'tokenInfo', '.', 'serialNumber', ')', ')', ')', ' ', '{', '\n', '                    ', 'slotSelected', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'slot', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar SlotA3: ', '""', ' ', '+', '\n', '                    ', 'e', '.', 'getMessage', '(', ')', ',', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'slotSelected', ';', '\n', '    ', '}', '\n', '<END>']"
master,09399bc5f91194bc8ff5d95d47248cafb5e7221a,SocketFactoryDinamico.java,createTrustManagers,"    private TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(fileCacerts, ""changeit"".toCharArray());
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/09399bc5f91194bc8ff5d95d47248cafb5e7221a,"    private TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(fileCacerts, ""changeit"".toCharArray());
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }
","['    ', 'private', ' ', 'TrustManager', '[', ']', ' ', 'createTrustManagers', '(', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'TrustManagerFactory', ' ', 'trustManagerFactory', ' ', '=', ' ', 'TrustManagerFactory', '.', 'getInstance', '(', 'TrustManagerFactory', '.', 'getDefaultAlgorithm', '(', ')', ')', ';', '\n', '        ', 'KeyStore', ' ', 'trustStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', 'KeyStore', '.', 'getDefaultType', '(', ')', ')', ';', '\n', '        ', 'trustStore', '.', 'load', '(', 'fileCacerts', ',', ' ', '""', 'changeit', '""', '.', 'toCharArray', '(', ')', ')', ';', '\n', '        ', 'trustManagerFactory', '.', 'init', '(', 'trustStore', ')', ';', '\n', '        ', 'return', ' ', 'trustManagerFactory', '.', 'getTrustManagers', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,09399bc5f91194bc8ff5d95d47248cafb5e7221a,CertificadoServiceTest.java,certificadoPfxCPF,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/09399bc5f91194bc8ff5d95d47248cafb5e7221a,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }
","['    ', 'void', ' ', 'certificadoPfxCPF', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cpf teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CPF', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNumeroSerie', '(', ')', ',', ' ', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,09399bc5f91194bc8ff5d95d47248cafb5e7221a,CertificadoServiceTest.java,certificadoPfxCNPJ,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/09399bc5f91194bc8ff5d95d47248cafb5e7221a,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertFalse(certificado.isAtivarProperties());
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }
","['    ', 'void', ' ', 'certificadoPfxCNPJ', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertFalse', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNumeroSerie', '(', ')', ',', ' ', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,09399bc5f91194bc8ff5d95d47248cafb5e7221a,CertificadoServiceTest.java,certificadoPfxBytes,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(certificado.getSslProtocol(), ""TLSv1.3"");
        assertEquals(certificado.isAtivarProperties(), false);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/09399bc5f91194bc8ff5d95d47248cafb5e7221a,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(certificado.getSslProtocol(), ""TLSv1.3"");
        assertEquals(certificado.isAtivarProperties(), false);
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }
","['    ', 'void', ' ', 'certificadoPfxBytes', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isValido', '(', ')', ',', ' ', 'true', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'certificado', '.', 'setSslProtocol', '(', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isAtivarProperties', '(', ')', ',', ' ', 'false', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNumeroSerie', '(', ')', ',', ' ', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,54ccd85dcac371203351c6c613c729625dcc57dc,CertificadoService.java,listaCertificadosRepositorio,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    listaCert.add(certificado);
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage(), ex);
        }
        return listaCert;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/54ccd85dcac371203351c6c613c729625dcc57dc,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    listaCert.add(certificado);
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage(), ex);
        }
        return listaCert;
    }
","['    ', 'private', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', ' ', 'tipo', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'cert', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'cert', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '                    ', 'certificado', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '                    ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '                    ', 'setDadosCertificado', '(', 'certificado', ',', ' ', 'ks', ')', ';', '\n', '                    ', 'listaCert', '.', 'add', '(', 'certificado', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                    ', 'ex', '.', 'getMessage', '(', ')', ',', ' ', 'ex', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '    ', '}', '\n', '<END>']"
master,54ccd85dcac371203351c6c613c729625dcc57dc,CertificadoService.java,getSlot,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage(), e);
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                System.out.println(""SLOTS: "" + slot);
                System.out.println(""SN: "" + serialNumber);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage(), e);
        }

        return slotSelected;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/54ccd85dcac371203351c6c613c729625dcc57dc,"    private static String getSlot(String libraryPath, String serialNumber) throws IOException, CertificadoException {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";

        initArgs.flags = 0;
        PKCS11 tmpPKCS11;
        long[] slotList;
        String slotSelected = null;
        try {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            } catch (IOException ex) {
                ex.printStackTrace();
                throw ex;
            }
        } catch (PKCS11Exception e) {
            try {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, null, true);
            } catch (Exception ex) {
                throw new CertificadoException(""Erro ao pegar Slot A3: "" +
                        e.getMessage(), e);
            }
        }

        try {
            slotList = tmpPKCS11.C_GetSlotList(true);

            for (long slot : slotList) {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                System.out.println(""SLOTS: "" + slot);
                System.out.println(""SN: "" + serialNumber);
                if (serialNumber.equals(String.valueOf(tokenInfo.serialNumber))) {
                    slotSelected = String.valueOf(slot);
                }
            }
        } catch (Exception e) {
            throw new CertificadoException(""Erro Ao pegar SlotA3: "" +
                    e.getMessage(), e);
        }

        return slotSelected;
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'getSlot', '(', 'String', ' ', 'libraryPath', ',', ' ', 'String', ' ', 'serialNumber', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'CK_C_INITIALIZE_ARGS', ' ', 'initArgs', ' ', '=', ' ', 'new', ' ', 'CK_C_INITIALIZE_ARGS', '(', ')', ';', '\n', '        ', 'String', ' ', 'functionList', ' ', '=', ' ', '""', 'C_GetFunctionList', '""', ';', '\n', '\n', '        ', 'initArgs', '.', 'flags', ' ', '=', ' ', '0', ';', '\n', '        ', 'PKCS11', ' ', 'tmpPKCS11', ';', '\n', '        ', 'long', '[', ']', ' ', 'slotList', ';', '\n', '        ', 'String', ' ', 'slotSelected', ' ', '=', ' ', 'null', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'initArgs', ',', ' ', 'false', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'IOException', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'ex', '.', 'printStackTrace', '(', ')', ';', '\n', '                ', 'throw', ' ', 'ex', ';', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'PKCS11Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'tmpPKCS11', ' ', '=', ' ', 'PKCS11', '.', 'getInstance', '(', 'libraryPath', ',', ' ', 'functionList', ',', ' ', 'null', ',', ' ', 'true', ')', ';', '\n', '            ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'ex', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao pegar Slot A3: ', '""', ' ', '+', '\n', '                        ', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'slotList', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetSlotList', '(', 'true', ')', ';', '\n', '\n', '            ', 'for', ' ', '(', 'long', ' ', 'slot', ' ', ':', ' ', 'slotList', ')', ' ', '{', '\n', '                ', 'CK_TOKEN_INFO', ' ', 'tokenInfo', ' ', '=', ' ', 'tmpPKCS11', '.', 'C_GetTokenInfo', '(', 'slot', ')', ';', '\n', '                ', 'System', '.', 'out', '.', 'println', '(', '""', 'SLOTS: ', '""', ' ', '+', ' ', 'slot', ')', ';', '\n', '                ', 'System', '.', 'out', '.', 'println', '(', '""', 'SN: ', '""', ' ', '+', ' ', 'serialNumber', ')', ';', '\n', '                ', 'if', ' ', '(', 'serialNumber', '.', 'equals', '(', 'String', '.', 'valueOf', '(', 'tokenInfo', '.', 'serialNumber', ')', ')', ')', ' ', '{', '\n', '                    ', 'slotSelected', ' ', '=', ' ', 'String', '.', 'valueOf', '(', 'slot', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'Exception', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro Ao pegar SlotA3: ', '""', ' ', '+', '\n', '                    ', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'slotSelected', ';', '\n', '    ', '}', '\n', '<END>']"
master,12300bacd49ab7309094e52bda30f8a4c771203a,CertificadoServiceTest.java,certificadoPfxCPF,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/12300bacd49ab7309094e52bda30f8a4c771203a,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(certificado.getNome(), ""certificado cpf teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CPF);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }
","['    ', 'void', ' ', 'certificadoPfxCPF', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cpf teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CPF', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNumeroSerie', '(', ')', ',', ' ', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,12300bacd49ab7309094e52bda30f8a4c771203a,CertificadoServiceTest.java,certificadoPfxCNPJ,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/12300bacd49ab7309094e52bda30f8a4c771203a,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertTrue(certificado.isValido());
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }
","['    ', 'void', ' ', 'certificadoPfxCNPJ', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNumeroSerie', '(', ')', ',', ' ', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,12300bacd49ab7309094e52bda30f8a4c771203a,CertificadoServiceTest.java,certificadoPfxBytes,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(certificado.getSslProtocol(), ""TLSv1.3"");
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/12300bacd49ab7309094e52bda30f8a4c771203a,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(certificado.getNome(), ""certificado cnpj teste"");
        assertEquals(certificado.getSenha(), SENHA);
        assertEquals(certificado.getCnpjCpf(), CNPJ);
        assertEquals(certificado.getVencimento(), LocalDate.of(2029, 5, 16));
        assertEquals(certificado.isValido(), true);
        assertEquals(certificado.getDiasRestantes(), Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)));
        assertEquals(certificado.getSslProtocol(), ""TLSv1.2"");
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(certificado.getSslProtocol(), ""TLSv1.3"");
        assertEquals(certificado.getTipoCertificado(), TipoCertificadoEnum.ARQUIVO_BYTES);
        assertEquals(certificado.getNumeroSerie(), new BigInteger(""219902325555""));
    }
","['    ', 'void', ' ', 'certificadoPfxBytes', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNome', '(', ')', ',', ' ', '""', 'certificado cnpj teste', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSenha', '(', ')', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getCnpjCpf', '(', ')', ',', ' ', 'CNPJ', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getVencimento', '(', ')', ',', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'isValido', '(', ')', ',', ' ', 'true', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getDiasRestantes', '(', ')', ',', ' ', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.2', '""', ')', ';', '\n', '        ', 'certificado', '.', 'setSslProtocol', '(', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getSslProtocol', '(', ')', ',', ' ', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getTipoCertificado', '(', ')', ',', ' ', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ')', ';', '\n', '        ', 'assertEquals', '(', 'certificado', '.', 'getNumeroSerie', '(', ')', ',', ' ', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoService.java,certificadoA3,"    public static Certificado certificadoA3(String senha, Provider provider) throws CertificadoException {

        try {
            Certificado certificado = new Certificado();",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    public static Certificado certificadoA3(String senha, Provider provider) throws CertificadoException {

        try {
            Certificado certificado = new Certificado();
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoA3', '(', 'String', ' ', 'senha', ',', ' ', 'Provider', ' ', 'provider', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoService.java,listaAliasCertificadosA3,"    public static List<String> listaAliasCertificadosA3(String senha, Provider provider) throws CertificadoException {

        try {
            List<String> listaCert = new ArrayList<>(20);",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    public static List<String> listaAliasCertificadosA3(String senha, Provider provider) throws CertificadoException {

        try {
            List<String> listaCert = new ArrayList<>(20);
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'String', '>', ' ', 'listaAliasCertificadosA3', '(', 'String', ' ', 'senha', ',', ' ', 'Provider', ' ', 'provider', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'List', '<', 'String', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', '20', ')', ';', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoService.java,getKeyStore,"    public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
        try {
",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    public static KeyStore getKeyStore(Certificado certificado) throws CertificadoException {
        try {
","['    ', 'public', ' ', 'static', ' ', 'KeyStore', ' ', 'getKeyStore', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,KeyStoreService.java,getKeyStoreA3,"    static KeyStore getKeyStoreA3(Certificado certificado) throws KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException {
        KeyStore keyStore;
        Security.addProvider(certificado.getProvider());

        // Especifica o provedor ao carregar o KeyStore
        keyStore = KeyStore.getInstance(""PKCS11"", certificado.getProvider());
        keyStore.load(null, certificado.getSenha().toCharArray());
        return keyStore;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    static KeyStore getKeyStoreA3(Certificado certificado) throws KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException {
        KeyStore keyStore;
        Security.addProvider(certificado.getProvider());

        
        keyStore = KeyStore.getInstance(""PKCS11"", certificado.getProvider());
        keyStore.load(null, certificado.getSenha().toCharArray());
        return keyStore;
    }
","['    ', 'static', ' ', 'KeyStore', ' ', 'getKeyStoreA3', '(', 'Certificado', ' ', 'certificado', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'CertificateException', ',', ' ', 'IOException', ',', ' ', 'NoSuchAlgorithmException', ' ', '{', '\n', '        ', 'KeyStore', ' ', 'keyStore', ';', '\n', '        ', 'Security', '.', 'addProvider', '(', 'certificado', '.', 'getProvider', '(', ')', ')', ';', '\n', '\n', '        ', '\n', '        ', 'keyStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', '""', 'PKCS11', '""', ',', ' ', 'certificado', '.', 'getProvider', '(', ')', ')', ';', '\n', '        ', 'keyStore', '.', 'load', '(', 'null', ',', ' ', 'certificado', '.', 'getSenha', '(', ')', '.', 'toCharArray', '(', ')', ')', ';', '\n', '        ', 'return', ' ', 'keyStore', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,KeyStoreService.java,getKeyStoreRepositorioMac,"    static KeyStore getKeyStoreRepositorioMac() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {
        KeyStore keyStore;
        keyStore = KeyStore.getInstance(""KeychainStore"");
        keyStore.load(null, null);
        return keyStore;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    static KeyStore getKeyStoreRepositorioMac() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {
        KeyStore keyStore;
        keyStore = KeyStore.getInstance(""KeychainStore"");
        keyStore.load(null, null);
        return keyStore;
    }
","['    ', 'static', ' ', 'KeyStore', ' ', 'getKeyStoreRepositorioMac', '(', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'IOException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ' ', '{', '\n', '        ', 'KeyStore', ' ', 'keyStore', ';', '\n', '        ', 'keyStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', '""', 'KeychainStore', '""', ')', ';', '\n', '        ', 'keyStore', '.', 'load', '(', 'null', ',', ' ', 'null', ')', ';', '\n', '        ', 'return', ' ', 'keyStore', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,KeyStoreService.java,getKeyStoreRepositorioWindows,"    static KeyStore getKeyStoreRepositorioWindows() throws KeyStoreException, NoSuchProviderException, IOException, NoSuchAlgorithmException, CertificateException {
        KeyStore keyStore;
        keyStore = KeyStore.getInstance(""Windows-MY"", ""SunMSCAPI"");
        keyStore.load(null, null);
        return keyStore;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    static KeyStore getKeyStoreRepositorioWindows() throws KeyStoreException, NoSuchProviderException, IOException, NoSuchAlgorithmException, CertificateException {
        KeyStore keyStore;
        keyStore = KeyStore.getInstance(""Windows-MY"", ""SunMSCAPI"");
        keyStore.load(null, null);
        return keyStore;
    }
","['    ', 'static', ' ', 'KeyStore', ' ', 'getKeyStoreRepositorioWindows', '(', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'NoSuchProviderException', ',', ' ', 'IOException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ' ', '{', '\n', '        ', 'KeyStore', ' ', 'keyStore', ';', '\n', '        ', 'keyStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', '""', 'Windows-MY', '""', ',', ' ', '""', 'SunMSCAPI', '""', ')', ';', '\n', '        ', 'keyStore', '.', 'load', '(', 'null', ',', ' ', 'null', ')', ';', '\n', '        ', 'return', ' ', 'keyStore', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,KeyStoreService.java,getKeyStoreArquivoByte,"    static KeyStore getKeyStoreArquivoByte(byte[] certificado, Certificado certificado1) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {
        KeyStore keyStore = KeyStore.getInstance(""PKCS12"");
        try (ByteArrayInputStream bs = new ByteArrayInputStream(certificado)) {
            keyStore.load(bs, certificado1.getSenha().toCharArray());
        }
        return keyStore;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    static KeyStore getKeyStoreArquivoByte(byte[] certificado, Certificado certificado1) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {
        KeyStore keyStore = KeyStore.getInstance(""PKCS12"");
        try (ByteArrayInputStream bs = new ByteArrayInputStream(certificado)) {
            keyStore.load(bs, certificado1.getSenha().toCharArray());
        }
        return keyStore;
    }
","['    ', 'static', ' ', 'KeyStore', ' ', 'getKeyStoreArquivoByte', '(', 'byte', '[', ']', ' ', 'certificado', ',', ' ', 'Certificado', ' ', 'certificado1', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'IOException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ' ', '{', '\n', '        ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', '""', 'PKCS12', '""', ')', ';', '\n', '        ', 'try', ' ', '(', 'ByteArrayInputStream', ' ', 'bs', ' ', '=', ' ', 'new', ' ', 'ByteArrayInputStream', '(', 'certificado', ')', ')', ' ', '{', '\n', '            ', 'keyStore', '.', 'load', '(', 'bs', ',', ' ', 'certificado1', '.', 'getSenha', '(', ')', '.', 'toCharArray', '(', ')', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'keyStore', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,SocketFactoryDinamico.java,createTrustManagers,"    private TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(fileCacerts, SENHA_CACERT);
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    private TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(fileCacerts, SENHA_CACERT);
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }
","['    ', 'private', ' ', 'TrustManager', '[', ']', ' ', 'createTrustManagers', '(', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'TrustManagerFactory', ' ', 'trustManagerFactory', ' ', '=', ' ', 'TrustManagerFactory', '.', 'getInstance', '(', 'TrustManagerFactory', '.', 'getDefaultAlgorithm', '(', ')', ')', ';', '\n', '        ', 'KeyStore', ' ', 'trustStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', 'KeyStore', '.', 'getDefaultType', '(', ')', ')', ';', '\n', '        ', 'trustStore', '.', 'load', '(', 'fileCacerts', ',', ' ', 'SENHA_CACERT', ')', ';', '\n', '        ', 'trustManagerFactory', '.', 'init', '(', 'trustStore', ')', ';', '\n', '        ', 'return', ' ', 'trustManagerFactory', '.', 'getTrustManagers', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoServiceTest.java,certificadoPfxCPF,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(""certificado cpf teste"", certificado.getNome());
        assertEquals(SENHA,certificado.getSenha());
        assertEquals(CPF,certificado.getCnpjCpf());
        assertEquals( LocalDate.of(2029, 5, 16),certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)),certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"",certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(""certificado cpf teste"", certificado.getNome());
        assertEquals(SENHA,certificado.getSenha());
        assertEquals(CPF,certificado.getCnpjCpf());
        assertEquals( LocalDate.of(2029, 5, 16),certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)),certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"",certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }
","['    ', 'void', ' ', 'certificadoPfxCPF', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'certificado cpf teste', '""', ',', ' ', 'certificado', '.', 'getNome', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'SENHA', ',', 'certificado', '.', 'getSenha', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'CPF', ',', 'certificado', '.', 'getCnpjCpf', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', 'certificado', '.', 'getVencimento', '(', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ',', 'certificado', '.', 'getDiasRestantes', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.2', '""', ',', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO', ',', ' ', 'certificado', '.', 'getTipoCertificado', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ',', ' ', 'certificado', '.', 'getNumeroSerie', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoServiceTest.java,certificadoPfxCNPJ,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA,certificado.getSenha());
        assertEquals(CNPJ,certificado.getCnpjCpf());
        assertEquals( LocalDate.of(2029, 5, 16),certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)),certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""),certificado.getNumeroSerie());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA,certificado.getSenha());
        assertEquals(CNPJ,certificado.getCnpjCpf());
        assertEquals( LocalDate.of(2029, 5, 16),certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)),certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""),certificado.getNumeroSerie());
    }
","['    ', 'void', ' ', 'certificadoPfxCNPJ', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'certificado cnpj teste', '""', ',', ' ', 'certificado', '.', 'getNome', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'SENHA', ',', 'certificado', '.', 'getSenha', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'CNPJ', ',', 'certificado', '.', 'getCnpjCpf', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', ' ', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', 'certificado', '.', 'getVencimento', '(', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ',', 'certificado', '.', 'getDiasRestantes', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.2', '""', ',', ' ', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO', ',', ' ', 'certificado', '.', 'getTipoCertificado', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ',', 'certificado', '.', 'getNumeroSerie', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoServiceTest.java,certificadoPfxByteParametroNull,"    void certificadoPfxByteParametroNull() throws IOException {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(null, SENHA);
        });

        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, null);",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    void certificadoPfxByteParametroNull() throws IOException {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(null, SENHA);
        });

        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, null);
","['    ', 'void', ' ', 'certificadoPfxByteParametroNull', '(', ')', ' ', 'throws', ' ', 'IOException', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'null', ',', ' ', 'SENHA', ')', ';', '\n', '        ', '}', ')', ';', '\n', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', 'null', ')', ';', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoServiceTest.java,certificadoPfxBytes,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA,certificado.getSenha());
        assertEquals(CNPJ,certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16),certificado.getVencimento());
        assertEquals(true, certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)),certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(""TLSv1.3"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""),certificado.getNumeroSerie());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA,certificado.getSenha());
        assertEquals(CNPJ,certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16),certificado.getVencimento());
        assertEquals(true, certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)),certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(""TLSv1.3"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""),certificado.getNumeroSerie());
    }
","['    ', 'void', ' ', 'certificadoPfxBytes', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'certificado cnpj teste', '""', ',', ' ', 'certificado', '.', 'getNome', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'SENHA', ',', 'certificado', '.', 'getSenha', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'CNPJ', ',', 'certificado', '.', 'getCnpjCpf', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', 'certificado', '.', 'getVencimento', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'true', ',', ' ', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ',', 'certificado', '.', 'getDiasRestantes', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.2', '""', ',', ' ', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setSslProtocol', '(', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.3', '""', ',', ' ', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ',', ' ', 'certificado', '.', 'getTipoCertificado', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ',', 'certificado', '.', 'getNumeroSerie', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,82d74eea8cd118fd687c7393f081f001c1312b5d,CertificadoServiceTest.java,inicaConfiguracoesCorretamente,"    void inicaConfiguracoesCorretamente() {
        Assertions.assertDoesNotThrow( () -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);",https://www.github.com/samuel-oliveira/java_certificado/commit/82d74eea8cd118fd687c7393f081f001c1312b5d,"    void inicaConfiguracoesCorretamente() {
        Assertions.assertDoesNotThrow( () -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
","['    ', 'void', ' ', 'inicaConfiguracoesCorretamente', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertDoesNotThrow', '(', ' ', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '<END>']"
master,3fb36aa9f878e9ed264b5094a237d49a24c48018,CertificadoService.java,certificadoPfxBytes,"    public static Certificado certificadoPfxBytes(byte[] certificadoBytes, String senha) throws CertificadoException {

        Certificado certificado = new Certificado();
        try {
            certificado.setArquivoBytes(Optional.ofNullable(certificadoBytes).orElseThrow(() -> new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO)));
            certificado.setSenha(Optional.ofNullable(senha).orElseThrow(() -> new IllegalArgumentException(SENHA_NAO_PODE_SER_NULA)));
            certificado.setTipoCertificado(TipoCertificadoEnum.ARQUIVO_BYTES);
            setDadosCertificado(certificado, null);
        } catch (KeyStoreException e) {
            throw new CertificadoException(ERRO_AO_CARREGAR_INFORMACOES_DO_CERTIFICADO +                    e.getMessage(), e);
        }

        return certificado;
",https://www.github.com/samuel-oliveira/java_certificado/commit/3fb36aa9f878e9ed264b5094a237d49a24c48018,"    public static Certificado certificadoPfxBytes(byte[] certificadoBytes, String senha) throws CertificadoException {

        Certificado certificado = new Certificado();
        try {
            certificado.setArquivoBytes(Optional.ofNullable(certificadoBytes).orElseThrow(() -> new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO)));
            certificado.setSenha(Optional.ofNullable(senha).orElseThrow(() -> new IllegalArgumentException(SENHA_NAO_PODE_SER_NULA)));
            certificado.setTipoCertificado(TipoCertificadoEnum.ARQUIVO_BYTES);
            setDadosCertificado(certificado, null);
        } catch (KeyStoreException e) {
            throw new CertificadoException(ERRO_AO_CARREGAR_INFORMACOES_DO_CERTIFICADO +                    e.getMessage(), e);
        }

        return certificado;
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoPfxBytes', '(', 'byte', '[', ']', ' ', 'certificadoBytes', ',', ' ', 'String', ' ', 'senha', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'certificado', '.', 'setArquivoBytes', '(', 'Optional', '.', 'ofNullable', '(', 'certificadoBytes', ')', '.', 'orElseThrow', '(', '(', ')', ' ', '-', '>', ' ', 'new', ' ', 'IllegalArgumentException', '(', 'CERTIFICADO_NAO_PODE_SER_NULO', ')', ')', ')', ';', '\n', '            ', 'certificado', '.', 'setSenha', '(', 'Optional', '.', 'ofNullable', '(', 'senha', ')', '.', 'orElseThrow', '(', '(', ')', ' ', '-', '>', ' ', 'new', ' ', 'IllegalArgumentException', '(', 'SENHA_NAO_PODE_SER_NULA', ')', ')', ')', ';', '\n', '            ', 'certificado', '.', 'setTipoCertificado', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ')', ';', '\n', '            ', 'setDadosCertificado', '(', 'certificado', ',', ' ', 'null', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', 'ERRO_AO_CARREGAR_INFORMACOES_DO_CERTIFICADO', ' ', '+', '                    ', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'certificado', ';', '\n', '<END>']"
master,92ead68793dc0f159cdb5a966db2eecea860436f,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificate.getSubjectX500Principal().getName()));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/92ead68793dc0f159cdb5a966db2eecea860436f,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(certificate.getSubjectX500Principal().getName()));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'KeyStore', ' ', 'keyStore', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '            ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '            ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'certificate', '.', 'getSubjectX500Principal', '(', ')', '.', 'getName', '(', ')', ')', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'certificate', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDataHoraVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setNumeroSerie', '(', 'certificate', '.', 'getSerialNumber', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,92ead68793dc0f159cdb5a966db2eecea860436f,CertificadoServiceTest.java,certificadoPfxCPF,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(""certificado cpf teste"", certificado.getNome());
        assertEquals(SENHA, certificado.getSenha());
        assertEquals(CPF, certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16), certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)), certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/92ead68793dc0f159cdb5a966db2eecea860436f,"    void certificadoPfxCPF() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        assertEquals(""certificado cpf teste"", certificado.getNome());
        assertEquals(SENHA, certificado.getSenha());
        assertEquals(CPF, certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16), certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)), certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }
","['    ', 'void', ' ', 'certificadoPfxCPF', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'certificado cpf teste', '""', ',', ' ', 'certificado', '.', 'getNome', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'SENHA', ',', ' ', 'certificado', '.', 'getSenha', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'CPF', ',', ' ', 'certificado', '.', 'getCnpjCpf', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'certificado', '.', 'getVencimento', '(', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ',', ' ', 'certificado', '.', 'getDiasRestantes', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.2', '""', ',', ' ', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO', ',', ' ', 'certificado', '.', 'getTipoCertificado', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ',', ' ', 'certificado', '.', 'getNumeroSerie', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,92ead68793dc0f159cdb5a966db2eecea860436f,CertificadoServiceTest.java,certificadoPfxCNPJ,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA, certificado.getSenha());
        assertEquals(CNPJ, certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16), certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)), certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/92ead68793dc0f159cdb5a966db2eecea860436f,"    void certificadoPfxCNPJ() throws CertificadoException, FileNotFoundException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA, certificado.getSenha());
        assertEquals(CNPJ, certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16), certificado.getVencimento());
        assertTrue(certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)), certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }
","['    ', 'void', ' ', 'certificadoPfxCNPJ', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'FileNotFoundException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'certificado cnpj teste', '""', ',', ' ', 'certificado', '.', 'getNome', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'SENHA', ',', ' ', 'certificado', '.', 'getSenha', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'CNPJ', ',', ' ', 'certificado', '.', 'getCnpjCpf', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'certificado', '.', 'getVencimento', '(', ')', ')', ';', '\n', '        ', 'assertTrue', '(', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ',', ' ', 'certificado', '.', 'getDiasRestantes', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.2', '""', ',', ' ', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO', ',', ' ', 'certificado', '.', 'getTipoCertificado', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ',', ' ', 'certificado', '.', 'getNumeroSerie', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,92ead68793dc0f159cdb5a966db2eecea860436f,CertificadoServiceTest.java,certificadoPfxBytes,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA, certificado.getSenha());
        assertEquals(CNPJ, certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16), certificado.getVencimento());
        assertEquals(true, certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)), certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(""TLSv1.3"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/92ead68793dc0f159cdb5a966db2eecea860436f,"    void certificadoPfxBytes() throws CertificadoException, IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(CERTIFICADO_CNPJ));
        Certificado certificado = CertificadoService.certificadoPfxBytes(bytes, SENHA);
        assertEquals(""certificado cnpj teste"", certificado.getNome());
        assertEquals(SENHA, certificado.getSenha());
        assertEquals(CNPJ, certificado.getCnpjCpf());
        assertEquals(LocalDate.of(2029, 5, 16), certificado.getVencimento());
        assertEquals(true, certificado.isValido());
        assertEquals(Long.valueOf(LocalDate.now().until(LocalDate.of(2029, 5, 16), ChronoUnit.DAYS)), certificado.getDiasRestantes());
        assertEquals(""TLSv1.2"", certificado.getSslProtocol());
        certificado.setSslProtocol(""TLSv1.3"");
        assertEquals(""TLSv1.3"", certificado.getSslProtocol());
        assertEquals(TipoCertificadoEnum.ARQUIVO_BYTES, certificado.getTipoCertificado());
        assertEquals(new BigInteger(""219902325555""), certificado.getNumeroSerie());
    }
","['    ', 'void', ' ', 'certificadoPfxBytes', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'byte', '[', ']', ' ', 'bytes', ' ', '=', ' ', 'Files', '.', 'readAllBytes', '(', 'Paths', '.', 'get', '(', 'CERTIFICADO_CNPJ', ')', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfxBytes', '(', 'bytes', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'certificado cnpj teste', '""', ',', ' ', 'certificado', '.', 'getNome', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'SENHA', ',', ' ', 'certificado', '.', 'getSenha', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'CNPJ', ',', ' ', 'certificado', '.', 'getCnpjCpf', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'certificado', '.', 'getVencimento', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'true', ',', ' ', 'certificado', '.', 'isValido', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'Long', '.', 'valueOf', '(', 'LocalDate', '.', 'now', '(', ')', '.', 'until', '(', 'LocalDate', '.', 'of', '(', '2029', ',', ' ', '5', ',', ' ', '16', ')', ',', ' ', 'ChronoUnit', '.', 'DAYS', ')', ')', ',', ' ', 'certificado', '.', 'getDiasRestantes', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.2', '""', ',', ' ', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setSslProtocol', '(', '""', 'TLSv1.3', '""', ')', ';', '\n', '        ', 'assertEquals', '(', '""', 'TLSv1.3', '""', ',', ' ', 'certificado', '.', 'getSslProtocol', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ',', ' ', 'certificado', '.', 'getTipoCertificado', '(', ')', ')', ';', '\n', '        ', 'assertEquals', '(', 'new', ' ', 'BigInteger', '(', '""', '219902325555', '""', ')', ',', ' ', 'certificado', '.', 'getNumeroSerie', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,92ead68793dc0f159cdb5a966db2eecea860436f,CertificadoServiceTest.java,inicaConfiguracoesCorretamente,"    void inicaConfiguracoesCorretamente() {
        Assertions.assertDoesNotThrow(() -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);",https://www.github.com/samuel-oliveira/java_certificado/commit/92ead68793dc0f159cdb5a966db2eecea860436f,"    void inicaConfiguracoesCorretamente() {
        Assertions.assertDoesNotThrow(() -> {
            Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);
","['    ', 'void', ' ', 'inicaConfiguracoesCorretamente', '(', ')', ' ', '{', '\n', '        ', 'Assertions', '.', 'assertDoesNotThrow', '(', '(', ')', ' ', '-', '>', ' ', '{', '\n', '            ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '<END>']"
master,92ead68793dc0f159cdb5a966db2eecea860436f,CertificadoServiceTest.java,inicaConfiguracoesParametrosNull,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = CertificadoServiceTest.class.getResourceAsStream(""cacert"");
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        //Certificado Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)
        );
        //Cacert Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)",https://www.github.com/samuel-oliveira/java_certificado/commit/92ead68793dc0f159cdb5a966db2eecea860436f,"    void inicaConfiguracoesParametrosNull() throws IOException, CertificadoException {

        InputStream cacert = CertificadoServiceTest.class.getResourceAsStream(""cacert"");
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CNPJ, SENHA);

        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)
        );
        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)
","['    ', 'void', ' ', 'inicaConfiguracoesParametrosNull', '(', ')', ' ', 'throws', ' ', 'IOException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'InputStream', ' ', 'cacert', ' ', '=', ' ', 'CertificadoServiceTest', '.', 'class', '.', 'getResourceAsStream', '(', '""', 'cacert', '""', ')', ';', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CNPJ', ',', ' ', 'SENHA', ')', ';', '\n', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '                ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '        ', ')', ';', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '                ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '<END>']"
master,92ead68793dc0f159cdb5a966db2eecea860436f,CertificadoServiceTest.java,extraiCpfCnpjCorretamente,"    void extraiCpfCnpjCorretamente() {
        String textoCnpj = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CNPJ=07364617000135"";
        assertEquals(""07364617000135"", CertificadoService.getDocumentoFromCertificado(textoCnpj));

        String textoCpf = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CPF=99999999999"";
        assertEquals(""99999999999"", CertificadoService.getDocumentoFromCertificado(textoCpf));

        String textoCnpjeCPF = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CNPJ=07364617000135, CPF=99999999999"";
        assertEquals(""07364617000135"", CertificadoService.getDocumentoFromCertificado(textoCnpjeCPF));

        String textoCpfECNPJ = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CPF=99999999999, CNPJ=07364617000135"";
        assertEquals(""07364617000135"", CertificadoService.getDocumentoFromCertificado(textoCpfECNPJ));

        String textoSemNenhumDocumento = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB"";
        assertEquals("""", CertificadoService.getDocumentoFromCertificado(textoSemNenhumDocumento));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/92ead68793dc0f159cdb5a966db2eecea860436f,"    void extraiCpfCnpjCorretamente() {
        String textoCnpj = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CNPJ=07364617000135"";
        assertEquals(""07364617000135"", CertificadoService.getDocumentoFromCertificado(textoCnpj));

        String textoCpf = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CPF=99999999999"";
        assertEquals(""99999999999"", CertificadoService.getDocumentoFromCertificado(textoCpf));

        String textoCnpjeCPF = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CNPJ=07364617000135, CPF=99999999999"";
        assertEquals(""07364617000135"", CertificadoService.getDocumentoFromCertificado(textoCnpjeCPF));

        String textoCpfECNPJ = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CPF=99999999999, CNPJ=07364617000135"";
        assertEquals(""07364617000135"", CertificadoService.getDocumentoFromCertificado(textoCpfECNPJ));

        String textoSemNenhumDocumento = ""C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB"";
        assertEquals("""", CertificadoService.getDocumentoFromCertificado(textoSemNenhumDocumento));
    }
","['    ', 'void', ' ', 'extraiCpfCnpjCorretamente', '(', ')', ' ', '{', '\n', '        ', 'String', ' ', 'textoCnpj', ' ', '=', ' ', '""', 'C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CNPJ=07364617000135', '""', ';', '\n', '        ', 'assertEquals', '(', '""', '07364617000135', '""', ',', ' ', 'CertificadoService', '.', 'getDocumentoFromCertificado', '(', 'textoCnpj', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'textoCpf', ' ', '=', ' ', '""', 'C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CPF=99999999999', '""', ';', '\n', '        ', 'assertEquals', '(', '""', '99999999999', '""', ',', ' ', 'CertificadoService', '.', 'getDocumentoFromCertificado', '(', 'textoCpf', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'textoCnpjeCPF', ' ', '=', ' ', '""', 'C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CNPJ=07364617000135, CPF=99999999999', '""', ';', '\n', '        ', 'assertEquals', '(', '""', '07364617000135', '""', ',', ' ', 'CertificadoService', '.', 'getDocumentoFromCertificado', '(', 'textoCnpjeCPF', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'textoCpfECNPJ', ' ', '=', ' ', '""', 'C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB, CPF=99999999999, CNPJ=07364617000135', '""', ';', '\n', '        ', 'assertEquals', '(', '""', '07364617000135', '""', ',', ' ', 'CertificadoService', '.', 'getDocumentoFromCertificado', '(', 'textoCpfECNPJ', ')', ')', ';', '\n', '\n', '        ', 'String', ' ', 'textoSemNenhumDocumento', ' ', '=', ' ', '""', 'C=BR, O=ICP-Brasil, OU=Secretaria da Receita Federal do Brasil - RFB', '""', ';', '\n', '        ', 'assertEquals', '(', '""', '""', ',', ' ', 'CertificadoService', '.', 'getDocumentoFromCertificado', '(', 'textoSemNenhumDocumento', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d08b721b8388420d317cf7518a460613ce22214b,CertificadoService.java,certificadoPfxBytes,"    public static Certificado certificadoPfxBytes(byte[] certificadoBytes, String senha) throws CertificadoException {

        Certificado certificado = new Certificado();
        try {
            certificado.setArquivoBytes(Optional.ofNullable(certificadoBytes).orElseThrow(() -> new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO)));
            certificado.setSenha(Optional.ofNullable(senha).orElseThrow(() -> new IllegalArgumentException(SENHA_NAO_PODE_SER_NULA)));
            certificado.setTipoCertificado(TipoCertificadoEnum.ARQUIVO_BYTES);
            setDadosCertificado(certificado, null);
        } catch (KeyStoreException e) {
            throw new CertificadoException(ERRO_AO_CARREGAR_INFORMACOES_DO_CERTIFICADO + e.getMessage(), e);
        }

        return certificado;
",https://www.github.com/samuel-oliveira/java_certificado/commit/d08b721b8388420d317cf7518a460613ce22214b,"    public static Certificado certificadoPfxBytes(byte[] certificadoBytes, String senha) throws CertificadoException {

        Certificado certificado = new Certificado();
        try {
            certificado.setArquivoBytes(Optional.ofNullable(certificadoBytes).orElseThrow(() -> new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO)));
            certificado.setSenha(Optional.ofNullable(senha).orElseThrow(() -> new IllegalArgumentException(SENHA_NAO_PODE_SER_NULA)));
            certificado.setTipoCertificado(TipoCertificadoEnum.ARQUIVO_BYTES);
            setDadosCertificado(certificado, null);
        } catch (KeyStoreException e) {
            throw new CertificadoException(ERRO_AO_CARREGAR_INFORMACOES_DO_CERTIFICADO + e.getMessage(), e);
        }

        return certificado;
","['    ', 'public', ' ', 'static', ' ', 'Certificado', ' ', 'certificadoPfxBytes', '(', 'byte', '[', ']', ' ', 'certificadoBytes', ',', ' ', 'String', ' ', 'senha', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'certificado', '.', 'setArquivoBytes', '(', 'Optional', '.', 'ofNullable', '(', 'certificadoBytes', ')', '.', 'orElseThrow', '(', '(', ')', ' ', '-', '>', ' ', 'new', ' ', 'IllegalArgumentException', '(', 'CERTIFICADO_NAO_PODE_SER_NULO', ')', ')', ')', ';', '\n', '            ', 'certificado', '.', 'setSenha', '(', 'Optional', '.', 'ofNullable', '(', 'senha', ')', '.', 'orElseThrow', '(', '(', ')', ' ', '-', '>', ' ', 'new', ' ', 'IllegalArgumentException', '(', 'SENHA_NAO_PODE_SER_NULA', ')', ')', ')', ';', '\n', '            ', 'certificado', '.', 'setTipoCertificado', '(', 'TipoCertificadoEnum', '.', 'ARQUIVO_BYTES', ')', ';', '\n', '            ', 'setDadosCertificado', '(', 'certificado', ',', ' ', 'null', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', 'ERRO_AO_CARREGAR_INFORMACOES_DO_CERTIFICADO', ' ', '+', ' ', 'e', '.', 'getMessage', '(', ')', ',', ' ', 'e', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'certificado', ';', '\n', '<END>']"
master,d08b721b8388420d317cf7518a460613ce22214b,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(new String(certificate.getExtensionValue(""2.5.29.17""))));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/d08b721b8388420d317cf7518a460613ce22214b,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(getDocumentoFromCertificado(new String(certificate.getExtensionValue(""2.5.29.17""))));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'KeyStore', ' ', 'keyStore', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '            ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '            ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', 'getDocumentoFromCertificado', '(', 'new', ' ', 'String', '(', 'certificate', '.', 'getExtensionValue', '(', '""', '2.5.29.17', '""', ')', ')', ')', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'certificate', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDataHoraVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setNumeroSerie', '(', 'certificate', '.', 'getSerialNumber', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d08b721b8388420d317cf7518a460613ce22214b,CertificadoService.java,processaCNPJ,"    private static String processaCNPJ(String extensionValue) {

        int cnpjIndex = extensionValue.indexOf(""\u0006\u0005`L\u0001\u0003\u0003"");

        if (cnpjIndex != -1) {

            String documento = extensionValue.substring(cnpjIndex + 6, cnpjIndex + 25).replaceAll(""[^\\d]"", """");
            String documentoValidado = validarDocumento(documento);

            if (!documentoValidado.isEmpty()) {
                return documentoValidado;
            }
            return documento;
        }

        return """";
",https://www.github.com/samuel-oliveira/java_certificado/commit/d08b721b8388420d317cf7518a460613ce22214b,"    private static String processaCNPJ(String extensionValue) {

        int cnpjIndex = extensionValue.indexOf(""\u0006\u0005`L\u0001\u0003\u0003"");

        if (cnpjIndex != -1) {

            String documento = extensionValue.substring(cnpjIndex + 6, cnpjIndex + 25).replaceAll(""[^\\d]"", """");
            String documentoValidado = validarDocumento(documento);

            if (!documentoValidado.isEmpty()) {
                return documentoValidado;
            }
            return documento;
        }

        return """";
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'processaCNPJ', '(', 'String', ' ', 'extensionValue', ')', ' ', '{', '\n', '\n', '        ', 'int', ' ', 'cnpjIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', '""', '\\', 'u0006', '\\', 'u0005`L', '\\', 'u0001', '\\', 'u0003', '\\', 'u0003', '""', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'cnpjIndex', ' ', '!', '=', ' ', '-', '1', ')', ' ', '{', '\n', '\n', '            ', 'String', ' ', 'documento', ' ', '=', ' ', 'extensionValue', '.', 'substring', '(', 'cnpjIndex', ' ', '+', ' ', '6', ',', ' ', 'cnpjIndex', ' ', '+', ' ', '25', ')', '.', 'replaceAll', '(', '""', '[^', '\\\\', 'd]', '""', ',', ' ', '""', '""', ')', ';', '\n', '            ', 'String', ' ', 'documentoValidado', ' ', '=', ' ', 'validarDocumento', '(', 'documento', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', '!', 'documentoValidado', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '                ', 'return', ' ', 'documentoValidado', ';', '\n', '            ', '}', '\n', '            ', 'return', ' ', 'documento', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', '""', '""', ';', '\n', '<END>']"
master,d08b721b8388420d317cf7518a460613ce22214b,CertificadoService.java,validarDocumento,"    private static String validarDocumento(String documento) {

        Pattern patternCNPJ = Pattern.compile(""\\d{14}"");
        Matcher matcher = patternCNPJ.matcher(documento);

        if (matcher.find()) {
            return matcher.group();
        }

        Pattern patternCPF = Pattern.compile(""(?<!\\d)\\d{11}(?!\\d)"");
        Matcher matcherCPF = patternCPF.matcher(documento);

        if (matcherCPF.find()) {
            return matcherCPF.group();
        }
        return """";
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/d08b721b8388420d317cf7518a460613ce22214b,"    private static String validarDocumento(String documento) {

        Pattern patternCNPJ = Pattern.compile(""\\d{14}"");
        Matcher matcher = patternCNPJ.matcher(documento);

        if (matcher.find()) {
            return matcher.group();
        }

        Pattern patternCPF = Pattern.compile(""(?<!\\d)\\d{11}(?!\\d)"");
        Matcher matcherCPF = patternCPF.matcher(documento);

        if (matcherCPF.find()) {
            return matcherCPF.group();
        }
        return """";
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'validarDocumento', '(', 'String', ' ', 'documento', ')', ' ', '{', '\n', '\n', '        ', 'Pattern', ' ', 'patternCNPJ', ' ', '=', ' ', 'Pattern', '.', 'compile', '(', '""', '\\\\', 'd{14}', '""', ')', ';', '\n', '        ', 'Matcher', ' ', 'matcher', ' ', '=', ' ', 'patternCNPJ', '.', 'matcher', '(', 'documento', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'matcher', '.', 'find', '(', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'matcher', '.', 'group', '(', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Pattern', ' ', 'patternCPF', ' ', '=', ' ', 'Pattern', '.', 'compile', '(', '""', '(?<!', '\\\\', 'd)', '\\\\', 'd{11}(?!', '\\\\', 'd)', '""', ')', ';', '\n', '        ', 'Matcher', ' ', 'matcherCPF', ' ', '=', ' ', 'patternCPF', '.', 'matcher', '(', 'documento', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'matcherCPF', '.', 'find', '(', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'matcherCPF', '.', 'group', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', '""', '""', ';', '\n', '    ', '}', '\n', '<END>']"
master,5dde5ef2cb3b56403b151bf44b820ea7cb715752,CertificadoService.java,processaCPF,"    private static String processaCPF(String extensionValue) {

        String cpfIndicator = ""\u0001"";
        String cpfTerminator = ""\u0017"";
        int cpfStartIndex = extensionValue.indexOf(cpfIndicator) + 15;
        int cpfEndIndex = extensionValue.indexOf(cpfTerminator, cpfStartIndex);

        if(cpfStartIndex != -1 && cpfEndIndex != -1){
            String cpf = extensionValue.substring(cpfStartIndex, cpfStartIndex + 11).replaceAll(""[^\\d]"", """");
            String cpfValidado = validarDocumento(cpf);
            if(!cpfValidado.isEmpty()){
                return cpfValidado;
            }
        }

        return """";
",https://www.github.com/samuel-oliveira/java_certificado/commit/5dde5ef2cb3b56403b151bf44b820ea7cb715752,"    private static String processaCPF(String extensionValue) {

        String cpfIndicator = ""\u0001"";
        String cpfTerminator = ""\u0017"";
        int cpfStartIndex = extensionValue.indexOf(cpfIndicator) + 15;
        int cpfEndIndex = extensionValue.indexOf(cpfTerminator, cpfStartIndex);

        if(cpfStartIndex != -1 && cpfEndIndex != -1){
            String cpf = extensionValue.substring(cpfStartIndex, cpfStartIndex + 11).replaceAll(""[^\\d]"", """");
            String cpfValidado = validarDocumento(cpf);
            if(!cpfValidado.isEmpty()){
                return cpfValidado;
            }
        }

        return """";
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'processaCPF', '(', 'String', ' ', 'extensionValue', ')', ' ', '{', '\n', '\n', '        ', 'String', ' ', 'cpfIndicator', ' ', '=', ' ', '""', '\\', 'u0001', '""', ';', '\n', '        ', 'String', ' ', 'cpfTerminator', ' ', '=', ' ', '""', '\\', 'u0017', '""', ';', '\n', '        ', 'int', ' ', 'cpfStartIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', 'cpfIndicator', ')', ' ', '+', ' ', '15', ';', '\n', '        ', 'int', ' ', 'cpfEndIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', 'cpfTerminator', ',', ' ', 'cpfStartIndex', ')', ';', '\n', '\n', '        ', 'if', '(', 'cpfStartIndex', ' ', '!', '=', ' ', '-', '1', ' ', '&', '&', ' ', 'cpfEndIndex', ' ', '!', '=', ' ', '-', '1', ')', '{', '\n', '            ', 'String', ' ', 'cpf', ' ', '=', ' ', 'extensionValue', '.', 'substring', '(', 'cpfStartIndex', ',', ' ', 'cpfStartIndex', ' ', '+', ' ', '11', ')', '.', 'replaceAll', '(', '""', '[^', '\\\\', 'd]', '""', ',', ' ', '""', '""', ')', ';', '\n', '            ', 'String', ' ', 'cpfValidado', ' ', '=', ' ', 'validarDocumento', '(', 'cpf', ')', ';', '\n', '            ', 'if', '(', '!', 'cpfValidado', '.', 'isEmpty', '(', ')', ')', '{', '\n', '                ', 'return', ' ', 'cpfValidado', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', '""', '""', ';', '\n', '<END>']"
master,1ef3e9f79926078183f77bdf371d7dcc5e915f5d,CertificadoService.java,setDadosCertificado,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(
                Optional.ofNullable(certificate.getExtensionValue(""2.5.29.17""))
                        .flatMap(DocumentoUtil::getDocumentoFromCertificado)
                        .orElse(""""));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/1ef3e9f79926078183f77bdf371d7dcc5e915f5d,"    private static void setDadosCertificado(Certificado certificado, KeyStore keyStore) throws CertificadoException, KeyStoreException {

        if (keyStore == null) {
            keyStore = getKeyStore(certificado);
            Enumeration<String> aliasEnum = keyStore.aliases();
            String aliasKey = aliasEnum.nextElement();
            certificado.setNome(aliasKey);
        }

        X509Certificate certificate = getCertificate(certificado, keyStore);
        certificado.setCnpjCpf(
                Optional.ofNullable(certificate.getExtensionValue(""2.5.29.17""))
                        .flatMap(DocumentoUtil::getDocumentoFromCertificado)
                        .orElse(""""));
        Date dataValidade = dataValidade(certificate);
        certificado.setVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        certificado.setDataHoraVencimento(dataValidade.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        certificado.setDiasRestantes(diasRestantes(certificado));
        certificado.setValido(valido(certificado));
        certificado.setNumeroSerie(certificate.getSerialNumber());
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'setDadosCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'KeyStore', ' ', 'keyStore', ')', ' ', 'throws', ' ', 'CertificadoException', ',', ' ', 'KeyStoreException', ' ', '{', '\n', '\n', '        ', 'if', ' ', '(', 'keyStore', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', 'certificado', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'keyStore', '.', 'aliases', '(', ')', ';', '\n', '            ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '            ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'X509Certificate', ' ', 'certificate', ' ', '=', ' ', 'getCertificate', '(', 'certificado', ',', ' ', 'keyStore', ')', ';', '\n', '        ', 'certificado', '.', 'setCnpjCpf', '(', '\n', '                ', 'Optional', '.', 'ofNullable', '(', 'certificate', '.', 'getExtensionValue', '(', '""', '2.5.29.17', '""', ')', ')', '\n', '                        ', '.', 'flatMap', '(', 'DocumentoUtil', ':', ':', 'getDocumentoFromCertificado', ')', '\n', '                        ', '.', 'orElse', '(', '""', '""', ')', ')', ';', '\n', '        ', 'Date', ' ', 'dataValidade', ' ', '=', ' ', 'dataValidade', '(', 'certificate', ')', ';', '\n', '        ', 'certificado', '.', 'setVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDate', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDataHoraVencimento', '(', 'dataValidade', '.', 'toInstant', '(', ')', '.', 'atZone', '(', 'ZoneId', '.', 'systemDefault', '(', ')', ')', '.', 'toLocalDateTime', '(', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setDiasRestantes', '(', 'diasRestantes', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setValido', '(', 'valido', '(', 'certificado', ')', ')', ';', '\n', '        ', 'certificado', '.', 'setNumeroSerie', '(', 'certificate', '.', 'getSerialNumber', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1ef3e9f79926078183f77bdf371d7dcc5e915f5d,DocumentoUtil.java,processaCPF,"    private static Optional<String> processaCPF(String extensionValue) {
        int cpfStartIndex = extensionValue.indexOf(CPF_INDICATOR);
        if (cpfStartIndex != -1) {
            cpfStartIndex += CPF_OFFSET;
            int cpfEndIndex = extensionValue.indexOf(CPF_TERMINATOR, cpfStartIndex);
            if (cpfEndIndex != -1) {
                String cpf = extrairNumeros(extensionValue.substring(cpfStartIndex, cpfStartIndex + CPF_LENGTH));
                return validarDocumento(cpf);
            }
        }
        return Optional.empty();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/1ef3e9f79926078183f77bdf371d7dcc5e915f5d,"    private static Optional<String> processaCPF(String extensionValue) {
        int cpfStartIndex = extensionValue.indexOf(CPF_INDICATOR);
        if (cpfStartIndex != -1) {
            cpfStartIndex += CPF_OFFSET;
            int cpfEndIndex = extensionValue.indexOf(CPF_TERMINATOR, cpfStartIndex);
            if (cpfEndIndex != -1) {
                String cpf = extrairNumeros(extensionValue.substring(cpfStartIndex, cpfStartIndex + CPF_LENGTH));
                return validarDocumento(cpf);
            }
        }
        return Optional.empty();
    }
","['    ', 'private', ' ', 'static', ' ', 'Optional', '<', 'String', '>', ' ', 'processaCPF', '(', 'String', ' ', 'extensionValue', ')', ' ', '{', '\n', '        ', 'int', ' ', 'cpfStartIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', 'CPF_INDICATOR', ')', ';', '\n', '        ', 'if', ' ', '(', 'cpfStartIndex', ' ', '!', '=', ' ', '-', '1', ')', ' ', '{', '\n', '            ', 'cpfStartIndex', ' ', '+', '=', ' ', 'CPF_OFFSET', ';', '\n', '            ', 'int', ' ', 'cpfEndIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', 'CPF_TERMINATOR', ',', ' ', 'cpfStartIndex', ')', ';', '\n', '            ', 'if', ' ', '(', 'cpfEndIndex', ' ', '!', '=', ' ', '-', '1', ')', ' ', '{', '\n', '                ', 'String', ' ', 'cpf', ' ', '=', ' ', 'extrairNumeros', '(', 'extensionValue', '.', 'substring', '(', 'cpfStartIndex', ',', ' ', 'cpfStartIndex', ' ', '+', ' ', 'CPF_LENGTH', ')', ')', ';', '\n', '                ', 'return', ' ', 'validarDocumento', '(', 'cpf', ')', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'Optional', '.', 'empty', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1ef3e9f79926078183f77bdf371d7dcc5e915f5d,DocumentoUtil.java,processaCNPJ,"    private static Optional<String> processaCNPJ(String extensionValue) {
        int cnpjIndex = extensionValue.indexOf(CNPJ_INDICATOR);
        if (cnpjIndex != -1) {
            String cnpj = extrairNumeros(extensionValue.substring(cnpjIndex + CNPJ_OFFSET, cnpjIndex + CNPJ_LENGTH));
            return validarDocumento(cnpj);
        }
        return Optional.empty();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/1ef3e9f79926078183f77bdf371d7dcc5e915f5d,"    private static Optional<String> processaCNPJ(String extensionValue) {
        int cnpjIndex = extensionValue.indexOf(CNPJ_INDICATOR);
        if (cnpjIndex != -1) {
            String cnpj = extrairNumeros(extensionValue.substring(cnpjIndex + CNPJ_OFFSET, cnpjIndex + CNPJ_LENGTH));
            return validarDocumento(cnpj);
        }
        return Optional.empty();
    }
","['    ', 'private', ' ', 'static', ' ', 'Optional', '<', 'String', '>', ' ', 'processaCNPJ', '(', 'String', ' ', 'extensionValue', ')', ' ', '{', '\n', '        ', 'int', ' ', 'cnpjIndex', ' ', '=', ' ', 'extensionValue', '.', 'indexOf', '(', 'CNPJ_INDICATOR', ')', ';', '\n', '        ', 'if', ' ', '(', 'cnpjIndex', ' ', '!', '=', ' ', '-', '1', ')', ' ', '{', '\n', '            ', 'String', ' ', 'cnpj', ' ', '=', ' ', 'extrairNumeros', '(', 'extensionValue', '.', 'substring', '(', 'cnpjIndex', ' ', '+', ' ', 'CNPJ_OFFSET', ',', ' ', 'cnpjIndex', ' ', '+', ' ', 'CNPJ_LENGTH', ')', ')', ';', '\n', '            ', 'return', ' ', 'validarDocumento', '(', 'cnpj', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'Optional', '.', 'empty', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1ef3e9f79926078183f77bdf371d7dcc5e915f5d,DocumentoUtil.java,extrairNumeros,"    private static String extrairNumeros(String valor) {
        return valor.replaceAll(""[^\\d]"", """");
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/1ef3e9f79926078183f77bdf371d7dcc5e915f5d,"    private static String extrairNumeros(String valor) {
        return valor.replaceAll(""[^\\d]"", """");
    }
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'extrairNumeros', '(', 'String', ' ', 'valor', ')', ' ', '{', '\n', '        ', 'return', ' ', 'valor', '.', 'replaceAll', '(', '""', '[^', '\\\\', 'd]', '""', ',', ' ', '""', '""', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,1ef3e9f79926078183f77bdf371d7dcc5e915f5d,DocumentoUtil.java,validarDocumento,"    private static Optional<String> validarDocumento(String documento) {
        Matcher matcherCNPJ = PATTERN_CNPJ.matcher(documento);
        if (matcherCNPJ.find()) {
            return Optional.of(matcherCNPJ.group());
        }

        Matcher matcherCPF = PATTERN_CPF.matcher(documento);
        if (matcherCPF.find()) {
            return Optional.of(matcherCPF.group());
        }

        return Optional.empty();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/1ef3e9f79926078183f77bdf371d7dcc5e915f5d,"    private static Optional<String> validarDocumento(String documento) {
        Matcher matcherCNPJ = PATTERN_CNPJ.matcher(documento);
        if (matcherCNPJ.find()) {
            return Optional.of(matcherCNPJ.group());
        }

        Matcher matcherCPF = PATTERN_CPF.matcher(documento);
        if (matcherCPF.find()) {
            return Optional.of(matcherCPF.group());
        }

        return Optional.empty();
    }
","['    ', 'private', ' ', 'static', ' ', 'Optional', '<', 'String', '>', ' ', 'validarDocumento', '(', 'String', ' ', 'documento', ')', ' ', '{', '\n', '        ', 'Matcher', ' ', 'matcherCNPJ', ' ', '=', ' ', 'PATTERN_CNPJ', '.', 'matcher', '(', 'documento', ')', ';', '\n', '        ', 'if', ' ', '(', 'matcherCNPJ', '.', 'find', '(', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Optional', '.', 'of', '(', 'matcherCNPJ', '.', 'group', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'Matcher', ' ', 'matcherCPF', ' ', '=', ' ', 'PATTERN_CPF', '.', 'matcher', '(', 'documento', ')', ';', '\n', '        ', 'if', ' ', '(', 'matcherCPF', '.', 'find', '(', ')', ')', ' ', '{', '\n', '            ', 'return', ' ', 'Optional', '.', 'of', '(', 'matcherCPF', '.', 'group', '(', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'return', ' ', 'Optional', '.', 'empty', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,db70ce4a602b4e165cc84f903ea7521916094026,CertificadoService.java,listaCertificadosWindows,"    public static List<Certificado> listaCertificadosWindows(boolean listarVencidos) throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_WINDOWS, listarVencidos);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db70ce4a602b4e165cc84f903ea7521916094026,"    public static List<Certificado> listaCertificadosWindows(boolean listarVencidos) throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_WINDOWS, listarVencidos);
    }
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', 'boolean', ' ', 'listarVencidos', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ',', ' ', 'listarVencidos', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,db70ce4a602b4e165cc84f903ea7521916094026,CertificadoService.java,listaCertificadosMac,"    public static List<Certificado> listaCertificadosMac(boolean listarVencidos) throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_MAC, listarVencidos);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db70ce4a602b4e165cc84f903ea7521916094026,"    public static List<Certificado> listaCertificadosMac(boolean listarVencidos) throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_MAC, listarVencidos);
    }
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosMac', '(', 'boolean', ' ', 'listarVencidos', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ',', ' ', 'listarVencidos', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,db70ce4a602b4e165cc84f903ea7521916094026,CertificadoService.java,listaCertificadosWindows,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_WINDOWS, true);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db70ce4a602b4e165cc84f903ea7521916094026,"    public static List<Certificado> listaCertificadosWindows() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_WINDOWS, true);
    }
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosWindows', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_WINDOWS', ',', ' ', 'true', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,db70ce4a602b4e165cc84f903ea7521916094026,CertificadoService.java,listaCertificadosMac,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_MAC, true);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db70ce4a602b4e165cc84f903ea7521916094026,"    public static List<Certificado> listaCertificadosMac() throws CertificadoException {
        return listaCertificadosRepositorio(TipoCertificadoEnum.REPOSITORIO_MAC, true);
    }
","['    ', 'public', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosMac', '(', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', '.', 'REPOSITORIO_MAC', ',', ' ', 'true', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,db70ce4a602b4e165cc84f903ea7521916094026,CertificadoService.java,listaCertificadosRepositorio,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo, boolean listarVencidos) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    if (listarVencidos) {
                        listaCert.add(certificado);
                    } else {
                        if (certificado.isValido()) {
                            listaCert.add(certificado);
                        }
                    }
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage(), ex);
        }
        return listaCert;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db70ce4a602b4e165cc84f903ea7521916094026,"    private static List<Certificado> listaCertificadosRepositorio(TipoCertificadoEnum tipo, boolean listarVencidos) throws CertificadoException {

        List<Certificado> listaCert = new ArrayList<>();
        Certificado cert = new Certificado();
        cert.setTipoCertificado(tipo);
        try {
            KeyStore ks = getKeyStore(cert);
            Enumeration<String> aliasEnum = ks.aliases();
            while (aliasEnum.hasMoreElements()) {
                String aliasKey = aliasEnum.nextElement();
                if (aliasKey != null) {
                    Certificado certificado = new Certificado();
                    certificado.setTipoCertificado(tipo);
                    certificado.setNome(aliasKey);
                    setDadosCertificado(certificado, ks);
                    if (listarVencidos) {
                        listaCert.add(certificado);
                    } else {
                        if (certificado.isValido()) {
                            listaCert.add(certificado);
                        }
                    }
                }
            }
        } catch (KeyStoreException ex) {
            throw new CertificadoException(""Erro ao Carregar Certificados:"" +
                    ex.getMessage(), ex);
        }
        return listaCert;
    }
","['    ', 'private', ' ', 'static', ' ', 'List', '<', 'Certificado', '>', ' ', 'listaCertificadosRepositorio', '(', 'TipoCertificadoEnum', ' ', 'tipo', ',', ' ', 'boolean', ' ', 'listarVencidos', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '\n', '        ', 'List', '<', 'Certificado', '>', ' ', 'listaCert', ' ', '=', ' ', 'new', ' ', 'ArrayList', '<', '>', '(', ')', ';', '\n', '        ', 'Certificado', ' ', 'cert', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '        ', 'cert', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'ks', ' ', '=', ' ', 'getKeyStore', '(', 'cert', ')', ';', '\n', '            ', 'Enumeration', '<', 'String', '>', ' ', 'aliasEnum', ' ', '=', ' ', 'ks', '.', 'aliases', '(', ')', ';', '\n', '            ', 'while', ' ', '(', 'aliasEnum', '.', 'hasMoreElements', '(', ')', ')', ' ', '{', '\n', '                ', 'String', ' ', 'aliasKey', ' ', '=', ' ', 'aliasEnum', '.', 'nextElement', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'aliasKey', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                    ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'new', ' ', 'Certificado', '(', ')', ';', '\n', '                    ', 'certificado', '.', 'setTipoCertificado', '(', 'tipo', ')', ';', '\n', '                    ', 'certificado', '.', 'setNome', '(', 'aliasKey', ')', ';', '\n', '                    ', 'setDadosCertificado', '(', 'certificado', ',', ' ', 'ks', ')', ';', '\n', '                    ', 'if', ' ', '(', 'listarVencidos', ')', ' ', '{', '\n', '                        ', 'listaCert', '.', 'add', '(', 'certificado', ')', ';', '\n', '                    ', '}', ' ', 'else', ' ', '{', '\n', '                        ', 'if', ' ', '(', 'certificado', '.', 'isValido', '(', ')', ')', ' ', '{', '\n', '                            ', 'listaCert', '.', 'add', '(', 'certificado', ')', ';', '\n', '                        ', '}', '\n', '                    ', '}', '\n', '                ', '}', '\n', '            ', '}', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'KeyStoreException', ' ', 'ex', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'CertificadoException', '(', '""', 'Erro ao Carregar Certificados:', '""', ' ', '+', '\n', '                    ', 'ex', '.', 'getMessage', '(', ')', ',', ' ', 'ex', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'listaCert', ';', '\n', '    ', '}', '\n', '<END>']"
master,db70ce4a602b4e165cc84f903ea7521916094026,SocketFactoryDinamico.java,createKeyManagers,"    public KeyManager[] createKeyManagers() {
        return new KeyManager[]{new AliasKeyManager(keyStore, alias, senha)};
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db70ce4a602b4e165cc84f903ea7521916094026,"    public KeyManager[] createKeyManagers() {
        return new KeyManager[]{new AliasKeyManager(keyStore, alias, senha)};
    }
","['    ', 'public', ' ', 'KeyManager', '[', ']', ' ', 'createKeyManagers', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'KeyManager', '[', ']', '{', 'new', ' ', 'AliasKeyManager', '(', 'keyStore', ',', ' ', 'alias', ',', ' ', 'senha', ')', '}', ';', '\n', '    ', '}', '\n', '<END>']"
master,db70ce4a602b4e165cc84f903ea7521916094026,SocketFactoryDinamico.java,createTrustManagers,"    public TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(fileCacerts, SENHA_CACERT);
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/db70ce4a602b4e165cc84f903ea7521916094026,"    public TrustManager[] createTrustManagers() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(fileCacerts, SENHA_CACERT);
        trustManagerFactory.init(trustStore);
        return trustManagerFactory.getTrustManagers();
    }
","['    ', 'public', ' ', 'TrustManager', '[', ']', ' ', 'createTrustManagers', '(', ')', ' ', 'throws', ' ', 'KeyStoreException', ',', ' ', 'NoSuchAlgorithmException', ',', ' ', 'CertificateException', ',', ' ', 'IOException', ' ', '{', '\n', '        ', 'final', ' ', 'TrustManagerFactory', ' ', 'trustManagerFactory', ' ', '=', ' ', 'TrustManagerFactory', '.', 'getInstance', '(', 'TrustManagerFactory', '.', 'getDefaultAlgorithm', '(', ')', ')', ';', '\n', '        ', 'KeyStore', ' ', 'trustStore', ' ', '=', ' ', 'KeyStore', '.', 'getInstance', '(', 'KeyStore', '.', 'getDefaultType', '(', ')', ')', ';', '\n', '        ', 'trustStore', '.', 'load', '(', 'fileCacerts', ',', ' ', 'SENHA_CACERT', ')', ';', '\n', '        ', 'trustManagerFactory', '.', 'init', '(', 'trustStore', ')', ';', '\n', '        ', 'return', ' ', 'trustManagerFactory', '.', 'getTrustManagers', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3b18febfeacf645c0b77e42e865306c1e918fd3,CertificadoService.java,inicializaCertificado,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {
        if (certificado == null) {
            throw new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO);
        }

        if (certificado.isModoAntigoSSL()) {
            Protocol.registerProtocol(""https"", getProtocoloCertificado(certificado, cacert));
        }

        log.info(String.format(""JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br "" +
                        ""| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s"",",https://www.github.com/samuel-oliveira/java_certificado/commit/c3b18febfeacf645c0b77e42e865306c1e918fd3,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {
        if (certificado == null) {
            throw new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO);
        }

        if (certificado.isModoAntigoSSL()) {
            Protocol.registerProtocol(""https"", getProtocoloCertificado(certificado, cacert));
        }

        log.info(String.format(""JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br "" +
                        ""| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s"",
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'inicializaCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'InputStream', ' ', 'cacert', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'certificado', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', 'CERTIFICADO_NAO_PODE_SER_NULO', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', 'certificado', '.', 'isModoAntigoSSL', '(', ')', ')', ' ', '{', '\n', '            ', 'Protocol', '.', 'registerProtocol', '(', '""', 'https', '""', ',', ' ', 'getProtocoloCertificado', '(', 'certificado', ',', ' ', 'cacert', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'log', '.', 'info', '(', 'String', '.', 'format', '(', '""', 'JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br ', '""', ' ', '+', '\n', '                        ', '""', '| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s', '""', ',', '\n', '<END>']"
master,c3b18febfeacf645c0b77e42e865306c1e918fd3,CertificadoService.java,getProtocoloCertificado,"    private static Protocol getProtocoloCertificado(final Certificado certificado, InputStream cacert) throws CertificadoException {
        try {
            KeyStore keyStore = getKeyStore(",https://www.github.com/samuel-oliveira/java_certificado/commit/c3b18febfeacf645c0b77e42e865306c1e918fd3,"    private static Protocol getProtocoloCertificado(final Certificado certificado, InputStream cacert) throws CertificadoException {
        try {
            KeyStore keyStore = getKeyStore(
","['    ', 'private', ' ', 'static', ' ', 'Protocol', ' ', 'getProtocoloCertificado', '(', 'final', ' ', 'Certificado', ' ', 'certificado', ',', ' ', 'InputStream', ' ', 'cacert', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'KeyStore', ' ', 'keyStore', ' ', '=', ' ', 'getKeyStore', '(', '\n', '<END>']"
master,c3b18febfeacf645c0b77e42e865306c1e918fd3,CertificadoService.java,getHttpsClient,"    public static HttpClient getHttpsClient(Certificado certificado, String url) throws CertificadoException {
        return getHttpsClient(certificado, url, CertificadoService.class.getResourceAsStream(""/cacert""));
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/c3b18febfeacf645c0b77e42e865306c1e918fd3,"    public static HttpClient getHttpsClient(Certificado certificado, String url) throws CertificadoException {
        return getHttpsClient(certificado, url, CertificadoService.class.getResourceAsStream(""/cacert""));
    }
","['    ', 'public', ' ', 'static', ' ', 'HttpClient', ' ', 'getHttpsClient', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'String', ' ', 'url', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'return', ' ', 'getHttpsClient', '(', 'certificado', ',', ' ', 'url', ',', ' ', 'CertificadoService', '.', 'class', '.', 'getResourceAsStream', '(', '""', '/cacert', '""', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3b18febfeacf645c0b77e42e865306c1e918fd3,CertificadoService.java,getHttpsClient,"    public static HttpClient getHttpsClient(Certificado certificado, String url, final InputStream cacert) throws CertificadoException {
        Protocol protocol = getProtocoloCertificado(certificado, cacert);
        HttpClient httpclient = new HttpClient();
        httpclient.getHostConfiguration().setHost(url, 443, protocol);
        return httpclient;
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/c3b18febfeacf645c0b77e42e865306c1e918fd3,"    public static HttpClient getHttpsClient(Certificado certificado, String url, final InputStream cacert) throws CertificadoException {
        Protocol protocol = getProtocoloCertificado(certificado, cacert);
        HttpClient httpclient = new HttpClient();
        httpclient.getHostConfiguration().setHost(url, 443, protocol);
        return httpclient;
    }
","['    ', 'public', ' ', 'static', ' ', 'HttpClient', ' ', 'getHttpsClient', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'String', ' ', 'url', ',', ' ', 'final', ' ', 'InputStream', ' ', 'cacert', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Protocol', ' ', 'protocol', ' ', '=', ' ', 'getProtocoloCertificado', '(', 'certificado', ',', ' ', 'cacert', ')', ';', '\n', '        ', 'HttpClient', ' ', 'httpclient', ' ', '=', ' ', 'new', ' ', 'HttpClient', '(', ')', ';', '\n', '        ', 'httpclient', '.', 'getHostConfiguration', '(', ')', '.', 'setHost', '(', 'url', ',', ' ', '443', ',', ' ', 'protocol', ')', ';', '\n', '        ', 'return', ' ', 'httpclient', ';', '\n', '    ', '}', '\n', '<END>']"
master,c3b18febfeacf645c0b77e42e865306c1e918fd3,CertificadoServiceTest.java,compatibilidadeComModoAntigoSSL,"    void compatibilidadeComModoAntigoSSL() throws FileNotFoundException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        certificado.setModoAntigoSSL(true);
        CertificadoService.inicializaCertificado(certificado);

        String alias = getHttpsProtocoloAlias(""https"");

        assertEquals(""certificado cpf teste"", alias);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/c3b18febfeacf645c0b77e42e865306c1e918fd3,"    void compatibilidadeComModoAntigoSSL() throws FileNotFoundException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        certificado.setModoAntigoSSL(true);
        CertificadoService.inicializaCertificado(certificado);

        String alias = getHttpsProtocoloAlias(""https"");

        assertEquals(""certificado cpf teste"", alias);
    }
","['    ', 'void', ' ', 'compatibilidadeComModoAntigoSSL', '(', ')', ' ', 'throws', ' ', 'FileNotFoundException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'certificado', '.', 'setModoAntigoSSL', '(', 'true', ')', ';', '\n', '        ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'certificado', ')', ';', '\n', '\n', '        ', 'String', ' ', 'alias', ' ', '=', ' ', 'getHttpsProtocoloAlias', '(', '""', 'https', '""', ')', ';', '\n', '\n', '        ', 'assertEquals', '(', '""', 'certificado cpf teste', '""', ',', ' ', 'alias', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,3562585bc2b41286127aec68e988786e05df9bc3,CertificadoService.java,inicializaCertificado,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {
        if (certificado == null) {
            throw new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO);
        }

        if (!certificado.isModoMultithreading()) {
            Protocol.registerProtocol(""https"", getProtocoloCertificado(certificado, cacert));
        }

        log.info(String.format(""JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br "" +
                        ""| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s"",",https://www.github.com/samuel-oliveira/java_certificado/commit/3562585bc2b41286127aec68e988786e05df9bc3,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {
        if (certificado == null) {
            throw new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO);
        }

        if (!certificado.isModoMultithreading()) {
            Protocol.registerProtocol(""https"", getProtocoloCertificado(certificado, cacert));
        }

        log.info(String.format(""JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br "" +
                        ""| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s"",
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'inicializaCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'InputStream', ' ', 'cacert', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'certificado', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', 'CERTIFICADO_NAO_PODE_SER_NULO', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'certificado', '.', 'isModoMultithreading', '(', ')', ')', ' ', '{', '\n', '            ', 'Protocol', '.', 'registerProtocol', '(', '""', 'https', '""', ',', ' ', 'getProtocoloCertificado', '(', 'certificado', ',', ' ', 'cacert', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'log', '.', 'info', '(', 'String', '.', 'format', '(', '""', 'JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br ', '""', ' ', '+', '\n', '                        ', '""', '| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s', '""', ',', '\n', '<END>']"
master,3562585bc2b41286127aec68e988786e05df9bc3,CertificadoServiceTest.java,inicaConfiguracoesParametrosNull,"    void inicaConfiguracoesParametrosNull() {

        //Certificado Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)
        );
        //Cacert Null
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)",https://www.github.com/samuel-oliveira/java_certificado/commit/3562585bc2b41286127aec68e988786e05df9bc3,"    void inicaConfiguracoesParametrosNull() {

        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)
        );
        
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                CertificadoService.inicializaCertificado(null)
","['    ', 'void', ' ', 'inicaConfiguracoesParametrosNull', '(', ')', ' ', '{', '\n', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '                ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '        ', ')', ';', '\n', '        ', '\n', '        ', 'Assertions', '.', 'assertThrows', '(', 'IllegalArgumentException', '.', 'class', ',', ' ', '(', ')', ' ', '-', '>', '\n', '                ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'null', ')', '\n', '<END>']"
master,3562585bc2b41286127aec68e988786e05df9bc3,CertificadoServiceTest.java,compatibilidadeModoMultithreadingDesativado,"    void compatibilidadeModoMultithreadingDesativado() throws FileNotFoundException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        certificado.setModoMultithreading(false);
        CertificadoService.inicializaCertificado(certificado);

        String alias = getHttpsProtocoloAlias(""https"");

        assertEquals(""certificado cpf teste"", alias);
    }",https://www.github.com/samuel-oliveira/java_certificado/commit/3562585bc2b41286127aec68e988786e05df9bc3,"    void compatibilidadeModoMultithreadingDesativado() throws FileNotFoundException, CertificadoException {
        Certificado certificado = CertificadoService.certificadoPfx(CERTIFICADO_CPF, SENHA);
        certificado.setModoMultithreading(false);
        CertificadoService.inicializaCertificado(certificado);

        String alias = getHttpsProtocoloAlias(""https"");

        assertEquals(""certificado cpf teste"", alias);
    }
","['    ', 'void', ' ', 'compatibilidadeModoMultithreadingDesativado', '(', ')', ' ', 'throws', ' ', 'FileNotFoundException', ',', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'Certificado', ' ', 'certificado', ' ', '=', ' ', 'CertificadoService', '.', 'certificadoPfx', '(', 'CERTIFICADO_CPF', ',', ' ', 'SENHA', ')', ';', '\n', '        ', 'certificado', '.', 'setModoMultithreading', '(', 'false', ')', ';', '\n', '        ', 'CertificadoService', '.', 'inicializaCertificado', '(', 'certificado', ')', ';', '\n', '\n', '        ', 'String', ' ', 'alias', ' ', '=', ' ', 'getHttpsProtocoloAlias', '(', '""', 'https', '""', ')', ';', '\n', '\n', '        ', 'assertEquals', '(', '""', 'certificado cpf teste', '""', ',', ' ', 'alias', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4c742c99d15c440a8e9bcca0181769453e766999,CertificadoService.java,inicializaCertificado,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {
        if (certificado == null) {
            throw new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO);
        }

        if (!certificado.isModoMultithreading()) {
            Protocol.registerProtocol(""https"", getProtocoloCertificado(certificado, cacert));
        }

        log.info(String.format(""JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br "" +
                        ""| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s | Multithreading=%s"",",https://www.github.com/samuel-oliveira/java_certificado/commit/4c742c99d15c440a8e9bcca0181769453e766999,"    public static void inicializaCertificado(Certificado certificado, InputStream cacert) throws CertificadoException {
        if (certificado == null) {
            throw new IllegalArgumentException(CERTIFICADO_NAO_PODE_SER_NULO);
        }

        if (!certificado.isModoMultithreading()) {
            Protocol.registerProtocol(""https"", getProtocoloCertificado(certificado, cacert));
        }

        log.info(String.format(""JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br "" +
                        ""| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s | Multithreading=%s"",
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'inicializaCertificado', '(', 'Certificado', ' ', 'certificado', ',', ' ', 'InputStream', ' ', 'cacert', ')', ' ', 'throws', ' ', 'CertificadoException', ' ', '{', '\n', '        ', 'if', ' ', '(', 'certificado', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', 'CERTIFICADO_NAO_PODE_SER_NULO', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'certificado', '.', 'isModoMultithreading', '(', ')', ')', ' ', '{', '\n', '            ', 'Protocol', '.', 'registerProtocol', '(', '""', 'https', '""', ',', ' ', 'getProtocoloCertificado', '(', 'certificado', ',', ' ', 'cacert', ')', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'log', '.', 'info', '(', 'String', '.', 'format', '(', '""', 'JAVA-CERTIFICADO | Samuel Oliveira | samuel@swconsultoria.com.br ', '""', ' ', '+', '\n', '                        ', '""', '| VERSAO=%s | DATA_VERSAO=%s | CNPJ/CPF=%s | VENCIMENTO=%s | ALIAS=%s | TIPO=%s | CAMINHO=%s | CACERT=%s | SSL=%s | Multithreading=%s', '""', ',', '\n', '<END>']"
