Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,isWin10,"    static boolean isWin10() {
        return System.getProperty(""os.name"").startsWith(""Windows"") &&
                Double.parseDouble(System.getProperty(""os.version"")) >= 10;",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"    static boolean isWin10() {
        return System.getProperty(""os.name"").startsWith(""Windows"") &&
                Double.parseDouble(System.getProperty(""os.version"")) >= 10;
","['    ', 'static', ' ', 'boolean', ' ', 'isWin10', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'System', '.', 'getProperty', '(', '""', 'os.name', '""', ')', '.', 'startsWith', '(', '""', 'Windows', '""', ')', ' ', '&', '&', '\n', '                ', 'Double', '.', 'parseDouble', '(', 'System', '.', 'getProperty', '(', '""', 'os.version', '""', ')', ')', ' ', '>', '=', ' ', '10', ';', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,isDark,"        public boolean isDark() {
            RegistryValue registryValue = registryPath.getValue(REGISTRY_VALUE);
            if (registryValue != null) {
                byte[] byteData = registryValue.getByteData();
                if (byteData.length > 0) {
                    int value = byteData[0];
                    return value == 0;
                }
            }
            return false;
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"        public boolean isDark() {
            RegistryValue registryValue = registryPath.getValue(REGISTRY_VALUE);
            if (registryValue != null) {
                byte[] byteData = registryValue.getByteData();
                if (byteData.length > 0) {
                    int value = byteData[0];
                    return value == 0;
                }
            }
            return false;
        }
","['        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'RegistryValue', ' ', 'registryValue', ' ', '=', ' ', 'registryPath', '.', 'getValue', '(', 'REGISTRY_VALUE', ')', ';', '\n', '            ', 'if', ' ', '(', 'registryValue', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'byte', '[', ']', ' ', 'byteData', ' ', '=', ' ', 'registryValue', '.', 'getByteData', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'byteData', '.', 'length', ' ', '>', ' ', '0', ')', ' ', '{', '\n', '                    ', 'int', ' ', 'value', ' ', '=', ' ', 'byteData', '[', '0', ']', ';', '\n', '                    ', 'return', ' ', 'value', ' ', '=', '=', ' ', '0', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,registerListener,"        public void registerListener(Consumer<Boolean> darkThemeListener) {
            RegistryListener registryListener = registryEvent -> {
                RegistryKey key = registryEvent.getKey();
                if (key.equals(registryPath)) {
                    darkThemeListener.accept(isDark());
                }
            };
            RegistryWatcher.addRegistryListener(registryListener);
            RegistryWatcher.watchKey(registryPath);
            listeners.put(darkThemeListener, registryListener);
",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"        public void registerListener(Consumer<Boolean> darkThemeListener) {
            RegistryListener registryListener = registryEvent -> {
                RegistryKey key = registryEvent.getKey();
                if (key.equals(registryPath)) {
                    darkThemeListener.accept(isDark());
                }
            };
            RegistryWatcher.addRegistryListener(registryListener);
            RegistryWatcher.watchKey(registryPath);
            listeners.put(darkThemeListener, registryListener);
","['        ', 'public', ' ', 'void', ' ', 'registerListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '            ', 'RegistryListener', ' ', 'registryListener', ' ', '=', ' ', 'registryEvent', ' ', '-', '>', ' ', '{', '\n', '                ', 'RegistryKey', ' ', 'key', ' ', '=', ' ', 'registryEvent', '.', 'getKey', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'key', '.', 'equals', '(', 'registryPath', ')', ')', ' ', '{', '\n', '                    ', 'darkThemeListener', '.', 'accept', '(', 'isDark', '(', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', ';', '\n', '            ', 'RegistryWatcher', '.', 'addRegistryListener', '(', 'registryListener', ')', ';', '\n', '            ', 'RegistryWatcher', '.', 'watchKey', '(', 'registryPath', ')', ';', '\n', '            ', 'listeners', '.', 'put', '(', 'darkThemeListener', ',', ' ', 'registryListener', ')', ';', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,removeListener,"        public void removeListener(Consumer<Boolean> darkThemeListener) {
            RegistryListener removed = listeners.remove(darkThemeListener);
            RegistryWatcher.removeRegistryListener(removed);
            if (listeners.isEmpty()) {
                RegistryWatcher.removeKey(registryPath);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"        public void removeListener(Consumer<Boolean> darkThemeListener) {
            RegistryListener removed = listeners.remove(darkThemeListener);
            RegistryWatcher.removeRegistryListener(removed);
            if (listeners.isEmpty()) {
                RegistryWatcher.removeKey(registryPath);
","['        ', 'public', ' ', 'void', ' ', 'removeListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '            ', 'RegistryListener', ' ', 'removed', ' ', '=', ' ', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n', '            ', 'RegistryWatcher', '.', 'removeRegistryListener', '(', 'removed', ')', ';', '\n', '            ', 'if', ' ', '(', 'listeners', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '                ', 'RegistryWatcher', '.', 'removeKey', '(', 'registryPath', ')', ';', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,removeAllListeners,"        public void removeAllListeners() {
            this.listeners.values().forEach(RegistryWatcher::removeRegistryListener);
            this.listeners.clear();
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"        public void removeAllListeners() {
            this.listeners.values().forEach(RegistryWatcher::removeRegistryListener);
            this.listeners.clear();
        }
","['        ', 'public', ' ', 'void', ' ', 'removeAllListeners', '(', ')', ' ', '{', '\n', '            ', 'this', '.', 'listeners', '.', 'values', '(', ')', '.', 'forEach', '(', 'RegistryWatcher', ':', ':', 'removeRegistryListener', ')', ';', '\n', '            ', 'this', '.', 'listeners', '.', 'clear', '(', ')', ';', '\n', '        ', '}', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,isDark,"        public boolean isDark() {
            return false;
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"        public boolean isDark() {
            return false;
        }
","['        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,registerListener,"        public void registerListener(Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeAllListeners() {
        }
    }

}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"        public void registerListener(Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeAllListeners() {
        }
    }

}
","['        ', 'public', ' ', 'void', ' ', 'registerListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeAllListeners', '(', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '\n', '}', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,SystemThemeDetector.java,removeListener,"        public void removeListener(Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeAllListeners() {
        }
    }

}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"        public void removeListener(Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeAllListeners() {
        }
    }

}
","['        ', 'public', ' ', 'void', ' ', 'removeListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeAllListeners', '(', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '\n', '}', '\n']"
master,d7d15806a76df57a1e259e5e14da952be25119c5,Demo.java,main,"    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Watching system theme change:"");
        SystemThemeDetector detector = SystemThemeDetector.getDetector();
        detector.registerListener(isDark -> System.out.println(isDark ? ""It's just switched to DARK"" : ""It's just switched to LIGHT""));
        while(true) {
            String line = scanner.nextLine();",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d7d15806a76df57a1e259e5e14da952be25119c5,"    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Watching system theme change:"");
        SystemThemeDetector detector = SystemThemeDetector.getDetector();
        detector.registerListener(isDark -> System.out.println(isDark ? ""It's just switched to DARK"" : ""It's just switched to LIGHT""));
        while(true) {
            String line = scanner.nextLine();
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'Scanner', ' ', 'scanner', ' ', '=', ' ', 'new', ' ', 'Scanner', '(', 'System', '.', 'in', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'Watching system theme change:', '""', ')', ';', '\n', '        ', 'SystemThemeDetector', ' ', 'detector', ' ', '=', ' ', 'SystemThemeDetector', '.', 'getDetector', '(', ')', ';', '\n', '        ', 'detector', '.', 'registerListener', '(', 'isDark', ' ', '-', '>', ' ', 'System', '.', 'out', '.', 'println', '(', 'isDark', ' ', '?', ' ', '""', ""It's just switched to DARK"", '""', ' ', ':', ' ', '""', ""It's just switched to LIGHT"", '""', ')', ')', ';', '\n', '        ', 'while', '(', 'true', ')', ' ', '{', '\n', '            ', 'String', ' ', 'line', ' ', '=', ' ', 'scanner', '.', 'nextLine', '(', ')', ';', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeDetector.java,isDark,"        public boolean isDark() {
            try {
                return Advapi32Util.registryValueExists(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, REGISTRY_VALUE) &&",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"        public boolean isDark() {
            try {
                return Advapi32Util.registryValueExists(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, REGISTRY_VALUE) &&
","['        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'return', ' ', 'Advapi32Util', '.', 'registryValueExists', '(', 'WinReg', '.', 'HKEY_CURRENT_USER', ',', ' ', 'REGISTRY_PATH', ',', ' ', 'REGISTRY_VALUE', ')', ' ', '&', '&', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeDetector.java,registerListener,"        public void registerListener(Consumer<Boolean> darkThemeListener) {
            Objects.requireNonNull(darkThemeListener, ""Listener shouldn't be null"");
            if (this.listeners.add(darkThemeListener)) {
                startWorker(darkThemeListener);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"        public void registerListener(Consumer<Boolean> darkThemeListener) {
            Objects.requireNonNull(darkThemeListener, ""Listener shouldn't be null"");
            if (this.listeners.add(darkThemeListener)) {
                startWorker(darkThemeListener);
","['        ', 'public', ' ', 'void', ' ', 'registerListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '            ', 'Objects', '.', 'requireNonNull', '(', 'darkThemeListener', ',', ' ', '""', ""Listener shouldn't be null"", '""', ')', ';', '\n', '            ', 'if', ' ', '(', 'this', '.', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ')', ' ', '{', '\n', '                ', 'startWorker', '(', 'darkThemeListener', ')', ';', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeDetector.java,removeListener,"        public void removeListener(Consumer<Boolean> darkThemeListener) {
            this.removeFromWorker(darkThemeListener);
            this.listeners.remove(darkThemeListener);
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"        public void removeListener(Consumer<Boolean> darkThemeListener) {
            this.removeFromWorker(darkThemeListener);
            this.listeners.remove(darkThemeListener);
        }
","['        ', 'public', ' ', 'void', ' ', 'removeListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '            ', 'this', '.', 'removeFromWorker', '(', 'darkThemeListener', ')', ';', '\n', '            ', 'this', '.', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n', '        ', '}', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeDetector.java,removeAllListeners,"        public void removeAllListeners() {
            removeAllListenersFromWorker();
            this.listeners.clear();
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"        public void removeAllListeners() {
            removeAllListenersFromWorker();
            this.listeners.clear();
        }
","['        ', 'public', ' ', 'void', ' ', 'removeAllListeners', '(', ')', ' ', '{', '\n', '            ', 'removeAllListenersFromWorker', '(', ')', ';', '\n', '            ', 'this', '.', 'listeners', '.', 'clear', '(', ')', ';', '\n', '        ', '}', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeDetector.java,startWorker,"        private void startWorker(Consumer<Boolean> listener) {
            if (this.listenerThread.isTerminated() || this.listenerThread.isInterrupted()) {
                this.listenerThread = new SystemThemeListenerThread(this);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"        private void startWorker(Consumer<Boolean> listener) {
            if (this.listenerThread.isTerminated() || this.listenerThread.isInterrupted()) {
                this.listenerThread = new SystemThemeListenerThread(this);
","['        ', 'private', ' ', 'void', ' ', 'startWorker', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'listener', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'this', '.', 'listenerThread', '.', 'isTerminated', '(', ')', ' ', '|', '|', ' ', 'this', '.', 'listenerThread', '.', 'isInterrupted', '(', ')', ')', ' ', '{', '\n', '                ', 'this', '.', 'listenerThread', ' ', '=', ' ', 'new', ' ', 'SystemThemeListenerThread', '(', 'this', ')', ';', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeDetector.java,removeFromWorker,"        private void removeFromWorker(Consumer<Boolean> listener) {
            if (!this.listenerThread.isTerminated())
                this.listenerThread.removeListener(listener);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"        private void removeFromWorker(Consumer<Boolean> listener) {
            if (!this.listenerThread.isTerminated())
                this.listenerThread.removeListener(listener);
","['        ', 'private', ' ', 'void', ' ', 'removeFromWorker', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'listener', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', '!', 'this', '.', 'listenerThread', '.', 'isTerminated', '(', ')', ')', '\n', '                ', 'this', '.', 'listenerThread', '.', 'removeListener', '(', 'listener', ')', ';', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeDetector.java,removeAllListenersFromWorker,"        private void removeAllListenersFromWorker() {
            if (!this.listenerThread.isTerminated())
                this.listenerThread.removeAllListener();",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"        private void removeAllListenersFromWorker() {
            if (!this.listenerThread.isTerminated())
                this.listenerThread.removeAllListener();
","['        ', 'private', ' ', 'void', ' ', 'removeAllListenersFromWorker', '(', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', '!', 'this', '.', 'listenerThread', '.', 'isTerminated', '(', ')', ')', '\n', '                ', 'this', '.', 'listenerThread', '.', 'removeAllListener', '(', ')', ';', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeListenerThread.java,addListener,"    public void addListener(Consumer<Boolean> listener) {
        this.listeners.add(listener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"    public void addListener(Consumer<Boolean> listener) {
        this.listeners.add(listener);
    }
","['    ', 'public', ' ', 'void', ' ', 'addListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'listener', ')', ' ', '{', '\n', '        ', 'this', '.', 'listeners', '.', 'add', '(', 'listener', ')', ';', '\n', '    ', '}', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeListenerThread.java,removeListener,"    public void removeListener(Consumer<Boolean> listener) {
        this.listeners.remove(listener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"    public void removeListener(Consumer<Boolean> listener) {
        this.listeners.remove(listener);
    }
","['    ', 'public', ' ', 'void', ' ', 'removeListener', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'listener', ')', ' ', '{', '\n', '        ', 'this', '.', 'listeners', '.', 'remove', '(', 'listener', ')', ';', '\n', '    ', '}', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeListenerThread.java,removeAllListener,"    public void removeAllListener() {
        this.listeners.clear();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"    public void removeAllListener() {
        this.listeners.clear();
    }
","['    ', 'public', ' ', 'void', ' ', 'removeAllListener', '(', ')', ' ', '{', '\n', '        ', 'this', '.', 'listeners', '.', 'clear', '(', ')', ';', '\n', '    ', '}', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeListenerThread.java,run,"    public void run() {
        while (!this.isInterrupted() && !listeners.isEmpty()) {
            boolean lastValue = systemThemeDetector.isDark();
            if (this.lastValue != lastValue) {
                listeners.forEach(listener -> listener.accept(lastValue));
            }

            this.lastValue = lastValue;
        }

        terminated = true;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"    public void run() {
        while (!this.isInterrupted() && !listeners.isEmpty()) {
            boolean lastValue = systemThemeDetector.isDark();
            if (this.lastValue != lastValue) {
                listeners.forEach(listener -> listener.accept(lastValue));
            }

            this.lastValue = lastValue;
        }

        terminated = true;
    }
","['    ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '        ', 'while', ' ', '(', '!', 'this', '.', 'isInterrupted', '(', ')', ' ', '&', '&', ' ', '!', 'listeners', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'lastValue', ' ', '=', ' ', 'systemThemeDetector', '.', 'isDark', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'this', '.', 'lastValue', ' ', '!', '=', ' ', 'lastValue', ')', ' ', '{', '\n', '                ', 'listeners', '.', 'forEach', '(', 'listener', ' ', '-', '>', ' ', 'listener', '.', 'accept', '(', 'lastValue', ')', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'this', '.', 'lastValue', ' ', '=', ' ', 'lastValue', ';', '\n', '        ', '}', '\n', '\n', '        ', 'terminated', ' ', '=', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,985d1f21fbf752c040aec740c4346989a71da9e5,SystemThemeListenerThread.java,uncaughtException,"    public void uncaughtException(Thread t, Throwable e) {
        terminated = true;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/985d1f21fbf752c040aec740c4346989a71da9e5,"    public void uncaughtException(Thread t, Throwable e) {
        terminated = true;
    }
","['    ', 'public', ' ', 'void', ' ', 'uncaughtException', '(', 'Thread', ' ', 't', ',', ' ', 'Throwable', ' ', 'e', ')', ' ', '{', '\n', '        ', 'terminated', ' ', '=', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,7c47f8c484bd37e4f1ebb27a7c049d0649e13a9a,SystemThemeListenerThread.java,run,"    public void run() {
        while (!this.isInterrupted() && !listeners.isEmpty()) {
            boolean lastValue = systemUIThemeDetector.isDark();
            if (this.lastValue != lastValue) {
                listeners.forEach(listener -> listener.accept(lastValue));
            }

            this.lastValue = lastValue;
        }

        terminated = true;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7c47f8c484bd37e4f1ebb27a7c049d0649e13a9a,"    public void run() {
        while (!this.isInterrupted() && !listeners.isEmpty()) {
            boolean lastValue = systemUIThemeDetector.isDark();
            if (this.lastValue != lastValue) {
                listeners.forEach(listener -> listener.accept(lastValue));
            }

            this.lastValue = lastValue;
        }

        terminated = true;
    }
","['    ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '        ', 'while', ' ', '(', '!', 'this', '.', 'isInterrupted', '(', ')', ' ', '&', '&', ' ', '!', 'listeners', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'boolean', ' ', 'lastValue', ' ', '=', ' ', 'systemUIThemeDetector', '.', 'isDark', '(', ')', ';', '\n', '            ', 'if', ' ', '(', 'this', '.', 'lastValue', ' ', '!', '=', ' ', 'lastValue', ')', ' ', '{', '\n', '                ', 'listeners', '.', 'forEach', '(', 'listener', ' ', '-', '>', ' ', 'listener', '.', 'accept', '(', 'lastValue', ')', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'this', '.', 'lastValue', ' ', '=', ' ', 'lastValue', ';', '\n', '        ', '}', '\n', '\n', '        ', 'terminated', ' ', '=', ' ', 'true', ';', '\n', '    ', '}', '\n']"
master,7c47f8c484bd37e4f1ebb27a7c049d0649e13a9a,Demo.java,main,"    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Watching system theme change:"");
        SystemUIThemeDetector detector = SystemUIThemeDetector.getDetector();
        detector.registerListener(isDark -> System.out.println(isDark ? ""It's just switched to DARK"" : ""It's just switched to LIGHT""));
        while(true) {
            String line = scanner.nextLine();",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7c47f8c484bd37e4f1ebb27a7c049d0649e13a9a,"    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Watching system theme change:"");
        SystemUIThemeDetector detector = SystemUIThemeDetector.getDetector();
        detector.registerListener(isDark -> System.out.println(isDark ? ""It's just switched to DARK"" : ""It's just switched to LIGHT""));
        while(true) {
            String line = scanner.nextLine();
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'Scanner', ' ', 'scanner', ' ', '=', ' ', 'new', ' ', 'Scanner', '(', 'System', '.', 'in', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'Watching system theme change:', '""', ')', ';', '\n', '        ', 'SystemUIThemeDetector', ' ', 'detector', ' ', '=', ' ', 'SystemUIThemeDetector', '.', 'getDetector', '(', ')', ';', '\n', '        ', 'detector', '.', 'registerListener', '(', 'isDark', ' ', '-', '>', ' ', 'System', '.', 'out', '.', 'println', '(', 'isDark', ' ', '?', ' ', '""', ""It's just switched to DARK"", '""', ' ', ':', ' ', '""', ""It's just switched to LIGHT"", '""', ')', ')', ';', '\n', '        ', 'while', '(', 'true', ')', ' ', '{', '\n', '            ', 'String', ' ', 'line', ' ', '=', ' ', 'scanner', '.', 'nextLine', '(', ')', ';', '\n']"
master,7d5f8db85090424157071e75128e21b0cd6ae889,OsInfo.java,isWindows10OrLater,"    public static boolean isWindows10OrLater() {
        return hasTypeAndVersionOrHigher(PlatformEnum.WINDOWS, ""10"");
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7d5f8db85090424157071e75128e21b0cd6ae889,"    public static boolean isWindows10OrLater() {
        return hasTypeAndVersionOrHigher(PlatformEnum.WINDOWS, ""10"");
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isWindows10OrLater', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'hasTypeAndVersionOrHigher', '(', 'PlatformEnum', '.', 'WINDOWS', ',', ' ', '""', '10', '""', ')', ';', '\n', '    ', '}', '\n']"
master,7d5f8db85090424157071e75128e21b0cd6ae889,OsInfo.java,isLinux,"    public static boolean isLinux() {
        return hasType(PlatformEnum.LINUX);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7d5f8db85090424157071e75128e21b0cd6ae889,"    public static boolean isLinux() {
        return hasType(PlatformEnum.LINUX);
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isLinux', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'hasType', '(', 'PlatformEnum', '.', 'LINUX', ')', ';', '\n', '    ', '}', '\n']"
master,7d5f8db85090424157071e75128e21b0cd6ae889,OsInfo.java,isMacOsMojaveOrLater,"    public static boolean isMacOsMojaveOrLater() {
        return hasTypeAndVersionOrHigher(PlatformEnum.MACOSX, ""10.14"");
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7d5f8db85090424157071e75128e21b0cd6ae889,"    public static boolean isMacOsMojaveOrLater() {
        return hasTypeAndVersionOrHigher(PlatformEnum.MACOSX, ""10.14"");
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isMacOsMojaveOrLater', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'hasTypeAndVersionOrHigher', '(', 'PlatformEnum', '.', 'MACOSX', ',', ' ', '""', '10.14', '""', ')', ';', '\n', '    ', '}', '\n']"
master,7d5f8db85090424157071e75128e21b0cd6ae889,OsInfo.java,hasType,"    public static boolean hasType(PlatformEnum platformType) {
        return OsInfo.platformType.equals(platformType);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7d5f8db85090424157071e75128e21b0cd6ae889,"    public static boolean hasType(PlatformEnum platformType) {
        return OsInfo.platformType.equals(platformType);
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'hasType', '(', 'PlatformEnum', ' ', 'platformType', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'platformType', '.', 'equals', '(', 'platformType', ')', ';', '\n', '    ', '}', '\n']"
master,7d5f8db85090424157071e75128e21b0cd6ae889,OsInfo.java,hasVersionOrHigher,"    public static boolean hasVersionOrHigher(String version) {
        return parseVersion(OsInfo.version) >= parseVersion(version);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7d5f8db85090424157071e75128e21b0cd6ae889,"    public static boolean hasVersionOrHigher(String version) {
        return parseVersion(OsInfo.version) >= parseVersion(version);
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'hasVersionOrHigher', '(', 'String', ' ', 'version', ')', ' ', '{', '\n', '        ', 'return', ' ', 'parseVersion', '(', 'OsInfo', '.', 'version', ')', ' ', '>', '=', ' ', 'parseVersion', '(', 'version', ')', ';', '\n', '    ', '}', '\n']"
master,7d5f8db85090424157071e75128e21b0cd6ae889,OsInfo.java,hasTypeAndVersionOrHigher,"    public static boolean hasTypeAndVersionOrHigher(PlatformEnum platformType, String version) {
        return hasType(platformType) && hasVersionOrHigher(version);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7d5f8db85090424157071e75128e21b0cd6ae889,"    public static boolean hasTypeAndVersionOrHigher(PlatformEnum platformType, String version) {
        return hasType(platformType) && hasVersionOrHigher(version);
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'hasTypeAndVersionOrHigher', '(', 'PlatformEnum', ' ', 'platformType', ',', ' ', 'String', ' ', 'version', ')', ' ', '{', '\n', '        ', 'return', ' ', 'hasType', '(', 'platformType', ')', ' ', '&', '&', ' ', 'hasVersionOrHigher', '(', 'version', ')', ';', '\n', '    ', '}', '\n']"
master,7d5f8db85090424157071e75128e21b0cd6ae889,OsInfo.java,parseVersion,"    private static int parseVersion(String version) {
        try {
            return Integer.parseInt(version.replace(""."", """"));",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7d5f8db85090424157071e75128e21b0cd6ae889,"    private static int parseVersion(String version) {
        try {
            return Integer.parseInt(version.replace(""."", """"));
","['    ', 'private', ' ', 'static', ' ', 'int', ' ', 'parseVersion', '(', 'String', ' ', 'version', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'return', ' ', 'Integer', '.', 'parseInt', '(', 'version', '.', 'replace', '(', '""', '.', '""', ',', ' ', '""', '""', ')', ')', ';', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,LinuxThemeDetector.java,isDarkTheme,"    private boolean isDarkTheme(String gtkTheme) {
        return darkThemeNamePattern.matcher(gtkTheme).matches();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    private boolean isDarkTheme(String gtkTheme) {
        return darkThemeNamePattern.matcher(gtkTheme).matches();
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isDarkTheme', '(', 'String', ' ', 'gtkTheme', ')', ' ', '{', '\n', '        ', 'return', ' ', 'darkThemeNamePattern', '.', 'matcher', '(', 'gtkTheme', ')', '.', 'matches', '(', ')', ';', '\n', '    ', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,LinuxThemeDetector.java,registerListener,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        Objects.requireNonNull(darkThemeListener);
        final boolean listenerAdded = listeners.add(darkThemeListener);
        final boolean singleListener = listenerAdded && listeners.size() == 1;
        final boolean threadInterrupted = detectorThread != null && detectorThread.isInterrupted();

        if (singleListener || threadInterrupted) {
            this.detectorThread = new DetectorThread(this);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        Objects.requireNonNull(darkThemeListener);
        final boolean listenerAdded = listeners.add(darkThemeListener);
        final boolean singleListener = listenerAdded && listeners.size() == 1;
        final boolean threadInterrupted = detectorThread != null && detectorThread.isInterrupted();

        if (singleListener || threadInterrupted) {
            this.detectorThread = new DetectorThread(this);
","['    ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'Objects', '.', 'requireNonNull', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'listenerAdded', ' ', '=', ' ', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'singleListener', ' ', '=', ' ', 'listenerAdded', ' ', '&', '&', ' ', 'listeners', '.', 'size', '(', ')', ' ', '=', '=', ' ', '1', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'threadInterrupted', ' ', '=', ' ', 'detectorThread', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'detectorThread', '.', 'isInterrupted', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'singleListener', ' ', '|', '|', ' ', 'threadInterrupted', ')', ' ', '{', '\n', '            ', 'this', '.', 'detectorThread', ' ', '=', ' ', 'new', ' ', 'DetectorThread', '(', 'this', ')', ';', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,LinuxThemeDetector.java,removeListener,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
        if (listeners.isEmpty()) {
            this.detectorThread.interrupt();",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
        if (listeners.isEmpty()) {
            this.detectorThread.interrupt();
","['    ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'if', ' ', '(', 'listeners', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'this', '.', 'detectorThread', '.', 'interrupt', '(', ')', ';', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,LinuxThemeDetector.java,run,"        public void run() {
            try {
                Runtime runtime = Runtime.getRuntime();",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"        public void run() {
            try {
                Runtime runtime = Runtime.getRuntime();
","['        ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '            ', 'try', ' ', '{', '\n', '                ', 'Runtime', ' ', 'runtime', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', ';', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,MacOSThemeDetector.java,callback,"        public void callback() {
            notifyListeners();
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"        public void callback() {
            notifyListeners();
        }
","['        ', 'public', ' ', 'void', ' ', 'callback', '(', ')', ' ', '{', '\n', '            ', 'notifyListeners', '(', ')', ';', '\n', '        ', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,MacOSThemeDetector.java,initObserver,"    private void initObserver() {
        final Foundation.NSAutoreleasePool pool = new Foundation.NSAutoreleasePool();
        try {
            final ID delegateClass = Foundation.allocateObjcClassPair(Foundation.getObjcClass(""NSObject""), ""NSColorChangesObserver"");",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    private void initObserver() {
        final Foundation.NSAutoreleasePool pool = new Foundation.NSAutoreleasePool();
        try {
            final ID delegateClass = Foundation.allocateObjcClassPair(Foundation.getObjcClass(""NSObject""), ""NSColorChangesObserver"");
","['    ', 'private', ' ', 'void', ' ', 'initObserver', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Foundation', '.', 'NSAutoreleasePool', ' ', 'pool', ' ', '=', ' ', 'new', ' ', 'Foundation', '.', 'NSAutoreleasePool', '(', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'ID', ' ', 'delegateClass', ' ', '=', ' ', 'Foundation', '.', 'allocateObjcClassPair', '(', 'Foundation', '.', 'getObjcClass', '(', '""', 'NSObject', '""', ')', ',', ' ', '""', 'NSColorChangesObserver', '""', ')', ';', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,MacOSThemeDetector.java,isDark,"    public boolean isDark() {
        final Foundation.NSAutoreleasePool pool = new Foundation.NSAutoreleasePool();
        try {
            final ID userDefaults = Foundation.invoke(""NSUserDefaults"", ""standardUserDefaults"");
            final String appleInterfaceStyle = Foundation.toStringViaUTF8(Foundation.invoke(userDefaults, ""objectForKey:"", Foundation.nsString(""AppleInterfaceStyle"")));
            return isDarkTheme(appleInterfaceStyle);
        } catch (RuntimeException e) {
            logger.error(""Couldn't execute theme name query with the Os"", e);
        } finally {
            pool.drain();
        }
        return false;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public boolean isDark() {
        final Foundation.NSAutoreleasePool pool = new Foundation.NSAutoreleasePool();
        try {
            final ID userDefaults = Foundation.invoke(""NSUserDefaults"", ""standardUserDefaults"");
            final String appleInterfaceStyle = Foundation.toStringViaUTF8(Foundation.invoke(userDefaults, ""objectForKey:"", Foundation.nsString(""AppleInterfaceStyle"")));
            return isDarkTheme(appleInterfaceStyle);
        } catch (RuntimeException e) {
            logger.error(""Couldn't execute theme name query with the Os"", e);
        } finally {
            pool.drain();
        }
        return false;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'Foundation', '.', 'NSAutoreleasePool', ' ', 'pool', ' ', '=', ' ', 'new', ' ', 'Foundation', '.', 'NSAutoreleasePool', '(', ')', ';', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'final', ' ', 'ID', ' ', 'userDefaults', ' ', '=', ' ', 'Foundation', '.', 'invoke', '(', '""', 'NSUserDefaults', '""', ',', ' ', '""', 'standardUserDefaults', '""', ')', ';', '\n', '            ', 'final', ' ', 'String', ' ', 'appleInterfaceStyle', ' ', '=', ' ', 'Foundation', '.', 'toStringViaUTF8', '(', 'Foundation', '.', 'invoke', '(', 'userDefaults', ',', ' ', '""', 'objectForKey:', '""', ',', ' ', 'Foundation', '.', 'nsString', '(', '""', 'AppleInterfaceStyle', '""', ')', ')', ')', ';', '\n', '            ', 'return', ' ', 'isDarkTheme', '(', 'appleInterfaceStyle', ')', ';', '\n', '        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '            ', 'logger', '.', 'error', '(', '""', ""Couldn't execute theme name query with the Os"", '""', ',', ' ', 'e', ')', ';', '\n', '        ', '}', ' ', 'finally', ' ', '{', '\n', '            ', 'pool', '.', 'drain', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'false', ';', '\n', '    ', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,MacOSThemeDetector.java,isDarkTheme,"    private boolean isDarkTheme(String themeName) {
        return themeNamePattern.matcher(themeName).matches();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    private boolean isDarkTheme(String themeName) {
        return themeNamePattern.matcher(themeName).matches();
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isDarkTheme', '(', 'String', ' ', 'themeName', ')', ' ', '{', '\n', '        ', 'return', ' ', 'themeNamePattern', '.', 'matcher', '(', 'themeName', ')', '.', 'matches', '(', ')', ';', '\n', '    ', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,MacOSThemeDetector.java,registerListener,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        listeners.add(darkThemeListener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        listeners.add(darkThemeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ';', '\n', '    ', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,MacOSThemeDetector.java,removeListener,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n', '    ', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,MacOSThemeDetector.java,notifyListeners,"    private void notifyListeners() {
        listeners.forEach(listener -> listener.accept(isDark()));
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    private void notifyListeners() {
        listeners.forEach(listener -> listener.accept(isDark()));
    }
","['    ', 'private', ' ', 'void', ' ', 'notifyListeners', '(', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'forEach', '(', 'listener', ' ', '-', '>', ' ', 'listener', '.', 'accept', '(', 'isDark', '(', ')', ')', ')', ';', '\n', '    ', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,OsThemeDetector.java,isDark,"    public abstract boolean isDark();

    /**
     * Registers a {@link Consumer} that will listen to a theme-change.
     *
     * @param darkThemeListener the {@link Consumer} that accepts a {@link Boolean} that represents
     *                          that the os using a dark theme or not
     */
    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    /**
     * Removes the listener.
     */
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);


    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public abstract boolean isDark();

    
    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);


    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'isDark', '(', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,OsThemeDetector.java,registerListener,"    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    /**
     * Removes the listener.
     */
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);


    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);


    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,OsThemeDetector.java,removeListener,"    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);


    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);


    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,OsThemeDetector.java,registerListener,"        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,OsThemeDetector.java,removeListener,"        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,WindowsThemeDetector.java,isDark,"    public boolean isDark() {
        return Advapi32Util.registryValueExists(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, REGISTRY_VALUE) &&
                Advapi32Util.registryGetIntValue(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, REGISTRY_VALUE) == 0;",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"    public boolean isDark() {
        return Advapi32Util.registryValueExists(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, REGISTRY_VALUE) &&
                Advapi32Util.registryGetIntValue(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, REGISTRY_VALUE) == 0;
","['    ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Advapi32Util', '.', 'registryValueExists', '(', 'WinReg', '.', 'HKEY_CURRENT_USER', ',', ' ', 'REGISTRY_PATH', ',', ' ', 'REGISTRY_VALUE', ')', ' ', '&', '&', '\n', '                ', 'Advapi32Util', '.', 'registryGetIntValue', '(', 'WinReg', '.', 'HKEY_CURRENT_USER', ',', ' ', 'REGISTRY_PATH', ',', ' ', 'REGISTRY_VALUE', ')', ' ', '=', '=', ' ', '0', ';', '\n']"
master,2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,WindowsThemeDetector.java,run,"        public void run() {
            while (!this.isInterrupted()) {
                boolean currentDetection = themeDetector.isDark();",https://www.github.com/dansoftowner/jsystemthemedetector/commit/2ebeaeedf89c04fc4330d8a0010daa9328dd99d2,"        public void run() {
            while (!this.isInterrupted()) {
                boolean currentDetection = themeDetector.isDark();
","['        ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '            ', 'while', ' ', '(', '!', 'this', '.', 'isInterrupted', '(', ')', ')', ' ', '{', '\n', '                ', 'boolean', ' ', 'currentDetection', ' ', '=', ' ', 'themeDetector', '.', 'isDark', '(', ')', ';', '\n']"
master,daa0d527c23a3e35eb1f3c641cd0c7a135c01bc8,OsThemeDetectorDemo.java,main,"    public static void main(String[] args) {
        final OsThemeDetector detector = OsThemeDetector.getDetector();
        System.out.println(detector.isDark());
        detector.registerListener(isDark -> System.out.println(""OS is dark: "" + isDark));

        System.out.println(""Listening to system ui theme change... (Press E for exit)"");
        Scanner scanner = new Scanner(System.in);
        while(!scanner.nextLine().toLowerCase().startsWith(""e""));
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/daa0d527c23a3e35eb1f3c641cd0c7a135c01bc8,"    public static void main(String[] args) {
        final OsThemeDetector detector = OsThemeDetector.getDetector();
        System.out.println(detector.isDark());
        detector.registerListener(isDark -> System.out.println(""OS is dark: "" + isDark));

        System.out.println(""Listening to system ui theme change... (Press E for exit)"");
        Scanner scanner = new Scanner(System.in);
        while(!scanner.nextLine().toLowerCase().startsWith(""e""));
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'final', ' ', 'OsThemeDetector', ' ', 'detector', ' ', '=', ' ', 'OsThemeDetector', '.', 'getDetector', '(', ')', ';', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', 'detector', '.', 'isDark', '(', ')', ')', ';', '\n', '        ', 'detector', '.', 'registerListener', '(', 'isDark', ' ', '-', '>', ' ', 'System', '.', 'out', '.', 'println', '(', '""', 'OS is dark: ', '""', ' ', '+', ' ', 'isDark', ')', ')', ';', '\n', '\n', '        ', 'System', '.', 'out', '.', 'println', '(', '""', 'Listening to system ui theme change... (Press E for exit)', '""', ')', ';', '\n', '        ', 'Scanner', ' ', 'scanner', ' ', '=', ' ', 'new', ' ', 'Scanner', '(', 'System', '.', 'in', ')', ';', '\n', '        ', 'while', '(', '!', 'scanner', '.', 'nextLine', '(', ')', '.', 'toLowerCase', '(', ')', '.', 'startsWith', '(', '""', 'e', '""', ')', ')', ';', '\n', '    ', '}', '\n']"
master,ffc87dd857c40f5d05a32b448fdc89383dff72a3,GuiDemo.java,start,"    public void start(Stage stage) {
        StringProperty labelValue = new SimpleStringProperty();

        stage.setScene(new Scene(buildRoot(labelValue)));
        stage.setWidth(800);
        stage.setHeight(600);
        stage.setTitle(""Dark theme detection"");
        stage.show();

        final OsThemeDetector detector = OsThemeDetector.getDetector();
        Consumer<Boolean> darkThemeListener = isDark -> {
            Platform.runLater(() -> {
                if (isDark) {
                    stage.getScene().getRoot().setStyle(""-fx-base: #000000"");
                    labelValue.set(""The OS uses DARK THEME"");
                } else {
                    stage.getScene().getRoot().setStyle(""-fx-base: #d7d7d7"");
                    labelValue.set(""The OS uses LIGHT THEME"");
                }
            });
        };
        darkThemeListener.accept(detector.isDark());
        detector.registerListener(darkThemeListener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/ffc87dd857c40f5d05a32b448fdc89383dff72a3,"    public void start(Stage stage) {
        StringProperty labelValue = new SimpleStringProperty();

        stage.setScene(new Scene(buildRoot(labelValue)));
        stage.setWidth(800);
        stage.setHeight(600);
        stage.setTitle(""Dark theme detection"");
        stage.show();

        final OsThemeDetector detector = OsThemeDetector.getDetector();
        Consumer<Boolean> darkThemeListener = isDark -> {
            Platform.runLater(() -> {
                if (isDark) {
                    stage.getScene().getRoot().setStyle(""-fx-base: #000000"");
                    labelValue.set(""The OS uses DARK THEME"");
                } else {
                    stage.getScene().getRoot().setStyle(""-fx-base: #d7d7d7"");
                    labelValue.set(""The OS uses LIGHT THEME"");
                }
            });
        };
        darkThemeListener.accept(detector.isDark());
        detector.registerListener(darkThemeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'start', '(', 'Stage', ' ', 'stage', ')', ' ', '{', '\n', '        ', 'StringProperty', ' ', 'labelValue', ' ', '=', ' ', 'new', ' ', 'SimpleStringProperty', '(', ')', ';', '\n', '\n', '        ', 'stage', '.', 'setScene', '(', 'new', ' ', 'Scene', '(', 'buildRoot', '(', 'labelValue', ')', ')', ')', ';', '\n', '        ', 'stage', '.', 'setWidth', '(', '800', ')', ';', '\n', '        ', 'stage', '.', 'setHeight', '(', '600', ')', ';', '\n', '        ', 'stage', '.', 'setTitle', '(', '""', 'Dark theme detection', '""', ')', ';', '\n', '        ', 'stage', '.', 'show', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'OsThemeDetector', ' ', 'detector', ' ', '=', ' ', 'OsThemeDetector', '.', 'getDetector', '(', ')', ';', '\n', '        ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ' ', '=', ' ', 'isDark', ' ', '-', '>', ' ', '{', '\n', '            ', 'Platform', '.', 'runLater', '(', '(', ')', ' ', '-', '>', ' ', '{', '\n', '                ', 'if', ' ', '(', 'isDark', ')', ' ', '{', '\n', '                    ', 'stage', '.', 'getScene', '(', ')', '.', 'getRoot', '(', ')', '.', 'setStyle', '(', '""', '-fx-base: #000000', '""', ')', ';', '\n', '                    ', 'labelValue', '.', 'set', '(', '""', 'The OS uses DARK THEME', '""', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'stage', '.', 'getScene', '(', ')', '.', 'getRoot', '(', ')', '.', 'setStyle', '(', '""', '-fx-base: #d7d7d7', '""', ')', ';', '\n', '                    ', 'labelValue', '.', 'set', '(', '""', 'The OS uses LIGHT THEME', '""', ')', ';', '\n', '                ', '}', '\n', '            ', '}', ')', ';', '\n', '        ', '}', ';', '\n', '        ', 'darkThemeListener', '.', 'accept', '(', 'detector', '.', 'isDark', '(', ')', ')', ';', '\n', '        ', 'detector', '.', 'registerListener', '(', 'darkThemeListener', ')', ';', '\n', '    ', '}', '\n']"
master,ffc87dd857c40f5d05a32b448fdc89383dff72a3,GuiDemo.java,buildRoot,"    private Parent buildRoot(StringProperty labelValue) {
        Label label = new Label();
        label.textProperty().bind(labelValue);
        label.setFont(Font.font(50));
        return new StackPane(label);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/ffc87dd857c40f5d05a32b448fdc89383dff72a3,"    private Parent buildRoot(StringProperty labelValue) {
        Label label = new Label();
        label.textProperty().bind(labelValue);
        label.setFont(Font.font(50));
        return new StackPane(label);
    }
","['    ', 'private', ' ', 'Parent', ' ', 'buildRoot', '(', 'StringProperty', ' ', 'labelValue', ')', ' ', '{', '\n', '        ', 'Label', ' ', 'label', ' ', '=', ' ', 'new', ' ', 'Label', '(', ')', ';', '\n', '        ', 'label', '.', 'textProperty', '(', ')', '.', 'bind', '(', 'labelValue', ')', ';', '\n', '        ', 'label', '.', 'setFont', '(', 'Font', '.', 'font', '(', '50', ')', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'StackPane', '(', 'label', ')', ';', '\n', '    ', '}', '\n']"
master,ffc87dd857c40f5d05a32b448fdc89383dff72a3,GuiDemo.java,main,"    public static void main(String[] args) {
        launch(args);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/ffc87dd857c40f5d05a32b448fdc89383dff72a3,"    public static void main(String[] args) {
        launch(args);
    }
","['    ', 'public', ' ', 'static', ' ', 'void', ' ', 'main', '(', 'String', '[', ']', ' ', 'args', ')', ' ', '{', '\n', '        ', 'launch', '(', 'args', ')', ';', '\n', '    ', '}', '\n']"
master,acbe277ae1bf4a247d4894fb6d205e1078ecd05b,GuiDemo.java,start,"    public void start(Stage stage) {
        StringProperty labelValue = new SimpleStringProperty();

        stage.setScene(new Scene(buildRoot(labelValue)));
        stage.setWidth(WINDOW_WIDTH);
        stage.setHeight(WINDOW_HEIGHT);
        stage.setTitle(WINDOW_TITLE);
        stage.show();

        final OsThemeDetector detector = OsThemeDetector.getDetector();
        Consumer<Boolean> darkThemeListener = isDark -> {
            Platform.runLater(() -> {
                if (isDark) {
                    stage.getScene().getRoot().setStyle(DARK_STYLE);
                    labelValue.set(DARK_THEME_LABEL);
                } else {
                    stage.getScene().getRoot().setStyle(LIGHT_STYLE);
                    labelValue.set(LIGHT_THEME_LABEL);
                }
            });
        };
        darkThemeListener.accept(detector.isDark());
        detector.registerListener(darkThemeListener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/acbe277ae1bf4a247d4894fb6d205e1078ecd05b,"    public void start(Stage stage) {
        StringProperty labelValue = new SimpleStringProperty();

        stage.setScene(new Scene(buildRoot(labelValue)));
        stage.setWidth(WINDOW_WIDTH);
        stage.setHeight(WINDOW_HEIGHT);
        stage.setTitle(WINDOW_TITLE);
        stage.show();

        final OsThemeDetector detector = OsThemeDetector.getDetector();
        Consumer<Boolean> darkThemeListener = isDark -> {
            Platform.runLater(() -> {
                if (isDark) {
                    stage.getScene().getRoot().setStyle(DARK_STYLE);
                    labelValue.set(DARK_THEME_LABEL);
                } else {
                    stage.getScene().getRoot().setStyle(LIGHT_STYLE);
                    labelValue.set(LIGHT_THEME_LABEL);
                }
            });
        };
        darkThemeListener.accept(detector.isDark());
        detector.registerListener(darkThemeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'start', '(', 'Stage', ' ', 'stage', ')', ' ', '{', '\n', '        ', 'StringProperty', ' ', 'labelValue', ' ', '=', ' ', 'new', ' ', 'SimpleStringProperty', '(', ')', ';', '\n', '\n', '        ', 'stage', '.', 'setScene', '(', 'new', ' ', 'Scene', '(', 'buildRoot', '(', 'labelValue', ')', ')', ')', ';', '\n', '        ', 'stage', '.', 'setWidth', '(', 'WINDOW_WIDTH', ')', ';', '\n', '        ', 'stage', '.', 'setHeight', '(', 'WINDOW_HEIGHT', ')', ';', '\n', '        ', 'stage', '.', 'setTitle', '(', 'WINDOW_TITLE', ')', ';', '\n', '        ', 'stage', '.', 'show', '(', ')', ';', '\n', '\n', '        ', 'final', ' ', 'OsThemeDetector', ' ', 'detector', ' ', '=', ' ', 'OsThemeDetector', '.', 'getDetector', '(', ')', ';', '\n', '        ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ' ', '=', ' ', 'isDark', ' ', '-', '>', ' ', '{', '\n', '            ', 'Platform', '.', 'runLater', '(', '(', ')', ' ', '-', '>', ' ', '{', '\n', '                ', 'if', ' ', '(', 'isDark', ')', ' ', '{', '\n', '                    ', 'stage', '.', 'getScene', '(', ')', '.', 'getRoot', '(', ')', '.', 'setStyle', '(', 'DARK_STYLE', ')', ';', '\n', '                    ', 'labelValue', '.', 'set', '(', 'DARK_THEME_LABEL', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'stage', '.', 'getScene', '(', ')', '.', 'getRoot', '(', ')', '.', 'setStyle', '(', 'LIGHT_STYLE', ')', ';', '\n', '                    ', 'labelValue', '.', 'set', '(', 'LIGHT_THEME_LABEL', ')', ';', '\n', '                ', '}', '\n', '            ', '}', ')', ';', '\n', '        ', '}', ';', '\n', '        ', 'darkThemeListener', '.', 'accept', '(', 'detector', '.', 'isDark', '(', ')', ')', ';', '\n', '        ', 'detector', '.', 'registerListener', '(', 'darkThemeListener', ')', ';', '\n', '    ', '}', '\n']"
master,acbe277ae1bf4a247d4894fb6d205e1078ecd05b,GuiDemo.java,buildRoot,"    private Parent buildRoot(StringProperty labelValue) {
        Label label = new Label();
        label.textProperty().bind(labelValue);
        label.setFont(Font.font(FONT_SIZE));
        return new StackPane(label);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/acbe277ae1bf4a247d4894fb6d205e1078ecd05b,"    private Parent buildRoot(StringProperty labelValue) {
        Label label = new Label();
        label.textProperty().bind(labelValue);
        label.setFont(Font.font(FONT_SIZE));
        return new StackPane(label);
    }
","['    ', 'private', ' ', 'Parent', ' ', 'buildRoot', '(', 'StringProperty', ' ', 'labelValue', ')', ' ', '{', '\n', '        ', 'Label', ' ', 'label', ' ', '=', ' ', 'new', ' ', 'Label', '(', ')', ';', '\n', '        ', 'label', '.', 'textProperty', '(', ')', '.', 'bind', '(', 'labelValue', ')', ';', '\n', '        ', 'label', '.', 'setFont', '(', 'Font', '.', 'font', '(', 'FONT_SIZE', ')', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'StackPane', '(', 'label', ')', ';', '\n', '    ', '}', '\n']"
master,835cc370e61f03ec1adbba39a328750eafb88df5,LinuxThemeDetector.java,registerListener,"    public synchronized void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        Objects.requireNonNull(darkThemeListener);
        final boolean listenerAdded = listeners.add(darkThemeListener);
        final boolean singleListener = listenerAdded && listeners.size() == 1;
        final boolean threadInterrupted = detectorThread != null && detectorThread.isInterrupted();

        if (singleListener || threadInterrupted) {
            this.detectorThread = new DetectorThread(this);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/835cc370e61f03ec1adbba39a328750eafb88df5,"    public synchronized void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        Objects.requireNonNull(darkThemeListener);
        final boolean listenerAdded = listeners.add(darkThemeListener);
        final boolean singleListener = listenerAdded && listeners.size() == 1;
        final boolean threadInterrupted = detectorThread != null && detectorThread.isInterrupted();

        if (singleListener || threadInterrupted) {
            this.detectorThread = new DetectorThread(this);
","['    ', 'public', ' ', 'synchronized', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'Objects', '.', 'requireNonNull', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'listenerAdded', ' ', '=', ' ', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'singleListener', ' ', '=', ' ', 'listenerAdded', ' ', '&', '&', ' ', 'listeners', '.', 'size', '(', ')', ' ', '=', '=', ' ', '1', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'threadInterrupted', ' ', '=', ' ', 'detectorThread', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'detectorThread', '.', 'isInterrupted', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'singleListener', ' ', '|', '|', ' ', 'threadInterrupted', ')', ' ', '{', '\n', '            ', 'this', '.', 'detectorThread', ' ', '=', ' ', 'new', ' ', 'DetectorThread', '(', 'this', ')', ';', '\n']"
master,835cc370e61f03ec1adbba39a328750eafb88df5,LinuxThemeDetector.java,removeListener,"    public synchronized void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
        if (listeners.isEmpty()) {
            this.detectorThread.interrupt();",https://www.github.com/dansoftowner/jsystemthemedetector/commit/835cc370e61f03ec1adbba39a328750eafb88df5,"    public synchronized void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
        if (listeners.isEmpty()) {
            this.detectorThread.interrupt();
","['    ', 'public', ' ', 'synchronized', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'if', ' ', '(', 'listeners', '.', 'isEmpty', '(', ')', ')', ' ', '{', '\n', '            ', 'this', '.', 'detectorThread', '.', 'interrupt', '(', ')', ';', '\n']"
master,835cc370e61f03ec1adbba39a328750eafb88df5,MacOSThemeDetector.java,registerListener,"    public synchronized void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        listeners.add(darkThemeListener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/835cc370e61f03ec1adbba39a328750eafb88df5,"    public synchronized void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        listeners.add(darkThemeListener);
    }
","['    ', 'public', ' ', 'synchronized', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ';', '\n', '    ', '}', '\n']"
master,835cc370e61f03ec1adbba39a328750eafb88df5,MacOSThemeDetector.java,removeListener,"    public synchronized void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/835cc370e61f03ec1adbba39a328750eafb88df5,"    public synchronized void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        listeners.remove(darkThemeListener);
    }
","['    ', 'public', ' ', 'synchronized', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n', '    ', '}', '\n']"
master,69c2318b4da9ac5964177f686ad2f5afe28d422d,MacOSThemeDetector.java,notifyListeners,"    private void notifyListeners() {
        final var isDark = isDark();
        listeners.forEach(listener -> listener.accept(isDark));
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/69c2318b4da9ac5964177f686ad2f5afe28d422d,"    private void notifyListeners() {
        final var isDark = isDark();
        listeners.forEach(listener -> listener.accept(isDark));
    }
","['    ', 'private', ' ', 'void', ' ', 'notifyListeners', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'var', ' ', 'isDark', ' ', '=', ' ', 'isDark', '(', ')', ';', '\n', '        ', 'listeners', '.', 'forEach', '(', 'listener', ' ', '-', '>', ' ', 'listener', '.', 'accept', '(', 'isDark', ')', ')', ';', '\n', '    ', '}', '\n']"
master,bf291cbe49486cb2c9339fba44491f8bbf6c1980,MacOSThemeDetector.java,callback,"        public void callback() {
            notifyListeners(isDark());
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/bf291cbe49486cb2c9339fba44491f8bbf6c1980,"        public void callback() {
            notifyListeners(isDark());
        }
","['        ', 'public', ' ', 'void', ' ', 'callback', '(', ')', ' ', '{', '\n', '            ', 'notifyListeners', '(', 'isDark', '(', ')', ')', ';', '\n', '        ', '}', '\n']"
master,bf291cbe49486cb2c9339fba44491f8bbf6c1980,MacOSThemeDetector.java,notifyListeners,"    private void notifyListeners(boolean isDark) {
        listeners.forEach(listener -> listener.accept(isDark));
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/bf291cbe49486cb2c9339fba44491f8bbf6c1980,"    private void notifyListeners(boolean isDark) {
        listeners.forEach(listener -> listener.accept(isDark));
    }
","['    ', 'private', ' ', 'void', ' ', 'notifyListeners', '(', 'boolean', ' ', 'isDark', ')', ' ', '{', '\n', '        ', 'listeners', '.', 'forEach', '(', 'listener', ' ', '-', '>', ' ', 'listener', '.', 'accept', '(', 'isDark', ')', ')', ';', '\n', '    ', '}', '\n']"
master,059009d71539dd60fc63d256bcd33bde4be0ade2,OsThemeDetector.java,logDetection,"    private static void logDetection(String desktop, Class<? extends OsThemeDetector> detectorClass) {
        logger.debug(""Supported Desktop detected: {}"", desktop);
        logger.debug(""Creating {}..."", detectorClass.getName());
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/059009d71539dd60fc63d256bcd33bde4be0ade2,"    private static void logDetection(String desktop, Class<? extends OsThemeDetector> detectorClass) {
        logger.debug(""Supported Desktop detected: {}"", desktop);
        logger.debug(""Creating {}..."", detectorClass.getName());
    }
","['    ', 'private', ' ', 'static', ' ', 'void', ' ', 'logDetection', '(', 'String', ' ', 'desktop', ',', ' ', 'Class', '<', '?', ' ', 'extends', ' ', 'OsThemeDetector', '>', ' ', 'detectorClass', ')', ' ', '{', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Supported Desktop detected: {}', '""', ',', ' ', 'desktop', ')', ';', '\n', '        ', 'logger', '.', 'debug', '(', '""', 'Creating {}...', '""', ',', ' ', 'detectorClass', '.', 'getName', '(', ')', ')', ';', '\n', '    ', '}', '\n']"
master,059009d71539dd60fc63d256bcd33bde4be0ade2,OsInfo.java,isGnome,"    public static boolean isGnome() {
        return isLinux() && (
                        queryResultContains(""echo $XDG_CURRENT_DESKTOP"", ""gnome"") ||",https://www.github.com/dansoftowner/jsystemthemedetector/commit/059009d71539dd60fc63d256bcd33bde4be0ade2,"    public static boolean isGnome() {
        return isLinux() && (
                        queryResultContains(""echo $XDG_CURRENT_DESKTOP"", ""gnome"") ||
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isGnome', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'isLinux', '(', ')', ' ', '&', '&', ' ', '(', '\n', '                        ', 'queryResultContains', '(', '""', 'echo $XDG_CURRENT_DESKTOP', '""', ',', ' ', '""', 'gnome', '""', ')', ' ', '|', '|', '\n']"
master,059009d71539dd60fc63d256bcd33bde4be0ade2,OsInfo.java,queryResultContains,"    private static boolean queryResultContains(@NotNull String cmd, @NotNull String subResult) {
        return query(cmd).toLowerCase().contains(subResult);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/059009d71539dd60fc63d256bcd33bde4be0ade2,"    private static boolean queryResultContains(@NotNull String cmd, @NotNull String subResult) {
        return query(cmd).toLowerCase().contains(subResult);
    }
","['    ', 'private', ' ', 'static', ' ', 'boolean', ' ', 'queryResultContains', '(', '@NotNull', ' ', 'String', ' ', 'cmd', ',', ' ', '@NotNull', ' ', 'String', ' ', 'subResult', ')', ' ', '{', '\n', '        ', 'return', ' ', 'query', '(', 'cmd', ')', '.', 'toLowerCase', '(', ')', '.', 'contains', '(', 'subResult', ')', ';', '\n', '    ', '}', '\n']"
master,059009d71539dd60fc63d256bcd33bde4be0ade2,OsInfo.java,query,"    private static String query(@NotNull String cmd) {
        try {
            Process process = Runtime.getRuntime().exec(cmd);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/059009d71539dd60fc63d256bcd33bde4be0ade2,"    private static String query(@NotNull String cmd) {
        try {
            Process process = Runtime.getRuntime().exec(cmd);
","['    ', 'private', ' ', 'static', ' ', 'String', ' ', 'query', '(', '@NotNull', ' ', 'String', ' ', 'cmd', ')', ' ', '{', '\n', '        ', 'try', ' ', '{', '\n', '            ', 'Process', ' ', 'process', ' ', '=', ' ', 'Runtime', '.', 'getRuntime', '(', ')', '.', 'exec', '(', 'cmd', ')', ';', '\n']"
master,80bbb312050b3ca0abe7df4d273e26a90b373b13,OsThemeDetector.java,isDark,"    public abstract boolean isDark();

    /**
     * Registers a {@link Consumer} that will listen to a theme-change.
     *
     * @param darkThemeListener the {@link Consumer} that accepts a {@link Boolean} that represents
     *                          that the os using a dark theme or not
     */
    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    /**
     * Removes the listener.
     */
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/80bbb312050b3ca0abe7df4d273e26a90b373b13,"    public abstract boolean isDark();

    
    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'isDark', '(', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isSupported', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isMacOsMojaveOrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isGnome', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,80bbb312050b3ca0abe7df4d273e26a90b373b13,OsThemeDetector.java,registerListener,"    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    /**
     * Removes the listener.
     */
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/80bbb312050b3ca0abe7df4d273e26a90b373b13,"    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isSupported', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isMacOsMojaveOrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isGnome', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,80bbb312050b3ca0abe7df4d273e26a90b373b13,OsThemeDetector.java,removeListener,"    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/80bbb312050b3ca0abe7df4d273e26a90b373b13,"    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isSupported', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isMacOsMojaveOrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isGnome', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,80bbb312050b3ca0abe7df4d273e26a90b373b13,OsThemeDetector.java,isSupported,"    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/80bbb312050b3ca0abe7df4d273e26a90b373b13,"    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isSupported', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isMacOsMojaveOrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isGnome', '(', ')', ';', '\n', '    ', '}', '\n']"
master,bb40a52e8468a46c0d91b5b1b3336fe3f388bca9,MacOSThemeDetector.java,callback,"        public void callback() {
            synchronized (iterateLock) {
                notifyListeners(isDark());",https://www.github.com/dansoftowner/jsystemthemedetector/commit/bb40a52e8468a46c0d91b5b1b3336fe3f388bca9,"        public void callback() {
            synchronized (iterateLock) {
                notifyListeners(isDark());
","['        ', 'public', ' ', 'void', ' ', 'callback', '(', ')', ' ', '{', '\n', '            ', 'synchronized', ' ', '(', 'iterateLock', ')', ' ', '{', '\n', '                ', 'notifyListeners', '(', 'isDark', '(', ')', ')', ';', '\n']"
master,bb40a52e8468a46c0d91b5b1b3336fe3f388bca9,MacOSThemeDetector.java,registerListener,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        synchronized (iterateLock) {
            listeners.add(darkThemeListener);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/bb40a52e8468a46c0d91b5b1b3336fe3f388bca9,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        synchronized (iterateLock) {
            listeners.add(darkThemeListener);
","['    ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'synchronized', ' ', '(', 'iterateLock', ')', ' ', '{', '\n', '            ', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ';', '\n']"
master,bb40a52e8468a46c0d91b5b1b3336fe3f388bca9,MacOSThemeDetector.java,removeListener,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        synchronized (iterateLock) {
            listeners.remove(darkThemeListener);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/bb40a52e8468a46c0d91b5b1b3336fe3f388bca9,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        synchronized (iterateLock) {
            listeners.remove(darkThemeListener);
","['    ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'synchronized', ' ', '(', 'iterateLock', ')', ' ', '{', '\n', '            ', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n']"
master,dec4722b70f899f4a764518bbbe30af741258f48,MacOSThemeDetector.java,callback,"        public void callback() {
            synchronized (listeners) {
                notifyListeners(isDark());",https://www.github.com/dansoftowner/jsystemthemedetector/commit/dec4722b70f899f4a764518bbbe30af741258f48,"        public void callback() {
            synchronized (listeners) {
                notifyListeners(isDark());
","['        ', 'public', ' ', 'void', ' ', 'callback', '(', ')', ' ', '{', '\n', '            ', 'synchronized', ' ', '(', 'listeners', ')', ' ', '{', '\n', '                ', 'notifyListeners', '(', 'isDark', '(', ')', ')', ';', '\n']"
master,dec4722b70f899f4a764518bbbe30af741258f48,MacOSThemeDetector.java,registerListener,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        synchronized (listeners) {
            listeners.add(darkThemeListener);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/dec4722b70f899f4a764518bbbe30af741258f48,"    public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        synchronized (listeners) {
            listeners.add(darkThemeListener);
","['    ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'synchronized', ' ', '(', 'listeners', ')', ' ', '{', '\n', '            ', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ';', '\n']"
master,dec4722b70f899f4a764518bbbe30af741258f48,MacOSThemeDetector.java,removeListener,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        synchronized (listeners) {
            listeners.remove(darkThemeListener);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/dec4722b70f899f4a764518bbbe30af741258f48,"    public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        synchronized (listeners) {
            listeners.remove(darkThemeListener);
","['    ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'synchronized', ' ', '(', 'listeners', ')', ' ', '{', '\n', '            ', 'listeners', '.', 'remove', '(', 'darkThemeListener', ')', ';', '\n']"
master,d17ccca31ea966bdd8d48b9474d83522b5af30c0,OsInfo.java,isMacOsMojaveOrLater,"    public static boolean isMacOsMojaveOrLater() {
        return hasTypeAndVersionOrHigher(PlatformEnum.MACOS, ""10.14"");
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d17ccca31ea966bdd8d48b9474d83522b5af30c0,"    public static boolean isMacOsMojaveOrLater() {
        return hasTypeAndVersionOrHigher(PlatformEnum.MACOS, ""10.14"");
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isMacOsMojaveOrLater', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'hasTypeAndVersionOrHigher', '(', 'PlatformEnum', '.', 'MACOS', ',', ' ', '""', '10.14', '""', ')', ';', '\n', '    ', '}', '\n']"
master,d17ccca31ea966bdd8d48b9474d83522b5af30c0,OsInfo.java,isVersionAtLeast,"    public static boolean isVersionAtLeast(String version) {
        return new Version(OsInfo.version).isAtLeast(version);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d17ccca31ea966bdd8d48b9474d83522b5af30c0,"    public static boolean isVersionAtLeast(String version) {
        return new Version(OsInfo.version).isAtLeast(version);
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isVersionAtLeast', '(', 'String', ' ', 'version', ')', ' ', '{', '\n', '        ', 'return', ' ', 'new', ' ', 'Version', '(', 'OsInfo', '.', 'version', ')', '.', 'isAtLeast', '(', 'version', ')', ';', '\n', '    ', '}', '\n']"
master,d17ccca31ea966bdd8d48b9474d83522b5af30c0,OsInfo.java,hasTypeAndVersionOrHigher,"    public static boolean hasTypeAndVersionOrHigher(PlatformEnum platformType, String version) {
        return hasType(platformType) && isVersionAtLeast(version);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/d17ccca31ea966bdd8d48b9474d83522b5af30c0,"    public static boolean hasTypeAndVersionOrHigher(PlatformEnum platformType, String version) {
        return hasType(platformType) && isVersionAtLeast(version);
    }
","['    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'hasTypeAndVersionOrHigher', '(', 'PlatformEnum', ' ', 'platformType', ',', ' ', 'String', ' ', 'version', ')', ' ', '{', '\n', '        ', 'return', ' ', 'hasType', '(', 'platformType', ')', ' ', '&', '&', ' ', 'isVersionAtLeast', '(', 'version', ')', ';', '\n', '    ', '}', '\n']"
master,7f7616394b2db8ae1cc6c630a3da72bb6a310a79,MacOSThemeDetector.java,callback,"        public void callback() {
            callbackExecutor.execute(() -> notifyListeners(isDark()));
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/7f7616394b2db8ae1cc6c630a3da72bb6a310a79,"        public void callback() {
            callbackExecutor.execute(() -> notifyListeners(isDark()));
        }
","['        ', 'public', ' ', 'void', ' ', 'callback', '(', ')', ' ', '{', '\n', '            ', 'callbackExecutor', '.', 'execute', '(', '(', ')', ' ', '-', '>', ' ', 'notifyListeners', '(', 'isDark', '(', ')', ')', ')', ';', '\n', '        ', '}', '\n']"
master,1f97041494c5313edf904e7c2082624bb38df931,WindowsThemeDetector.java,run,"        public void run() {
            WinReg.HKEYByReference hkey = new WinReg.HKEYByReference();
            int err = Advapi32.INSTANCE.RegOpenKeyEx(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, 0, WinNT.KEY_READ, hkey);
            if (err != W32Errors.ERROR_SUCCESS) {
                throw new Win32Exception(err);
            }

            while (!this.isInterrupted()) {
                err = Advapi32.INSTANCE.RegNotifyChangeKeyValue(hkey.getValue(), false, WinNT.REG_NOTIFY_CHANGE_LAST_SET, null, false);
                if (err != W32Errors.ERROR_SUCCESS) {
                    throw new Win32Exception(err);
                }

                boolean currentDetection = themeDetector.isDark();
                if (currentDetection != this.lastValue) {
                    lastValue = currentDetection;
                    logger.debug(""Theme change detected: dark: {}"", currentDetection);
                    for (Consumer<Boolean> listener : themeDetector.listeners) {
                        try {
                            listener.accept(currentDetection);
                        } catch (RuntimeException e) {
                            logger.error(""Caught exception during listener notifying "", e);
                        }
                    }
                }
            }
            Advapi32Util.registryCloseKey(hkey.getValue());
        }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/1f97041494c5313edf904e7c2082624bb38df931,"        public void run() {
            WinReg.HKEYByReference hkey = new WinReg.HKEYByReference();
            int err = Advapi32.INSTANCE.RegOpenKeyEx(WinReg.HKEY_CURRENT_USER, REGISTRY_PATH, 0, WinNT.KEY_READ, hkey);
            if (err != W32Errors.ERROR_SUCCESS) {
                throw new Win32Exception(err);
            }

            while (!this.isInterrupted()) {
                err = Advapi32.INSTANCE.RegNotifyChangeKeyValue(hkey.getValue(), false, WinNT.REG_NOTIFY_CHANGE_LAST_SET, null, false);
                if (err != W32Errors.ERROR_SUCCESS) {
                    throw new Win32Exception(err);
                }

                boolean currentDetection = themeDetector.isDark();
                if (currentDetection != this.lastValue) {
                    lastValue = currentDetection;
                    logger.debug(""Theme change detected: dark: {}"", currentDetection);
                    for (Consumer<Boolean> listener : themeDetector.listeners) {
                        try {
                            listener.accept(currentDetection);
                        } catch (RuntimeException e) {
                            logger.error(""Caught exception during listener notifying "", e);
                        }
                    }
                }
            }
            Advapi32Util.registryCloseKey(hkey.getValue());
        }
","['        ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '            ', 'WinReg', '.', 'HKEYByReference', ' ', 'hkey', ' ', '=', ' ', 'new', ' ', 'WinReg', '.', 'HKEYByReference', '(', ')', ';', '\n', '            ', 'int', ' ', 'err', ' ', '=', ' ', 'Advapi32', '.', 'INSTANCE', '.', 'RegOpenKeyEx', '(', 'WinReg', '.', 'HKEY_CURRENT_USER', ',', ' ', 'REGISTRY_PATH', ',', ' ', '0', ',', ' ', 'WinNT', '.', 'KEY_READ', ',', ' ', 'hkey', ')', ';', '\n', '            ', 'if', ' ', '(', 'err', ' ', '!', '=', ' ', 'W32Errors', '.', 'ERROR_SUCCESS', ')', ' ', '{', '\n', '                ', 'throw', ' ', 'new', ' ', 'Win32Exception', '(', 'err', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'while', ' ', '(', '!', 'this', '.', 'isInterrupted', '(', ')', ')', ' ', '{', '\n', '                ', 'err', ' ', '=', ' ', 'Advapi32', '.', 'INSTANCE', '.', 'RegNotifyChangeKeyValue', '(', 'hkey', '.', 'getValue', '(', ')', ',', ' ', 'false', ',', ' ', 'WinNT', '.', 'REG_NOTIFY_CHANGE_LAST_SET', ',', ' ', 'null', ',', ' ', 'false', ')', ';', '\n', '                ', 'if', ' ', '(', 'err', ' ', '!', '=', ' ', 'W32Errors', '.', 'ERROR_SUCCESS', ')', ' ', '{', '\n', '                    ', 'throw', ' ', 'new', ' ', 'Win32Exception', '(', 'err', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'boolean', ' ', 'currentDetection', ' ', '=', ' ', 'themeDetector', '.', 'isDark', '(', ')', ';', '\n', '                ', 'if', ' ', '(', 'currentDetection', ' ', '!', '=', ' ', 'this', '.', 'lastValue', ')', ' ', '{', '\n', '                    ', 'lastValue', ' ', '=', ' ', 'currentDetection', ';', '\n', '                    ', 'logger', '.', 'debug', '(', '""', 'Theme change detected: dark: {}', '""', ',', ' ', 'currentDetection', ')', ';', '\n', '                    ', 'for', ' ', '(', 'Consumer', '<', 'Boolean', '>', ' ', 'listener', ' ', ':', ' ', 'themeDetector', '.', 'listeners', ')', ' ', '{', '\n', '                        ', 'try', ' ', '{', '\n', '                            ', 'listener', '.', 'accept', '(', 'currentDetection', ')', ';', '\n', '                        ', '}', ' ', 'catch', ' ', '(', 'RuntimeException', ' ', 'e', ')', ' ', '{', '\n', '                            ', 'logger', '.', 'error', '(', '""', 'Caught exception during listener notifying ', '""', ',', ' ', 'e', ')', ';', '\n', '                        ', '}', '\n', '                    ', '}', '\n', '                ', '}', '\n', '            ', '}', '\n', '            ', 'Advapi32Util', '.', 'registryCloseKey', '(', 'hkey', '.', 'getValue', '(', ')', ')', ';', '\n', '        ', '}', '\n']"
master,3e71aedede809f1491fa53c45a1331f4e9bd37d6,OsThemeDetector.java,createDetector,"    private static OsThemeDetector createDetector() {
        if (OsInfo.isWindows10OrLater()) {
            logDetection(""Windows 10"", WindowsThemeDetector.class);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/3e71aedede809f1491fa53c45a1331f4e9bd37d6,"    private static OsThemeDetector createDetector() {
        if (OsInfo.isWindows10OrLater()) {
            logDetection(""Windows 10"", WindowsThemeDetector.class);
","['    ', 'private', ' ', 'static', ' ', 'OsThemeDetector', ' ', 'createDetector', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ')', ' ', '{', '\n', '            ', 'logDetection', '(', '""', 'Windows 10', '""', ',', ' ', 'WindowsThemeDetector', '.', 'class', ')', ';', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,contains,"    public boolean contains(Object o) {
        return map.containsKey(o);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public boolean contains(Object o) {
        return map.containsKey(o);
    }
","['    ', 'public', ' ', 'boolean', ' ', 'contains', '(', 'Object', ' ', 'o', ')', ' ', '{', '\n', '        ', 'return', ' ', 'map', '.', 'containsKey', '(', 'o', ')', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,iterator,"    public Iterator<E> iterator() {
        return map.keySet().iterator();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public Iterator<E> iterator() {
        return map.keySet().iterator();
    }
","['    ', 'public', ' ', 'Iterator', '<', 'E', '>', ' ', 'iterator', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'map', '.', 'keySet', '(', ')', '.', 'iterator', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,toArray,"    public Object[] toArray() {
        return map.keySet().toArray();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public Object[] toArray() {
        return map.keySet().toArray();
    }
","['    ', 'public', ' ', 'Object', '[', ']', ' ', 'toArray', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'map', '.', 'keySet', '(', ')', '.', 'toArray', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,toArray,"    public <T> T[] toArray(T[] a) {
        return map.keySet().toArray(a);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public <T> T[] toArray(T[] a) {
        return map.keySet().toArray(a);
    }
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'T', '[', ']', ' ', 'toArray', '(', 'T', '[', ']', ' ', 'a', ')', ' ', '{', '\n', '        ', 'return', ' ', 'map', '.', 'keySet', '(', ')', '.', 'toArray', '(', 'a', ')', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,add,"    public boolean add(E e) {
        return map.put(e, OBJ) == null;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public boolean add(E e) {
        return map.put(e, OBJ) == null;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'add', '(', 'E', ' ', 'e', ')', ' ', '{', '\n', '        ', 'return', ' ', 'map', '.', 'put', '(', 'e', ',', ' ', 'OBJ', ')', ' ', '=', '=', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,remove,"    public boolean remove(Object o) {
        return map.remove(o) != null;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public boolean remove(Object o) {
        return map.remove(o) != null;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'remove', '(', 'Object', ' ', 'o', ')', ' ', '{', '\n', '        ', 'return', ' ', 'map', '.', 'remove', '(', 'o', ')', ' ', '!', '=', ' ', 'null', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,containsAll,"    public boolean containsAll(Collection<?> c) {
        return map.keySet().containsAll(c);
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public boolean containsAll(Collection<?> c) {
        return map.keySet().containsAll(c);
    }
","['    ', 'public', ' ', 'boolean', ' ', 'containsAll', '(', 'Collection', '<', '?', '>', ' ', 'c', ')', ' ', '{', '\n', '        ', 'return', ' ', 'map', '.', 'keySet', '(', ')', '.', 'containsAll', '(', 'c', ')', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,addAll,"    public boolean addAll(Collection<? extends E> c) {
        boolean changed = false;
        for (E e: c) {
            if (map.put(e, OBJ) == null) {
                changed = true;
            }
        }
        return changed;
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public boolean addAll(Collection<? extends E> c) {
        boolean changed = false;
        for (E e: c) {
            if (map.put(e, OBJ) == null) {
                changed = true;
            }
        }
        return changed;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'addAll', '(', 'Collection', '<', '?', ' ', 'extends', ' ', 'E', '>', ' ', 'c', ')', ' ', '{', '\n', '        ', 'boolean', ' ', 'changed', ' ', '=', ' ', 'false', ';', '\n', '        ', 'for', ' ', '(', 'E', ' ', 'e', ':', ' ', 'c', ')', ' ', '{', '\n', '            ', 'if', ' ', '(', 'map', '.', 'put', '(', 'e', ',', ' ', 'OBJ', ')', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '                ', 'changed', ' ', '=', ' ', 'true', ';', '\n', '            ', '}', '\n', '        ', '}', '\n', '        ', 'return', ' ', 'changed', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,retainAll,"    public boolean retainAll(Collection<?> c) {
        throw new UnsupportedOperationException();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public boolean retainAll(Collection<?> c) {
        throw new UnsupportedOperationException();
    }
","['    ', 'public', ' ', 'boolean', ' ', 'retainAll', '(', 'Collection', '<', '?', '>', ' ', 'c', ')', ' ', '{', '\n', '        ', 'throw', ' ', 'new', ' ', 'UnsupportedOperationException', '(', ')', ';', '\n', '    ', '}', '\n']"
master,b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,ConcurrentHashSet.java,removeAll,"    public boolean removeAll(Collection<?> c) {
        throw new UnsupportedOperationException();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/b4be30854b50f2d9129e4e0a232d6c6d44d7dc36,"    public boolean removeAll(Collection<?> c) {
        throw new UnsupportedOperationException();
    }
","['    ', 'public', ' ', 'boolean', ' ', 'removeAll', '(', 'Collection', '<', '?', '>', ' ', 'c', ')', ' ', '{', '\n', '        ', 'throw', ' ', 'new', ' ', 'UnsupportedOperationException', '(', ')', ';', '\n', '    ', '}', '\n']"
master,a5e1e8a8b7d60893451dfb26d37897a1224c8851,GnomeThemeDetector.java,registerListener,"    public synchronized void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        Objects.requireNonNull(darkThemeListener);
        final boolean listenerAdded = listeners.add(darkThemeListener);
        final boolean singleListener = listenerAdded && listeners.size() == 1;
        final DetectorThread currentDetectorThread = detectorThread;
        final boolean threadInterrupted = currentDetectorThread != null && currentDetectorThread.isInterrupted();

        if (singleListener || threadInterrupted) {
            final DetectorThread newDetectorThread = new DetectorThread(this);",https://www.github.com/dansoftowner/jsystemthemedetector/commit/a5e1e8a8b7d60893451dfb26d37897a1224c8851,"    public synchronized void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        Objects.requireNonNull(darkThemeListener);
        final boolean listenerAdded = listeners.add(darkThemeListener);
        final boolean singleListener = listenerAdded && listeners.size() == 1;
        final DetectorThread currentDetectorThread = detectorThread;
        final boolean threadInterrupted = currentDetectorThread != null && currentDetectorThread.isInterrupted();

        if (singleListener || threadInterrupted) {
            final DetectorThread newDetectorThread = new DetectorThread(this);
","['    ', 'public', ' ', 'synchronized', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', 'Objects', '.', 'requireNonNull', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'listenerAdded', ' ', '=', ' ', 'listeners', '.', 'add', '(', 'darkThemeListener', ')', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'singleListener', ' ', '=', ' ', 'listenerAdded', ' ', '&', '&', ' ', 'listeners', '.', 'size', '(', ')', ' ', '=', '=', ' ', '1', ';', '\n', '        ', 'final', ' ', 'DetectorThread', ' ', 'currentDetectorThread', ' ', '=', ' ', 'detectorThread', ';', '\n', '        ', 'final', ' ', 'boolean', ' ', 'threadInterrupted', ' ', '=', ' ', 'currentDetectorThread', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'currentDetectorThread', '.', 'isInterrupted', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'singleListener', ' ', '|', '|', ' ', 'threadInterrupted', ')', ' ', '{', '\n', '            ', 'final', ' ', 'DetectorThread', ' ', 'newDetectorThread', ' ', '=', ' ', 'new', ' ', 'DetectorThread', '(', 'this', ')', ';', '\n']"
master,8f2db06a99dfbbf7fa6d621ecce63a837a8cb48f,OsThemeDetector.java,isDark,"    public abstract boolean isDark();

    /**
     * Registers a {@link Consumer} that will listen to a theme-change.
     *
     * @param darkThemeListener the {@link Consumer} that accepts a {@link Boolean} that represents
     *                          that the os using a dark theme or not
     */
    @ThreadSafe
    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    /**
     * Removes the listener.
     */
    @ThreadSafe
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    @ThreadSafe
    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/8f2db06a99dfbbf7fa6d621ecce63a837a8cb48f,"    public abstract boolean isDark();

    
    @ThreadSafe
    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    
    @ThreadSafe
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    @ThreadSafe
    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'boolean', ' ', 'isDark', '(', ')', ';', '\n', '\n', '    ', '\n', '    ', '@ThreadSafe', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '\n', '    ', '@ThreadSafe', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '@ThreadSafe', '\n', '    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isSupported', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isMacOsMojaveOrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isGnome', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,8f2db06a99dfbbf7fa6d621ecce63a837a8cb48f,OsThemeDetector.java,registerListener,"    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    /**
     * Removes the listener.
     */
    @ThreadSafe
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    @ThreadSafe
    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/8f2db06a99dfbbf7fa6d621ecce63a837a8cb48f,"    public abstract void registerListener(@NotNull Consumer<Boolean> darkThemeListener);

    
    @ThreadSafe
    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    @ThreadSafe
    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '\n', '    ', '@ThreadSafe', '\n', '    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '@ThreadSafe', '\n', '    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isSupported', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isMacOsMojaveOrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isGnome', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,8f2db06a99dfbbf7fa6d621ecce63a837a8cb48f,OsThemeDetector.java,removeListener,"    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    @ThreadSafe
    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}",https://www.github.com/dansoftowner/jsystemthemedetector/commit/8f2db06a99dfbbf7fa6d621ecce63a837a8cb48f,"    public abstract void removeListener(@Nullable Consumer<Boolean> darkThemeListener);

    @ThreadSafe
    public static boolean isSupported() {
        return OsInfo.isWindows10OrLater() || OsInfo.isMacOsMojaveOrLater() || OsInfo.isGnome();
    }

    private static final class EmptyDetector extends OsThemeDetector {
        @Override
        public boolean isDark() {
            return false;
        }

        @Override
        public void registerListener(@NotNull Consumer<Boolean> darkThemeListener) {
        }

        @Override
        public void removeListener(@Nullable Consumer<Boolean> darkThemeListener) {
        }
    }
}
","['    ', 'public', ' ', 'abstract', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ';', '\n', '\n', '    ', '@ThreadSafe', '\n', '    ', 'public', ' ', 'static', ' ', 'boolean', ' ', 'isSupported', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'OsInfo', '.', 'isWindows10OrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isMacOsMojaveOrLater', '(', ')', ' ', '|', '|', ' ', 'OsInfo', '.', 'isGnome', '(', ')', ';', '\n', '    ', '}', '\n', '\n', '    ', 'private', ' ', 'static', ' ', 'final', ' ', 'class', ' ', 'EmptyDetector', ' ', 'extends', ' ', 'OsThemeDetector', ' ', '{', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'boolean', ' ', 'isDark', '(', ')', ' ', '{', '\n', '            ', 'return', ' ', 'false', ';', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'registerListener', '(', '@NotNull', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '\n', '        ', '@Override', '\n', '        ', 'public', ' ', 'void', ' ', 'removeListener', '(', '@Nullable', ' ', 'Consumer', '<', 'Boolean', '>', ' ', 'darkThemeListener', ')', ' ', '{', '\n', '        ', '}', '\n', '    ', '}', '\n', '}', '\n']"
master,ad9887be221b157cec281e1e45e0022a89c00349,MacOSThemeDetector.java,isDarkTheme,"    private boolean isDarkTheme(String themeName) {
        return themeName != null && themeNamePattern.matcher(themeName).matches();
    }",https://www.github.com/dansoftowner/jsystemthemedetector/commit/ad9887be221b157cec281e1e45e0022a89c00349,"    private boolean isDarkTheme(String themeName) {
        return themeName != null && themeNamePattern.matcher(themeName).matches();
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isDarkTheme', '(', 'String', ' ', 'themeName', ')', ' ', '{', '\n', '        ', 'return', ' ', 'themeName', ' ', '!', '=', ' ', 'null', ' ', '&', '&', ' ', 'themeNamePattern', '.', 'matcher', '(', 'themeName', ')', '.', 'matches', '(', ')', ';', '\n', '    ', '}', '\n']"
