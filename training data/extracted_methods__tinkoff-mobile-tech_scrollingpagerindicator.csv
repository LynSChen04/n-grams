Branch Name,Commit Hash,File Name,Method Name,Method Code,Commit Link,Method Code No Comments,Tokens
master,2837b5cbac0b917926467fb2a928039807b8e173,DemoPagerAdapter.java,instantiateItem,"    public Object instantiateItem(@NonNull ViewGroup collection, int position) {
        ViewGroup layout = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.demo_page, collection, false);
        TextView label = layout.findViewById(R.id.demo_page_label);
        label.setText(String.valueOf(position));
        collection.addView(layout);
        return layout;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public Object instantiateItem(@NonNull ViewGroup collection, int position) {
        ViewGroup layout = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.demo_page, collection, false);
        TextView label = layout.findViewById(R.id.demo_page_label);
        label.setText(String.valueOf(position));
        collection.addView(layout);
        return layout;
    }
","['    ', 'public', ' ', 'Object', ' ', 'instantiateItem', '(', '@NonNull', ' ', 'ViewGroup', ' ', 'collection', ',', ' ', 'int', ' ', 'position', ')', ' ', '{', '\n', '        ', 'ViewGroup', ' ', 'layout', ' ', '=', ' ', '(', 'ViewGroup', ')', ' ', 'LayoutInflater', '.', 'from', '(', 'context', ')', '.', 'inflate', '(', 'R', '.', 'layout', '.', 'demo_page', ',', ' ', 'collection', ',', ' ', 'false', ')', ';', '\n', '        ', 'TextView', ' ', 'label', ' ', '=', ' ', 'layout', '.', 'findViewById', '(', 'R', '.', 'id', '.', 'demo_page_label', ')', ';', '\n', '        ', 'label', '.', 'setText', '(', 'String', '.', 'valueOf', '(', 'position', ')', ')', ';', '\n', '        ', 'collection', '.', 'addView', '(', 'layout', ')', ';', '\n', '        ', 'return', ' ', 'layout', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,DemoPagerAdapter.java,destroyItem,"    public void destroyItem(@NonNull ViewGroup collection, int position, @NonNull Object view) {
        collection.removeView((View) view);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public void destroyItem(@NonNull ViewGroup collection, int position, @NonNull Object view) {
        collection.removeView((View) view);
    }
","['    ', 'public', ' ', 'void', ' ', 'destroyItem', '(', '@NonNull', ' ', 'ViewGroup', ' ', 'collection', ',', ' ', 'int', ' ', 'position', ',', ' ', '@NonNull', ' ', 'Object', ' ', 'view', ')', ' ', '{', '\n', '        ', 'collection', '.', 'removeView', '(', '(', 'View', ')', ' ', 'view', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,DemoPagerAdapter.java,isViewFromObject,"    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
        return view == object;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
        return view == object;
    }
","['    ', 'public', ' ', 'boolean', ' ', 'isViewFromObject', '(', '@NonNull', ' ', 'View', ' ', 'view', ',', ' ', '@NonNull', ' ', 'Object', ' ', 'object', ')', ' ', '{', '\n', '        ', 'return', ' ', 'view', ' ', '=', '=', ' ', 'object', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,attachToPager,"    public void attachToPager(ViewPager pager) {
        attachToPager(pager, new ViewPagerAttacher());
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public void attachToPager(ViewPager pager) {
        attachToPager(pager, new ViewPagerAttacher());
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'pager', ',', ' ', 'new', ' ', 'ViewPagerAttacher', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,attachToPager,"    public <T> void attachToPager(final T pager, final PagerAttacher<T> attacher) {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
        }
        dotCountInitialized = false;

        attacher.attachToPager(this, pager);
        currentAttacher = attacher;

        attachRunnable = new Runnable() {
            @Override",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public <T> void attachToPager(final T pager, final PagerAttacher<T> attacher) {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
        }
        dotCountInitialized = false;

        attacher.attachToPager(this, pager);
        currentAttacher = attacher;

        attachRunnable = new Runnable() {
            @Override
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'void', ' ', 'attachToPager', '(', 'final', ' ', 'T', ' ', 'pager', ',', ' ', 'final', ' ', 'PagerAttacher', '<', 'T', '>', ' ', 'attacher', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'currentAttacher', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'currentAttacher', '.', 'detachFromPager', '(', ')', ';', '\n', '            ', 'currentAttacher', ' ', '=', ' ', 'null', ';', '\n', '            ', 'attachRunnable', ' ', '=', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'dotCountInitialized', ' ', '=', ' ', 'false', ';', '\n', '\n', '        ', 'attacher', '.', 'attachToPager', '(', 'this', ',', ' ', 'pager', ')', ';', '\n', '        ', 'currentAttacher', ' ', '=', ' ', 'attacher', ';', '\n', '\n', '        ', 'attachRunnable', ' ', '=', ' ', 'new', ' ', 'Runnable', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,run,"            public void run() {
                dotCount = 0;
                attachToPager(pager, attacher);
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"            public void run() {
                dotCount = 0;
                attachToPager(pager, attacher);
            }
","['            ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '                ', 'dotCount', ' ', '=', ' ', '0', ';', '\n', '                ', 'attachToPager', '(', 'pager', ',', ' ', 'attacher', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,reattach,"    public void reattach() {
        if (attachRunnable != null) {
            attachRunnable.run();",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public void reattach() {
        if (attachRunnable != null) {
            attachRunnable.run();
","['    ', 'public', ' ', 'void', ' ', 'reattach', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'attachRunnable', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'attachRunnable', '.', 'run', '(', ')', ';', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page > dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount()]"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, 1 - offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page > dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount()]"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, 1 - offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '>', ' ', 'dotCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount()]', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'dotCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'dotCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '            ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'dotCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        // Width
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        if (widthMode == MeasureSpec.EXACTLY) {
            throw new IllegalStateException(""Fixed width is not supported"");
        }
        int measuredWidth;
        if (isInEditMode()) {
            measuredWidth = MeasureSpec.getSize(widthMeasureSpec);
        } else {
            measuredWidth = dotCount >= visibleDotCount
                    ? (int) visibleFrameWidth
                    : (dotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        }

        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        // Height
        int desiredHeight = dotSelectedSize;
        int measuredHeight;

        switch (heightMode) {
            case MeasureSpec.EXACTLY:
                measuredHeight = heightSize;
                break;
            case MeasureSpec.AT_MOST:
                measuredHeight = Math.min(desiredHeight, heightSize);
                break;
            case MeasureSpec.UNSPECIFIED:
            default:
                measuredHeight = desiredHeight;
        }

        setMeasuredDimension(measuredWidth, measuredHeight);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        if (widthMode == MeasureSpec.EXACTLY) {
            throw new IllegalStateException(""Fixed width is not supported"");
        }
        int measuredWidth;
        if (isInEditMode()) {
            measuredWidth = MeasureSpec.getSize(widthMeasureSpec);
        } else {
            measuredWidth = dotCount >= visibleDotCount
                    ? (int) visibleFrameWidth
                    : (dotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        }

        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        
        int desiredHeight = dotSelectedSize;
        int measuredHeight;

        switch (heightMode) {
            case MeasureSpec.EXACTLY:
                measuredHeight = heightSize;
                break;
            case MeasureSpec.AT_MOST:
                measuredHeight = Math.min(desiredHeight, heightSize);
                break;
            case MeasureSpec.UNSPECIFIED:
            default:
                measuredHeight = desiredHeight;
        }

        setMeasuredDimension(measuredWidth, measuredHeight);
    }
","['    ', 'protected', ' ', 'void', ' ', 'onMeasure', '(', 'int', ' ', 'widthMeasureSpec', ',', ' ', 'int', ' ', 'heightMeasureSpec', ')', ' ', '{', '\n', '        ', '\n', '        ', 'int', ' ', 'widthMode', ' ', '=', ' ', 'MeasureSpec', '.', 'getMode', '(', 'widthMeasureSpec', ')', ';', '\n', '        ', 'if', ' ', '(', 'widthMode', ' ', '=', '=', ' ', 'MeasureSpec', '.', 'EXACTLY', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Fixed width is not supported', '""', ')', ';', '\n', '        ', '}', '\n', '        ', 'int', ' ', 'measuredWidth', ';', '\n', '        ', 'if', ' ', '(', 'isInEditMode', '(', ')', ')', ' ', '{', '\n', '            ', 'measuredWidth', ' ', '=', ' ', 'MeasureSpec', '.', 'getSize', '(', 'widthMeasureSpec', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'measuredWidth', ' ', '=', ' ', 'dotCount', ' ', '>', '=', ' ', 'visibleDotCount', '\n', '                    ', '?', ' ', '(', 'int', ')', ' ', 'visibleFrameWidth', '\n', '                    ', ':', ' ', '(', 'dotCount', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'spaceBetweenDotCenters', ' ', '+', ' ', 'dotSelectedSize', ';', '\n', '        ', '}', '\n', '\n', '        ', 'int', ' ', 'heightMode', ' ', '=', ' ', 'MeasureSpec', '.', 'getMode', '(', 'heightMeasureSpec', ')', ';', '\n', '        ', 'int', ' ', 'heightSize', ' ', '=', ' ', 'MeasureSpec', '.', 'getSize', '(', 'heightMeasureSpec', ')', ';', '\n', '\n', '        ', '\n', '        ', 'int', ' ', 'desiredHeight', ' ', '=', ' ', 'dotSelectedSize', ';', '\n', '        ', 'int', ' ', 'measuredHeight', ';', '\n', '\n', '        ', 'switch', ' ', '(', 'heightMode', ')', ' ', '{', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'EXACTLY', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'heightSize', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'AT_MOST', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'Math', '.', 'min', '(', 'desiredHeight', ',', ' ', 'heightSize', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'UNSPECIFIED', ':', '\n', '            ', 'default', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'desiredHeight', ';', '\n', '        ', '}', '\n', '\n', '        ', 'setMeasuredDimension', '(', 'measuredWidth', ',', ' ', 'measuredHeight', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,onDraw,"    protected void onDraw(Canvas canvas) {
        if (dotOffset == null || dotOffset.length <= 1) {
            return;
        }

        // Some empirical coefficients
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        for (int i = 0; i < dotOffset.length; i++) {
            float dot = dotOffset[i];",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    protected void onDraw(Canvas canvas) {
        if (dotOffset == null || dotOffset.length <= 1) {
            return;
        }

        
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        for (int i = 0; i < dotOffset.length; i++) {
            float dot = dotOffset[i];
","['    ', 'protected', ' ', 'void', ' ', 'onDraw', '(', 'Canvas', ' ', 'canvas', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'dotOffset', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'dotOffset', '.', 'length', ' ', '<', '=', ' ', '1', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'float', ' ', 'scaleDistance', ' ', '=', ' ', '(', 'spaceBetweenDotCenters', ' ', '+', ' ', '(', 'dotSelectedSize', ' ', '-', ' ', 'dotNormalSize', ')', ' ', '/', ' ', '2', ')', ' ', '*', ' ', '0.7f', ';', '\n', '        ', 'float', ' ', 'smallScaleDistance', ' ', '=', ' ', 'dotSelectedSize', ' ', '/', ' ', '2', ';', '\n', '        ', 'float', ' ', 'centerScaleDistance', ' ', '=', ' ', '6f', ' ', '/', ' ', '7f', ' ', '*', ' ', 'spaceBetweenDotCenters', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'dotOffset', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'float', ' ', 'dot', ' ', '=', ' ', 'dotOffset', '[', 'i', ']', ';', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,calculateColor,"    private int calculateColor(float dotSize) {
        if (dotSize <= dotNormalSize) {
            return dotColor;
        }
        float fraction = (dotSize - dotNormalSize) / (dotSelectedSize - dotNormalSize);
        return (Integer) colorEvaluator.evaluate(fraction, dotColor, selectedDotColor);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    private int calculateColor(float dotSize) {
        if (dotSize <= dotNormalSize) {
            return dotColor;
        }
        float fraction = (dotSize - dotNormalSize) / (dotSelectedSize - dotNormalSize);
        return (Integer) colorEvaluator.evaluate(fraction, dotColor, selectedDotColor);
    }
","['    ', 'private', ' ', 'int', ' ', 'calculateColor', '(', 'float', ' ', 'dotSize', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'dotSize', ' ', '<', '=', ' ', 'dotNormalSize', ')', ' ', '{', '\n', '            ', 'return', ' ', 'dotColor', ';', '\n', '        ', '}', '\n', '        ', 'float', ' ', 'fraction', ' ', '=', ' ', '(', 'dotSize', ' ', '-', ' ', 'dotNormalSize', ')', ' ', '/', ' ', '(', 'dotSelectedSize', ' ', '-', ' ', 'dotNormalSize', ')', ';', '\n', '        ', 'return', ' ', '(', 'Integer', ')', ' ', 'colorEvaluator', '.', 'evaluate', '(', 'fraction', ',', ' ', 'dotColor', ',', ' ', 'selectedDotColor', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,updateScaleInIdleState,"    private void updateScaleInIdleState(int currentPos) {
        if (!looped || dotCount < visibleDotCount) {
            for (int i = 0; i < dotScale.length; i++) {",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    private void updateScaleInIdleState(int currentPos) {
        if (!looped || dotCount < visibleDotCount) {
            for (int i = 0; i < dotScale.length; i++) {
","['    ', 'private', ' ', 'void', ' ', 'updateScaleInIdleState', '(', 'int', ' ', 'currentPos', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'dotCount', ' ', '<', ' ', 'visibleDotCount', ')', ' ', '{', '\n', '            ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'dotScale', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,adjustFramePosition,"    private void adjustFramePosition(float offset, int pos) {
        if (dotCount <= visibleDotCount) {
            // Without scroll",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    private void adjustFramePosition(float offset, int pos) {
        if (dotCount <= visibleDotCount) {
            
","['    ', 'private', ' ', 'void', ' ', 'adjustFramePosition', '(', 'float', ' ', 'offset', ',', ' ', 'int', ' ', 'pos', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'dotCount', ' ', '<', '=', ' ', 'visibleDotCount', ')', ' ', '{', '\n', '            ', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,scaleDotByOffset,"    private void scaleDotByOffset(int position, float offset) {
        if (dotScale == null || dotScale.length == 0) {
            return;
        }
        dotScale[position] = 1 - Math.abs(offset);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    private void scaleDotByOffset(int position, float offset) {
        if (dotScale == null || dotScale.length == 0) {
            return;
        }
        dotScale[position] = 1 - Math.abs(offset);
    }
","['    ', 'private', ' ', 'void', ' ', 'scaleDotByOffset', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'dotScale', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'dotScale', '.', 'length', ' ', '=', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'dotScale', '[', 'position', ']', ' ', '=', ' ', '1', ' ', '-', ' ', 'Math', '.', 'abs', '(', 'offset', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ScrollingPagerIndicator.java,attachToPager,"        void attachToPager(ScrollingPagerIndicator indicator, T pager);

        /**
         * Here you should unregister all callbacks previously added to pager and adapter
         */
        void detachFromPager();
    }
}",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"        void attachToPager(ScrollingPagerIndicator indicator, T pager);

        
        void detachFromPager();
    }
}
","['        ', 'void', ' ', 'attachToPager', '(', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', 'T', ' ', 'pager', ')', ';', '\n', '\n', '        ', '\n', '        ', 'void', ' ', 'detachFromPager', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ViewPagerAttacher.java,attachToPager,"    public void attachToPager(final ScrollingPagerIndicator indicator, final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                indicator.reattach();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public void attachToPager(final ScrollingPagerIndicator indicator, final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                indicator.reattach();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', 'final', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', 'final', ' ', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'final', ' ', 'PagerAdapter', ' ', 'adapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'adapter', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Set adapter before call attachToPager() method', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'this', '.', 'pager', ' ', '=', ' ', 'pager', ';', '\n', '\n', '        ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '        ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '\n', '        ', 'dataSetObserver', ' ', '=', ' ', 'new', ' ', 'DataSetObserver', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'adapter', '.', 'registerDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '\n', '        ', 'onPageChangeListener', ' ', '=', ' ', 'new', ' ', 'ViewPager', '.', 'OnPageChangeListener', '(', ')', ' ', '{', '\n', '\n', '            ', 'boolean', ' ', 'idleState', ' ', '=', ' ', 'true', ';', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'positionOffset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '                    ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'pager', '.', 'addOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ViewPagerAttacher.java,onChanged,"            public void onChanged() {
                indicator.reattach();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"            public void onChanged() {
                indicator.reattach();
            }
","['            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ViewPagerAttacher.java,onInvalidated,"            public void onInvalidated() {
                indicator.reattach();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"            public void onInvalidated() {
                indicator.reattach();
            }
","['            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ViewPagerAttacher.java,onPageScrolled,"            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }
","['            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'positionOffset', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ViewPagerAttacher.java,onPageSelected,"            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
","['            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ViewPagerAttacher.java,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
","['            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '<END>']"
master,2837b5cbac0b917926467fb2a928039807b8e173,ViewPagerAttacher.java,detachFromPager,"    public void detachFromPager() {
        PagerAdapter adapter = pager.getAdapter();
        if (adapter != null) {
            adapter.unregisterDataSetObserver(dataSetObserver);
        }
        pager.removeOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/2837b5cbac0b917926467fb2a928039807b8e173,"    public void detachFromPager() {
        PagerAdapter adapter = pager.getAdapter();
        if (adapter != null) {
            adapter.unregisterDataSetObserver(dataSetObserver);
        }
        pager.removeOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'PagerAdapter', ' ', 'adapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'adapter', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'adapter', '.', 'unregisterDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '        ', '}', '\n', '        ', 'pager', '.', 'removeOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,DemoPagerAdapter.java,instantiateItem,"    public Object instantiateItem(@NonNull ViewGroup collection, int position) {
        ViewGroup layout = (ViewGroup) LayoutInflater.from(collection.getContext())
                .inflate(R.layout.demo_page, collection, false);
        TextView label = layout.findViewById(R.id.demo_page_label);
        label.setText(String.valueOf(position));
        collection.addView(layout);
        return layout;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"    public Object instantiateItem(@NonNull ViewGroup collection, int position) {
        ViewGroup layout = (ViewGroup) LayoutInflater.from(collection.getContext())
                .inflate(R.layout.demo_page, collection, false);
        TextView label = layout.findViewById(R.id.demo_page_label);
        label.setText(String.valueOf(position));
        collection.addView(layout);
        return layout;
    }
","['    ', 'public', ' ', 'Object', ' ', 'instantiateItem', '(', '@NonNull', ' ', 'ViewGroup', ' ', 'collection', ',', ' ', 'int', ' ', 'position', ')', ' ', '{', '\n', '        ', 'ViewGroup', ' ', 'layout', ' ', '=', ' ', '(', 'ViewGroup', ')', ' ', 'LayoutInflater', '.', 'from', '(', 'collection', '.', 'getContext', '(', ')', ')', '\n', '                ', '.', 'inflate', '(', 'R', '.', 'layout', '.', 'demo_page', ',', ' ', 'collection', ',', ' ', 'false', ')', ';', '\n', '        ', 'TextView', ' ', 'label', ' ', '=', ' ', 'layout', '.', 'findViewById', '(', 'R', '.', 'id', '.', 'demo_page_label', ')', ';', '\n', '        ', 'label', '.', 'setText', '(', 'String', '.', 'valueOf', '(', 'position', ')', ')', ';', '\n', '        ', 'collection', '.', 'addView', '(', 'layout', ')', ';', '\n', '        ', 'return', ' ', 'layout', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,DemoRecyclerViewAdapter.java,onCreateViewHolder,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.demo_page, parent, false);
        view.getLayoutParams().width = screenWidth / 3;
        view.requestLayout();
        return new ViewHolder(view);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.demo_page, parent, false);
        view.getLayoutParams().width = screenWidth / 3;
        view.requestLayout();
        return new ViewHolder(view);
    }
","['    ', 'public', ' ', 'ViewHolder', ' ', 'onCreateViewHolder', '(', 'ViewGroup', ' ', 'parent', ',', ' ', 'int', ' ', 'viewType', ')', ' ', '{', '\n', '        ', 'View', ' ', 'view', ' ', '=', ' ', 'LayoutInflater', '.', 'from', '(', 'parent', '.', 'getContext', '(', ')', ')', '\n', '                ', '.', 'inflate', '(', 'R', '.', 'layout', '.', 'demo_page', ',', ' ', 'parent', ',', ' ', 'false', ')', ';', '\n', '        ', 'view', '.', 'getLayoutParams', '(', ')', '.', 'width', ' ', '=', ' ', 'screenWidth', ' ', '/', ' ', '3', ';', '\n', '        ', 'view', '.', 'requestLayout', '(', ')', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ViewHolder', '(', 'view', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,DemoRecyclerViewAdapter.java,onBindViewHolder,"    public void onBindViewHolder(ViewHolder holder, int position) {
        holder.title.setText(String.valueOf(position));
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"    public void onBindViewHolder(ViewHolder holder, int position) {
        holder.title.setText(String.valueOf(position));
    }
","['    ', 'public', ' ', 'void', ' ', 'onBindViewHolder', '(', 'ViewHolder', ' ', 'holder', ',', ' ', 'int', ' ', 'position', ')', ' ', '{', '\n', '        ', 'holder', '.', 'title', '.', 'setText', '(', 'String', '.', 'valueOf', '(', 'position', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,RecyclerViewAttacher.java,onChanged,"            public void onChanged() {
                indicator.setDotCount(adapter.getItemCount());
                updateCurrentOffset();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"            public void onChanged() {
                indicator.setDotCount(adapter.getItemCount());
                updateCurrentOffset();
            }
","['            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getItemCount', '(', ')', ')', ';', '\n', '                ', 'updateCurrentOffset', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,RecyclerViewAttacher.java,onScrollStateChanged,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                    if (isInIdleState()) {",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                    if (isInIdleState()) {
","['            ', 'public', ' ', 'void', ' ', 'onScrollStateChanged', '(', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'newState', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'newState', ' ', '=', '=', ' ', 'RecyclerView', '.', 'SCROLL_STATE_IDLE', ')', ' ', '{', '\n', '                    ', 'if', ' ', '(', 'isInIdleState', '(', ')', ')', ' ', '{', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,RecyclerViewAttacher.java,onScrolled,"            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                updateCurrentOffset();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                updateCurrentOffset();
            }
","['            ', 'public', ' ', 'void', ' ', 'onScrolled', '(', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'dx', ',', ' ', 'int', ' ', 'dy', ')', ' ', '{', '\n', '                ', 'updateCurrentOffset', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,RecyclerViewAttacher.java,detachFromPager,"    public void detachFromPager() {
        adapter.unregisterAdapterDataObserver(dataObserver);
        recyclerView.removeOnScrollListener(scrollListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"    public void detachFromPager() {
        adapter.unregisterAdapterDataObserver(dataObserver);
        recyclerView.removeOnScrollListener(scrollListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'adapter', '.', 'unregisterAdapterDataObserver', '(', 'dataObserver', ')', ';', '\n', '        ', 'recyclerView', '.', 'removeOnScrollListener', '(', 'scrollListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,RecyclerViewAttacher.java,isInIdleState,"    private boolean isInIdleState() {
        return findCompletelyVisiblePosition() != RecyclerView.NO_POSITION;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"    private boolean isInIdleState() {
        return findCompletelyVisiblePosition() != RecyclerView.NO_POSITION;
    }
","['    ', 'private', ' ', 'boolean', ' ', 'isInIdleState', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'findCompletelyVisiblePosition', '(', ')', ' ', '!', '=', ' ', 'RecyclerView', '.', 'NO_POSITION', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,ScrollingPagerIndicator.java,run,"            public void run() {
                dotCount = -1;
                attachToPager(pager, attacher);
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"            public void run() {
                dotCount = -1;
                attachToPager(pager, attacher);
            }
","['            ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '                ', 'dotCount', ' ', '=', ' ', '-', '1', ';', '\n', '                ', 'attachToPager', '(', 'pager', ',', ' ', 'attacher', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            for (int i = 0; i < dotCount; i++) {
                dotScale[i] = 0;
            }
            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, 1 - offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            for (int i = 0; i < dotCount; i++) {
                dotScale[i] = 0;
            }
            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, 1 - offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'dotCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'dotCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'dotCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'dotCount', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '                ', 'dotScale', '[', 'i', ']', ' ', '=', ' ', '0', ';', '\n', '            ', '}', '\n', '            ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '            ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'dotCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,ViewPagerAttacher.java,attachToPager,"    public void attachToPager(final ScrollingPagerIndicator indicator, final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"    public void attachToPager(final ScrollingPagerIndicator indicator, final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', 'final', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', 'final', ' ', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'final', ' ', 'PagerAdapter', ' ', 'adapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'adapter', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Set adapter before call attachToPager() method', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'this', '.', 'pager', ' ', '=', ' ', 'pager', ';', '\n', '\n', '        ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '        ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '\n', '        ', 'dataSetObserver', ' ', '=', ' ', 'new', ' ', 'DataSetObserver', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'adapter', '.', 'registerDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '\n', '        ', 'onPageChangeListener', ' ', '=', ' ', 'new', ' ', 'ViewPager', '.', 'OnPageChangeListener', '(', ')', ' ', '{', '\n', '\n', '            ', 'boolean', ' ', 'idleState', ' ', '=', ' ', 'true', ';', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'positionOffset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '                    ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'pager', '.', 'addOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c8a053a96a51769665a1453103706f969963fc4b,ViewPagerAttacher.java,onInvalidated,"            public void onInvalidated() {
                onChanged();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c8a053a96a51769665a1453103706f969963fc4b,"            public void onInvalidated() {
                onChanged();
            }
","['            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,d562ce0367154f71410897a37b2c582260e4a5fd,RecyclerViewAttacher.java,onScrollStateChanged,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                if (newState == RecyclerView.SCROLL_STATE_IDLE && isInIdleState()) {
                    int newPosition = findCompletelyVisiblePosition();",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/d562ce0367154f71410897a37b2c582260e4a5fd,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                if (newState == RecyclerView.SCROLL_STATE_IDLE && isInIdleState()) {
                    int newPosition = findCompletelyVisiblePosition();
","['            ', 'public', ' ', 'void', ' ', 'onScrollStateChanged', '(', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'newState', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'newState', ' ', '=', '=', ' ', 'RecyclerView', '.', 'SCROLL_STATE_IDLE', ' ', '&', '&', ' ', 'isInIdleState', '(', ')', ')', ' ', '{', '\n', '                    ', 'int', ' ', 'newPosition', ' ', '=', ' ', 'findCompletelyVisiblePosition', '(', ')', ';', '\n', '<END>']"
master,d562ce0367154f71410897a37b2c582260e4a5fd,RecyclerViewAttacher.java,detachFromPager,"    public void detachFromPager() {
        adapter.unregisterAdapterDataObserver(dataObserver);
        recyclerView.removeOnScrollListener(scrollListener);
        measuredChildWidth = 0;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/d562ce0367154f71410897a37b2c582260e4a5fd,"    public void detachFromPager() {
        adapter.unregisterAdapterDataObserver(dataObserver);
        recyclerView.removeOnScrollListener(scrollListener);
        measuredChildWidth = 0;
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'adapter', '.', 'unregisterAdapterDataObserver', '(', 'dataObserver', ')', ';', '\n', '        ', 'recyclerView', '.', 'removeOnScrollListener', '(', 'scrollListener', ')', ';', '\n', '        ', 'measuredChildWidth', ' ', '=', ' ', '0', ';', '\n', '    ', '}', '\n', '<END>']"
master,db853ec2e4119212f70617847e7f4c5cc798afc4,ScrollingPagerIndicator.java,attachToRecyclerView,"    public void attachToRecyclerView(RecyclerView recyclerView) {
        attachToPager(recyclerView, new RecyclerViewAttacher());
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/db853ec2e4119212f70617847e7f4c5cc798afc4,"    public void attachToRecyclerView(RecyclerView recyclerView) {
        attachToPager(recyclerView, new RecyclerViewAttacher());
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToRecyclerView', '(', 'RecyclerView', ' ', 'recyclerView', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'recyclerView', ',', ' ', 'new', ' ', 'RecyclerViewAttacher', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,db853ec2e4119212f70617847e7f4c5cc798afc4,ScrollingPagerIndicator.java,attachToRecyclerView,"    public void attachToRecyclerView(RecyclerView recyclerView, int currentPageLeftCornerX) {
        attachToPager(recyclerView, new RecyclerViewAttacher(currentPageLeftCornerX));
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/db853ec2e4119212f70617847e7f4c5cc798afc4,"    public void attachToRecyclerView(RecyclerView recyclerView, int currentPageLeftCornerX) {
        attachToPager(recyclerView, new RecyclerViewAttacher(currentPageLeftCornerX));
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToRecyclerView', '(', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'currentPageLeftCornerX', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'recyclerView', ',', ' ', 'new', ' ', 'RecyclerViewAttacher', '(', 'currentPageLeftCornerX', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7d9db52a0e0acc8e1fceb0b491327f191afcdb3d,DemoRecyclerViewAdapter.java,onCreateViewHolder,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.demo_page, parent, false);
        view.getLayoutParams().width = screenWidth / 3;
        return new ViewHolder(view);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7d9db52a0e0acc8e1fceb0b491327f191afcdb3d,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.demo_page, parent, false);
        view.getLayoutParams().width = screenWidth / 3;
        return new ViewHolder(view);
    }
","['    ', 'public', ' ', 'ViewHolder', ' ', 'onCreateViewHolder', '(', 'ViewGroup', ' ', 'parent', ',', ' ', 'int', ' ', 'viewType', ')', ' ', '{', '\n', '        ', 'View', ' ', 'view', ' ', '=', ' ', 'LayoutInflater', '.', 'from', '(', 'parent', '.', 'getContext', '(', ')', ')', '\n', '                ', '.', 'inflate', '(', 'R', '.', 'layout', '.', 'demo_page', ',', ' ', 'parent', ',', ' ', 'false', ')', ';', '\n', '        ', 'view', '.', 'getLayoutParams', '(', ')', '.', 'width', ' ', '=', ' ', 'screenWidth', ' ', '/', ' ', '3', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ViewHolder', '(', 'view', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7d9db52a0e0acc8e1fceb0b491327f191afcdb3d,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            Arrays.fill(dotScale, 0);

            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, 1 - offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7d9db52a0e0acc8e1fceb0b491327f191afcdb3d,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            Arrays.fill(dotScale, 0);

            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, 1 - offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'dotCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'dotCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'dotCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'Arrays', '.', 'fill', '(', 'dotScale', ',', ' ', '0', ')', ';', '\n', '\n', '            ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '            ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'dotCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c2504f33e41b502a8b4f816cc197c17112a5cb52,ScrollingPagerIndicator.java,attachToPager,"    public void attachToPager(@NonNull ViewPager pager) {
        attachToPager(pager, new ViewPagerAttacher());
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c2504f33e41b502a8b4f816cc197c17112a5cb52,"    public void attachToPager(@NonNull ViewPager pager) {
        attachToPager(pager, new ViewPagerAttacher());
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'pager', ',', ' ', 'new', ' ', 'ViewPagerAttacher', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c2504f33e41b502a8b4f816cc197c17112a5cb52,ScrollingPagerIndicator.java,attachToRecyclerView,"    public void attachToRecyclerView(@NonNull RecyclerView recyclerView) {
        attachToPager(recyclerView, new RecyclerViewAttacher());
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c2504f33e41b502a8b4f816cc197c17112a5cb52,"    public void attachToRecyclerView(@NonNull RecyclerView recyclerView) {
        attachToPager(recyclerView, new RecyclerViewAttacher());
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToRecyclerView', '(', '@NonNull', ' ', 'RecyclerView', ' ', 'recyclerView', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'recyclerView', ',', ' ', 'new', ' ', 'RecyclerViewAttacher', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c2504f33e41b502a8b4f816cc197c17112a5cb52,ScrollingPagerIndicator.java,attachToRecyclerView,"    public void attachToRecyclerView(@NonNull RecyclerView recyclerView, int currentPageLeftCornerX) {
        attachToPager(recyclerView, new RecyclerViewAttacher(currentPageLeftCornerX));
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c2504f33e41b502a8b4f816cc197c17112a5cb52,"    public void attachToRecyclerView(@NonNull RecyclerView recyclerView, int currentPageLeftCornerX) {
        attachToPager(recyclerView, new RecyclerViewAttacher(currentPageLeftCornerX));
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToRecyclerView', '(', '@NonNull', ' ', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'currentPageLeftCornerX', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'recyclerView', ',', ' ', 'new', ' ', 'RecyclerViewAttacher', '(', 'currentPageLeftCornerX', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c2504f33e41b502a8b4f816cc197c17112a5cb52,ScrollingPagerIndicator.java,attachToPager,"    public <T> void attachToPager(@NonNull final T pager, @NonNull final PagerAttacher<T> attacher) {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
        }
        dotCountInitialized = false;

        attacher.attachToPager(this, pager);
        currentAttacher = attacher;

        attachRunnable = new Runnable() {
            @Override",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c2504f33e41b502a8b4f816cc197c17112a5cb52,"    public <T> void attachToPager(@NonNull final T pager, @NonNull final PagerAttacher<T> attacher) {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
        }
        dotCountInitialized = false;

        attacher.attachToPager(this, pager);
        currentAttacher = attacher;

        attachRunnable = new Runnable() {
            @Override
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'final', ' ', 'T', ' ', 'pager', ',', ' ', '@NonNull', ' ', 'final', ' ', 'PagerAttacher', '<', 'T', '>', ' ', 'attacher', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'currentAttacher', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'currentAttacher', '.', 'detachFromPager', '(', ')', ';', '\n', '            ', 'currentAttacher', ' ', '=', ' ', 'null', ';', '\n', '            ', 'attachRunnable', ' ', '=', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'dotCountInitialized', ' ', '=', ' ', 'false', ';', '\n', '\n', '        ', 'attacher', '.', 'attachToPager', '(', 'this', ',', ' ', 'pager', ')', ';', '\n', '        ', 'currentAttacher', ' ', '=', ' ', 'attacher', ';', '\n', '\n', '        ', 'attachRunnable', ' ', '=', ' ', 'new', ' ', 'Runnable', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,c2504f33e41b502a8b4f816cc197c17112a5cb52,ScrollingPagerIndicator.java,attachToPager,"        void attachToPager(@NonNull ScrollingPagerIndicator indicator, @NonNull T pager);

        /**
         * Here you should unregister all callbacks previously added to pager and adapter
         */
        void detachFromPager();
    }
}",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c2504f33e41b502a8b4f816cc197c17112a5cb52,"        void attachToPager(@NonNull ScrollingPagerIndicator indicator, @NonNull T pager);

        
        void detachFromPager();
    }
}
","['        ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', '@NonNull', ' ', 'T', ' ', 'pager', ')', ';', '\n', '\n', '        ', '\n', '        ', 'void', ' ', 'detachFromPager', '(', ')', ';', '\n', '    ', '}', '\n', '}', '\n', '<END>']"
master,c2504f33e41b502a8b4f816cc197c17112a5cb52,ViewPagerAttacher.java,attachToPager,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c2504f33e41b502a8b4f816cc197c17112a5cb52,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                indicator.onPageScrolled(position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'final', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', '@NonNull', ' ', 'final', ' ', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'final', ' ', 'PagerAdapter', ' ', 'adapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'adapter', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Set adapter before call attachToPager() method', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'this', '.', 'pager', ' ', '=', ' ', 'pager', ';', '\n', '\n', '        ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '        ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '\n', '        ', 'dataSetObserver', ' ', '=', ' ', 'new', ' ', 'DataSetObserver', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'adapter', '.', 'registerDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '\n', '        ', 'onPageChangeListener', ' ', '=', ' ', 'new', ' ', 'ViewPager', '.', 'OnPageChangeListener', '(', ')', ' ', '{', '\n', '\n', '            ', 'boolean', ' ', 'idleState', ' ', '=', ' ', 'true', ';', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'positionOffset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '                    ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'pager', '.', 'addOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,0948f34756c6cf52b35726ecc2ef16a11313add0,RecyclerViewAttacher.java,updateCurrentOffset,"    private void updateCurrentOffset() {
        final View leftView = findFirstVisibleView();
        if (leftView == null) {
            return;
        }

        int position = recyclerView.getChildAdapterPosition(leftView);
        if (position == RecyclerView.NO_POSITION) {
            return;
        }
        final int itemCount = adapter.getItemCount();

        // In case there is an infinite pager
        if (position >= itemCount && itemCount != 0) {
            position = position % itemCount;
        }

        final float offset = (getCurrentFrameLeft() - leftView.getX()) / leftView.getMeasuredWidth();

        if (offset >= 0 && offset <= 1 && position < itemCount) {
            indicator.onPageScrolled(position, offset);",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/0948f34756c6cf52b35726ecc2ef16a11313add0,"    private void updateCurrentOffset() {
        final View leftView = findFirstVisibleView();
        if (leftView == null) {
            return;
        }

        int position = recyclerView.getChildAdapterPosition(leftView);
        if (position == RecyclerView.NO_POSITION) {
            return;
        }
        final int itemCount = adapter.getItemCount();

        
        if (position >= itemCount && itemCount != 0) {
            position = position % itemCount;
        }

        final float offset = (getCurrentFrameLeft() - leftView.getX()) / leftView.getMeasuredWidth();

        if (offset >= 0 && offset <= 1 && position < itemCount) {
            indicator.onPageScrolled(position, offset);
","['    ', 'private', ' ', 'void', ' ', 'updateCurrentOffset', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'View', ' ', 'leftView', ' ', '=', ' ', 'findFirstVisibleView', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'leftView', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'int', ' ', 'position', ' ', '=', ' ', 'recyclerView', '.', 'getChildAdapterPosition', '(', 'leftView', ')', ';', '\n', '        ', 'if', ' ', '(', 'position', ' ', '=', '=', ' ', 'RecyclerView', '.', 'NO_POSITION', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'final', ' ', 'int', ' ', 'itemCount', ' ', '=', ' ', 'adapter', '.', 'getItemCount', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'position', ' ', '>', '=', ' ', 'itemCount', ' ', '&', '&', ' ', 'itemCount', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'position', ' ', '=', ' ', 'position', ' ', '%', ' ', 'itemCount', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'float', ' ', 'offset', ' ', '=', ' ', '(', 'getCurrentFrameLeft', '(', ')', ' ', '-', ' ', 'leftView', '.', 'getX', '(', ')', ')', ' ', '/', ' ', 'leftView', '.', 'getMeasuredWidth', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '>', '=', ' ', '0', ' ', '&', '&', ' ', 'offset', ' ', '<', '=', ' ', '1', ' ', '&', '&', ' ', 'position', ' ', '<', ' ', 'itemCount', ')', ' ', '{', '\n', '            ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'offset', ')', ';', '\n', '<END>']"
master,9d129bc4dfb21886cda6709d1808030621ff51fe,RecyclerViewAttacher.java,onItemRangeChanged,"            public void onItemRangeChanged(int positionStart, int itemCount) {
                onChanged();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/9d129bc4dfb21886cda6709d1808030621ff51fe,"            public void onItemRangeChanged(int positionStart, int itemCount) {
                onChanged();
            }
","['            ', 'public', ' ', 'void', ' ', 'onItemRangeChanged', '(', 'int', ' ', 'positionStart', ',', ' ', 'int', ' ', 'itemCount', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,9d129bc4dfb21886cda6709d1808030621ff51fe,RecyclerViewAttacher.java,onItemRangeChanged,"            public void onItemRangeChanged(int positionStart, int itemCount, Object payload) {
                onChanged();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/9d129bc4dfb21886cda6709d1808030621ff51fe,"            public void onItemRangeChanged(int positionStart, int itemCount, Object payload) {
                onChanged();
            }
","['            ', 'public', ' ', 'void', ' ', 'onItemRangeChanged', '(', 'int', ' ', 'positionStart', ',', ' ', 'int', ' ', 'itemCount', ',', ' ', 'Object', ' ', 'payload', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,9d129bc4dfb21886cda6709d1808030621ff51fe,RecyclerViewAttacher.java,onItemRangeInserted,"            public void onItemRangeInserted(int positionStart, int itemCount) {
                onChanged();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/9d129bc4dfb21886cda6709d1808030621ff51fe,"            public void onItemRangeInserted(int positionStart, int itemCount) {
                onChanged();
            }
","['            ', 'public', ' ', 'void', ' ', 'onItemRangeInserted', '(', 'int', ' ', 'positionStart', ',', ' ', 'int', ' ', 'itemCount', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,9d129bc4dfb21886cda6709d1808030621ff51fe,RecyclerViewAttacher.java,onItemRangeRemoved,"            public void onItemRangeRemoved(int positionStart, int itemCount) {
                onChanged();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/9d129bc4dfb21886cda6709d1808030621ff51fe,"            public void onItemRangeRemoved(int positionStart, int itemCount) {
                onChanged();
            }
","['            ', 'public', ' ', 'void', ' ', 'onItemRangeRemoved', '(', 'int', ' ', 'positionStart', ',', ' ', 'int', ' ', 'itemCount', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,9d129bc4dfb21886cda6709d1808030621ff51fe,RecyclerViewAttacher.java,onItemRangeMoved,"            public void onItemRangeMoved(int fromPosition, int toPosition, int itemCount) {
                onChanged();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/9d129bc4dfb21886cda6709d1808030621ff51fe,"            public void onItemRangeMoved(int fromPosition, int toPosition, int itemCount) {
                onChanged();
            }
","['            ', 'public', ' ', 'void', ' ', 'onItemRangeMoved', '(', 'int', ' ', 'fromPosition', ',', ' ', 'int', ' ', 'toPosition', ',', ' ', 'int', ' ', 'itemCount', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,e1baf34c5a457bf48e82a76a24c260d6ac27b578,ViewPagerAttacher.java,attachToPager,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                final float offset;
                // ViewPager may emit negative positionOffset for very fast scrolling
                if (positionOffset < 0) {
                    offset = 0;
                } else if (positionOffset > 1) {
                    offset = 1;
                } else {
                    offset = positionOffset;
                }
                indicator.onPageScrolled(position, offset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/e1baf34c5a457bf48e82a76a24c260d6ac27b578,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        final PagerAdapter adapter = pager.getAdapter();
        if (adapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(adapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        adapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                final float offset;
                
                if (positionOffset < 0) {
                    offset = 0;
                } else if (positionOffset > 1) {
                    offset = 1;
                } else {
                    offset = positionOffset;
                }
                indicator.onPageScrolled(position, offset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(adapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'final', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', '@NonNull', ' ', 'final', ' ', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'final', ' ', 'PagerAdapter', ' ', 'adapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'adapter', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Set adapter before call attachToPager() method', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'this', '.', 'pager', ' ', '=', ' ', 'pager', ';', '\n', '\n', '        ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '        ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '\n', '        ', 'dataSetObserver', ' ', '=', ' ', 'new', ' ', 'DataSetObserver', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'adapter', '.', 'registerDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '\n', '        ', 'onPageChangeListener', ' ', '=', ' ', 'new', ' ', 'ViewPager', '.', 'OnPageChangeListener', '(', ')', ' ', '{', '\n', '\n', '            ', 'boolean', ' ', 'idleState', ' ', '=', ' ', 'true', ';', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'final', ' ', 'float', ' ', 'offset', ';', '\n', '                ', '\n', '                ', 'if', ' ', '(', 'positionOffset', ' ', '<', ' ', '0', ')', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', '0', ';', '\n', '                ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'positionOffset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', '1', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', 'positionOffset', ';', '\n', '                ', '}', '\n', '                ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'indicator', '.', 'setDotCount', '(', 'adapter', '.', 'getCount', '(', ')', ')', ';', '\n', '                    ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'pager', '.', 'addOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,e1baf34c5a457bf48e82a76a24c260d6ac27b578,ViewPagerAttacher.java,onPageScrolled,"            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                final float offset;
                // ViewPager may emit negative positionOffset for very fast scrolling
                if (positionOffset < 0) {
                    offset = 0;
                } else if (positionOffset > 1) {
                    offset = 1;
                } else {
                    offset = positionOffset;
                }
                indicator.onPageScrolled(position, offset);
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/e1baf34c5a457bf48e82a76a24c260d6ac27b578,"            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                final float offset;
                
                if (positionOffset < 0) {
                    offset = 0;
                } else if (positionOffset > 1) {
                    offset = 1;
                } else {
                    offset = positionOffset;
                }
                indicator.onPageScrolled(position, offset);
            }
","['            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'final', ' ', 'float', ' ', 'offset', ';', '\n', '                ', '\n', '                ', 'if', ' ', '(', 'positionOffset', ' ', '<', ' ', '0', ')', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', '0', ';', '\n', '                ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'positionOffset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', '1', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', 'positionOffset', ';', '\n', '                ', '}', '\n', '                ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,e46ab847ae3f822703d4f1beb5e631dad973eae7,ScrollingPagerIndicator.java,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        // Width
        int measuredWidth;
        // We ignore widthMeasureSpec because width is based on visibleDotCount
        if (isInEditMode()) {
            // Maximum width with all dots visible
            measuredWidth = (visibleDotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        } else {
            measuredWidth = dotCount >= visibleDotCount
                    ? (int) visibleFrameWidth
                    : (dotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        }

        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        // Height
        int desiredHeight = dotSelectedSize;
        int measuredHeight;

        switch (heightMode) {
            case MeasureSpec.EXACTLY:
                measuredHeight = heightSize;
                break;
            case MeasureSpec.AT_MOST:
                measuredHeight = Math.min(desiredHeight, heightSize);
                break;
            case MeasureSpec.UNSPECIFIED:
            default:
                measuredHeight = desiredHeight;
        }

        setMeasuredDimension(measuredWidth, measuredHeight);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/e46ab847ae3f822703d4f1beb5e631dad973eae7,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        
        int measuredWidth;
        
        if (isInEditMode()) {
            
            measuredWidth = (visibleDotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        } else {
            measuredWidth = dotCount >= visibleDotCount
                    ? (int) visibleFrameWidth
                    : (dotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        }

        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        
        int desiredHeight = dotSelectedSize;
        int measuredHeight;

        switch (heightMode) {
            case MeasureSpec.EXACTLY:
                measuredHeight = heightSize;
                break;
            case MeasureSpec.AT_MOST:
                measuredHeight = Math.min(desiredHeight, heightSize);
                break;
            case MeasureSpec.UNSPECIFIED:
            default:
                measuredHeight = desiredHeight;
        }

        setMeasuredDimension(measuredWidth, measuredHeight);
    }
","['    ', 'protected', ' ', 'void', ' ', 'onMeasure', '(', 'int', ' ', 'widthMeasureSpec', ',', ' ', 'int', ' ', 'heightMeasureSpec', ')', ' ', '{', '\n', '        ', '\n', '        ', 'int', ' ', 'measuredWidth', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'isInEditMode', '(', ')', ')', ' ', '{', '\n', '            ', '\n', '            ', 'measuredWidth', ' ', '=', ' ', '(', 'visibleDotCount', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'spaceBetweenDotCenters', ' ', '+', ' ', 'dotSelectedSize', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'measuredWidth', ' ', '=', ' ', 'dotCount', ' ', '>', '=', ' ', 'visibleDotCount', '\n', '                    ', '?', ' ', '(', 'int', ')', ' ', 'visibleFrameWidth', '\n', '                    ', ':', ' ', '(', 'dotCount', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'spaceBetweenDotCenters', ' ', '+', ' ', 'dotSelectedSize', ';', '\n', '        ', '}', '\n', '\n', '        ', 'int', ' ', 'heightMode', ' ', '=', ' ', 'MeasureSpec', '.', 'getMode', '(', 'heightMeasureSpec', ')', ';', '\n', '        ', 'int', ' ', 'heightSize', ' ', '=', ' ', 'MeasureSpec', '.', 'getSize', '(', 'heightMeasureSpec', ')', ';', '\n', '\n', '        ', '\n', '        ', 'int', ' ', 'desiredHeight', ' ', '=', ' ', 'dotSelectedSize', ';', '\n', '        ', 'int', ' ', 'measuredHeight', ';', '\n', '\n', '        ', 'switch', ' ', '(', 'heightMode', ')', ' ', '{', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'EXACTLY', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'heightSize', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'AT_MOST', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'Math', '.', 'min', '(', 'desiredHeight', ',', ' ', 'heightSize', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'UNSPECIFIED', ':', '\n', '            ', 'default', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'desiredHeight', ';', '\n', '        ', '}', '\n', '\n', '        ', 'setMeasuredDimension', '(', 'measuredWidth', ',', ' ', 'measuredHeight', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,36539f303769909353664cad2110b0c9e83d23a1,ScrollingPagerIndicator.java,onDraw,"    protected void onDraw(Canvas canvas) {
        if (dotOffset == null || dotOffset.length < visibleDotThreshold) {
            return;
        }

        // Some empirical coefficients
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        for (int i = 0; i < dotOffset.length; i++) {
            float dot = dotOffset[i];",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/36539f303769909353664cad2110b0c9e83d23a1,"    protected void onDraw(Canvas canvas) {
        if (dotOffset == null || dotOffset.length < visibleDotThreshold) {
            return;
        }

        
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        for (int i = 0; i < dotOffset.length; i++) {
            float dot = dotOffset[i];
","['    ', 'protected', ' ', 'void', ' ', 'onDraw', '(', 'Canvas', ' ', 'canvas', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'dotOffset', ' ', '=', '=', ' ', 'null', ' ', '|', '|', ' ', 'dotOffset', '.', 'length', ' ', '<', ' ', 'visibleDotThreshold', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'float', ' ', 'scaleDistance', ' ', '=', ' ', '(', 'spaceBetweenDotCenters', ' ', '+', ' ', '(', 'dotSelectedSize', ' ', '-', ' ', 'dotNormalSize', ')', ' ', '/', ' ', '2', ')', ' ', '*', ' ', '0.7f', ';', '\n', '        ', 'float', ' ', 'smallScaleDistance', ' ', '=', ' ', 'dotSelectedSize', ' ', '/', ' ', '2', ';', '\n', '        ', 'float', ' ', 'centerScaleDistance', ' ', '=', ' ', '6f', ' ', '/', ' ', '7f', ' ', '*', ' ', 'spaceBetweenDotCenters', ';', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', '0', ';', ' ', 'i', ' ', '<', ' ', 'dotOffset', '.', 'length', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'float', ' ', 'dot', ' ', '=', ' ', 'dotOffset', '[', 'i', ']', ';', '\n', '<END>']"
master,416380e3fa7dc842d6701663019287f86edb0c14,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            Arrays.fill(dotScale, 0);

            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/416380e3fa7dc842d6701663019287f86edb0c14,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            Arrays.fill(dotScale, 0);

            scaleDotByOffset(page, offset);
            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else {
                scaleDotByOffset(0, offset);
            }
            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'dotCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'dotCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'dotCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'Arrays', '.', 'fill', '(', 'dotScale', ',', ' ', '0', ')', ';', '\n', '\n', '            ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '            ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'dotCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', '0', ',', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,d6b39dab56f5e9136ecee1ee82df957e7fd0bed8,ScrollingPagerIndicator.java,calculateDotColor,"    private int calculateDotColor(float dotScale) {
        return (Integer) colorEvaluator.evaluate(dotScale, dotColor, selectedDotColor);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/d6b39dab56f5e9136ecee1ee82df957e7fd0bed8,"    private int calculateDotColor(float dotScale) {
        return (Integer) colorEvaluator.evaluate(dotScale, dotColor, selectedDotColor);
    }
","['    ', 'private', ' ', 'int', ' ', 'calculateDotColor', '(', 'float', ' ', 'dotScale', ')', ' ', '{', '\n', '        ', 'return', ' ', '(', 'Integer', ')', ' ', 'colorEvaluator', '.', 'evaluate', '(', 'dotScale', ',', ' ', 'dotColor', ',', ' ', 'selectedDotColor', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,c621a2eadc2cd28b2e32c560a79082a4b1506dbf,ScrollingPagerIndicator.java,attachToPager,"    public <T> void attachToPager(@NonNull final T pager, @NonNull final PagerAttacher<T> attacher) {
        detachFromPager();
        attacher.attachToPager(this, pager);
        currentAttacher = attacher;

        attachRunnable = new Runnable() {
            @Override",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c621a2eadc2cd28b2e32c560a79082a4b1506dbf,"    public <T> void attachToPager(@NonNull final T pager, @NonNull final PagerAttacher<T> attacher) {
        detachFromPager();
        attacher.attachToPager(this, pager);
        currentAttacher = attacher;

        attachRunnable = new Runnable() {
            @Override
","['    ', 'public', ' ', '<', 'T', '>', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'final', ' ', 'T', ' ', 'pager', ',', ' ', '@NonNull', ' ', 'final', ' ', 'PagerAttacher', '<', 'T', '>', ' ', 'attacher', ')', ' ', '{', '\n', '        ', 'detachFromPager', '(', ')', ';', '\n', '        ', 'attacher', '.', 'attachToPager', '(', 'this', ',', ' ', 'pager', ')', ';', '\n', '        ', 'currentAttacher', ' ', '=', ' ', 'attacher', ';', '\n', '\n', '        ', 'attachRunnable', ' ', '=', ' ', 'new', ' ', 'Runnable', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '<END>']"
master,c621a2eadc2cd28b2e32c560a79082a4b1506dbf,ScrollingPagerIndicator.java,detachFromPager,"    public void detachFromPager() {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
        }
        dotCountInitialized = false;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/c621a2eadc2cd28b2e32c560a79082a4b1506dbf,"    public void detachFromPager() {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
        }
        dotCountInitialized = false;
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'currentAttacher', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'currentAttacher', '.', 'detachFromPager', '(', ')', ';', '\n', '            ', 'currentAttacher', ' ', '=', ' ', 'null', ';', '\n', '            ', 'attachRunnable', ' ', '=', ' ', 'null', ';', '\n', '        ', '}', '\n', '        ', 'dotCountInitialized', ' ', '=', ' ', 'false', ';', '\n', '    ', '}', '\n', '<END>']"
master,d1b3b4989cb1ea3d9df303be578e184130ef42dc,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            Arrays.fill(dotScale, 0);

            scaleDotByOffset(page, offset);

            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else if (dotCount > 1) {
                scaleDotByOffset(0, 1 - offset);
            }

            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/d1b3b4989cb1ea3d9df303be578e184130ef42dc,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= dotCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || dotCount <= visibleDotCount && dotCount > 1) {
            Arrays.fill(dotScale, 0);

            scaleDotByOffset(page, offset);

            if (page < dotCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else if (dotCount > 1) {
                scaleDotByOffset(0, 1 - offset);
            }

            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'dotCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'dotCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'dotCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'Arrays', '.', 'fill', '(', 'dotScale', ',', ' ', '0', ')', ';', '\n', '\n', '            ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'dotCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'dotCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,RecyclerViewAttacher.java,onChanged,"            public void onChanged() {
                indicator.setDotCount(attachedAdapter.getItemCount());
                updateCurrentOffset();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,"            public void onChanged() {
                indicator.setDotCount(attachedAdapter.getItemCount());
                updateCurrentOffset();
            }
","['            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'setDotCount', '(', 'attachedAdapter', '.', 'getItemCount', '(', ')', ')', ';', '\n', '                ', 'updateCurrentOffset', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,RecyclerViewAttacher.java,detachFromPager,"    public void detachFromPager() {
        attachedAdapter.unregisterAdapterDataObserver(dataObserver);
        recyclerView.removeOnScrollListener(scrollListener);
        measuredChildWidth = 0;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,"    public void detachFromPager() {
        attachedAdapter.unregisterAdapterDataObserver(dataObserver);
        recyclerView.removeOnScrollListener(scrollListener);
        measuredChildWidth = 0;
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'attachedAdapter', '.', 'unregisterAdapterDataObserver', '(', 'dataObserver', ')', ';', '\n', '        ', 'recyclerView', '.', 'removeOnScrollListener', '(', 'scrollListener', ')', ';', '\n', '        ', 'measuredChildWidth', ' ', '=', ' ', '0', ';', '\n', '    ', '}', '\n', '<END>']"
master,19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,RecyclerViewAttacher.java,updateCurrentOffset,"    private void updateCurrentOffset() {
        final View leftView = findFirstVisibleView();
        if (leftView == null) {
            return;
        }

        int position = recyclerView.getChildAdapterPosition(leftView);
        if (position == RecyclerView.NO_POSITION) {
            return;
        }
        final int itemCount = attachedAdapter.getItemCount();

        // In case there is an infinite pager
        if (position >= itemCount && itemCount != 0) {
            position = position % itemCount;
        }

        final float offset = (getCurrentFrameLeft() - leftView.getX()) / leftView.getMeasuredWidth();

        if (offset >= 0 && offset <= 1 && position < itemCount) {
            indicator.onPageScrolled(position, offset);",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,"    private void updateCurrentOffset() {
        final View leftView = findFirstVisibleView();
        if (leftView == null) {
            return;
        }

        int position = recyclerView.getChildAdapterPosition(leftView);
        if (position == RecyclerView.NO_POSITION) {
            return;
        }
        final int itemCount = attachedAdapter.getItemCount();

        
        if (position >= itemCount && itemCount != 0) {
            position = position % itemCount;
        }

        final float offset = (getCurrentFrameLeft() - leftView.getX()) / leftView.getMeasuredWidth();

        if (offset >= 0 && offset <= 1 && position < itemCount) {
            indicator.onPageScrolled(position, offset);
","['    ', 'private', ' ', 'void', ' ', 'updateCurrentOffset', '(', ')', ' ', '{', '\n', '        ', 'final', ' ', 'View', ' ', 'leftView', ' ', '=', ' ', 'findFirstVisibleView', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'leftView', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'int', ' ', 'position', ' ', '=', ' ', 'recyclerView', '.', 'getChildAdapterPosition', '(', 'leftView', ')', ';', '\n', '        ', 'if', ' ', '(', 'position', ' ', '=', '=', ' ', 'RecyclerView', '.', 'NO_POSITION', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'final', ' ', 'int', ' ', 'itemCount', ' ', '=', ' ', 'attachedAdapter', '.', 'getItemCount', '(', ')', ';', '\n', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'position', ' ', '>', '=', ' ', 'itemCount', ' ', '&', '&', ' ', 'itemCount', ' ', '!', '=', ' ', '0', ')', ' ', '{', '\n', '            ', 'position', ' ', '=', ' ', 'position', ' ', '%', ' ', 'itemCount', ';', '\n', '        ', '}', '\n', '\n', '        ', 'final', ' ', 'float', ' ', 'offset', ' ', '=', ' ', '(', 'getCurrentFrameLeft', '(', ')', ' ', '-', ' ', 'leftView', '.', 'getX', '(', ')', ')', ' ', '/', ' ', 'leftView', '.', 'getMeasuredWidth', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '>', '=', ' ', '0', ' ', '&', '&', ' ', 'offset', ' ', '<', '=', ' ', '1', ' ', '&', '&', ' ', 'position', ' ', '<', ' ', 'itemCount', ')', ' ', '{', '\n', '            ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'offset', ')', ';', '\n', '<END>']"
master,19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,ViewPagerAttacher.java,attachToPager,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        attachedAdapter = pager.getAdapter();
        if (attachedAdapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(attachedAdapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        attachedAdapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                final float offset;
                // ViewPager may emit negative positionOffset for very fast scrolling
                if (positionOffset < 0) {
                    offset = 0;
                } else if (positionOffset > 1) {
                    offset = 1;
                } else {
                    offset = positionOffset;
                }
                indicator.onPageScrolled(position, offset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(attachedAdapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        attachedAdapter = pager.getAdapter();
        if (attachedAdapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        indicator.setDotCount(attachedAdapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        attachedAdapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                final float offset;
                
                if (positionOffset < 0) {
                    offset = 0;
                } else if (positionOffset > 1) {
                    offset = 1;
                } else {
                    offset = positionOffset;
                }
                indicator.onPageScrolled(position, offset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(attachedAdapter.getCount());
                    indicator.setCurrentPosition(pager.getCurrentItem());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'final', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', '@NonNull', ' ', 'final', ' ', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'attachedAdapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'attachedAdapter', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Set adapter before call attachToPager() method', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'this', '.', 'pager', ' ', '=', ' ', 'pager', ';', '\n', '\n', '        ', 'indicator', '.', 'setDotCount', '(', 'attachedAdapter', '.', 'getCount', '(', ')', ')', ';', '\n', '        ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '\n', '        ', 'dataSetObserver', ' ', '=', ' ', 'new', ' ', 'DataSetObserver', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'attachedAdapter', '.', 'registerDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '\n', '        ', 'onPageChangeListener', ' ', '=', ' ', 'new', ' ', 'ViewPager', '.', 'OnPageChangeListener', '(', ')', ' ', '{', '\n', '\n', '            ', 'boolean', ' ', 'idleState', ' ', '=', ' ', 'true', ';', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'final', ' ', 'float', ' ', 'offset', ';', '\n', '                ', '\n', '                ', 'if', ' ', '(', 'positionOffset', ' ', '<', ' ', '0', ')', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', '0', ';', '\n', '                ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'positionOffset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', '1', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'offset', ' ', '=', ' ', 'positionOffset', ';', '\n', '                ', '}', '\n', '                ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'indicator', '.', 'setDotCount', '(', 'attachedAdapter', '.', 'getCount', '(', ')', ')', ';', '\n', '                    ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'pager', '.', 'addOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,ViewPagerAttacher.java,onPageSelected,"            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(attachedAdapter.getCount());",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,"            public void onPageSelected(int position) {
                if (idleState) {
                    indicator.setDotCount(attachedAdapter.getCount());
","['            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'indicator', '.', 'setDotCount', '(', 'attachedAdapter', '.', 'getCount', '(', ')', ')', ';', '\n', '<END>']"
master,19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,ViewPagerAttacher.java,detachFromPager,"    public void detachFromPager() {
        attachedAdapter.unregisterDataSetObserver(dataSetObserver);
        pager.removeOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/19a0e1949bca9fbcf6fe931885dbfcc5049a6ff8,"    public void detachFromPager() {
        attachedAdapter.unregisterDataSetObserver(dataSetObserver);
        pager.removeOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'attachedAdapter', '.', 'unregisterDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '        ', 'pager', '.', 'removeOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7b9094415951b65bb1316f6f41c175cdba36abbe,ScrollingPagerIndicator.java,run,"            public void run() {
                itemCount = -1;
                attachToPager(pager, attacher);
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7b9094415951b65bb1316f6f41c175cdba36abbe,"            public void run() {
                itemCount = -1;
                attachToPager(pager, attacher);
            }
","['            ', 'public', ' ', 'void', ' ', 'run', '(', ')', ' ', '{', '\n', '                ', 'itemCount', ' ', '=', ' ', '-', '1', ';', '\n', '                ', 'attachToPager', '(', 'pager', ',', ' ', 'attacher', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,7b9094415951b65bb1316f6f41c175cdba36abbe,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            scaleDotByOffset(page, offset);

            if (page < itemCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else if (itemCount > 1) {
                scaleDotByOffset(0, 1 - offset);
            }

            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7b9094415951b65bb1316f6f41c175cdba36abbe,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            scaleDotByOffset(page, offset);

            if (page < itemCount - 1) {
                scaleDotByOffset(page + 1, 1 - offset);
            } else if (itemCount > 1) {
                scaleDotByOffset(0, 1 - offset);
            }

            invalidate();
        }
        adjustFramePosition(offset, page);
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'itemCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'itemCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'dotScale', '.', 'clear', '(', ')', ';', '\n', '\n', '            ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'itemCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7b9094415951b65bb1316f6f41c175cdba36abbe,ScrollingPagerIndicator.java,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        // Width
        int measuredWidth;
        // We ignore widthMeasureSpec because width is based on visibleDotCount
        if (isInEditMode()) {
            // Maximum width with all dots visible
            measuredWidth = (visibleDotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        } else {
            measuredWidth = itemCount >= visibleDotCount
                    ? (int) visibleFrameWidth
                    : (itemCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        }

        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        // Height
        int desiredHeight = dotSelectedSize;
        int measuredHeight;

        switch (heightMode) {
            case MeasureSpec.EXACTLY:
                measuredHeight = heightSize;
                break;
            case MeasureSpec.AT_MOST:
                measuredHeight = Math.min(desiredHeight, heightSize);
                break;
            case MeasureSpec.UNSPECIFIED:
            default:
                measuredHeight = desiredHeight;
        }

        setMeasuredDimension(measuredWidth, measuredHeight);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7b9094415951b65bb1316f6f41c175cdba36abbe,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        
        int measuredWidth;
        
        if (isInEditMode()) {
            
            measuredWidth = (visibleDotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        } else {
            measuredWidth = itemCount >= visibleDotCount
                    ? (int) visibleFrameWidth
                    : (itemCount - 1) * spaceBetweenDotCenters + dotSelectedSize;
        }

        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        
        int desiredHeight = dotSelectedSize;
        int measuredHeight;

        switch (heightMode) {
            case MeasureSpec.EXACTLY:
                measuredHeight = heightSize;
                break;
            case MeasureSpec.AT_MOST:
                measuredHeight = Math.min(desiredHeight, heightSize);
                break;
            case MeasureSpec.UNSPECIFIED:
            default:
                measuredHeight = desiredHeight;
        }

        setMeasuredDimension(measuredWidth, measuredHeight);
    }
","['    ', 'protected', ' ', 'void', ' ', 'onMeasure', '(', 'int', ' ', 'widthMeasureSpec', ',', ' ', 'int', ' ', 'heightMeasureSpec', ')', ' ', '{', '\n', '        ', '\n', '        ', 'int', ' ', 'measuredWidth', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'isInEditMode', '(', ')', ')', ' ', '{', '\n', '            ', '\n', '            ', 'measuredWidth', ' ', '=', ' ', '(', 'visibleDotCount', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'spaceBetweenDotCenters', ' ', '+', ' ', 'dotSelectedSize', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'measuredWidth', ' ', '=', ' ', 'itemCount', ' ', '>', '=', ' ', 'visibleDotCount', '\n', '                    ', '?', ' ', '(', 'int', ')', ' ', 'visibleFrameWidth', '\n', '                    ', ':', ' ', '(', 'itemCount', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'spaceBetweenDotCenters', ' ', '+', ' ', 'dotSelectedSize', ';', '\n', '        ', '}', '\n', '\n', '        ', 'int', ' ', 'heightMode', ' ', '=', ' ', 'MeasureSpec', '.', 'getMode', '(', 'heightMeasureSpec', ')', ';', '\n', '        ', 'int', ' ', 'heightSize', ' ', '=', ' ', 'MeasureSpec', '.', 'getSize', '(', 'heightMeasureSpec', ')', ';', '\n', '\n', '        ', '\n', '        ', 'int', ' ', 'desiredHeight', ' ', '=', ' ', 'dotSelectedSize', ';', '\n', '        ', 'int', ' ', 'measuredHeight', ';', '\n', '\n', '        ', 'switch', ' ', '(', 'heightMode', ')', ' ', '{', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'EXACTLY', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'heightSize', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'AT_MOST', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'Math', '.', 'min', '(', 'desiredHeight', ',', ' ', 'heightSize', ')', ';', '\n', '                ', 'break', ';', '\n', '            ', 'case', ' ', 'MeasureSpec', '.', 'UNSPECIFIED', ':', '\n', '            ', 'default', ':', '\n', '                ', 'measuredHeight', ' ', '=', ' ', 'desiredHeight', ';', '\n', '        ', '}', '\n', '\n', '        ', 'setMeasuredDimension', '(', 'measuredWidth', ',', ' ', 'measuredHeight', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7b9094415951b65bb1316f6f41c175cdba36abbe,ScrollingPagerIndicator.java,updateScaleInIdleState,"    private void updateScaleInIdleState(int currentPos) {
        if (!looped || itemCount < visibleDotCount) {
            dotScale.clear();",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7b9094415951b65bb1316f6f41c175cdba36abbe,"    private void updateScaleInIdleState(int currentPos) {
        if (!looped || itemCount < visibleDotCount) {
            dotScale.clear();
","['    ', 'private', ' ', 'void', ' ', 'updateScaleInIdleState', '(', 'int', ' ', 'currentPos', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'itemCount', ' ', '<', ' ', 'visibleDotCount', ')', ' ', '{', '\n', '            ', 'dotScale', '.', 'clear', '(', ')', ';', '\n', '<END>']"
master,7b9094415951b65bb1316f6f41c175cdba36abbe,ScrollingPagerIndicator.java,initDots,"    private void initDots(int itemCount) {
        if (this.itemCount == itemCount && dotCountInitialized) {
            return;
        }
        this.itemCount = itemCount;
        dotCountInitialized = true;
        dotScale = new SparseArray<>();

        if (itemCount < visibleDotThreshold) {
            requestLayout();
            invalidate();
            return;
        }

        firstDotOffset = looped && this.itemCount > visibleDotCount ? 0 : dotSelectedSize / 2;
        visibleFrameWidth = (visibleDotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;

        requestLayout();
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7b9094415951b65bb1316f6f41c175cdba36abbe,"    private void initDots(int itemCount) {
        if (this.itemCount == itemCount && dotCountInitialized) {
            return;
        }
        this.itemCount = itemCount;
        dotCountInitialized = true;
        dotScale = new SparseArray<>();

        if (itemCount < visibleDotThreshold) {
            requestLayout();
            invalidate();
            return;
        }

        firstDotOffset = looped && this.itemCount > visibleDotCount ? 0 : dotSelectedSize / 2;
        visibleFrameWidth = (visibleDotCount - 1) * spaceBetweenDotCenters + dotSelectedSize;

        requestLayout();
        invalidate();
    }
","['    ', 'private', ' ', 'void', ' ', 'initDots', '(', 'int', ' ', 'itemCount', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'this', '.', 'itemCount', ' ', '=', '=', ' ', 'itemCount', ' ', '&', '&', ' ', 'dotCountInitialized', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '        ', 'this', '.', 'itemCount', ' ', '=', ' ', 'itemCount', ';', '\n', '        ', 'dotCountInitialized', ' ', '=', ' ', 'true', ';', '\n', '        ', 'dotScale', ' ', '=', ' ', 'new', ' ', 'SparseArray', '<', '>', '(', ')', ';', '\n', '\n', '        ', 'if', ' ', '(', 'itemCount', ' ', '<', ' ', 'visibleDotThreshold', ')', ' ', '{', '\n', '            ', 'requestLayout', '(', ')', ';', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', 'firstDotOffset', ' ', '=', ' ', 'looped', ' ', '&', '&', ' ', 'this', '.', 'itemCount', ' ', '>', ' ', 'visibleDotCount', ' ', '?', ' ', '0', ' ', ':', ' ', 'dotSelectedSize', ' ', '/', ' ', '2', ';', '\n', '        ', 'visibleFrameWidth', ' ', '=', ' ', '(', 'visibleDotCount', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'spaceBetweenDotCenters', ' ', '+', ' ', 'dotSelectedSize', ';', '\n', '\n', '        ', 'requestLayout', '(', ')', ';', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,7b9094415951b65bb1316f6f41c175cdba36abbe,ScrollingPagerIndicator.java,adjustFramePosition,"    private void adjustFramePosition(float offset, int pos) {
        if (itemCount <= visibleDotCount) {
            // Without scroll",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/7b9094415951b65bb1316f6f41c175cdba36abbe,"    private void adjustFramePosition(float offset, int pos) {
        if (itemCount <= visibleDotCount) {
            
","['    ', 'private', ' ', 'void', ' ', 'adjustFramePosition', '(', 'float', ' ', 'offset', ',', ' ', 'int', ' ', 'pos', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'itemCount', ' ', '<', '=', ' ', 'visibleDotCount', ')', ' ', '{', '\n', '            ', '\n', '<END>']"
master,76696cc14b15fcb786e8f10b468124cd4ca9fa59,ScrollingPagerIndicator.java,onDraw,"    protected void onDraw(Canvas canvas) {
        int dotCount = getDotCount();
        if (dotCount < visibleDotThreshold) {
            return;
        }

        // Some empirical coefficients
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        int firstVisibleDotPos = (int) (visibleFramePosition - firstDotOffset) / spaceBetweenDotCenters;
        int lastVisibleDotPos = firstVisibleDotPos
                + (int) (visibleFramePosition + visibleFrameWidth - getDotOffsetAt(firstVisibleDotPos))
                / spaceBetweenDotCenters;

        // If real dots count is less than we can draw inside visible frame, we move lastVisibleDotPos
        // to the last item
        if (firstVisibleDotPos == 0 && lastVisibleDotPos + 1 > dotCount) {
            lastVisibleDotPos = dotCount - 1;
        }

        for (int i = firstVisibleDotPos; i <= lastVisibleDotPos; i++) {
            float dot = getDotOffsetAt(i);",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/76696cc14b15fcb786e8f10b468124cd4ca9fa59,"    protected void onDraw(Canvas canvas) {
        int dotCount = getDotCount();
        if (dotCount < visibleDotThreshold) {
            return;
        }

        
        float scaleDistance = (spaceBetweenDotCenters + (dotSelectedSize - dotNormalSize) / 2) * 0.7f;
        float smallScaleDistance = dotSelectedSize / 2;
        float centerScaleDistance = 6f / 7f * spaceBetweenDotCenters;

        int firstVisibleDotPos = (int) (visibleFramePosition - firstDotOffset) / spaceBetweenDotCenters;
        int lastVisibleDotPos = firstVisibleDotPos
                + (int) (visibleFramePosition + visibleFrameWidth - getDotOffsetAt(firstVisibleDotPos))
                / spaceBetweenDotCenters;

        
        
        if (firstVisibleDotPos == 0 && lastVisibleDotPos + 1 > dotCount) {
            lastVisibleDotPos = dotCount - 1;
        }

        for (int i = firstVisibleDotPos; i <= lastVisibleDotPos; i++) {
            float dot = getDotOffsetAt(i);
","['    ', 'protected', ' ', 'void', ' ', 'onDraw', '(', 'Canvas', ' ', 'canvas', ')', ' ', '{', '\n', '        ', 'int', ' ', 'dotCount', ' ', '=', ' ', 'getDotCount', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'dotCount', ' ', '<', ' ', 'visibleDotThreshold', ')', ' ', '{', '\n', '            ', 'return', ';', '\n', '        ', '}', '\n', '\n', '        ', '\n', '        ', 'float', ' ', 'scaleDistance', ' ', '=', ' ', '(', 'spaceBetweenDotCenters', ' ', '+', ' ', '(', 'dotSelectedSize', ' ', '-', ' ', 'dotNormalSize', ')', ' ', '/', ' ', '2', ')', ' ', '*', ' ', '0.7f', ';', '\n', '        ', 'float', ' ', 'smallScaleDistance', ' ', '=', ' ', 'dotSelectedSize', ' ', '/', ' ', '2', ';', '\n', '        ', 'float', ' ', 'centerScaleDistance', ' ', '=', ' ', '6f', ' ', '/', ' ', '7f', ' ', '*', ' ', 'spaceBetweenDotCenters', ';', '\n', '\n', '        ', 'int', ' ', 'firstVisibleDotPos', ' ', '=', ' ', '(', 'int', ')', ' ', '(', 'visibleFramePosition', ' ', '-', ' ', 'firstDotOffset', ')', ' ', '/', ' ', 'spaceBetweenDotCenters', ';', '\n', '        ', 'int', ' ', 'lastVisibleDotPos', ' ', '=', ' ', 'firstVisibleDotPos', '\n', '                ', '+', ' ', '(', 'int', ')', ' ', '(', 'visibleFramePosition', ' ', '+', ' ', 'visibleFrameWidth', ' ', '-', ' ', 'getDotOffsetAt', '(', 'firstVisibleDotPos', ')', ')', '\n', '                ', '/', ' ', 'spaceBetweenDotCenters', ';', '\n', '\n', '        ', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'firstVisibleDotPos', ' ', '=', '=', ' ', '0', ' ', '&', '&', ' ', 'lastVisibleDotPos', ' ', '+', ' ', '1', ' ', '>', ' ', 'dotCount', ')', ' ', '{', '\n', '            ', 'lastVisibleDotPos', ' ', '=', ' ', 'dotCount', ' ', '-', ' ', '1', ';', '\n', '        ', '}', '\n', '\n', '        ', 'for', ' ', '(', 'int', ' ', 'i', ' ', '=', ' ', 'firstVisibleDotPos', ';', ' ', 'i', ' ', '<', '=', ' ', 'lastVisibleDotPos', ';', ' ', 'i', '+', '+', ')', ' ', '{', '\n', '            ', 'float', ' ', 'dot', ' ', '=', ' ', 'getDotOffsetAt', '(', 'i', ')', ';', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,DemoRecyclerViewAdapter.java,onCreateViewHolder,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.demo_page, parent, false);
        view.getLayoutParams().width = itemWidth;
        return new ViewHolder(view);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.demo_page, parent, false);
        view.getLayoutParams().width = itemWidth;
        return new ViewHolder(view);
    }
","['    ', 'public', ' ', 'ViewHolder', ' ', 'onCreateViewHolder', '(', 'ViewGroup', ' ', 'parent', ',', ' ', 'int', ' ', 'viewType', ')', ' ', '{', '\n', '        ', 'View', ' ', 'view', ' ', '=', ' ', 'LayoutInflater', '.', 'from', '(', 'parent', '.', 'getContext', '(', ')', ')', '\n', '                ', '.', 'inflate', '(', 'R', '.', 'layout', '.', 'demo_page', ',', ' ', 'parent', ',', ' ', 'false', ')', ';', '\n', '        ', 'view', '.', 'getLayoutParams', '(', ')', '.', 'width', ' ', '=', ' ', 'itemWidth', ';', '\n', '        ', 'return', ' ', 'new', ' ', 'ViewHolder', '(', 'view', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,AbstractViewPagerAttacher.java,updateIndicatorOnPagerScrolled,"    public void updateIndicatorOnPagerScrolled(ScrollingPagerIndicator indicator, int position, float positionOffset) {
        final float offset;
        // ViewPager may emit negative positionOffset for very fast scrolling
        if (positionOffset < 0) {
            offset = 0;
        } else if (positionOffset > 1) {
            offset = 1;
        } else {
            offset = positionOffset;
        }
        indicator.onPageScrolled(position, offset);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    public void updateIndicatorOnPagerScrolled(ScrollingPagerIndicator indicator, int position, float positionOffset) {
        final float offset;
        
        if (positionOffset < 0) {
            offset = 0;
        } else if (positionOffset > 1) {
            offset = 1;
        } else {
            offset = positionOffset;
        }
        indicator.onPageScrolled(position, offset);
    }
","['    ', 'public', ' ', 'void', ' ', 'updateIndicatorOnPagerScrolled', '(', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ')', ' ', '{', '\n', '        ', 'final', ' ', 'float', ' ', 'offset', ';', '\n', '        ', '\n', '        ', 'if', ' ', '(', 'positionOffset', ' ', '<', ' ', '0', ')', ' ', '{', '\n', '            ', 'offset', ' ', '=', ' ', '0', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'positionOffset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'offset', ' ', '=', ' ', '1', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'offset', ' ', '=', ' ', 'positionOffset', ';', '\n', '        ', '}', '\n', '        ', 'indicator', '.', 'onPageScrolled', '(', 'position', ',', ' ', 'offset', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ScrollingPagerIndicator.java,attachToPager,"    public void attachToPager(@NonNull ViewPager2 pager) {
        attachToPager(pager, new ViewPager2Attacher());
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    public void attachToPager(@NonNull ViewPager2 pager) {
        attachToPager(pager, new ViewPager2Attacher());
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'ViewPager2', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'pager', ',', ' ', 'new', ' ', 'ViewPager2Attacher', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPager2Attacher.java,attachToPager,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager2 pager) {
        attachedAdapter = pager.getAdapter();
        if (attachedAdapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        updateIndicatorDotsAndPosition(indicator);

        dataSetObserver = new RecyclerView.AdapterDataObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }
        };
        attachedAdapter.registerAdapterDataObserver(dataSetObserver);

        onPageChangeListener = new ViewPager2.OnPageChangeCallback() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                updateIndicatorOnPagerScrolled(indicator, position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    updateIndicatorDotsAndPosition(indicator);
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager2.SCROLL_STATE_IDLE;
            }
        };

        pager.registerOnPageChangeCallback(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager2 pager) {
        attachedAdapter = pager.getAdapter();
        if (attachedAdapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        updateIndicatorDotsAndPosition(indicator);

        dataSetObserver = new RecyclerView.AdapterDataObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }
        };
        attachedAdapter.registerAdapterDataObserver(dataSetObserver);

        onPageChangeListener = new ViewPager2.OnPageChangeCallback() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                updateIndicatorOnPagerScrolled(indicator, position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    updateIndicatorDotsAndPosition(indicator);
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager2.SCROLL_STATE_IDLE;
            }
        };

        pager.registerOnPageChangeCallback(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'final', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', '@NonNull', ' ', 'final', ' ', 'ViewPager2', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'attachedAdapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'attachedAdapter', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Set adapter before call attachToPager() method', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'this', '.', 'pager', ' ', '=', ' ', 'pager', ';', '\n', '\n', '        ', 'updateIndicatorDotsAndPosition', '(', 'indicator', ')', ';', '\n', '\n', '        ', 'dataSetObserver', ' ', '=', ' ', 'new', ' ', 'RecyclerView', '.', 'AdapterDataObserver', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'attachedAdapter', '.', 'registerAdapterDataObserver', '(', 'dataSetObserver', ')', ';', '\n', '\n', '        ', 'onPageChangeListener', ' ', '=', ' ', 'new', ' ', 'ViewPager2', '.', 'OnPageChangeCallback', '(', ')', ' ', '{', '\n', '\n', '            ', 'boolean', ' ', 'idleState', ' ', '=', ' ', 'true', ';', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'updateIndicatorOnPagerScrolled', '(', 'indicator', ',', ' ', 'position', ',', ' ', 'positionOffset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'updateIndicatorDotsAndPosition', '(', 'indicator', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager2', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '\n', '        ', 'pager', '.', 'registerOnPageChangeCallback', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPager2Attacher.java,onPageScrolled,"            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                updateIndicatorOnPagerScrolled(indicator, position, positionOffset);
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                updateIndicatorOnPagerScrolled(indicator, position, positionOffset);
            }
","['            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'updateIndicatorOnPagerScrolled', '(', 'indicator', ',', ' ', 'position', ',', ' ', 'positionOffset', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPager2Attacher.java,onPageSelected,"            public void onPageSelected(int position) {
                if (idleState) {
                    updateIndicatorDotsAndPosition(indicator);",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"            public void onPageSelected(int position) {
                if (idleState) {
                    updateIndicatorDotsAndPosition(indicator);
","['            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'updateIndicatorDotsAndPosition', '(', 'indicator', ')', ';', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPager2Attacher.java,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager2.SCROLL_STATE_IDLE;
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager2.SCROLL_STATE_IDLE;
            }
","['            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager2', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPager2Attacher.java,detachFromPager,"    public void detachFromPager() {
        attachedAdapter.unregisterAdapterDataObserver(dataSetObserver);
        pager.unregisterOnPageChangeCallback(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    public void detachFromPager() {
        attachedAdapter.unregisterAdapterDataObserver(dataSetObserver);
        pager.unregisterOnPageChangeCallback(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'attachedAdapter', '.', 'unregisterAdapterDataObserver', '(', 'dataSetObserver', ')', ';', '\n', '        ', 'pager', '.', 'unregisterOnPageChangeCallback', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPager2Attacher.java,updateIndicatorDotsAndPosition,"    private void updateIndicatorDotsAndPosition(ScrollingPagerIndicator indicator) {
        indicator.setDotCount(attachedAdapter.getItemCount());
        indicator.setCurrentPosition(pager.getCurrentItem());
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    private void updateIndicatorDotsAndPosition(ScrollingPagerIndicator indicator) {
        indicator.setDotCount(attachedAdapter.getItemCount());
        indicator.setCurrentPosition(pager.getCurrentItem());
    }
","['    ', 'private', ' ', 'void', ' ', 'updateIndicatorDotsAndPosition', '(', 'ScrollingPagerIndicator', ' ', 'indicator', ')', ' ', '{', '\n', '        ', 'indicator', '.', 'setDotCount', '(', 'attachedAdapter', '.', 'getItemCount', '(', ')', ')', ';', '\n', '        ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPagerAttacher.java,attachToPager,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        attachedAdapter = pager.getAdapter();
        if (attachedAdapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        updateIndicatorDotsAndPosition(indicator);

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        attachedAdapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                updateIndicatorOnPagerScrolled(indicator, position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    updateIndicatorDotsAndPosition(indicator);
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    public void attachToPager(@NonNull final ScrollingPagerIndicator indicator, @NonNull final ViewPager pager) {
        attachedAdapter = pager.getAdapter();
        if (attachedAdapter == null) {
            throw new IllegalStateException(""Set adapter before call attachToPager() method"");
        }

        this.pager = pager;

        updateIndicatorDotsAndPosition(indicator);

        dataSetObserver = new DataSetObserver() {
            @Override
            public void onChanged() {
                indicator.reattach();
            }

            @Override
            public void onInvalidated() {
                onChanged();
            }
        };
        attachedAdapter.registerDataSetObserver(dataSetObserver);

        onPageChangeListener = new ViewPager.OnPageChangeListener() {

            boolean idleState = true;

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixel) {
                updateIndicatorOnPagerScrolled(indicator, position, positionOffset);
            }

            @Override
            public void onPageSelected(int position) {
                if (idleState) {
                    updateIndicatorDotsAndPosition(indicator);
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                idleState = state == ViewPager.SCROLL_STATE_IDLE;
            }
        };
        pager.addOnPageChangeListener(onPageChangeListener);
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToPager', '(', '@NonNull', ' ', 'final', ' ', 'ScrollingPagerIndicator', ' ', 'indicator', ',', ' ', '@NonNull', ' ', 'final', ' ', 'ViewPager', ' ', 'pager', ')', ' ', '{', '\n', '        ', 'attachedAdapter', ' ', '=', ' ', 'pager', '.', 'getAdapter', '(', ')', ';', '\n', '        ', 'if', ' ', '(', 'attachedAdapter', ' ', '=', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalStateException', '(', '""', 'Set adapter before call attachToPager() method', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'this', '.', 'pager', ' ', '=', ' ', 'pager', ';', '\n', '\n', '        ', 'updateIndicatorDotsAndPosition', '(', 'indicator', ')', ';', '\n', '\n', '        ', 'dataSetObserver', ' ', '=', ' ', 'new', ' ', 'DataSetObserver', '(', ')', ' ', '{', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onChanged', '(', ')', ' ', '{', '\n', '                ', 'indicator', '.', 'reattach', '(', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onInvalidated', '(', ')', ' ', '{', '\n', '                ', 'onChanged', '(', ')', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'attachedAdapter', '.', 'registerDataSetObserver', '(', 'dataSetObserver', ')', ';', '\n', '\n', '        ', 'onPageChangeListener', ' ', '=', ' ', 'new', ' ', 'ViewPager', '.', 'OnPageChangeListener', '(', ')', ' ', '{', '\n', '\n', '            ', 'boolean', ' ', 'idleState', ' ', '=', ' ', 'true', ';', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'position', ',', ' ', 'float', ' ', 'positionOffset', ',', ' ', 'int', ' ', 'positionOffsetPixel', ')', ' ', '{', '\n', '                ', 'updateIndicatorOnPagerScrolled', '(', 'indicator', ',', ' ', 'position', ',', ' ', 'positionOffset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageSelected', '(', 'int', ' ', 'position', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'idleState', ')', ' ', '{', '\n', '                    ', 'updateIndicatorDotsAndPosition', '(', 'indicator', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', '@Override', '\n', '            ', 'public', ' ', 'void', ' ', 'onPageScrollStateChanged', '(', 'int', ' ', 'state', ')', ' ', '{', '\n', '                ', 'idleState', ' ', '=', ' ', 'state', ' ', '=', '=', ' ', 'ViewPager', '.', 'SCROLL_STATE_IDLE', ';', '\n', '            ', '}', '\n', '        ', '}', ';', '\n', '        ', 'pager', '.', 'addOnPageChangeListener', '(', 'onPageChangeListener', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,4a546d405c81defb91cd64e6e6062ae9af9d3c0d,ViewPagerAttacher.java,updateIndicatorDotsAndPosition,"    private void updateIndicatorDotsAndPosition(ScrollingPagerIndicator indicator) {
        indicator.setDotCount(attachedAdapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/4a546d405c81defb91cd64e6e6062ae9af9d3c0d,"    private void updateIndicatorDotsAndPosition(ScrollingPagerIndicator indicator) {
        indicator.setDotCount(attachedAdapter.getCount());
        indicator.setCurrentPosition(pager.getCurrentItem());
    }
","['    ', 'private', ' ', 'void', ' ', 'updateIndicatorDotsAndPosition', '(', 'ScrollingPagerIndicator', ' ', 'indicator', ')', ' ', '{', '\n', '        ', 'indicator', '.', 'setDotCount', '(', 'attachedAdapter', '.', 'getCount', '(', ')', ')', ';', '\n', '        ', 'indicator', '.', 'setCurrentPosition', '(', 'pager', '.', 'getCurrentItem', '(', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,45ec6764f105dfc218f20e09943e4491e0c82b68,RecyclerViewAttacher.java,onScrollStateChanged,"            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {
                if (newState == RecyclerView.SCROLL_STATE_IDLE && isInIdleState()) {
                    int newPosition = findCompletelyVisiblePosition();",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/45ec6764f105dfc218f20e09943e4491e0c82b68,"            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {
                if (newState == RecyclerView.SCROLL_STATE_IDLE && isInIdleState()) {
                    int newPosition = findCompletelyVisiblePosition();
","['            ', 'public', ' ', 'void', ' ', 'onScrollStateChanged', '(', '@NonNull', ' ', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'newState', ')', ' ', '{', '\n', '                ', 'if', ' ', '(', 'newState', ' ', '=', '=', ' ', 'RecyclerView', '.', 'SCROLL_STATE_IDLE', ' ', '&', '&', ' ', 'isInIdleState', '(', ')', ')', ' ', '{', '\n', '                    ', 'int', ' ', 'newPosition', ' ', '=', ' ', 'findCompletelyVisiblePosition', '(', ')', ';', '\n', '<END>']"
master,45ec6764f105dfc218f20e09943e4491e0c82b68,RecyclerViewAttacher.java,onScrolled,"            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
                updateCurrentOffset();
            }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/45ec6764f105dfc218f20e09943e4491e0c82b68,"            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
                updateCurrentOffset();
            }
","['            ', 'public', ' ', 'void', ' ', 'onScrolled', '(', '@NonNull', ' ', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'dx', ',', ' ', 'int', ' ', 'dy', ')', ' ', '{', '\n', '                ', 'updateCurrentOffset', '(', ')', ';', '\n', '            ', '}', '\n', '<END>']"
master,45ec6764f105dfc218f20e09943e4491e0c82b68,ScrollingPagerIndicator.java,attachToRecyclerView,"    public void attachToRecyclerView(@NonNull RecyclerView recyclerView, int currentPageOffset) {
        attachToPager(recyclerView, new RecyclerViewAttacher(currentPageOffset));
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/45ec6764f105dfc218f20e09943e4491e0c82b68,"    public void attachToRecyclerView(@NonNull RecyclerView recyclerView, int currentPageOffset) {
        attachToPager(recyclerView, new RecyclerViewAttacher(currentPageOffset));
    }
","['    ', 'public', ' ', 'void', ' ', 'attachToRecyclerView', '(', '@NonNull', ' ', 'RecyclerView', ' ', 'recyclerView', ',', ' ', 'int', ' ', 'currentPageOffset', ')', ' ', '{', '\n', '        ', 'attachToPager', '(', 'recyclerView', ',', ' ', 'new', ' ', 'RecyclerViewAttacher', '(', 'currentPageOffset', ')', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,68e54cb692542cc385ff828a8d844dee5f8f4114,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            if (orientation == LinearLayout.HORIZONTAL) {
                scaleDotByOffset(page, offset);

                if (page < itemCount - 1) {
                    scaleDotByOffset(page + 1, 1 - offset);
                } else if (itemCount > 1) {
                    scaleDotByOffset(0, 1 - offset);
                }
            }
            //Vertical orientation
            else {
                if (itemCount - 1 == page) {
                    scaleDotByOffset(page - 1, offset);
                    scaleDotByOffset(page, 1 - offset);
                } else {
                    scaleDotByOffset(page - 1, offset);
                }

                if (page < itemCount - 1) {
                    if (itemCount - 1 == page) {
                        scaleDotByOffset(page + 1, 1 - offset);
                    } else {
                        scaleDotByOffset(page, 1 - offset);
                    }
                }
            }

            invalidate();
        }
        if (orientation == LinearLayout.HORIZONTAL) {
            adjustFramePosition(offset, page);
        } else {
            adjustFramePosition(offset, page - 1);
        }
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/68e54cb692542cc385ff828a8d844dee5f8f4114,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            if (orientation == LinearLayout.HORIZONTAL) {
                scaleDotByOffset(page, offset);

                if (page < itemCount - 1) {
                    scaleDotByOffset(page + 1, 1 - offset);
                } else if (itemCount > 1) {
                    scaleDotByOffset(0, 1 - offset);
                }
            }
            
            else {
                if (itemCount - 1 == page) {
                    scaleDotByOffset(page - 1, offset);
                    scaleDotByOffset(page, 1 - offset);
                } else {
                    scaleDotByOffset(page - 1, offset);
                }

                if (page < itemCount - 1) {
                    if (itemCount - 1 == page) {
                        scaleDotByOffset(page + 1, 1 - offset);
                    } else {
                        scaleDotByOffset(page, 1 - offset);
                    }
                }
            }

            invalidate();
        }
        if (orientation == LinearLayout.HORIZONTAL) {
            adjustFramePosition(offset, page);
        } else {
            adjustFramePosition(offset, page - 1);
        }
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'itemCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'itemCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'dotScale', '.', 'clear', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'orientation', ' ', '=', '=', ' ', 'LinearLayout', '.', 'HORIZONTAL', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'itemCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '            ', '\n', '            ', 'else', ' ', '{', '\n', '                ', 'if', ' ', '(', 'itemCount', ' ', '-', ' ', '1', ' ', '=', '=', ' ', 'page', ')', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', 'page', ' ', '-', ' ', '1', ',', ' ', 'offset', ')', ';', '\n', '                    ', 'scaleDotByOffset', '(', 'page', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', 'page', ' ', '-', ' ', '1', ',', ' ', 'offset', ')', ';', '\n', '                ', '}', '\n', '\n', '                ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'itemCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                    ', 'if', ' ', '(', 'itemCount', ' ', '-', ' ', '1', ' ', '=', '=', ' ', 'page', ')', ' ', '{', '\n', '                        ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                    ', '}', ' ', 'else', ' ', '{', '\n', '                        ', 'scaleDotByOffset', '(', 'page', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                    ', '}', '\n', '                ', '}', '\n', '            ', '}', '\n', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'orientation', ' ', '=', '=', ' ', 'LinearLayout', '.', 'HORIZONTAL', ')', ' ', '{', '\n', '            ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ' ', '-', ' ', '1', ')', ';', '\n', '        ', '}', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,b10662885970265fcb54f097e6e5fc0f8787b3b7,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            if (orientation == LinearLayout.HORIZONTAL) {
                scaleDotByOffset(page, offset);

                if (page < itemCount - 1) {
                    scaleDotByOffset(page + 1, 1 - offset);
                } else if (itemCount > 1) {
                    scaleDotByOffset(0, 1 - offset);
                }
            }
            else { // Vertical orientation
                scaleDotByOffset(page - 1, offset);
                scaleDotByOffset(page, 1 - offset);
            }

            invalidate();
        }
        if (orientation == LinearLayout.HORIZONTAL) {
            adjustFramePosition(offset, page);
        } else {
            adjustFramePosition(offset, page - 1);
        }
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/b10662885970265fcb54f097e6e5fc0f8787b3b7,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            if (orientation == LinearLayout.HORIZONTAL) {
                scaleDotByOffset(page, offset);

                if (page < itemCount - 1) {
                    scaleDotByOffset(page + 1, 1 - offset);
                } else if (itemCount > 1) {
                    scaleDotByOffset(0, 1 - offset);
                }
            }
            else { 
                scaleDotByOffset(page - 1, offset);
                scaleDotByOffset(page, 1 - offset);
            }

            invalidate();
        }
        if (orientation == LinearLayout.HORIZONTAL) {
            adjustFramePosition(offset, page);
        } else {
            adjustFramePosition(offset, page - 1);
        }
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'itemCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'itemCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'dotScale', '.', 'clear', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'orientation', ' ', '=', '=', ' ', 'LinearLayout', '.', 'HORIZONTAL', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'itemCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                ', '}', '\n', '            ', '}', '\n', '            ', 'else', ' ', '{', ' ', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '-', ' ', '1', ',', ' ', 'offset', ')', ';', '\n', '                ', 'scaleDotByOffset', '(', 'page', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'orientation', ' ', '=', '=', ' ', 'LinearLayout', '.', 'HORIZONTAL', ')', ' ', '{', '\n', '            ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ' ', '-', ' ', '1', ')', ';', '\n', '        ', '}', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
master,f3487569d3f94d5ed2d17cd71e20324828b09b32,ScrollingPagerIndicator.java,detachFromPager,"    public void detachFromPager() {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
            autoRtl = true;
        }
        dotCountInitialized = false;
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/f3487569d3f94d5ed2d17cd71e20324828b09b32,"    public void detachFromPager() {
        if (currentAttacher != null) {
            currentAttacher.detachFromPager();
            currentAttacher = null;
            attachRunnable = null;
            autoRtl = true;
        }
        dotCountInitialized = false;
    }
","['    ', 'public', ' ', 'void', ' ', 'detachFromPager', '(', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'currentAttacher', ' ', '!', '=', ' ', 'null', ')', ' ', '{', '\n', '            ', 'currentAttacher', '.', 'detachFromPager', '(', ')', ';', '\n', '            ', 'currentAttacher', ' ', '=', ' ', 'null', ';', '\n', '            ', 'attachRunnable', ' ', '=', ' ', 'null', ';', '\n', '            ', 'autoRtl', ' ', '=', ' ', 'true', ';', '\n', '        ', '}', '\n', '        ', 'dotCountInitialized', ' ', '=', ' ', 'false', ';', '\n', '    ', '}', '\n', '<END>']"
master,f3487569d3f94d5ed2d17cd71e20324828b09b32,ScrollingPagerIndicator.java,isRtl,"    private boolean isRtl() {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 &&
                getLayoutDirection() == LAYOUT_DIRECTION_RTL;",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/f3487569d3f94d5ed2d17cd71e20324828b09b32,"    private boolean isRtl() {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 &&
                getLayoutDirection() == LAYOUT_DIRECTION_RTL;
","['    ', 'private', ' ', 'boolean', ' ', 'isRtl', '(', ')', ' ', '{', '\n', '        ', 'return', ' ', 'Build', '.', 'VERSION', '.', 'SDK_INT', ' ', '>', '=', ' ', 'Build', '.', 'VERSION_CODES', '.', 'JELLY_BEAN_MR1', ' ', '&', '&', '\n', '                ', 'getLayoutDirection', '(', ')', ' ', '=', '=', ' ', 'LAYOUT_DIRECTION_RTL', ';', '\n', '<END>']"
master,aae980d8dee33c96fee68b3917c0eead778c2d28,ScrollingPagerIndicator.java,onPageScrolled,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            if (orientation == LinearLayout.HORIZONTAL) {
                scaleDotByOffset(page, offset);

                if (page < itemCount - 1) {
                    scaleDotByOffset(page + 1, 1 - offset);
                } else if (itemCount > 1) {
                    scaleDotByOffset(0, 1 - offset);
                }
            } else { // Vertical orientation
                scaleDotByOffset(page - 1, offset);
                scaleDotByOffset(page, 1 - offset);
            }

            invalidate();
        }
        if (orientation == LinearLayout.HORIZONTAL) {
            adjustFramePosition(offset, page);
        } else {
            adjustFramePosition(offset, page - 1);
        }
        invalidate();
    }",https://www.github.com/tinkoff-mobile-tech/scrollingpagerindicator/commit/aae980d8dee33c96fee68b3917c0eead778c2d28,"    public void onPageScrolled(int page, float offset) {
        if (offset < 0 || offset > 1) {
            throw new IllegalArgumentException(""Offset must be [0, 1]"");
        } else if (page < 0 || page != 0 && page >= itemCount) {
            throw new IndexOutOfBoundsException(""page must be [0, adapter.getItemCount())"");
        }

        if (!looped || itemCount <= visibleDotCount && itemCount > 1) {
            dotScale.clear();

            if (orientation == LinearLayout.HORIZONTAL) {
                scaleDotByOffset(page, offset);

                if (page < itemCount - 1) {
                    scaleDotByOffset(page + 1, 1 - offset);
                } else if (itemCount > 1) {
                    scaleDotByOffset(0, 1 - offset);
                }
            } else { 
                scaleDotByOffset(page - 1, offset);
                scaleDotByOffset(page, 1 - offset);
            }

            invalidate();
        }
        if (orientation == LinearLayout.HORIZONTAL) {
            adjustFramePosition(offset, page);
        } else {
            adjustFramePosition(offset, page - 1);
        }
        invalidate();
    }
","['    ', 'public', ' ', 'void', ' ', 'onPageScrolled', '(', 'int', ' ', 'page', ',', ' ', 'float', ' ', 'offset', ')', ' ', '{', '\n', '        ', 'if', ' ', '(', 'offset', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'offset', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IllegalArgumentException', '(', '""', 'Offset must be [0, 1]', '""', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'page', ' ', '<', ' ', '0', ' ', '|', '|', ' ', 'page', ' ', '!', '=', ' ', '0', ' ', '&', '&', ' ', 'page', ' ', '>', '=', ' ', 'itemCount', ')', ' ', '{', '\n', '            ', 'throw', ' ', 'new', ' ', 'IndexOutOfBoundsException', '(', '""', 'page must be [0, adapter.getItemCount())', '""', ')', ';', '\n', '        ', '}', '\n', '\n', '        ', 'if', ' ', '(', '!', 'looped', ' ', '|', '|', ' ', 'itemCount', ' ', '<', '=', ' ', 'visibleDotCount', ' ', '&', '&', ' ', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '            ', 'dotScale', '.', 'clear', '(', ')', ';', '\n', '\n', '            ', 'if', ' ', '(', 'orientation', ' ', '=', '=', ' ', 'LinearLayout', '.', 'HORIZONTAL', ')', ' ', '{', '\n', '                ', 'scaleDotByOffset', '(', 'page', ',', ' ', 'offset', ')', ';', '\n', '\n', '                ', 'if', ' ', '(', 'page', ' ', '<', ' ', 'itemCount', ' ', '-', ' ', '1', ')', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', 'page', ' ', '+', ' ', '1', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                ', '}', ' ', 'else', ' ', 'if', ' ', '(', 'itemCount', ' ', '>', ' ', '1', ')', ' ', '{', '\n', '                    ', 'scaleDotByOffset', '(', '0', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '                ', '}', '\n', '            ', '}', ' ', 'else', ' ', '{', ' ', '\n', '                ', 'scaleDotByOffset', '(', 'page', ' ', '-', ' ', '1', ',', ' ', 'offset', ')', ';', '\n', '                ', 'scaleDotByOffset', '(', 'page', ',', ' ', '1', ' ', '-', ' ', 'offset', ')', ';', '\n', '            ', '}', '\n', '\n', '            ', 'invalidate', '(', ')', ';', '\n', '        ', '}', '\n', '        ', 'if', ' ', '(', 'orientation', ' ', '=', '=', ' ', 'LinearLayout', '.', 'HORIZONTAL', ')', ' ', '{', '\n', '            ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ')', ';', '\n', '        ', '}', ' ', 'else', ' ', '{', '\n', '            ', 'adjustFramePosition', '(', 'offset', ',', ' ', 'page', ' ', '-', ' ', '1', ')', ';', '\n', '        ', '}', '\n', '        ', 'invalidate', '(', ')', ';', '\n', '    ', '}', '\n', '<END>']"
